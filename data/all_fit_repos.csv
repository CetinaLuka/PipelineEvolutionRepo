owner;name;full_name;repo_url;api_url;default_branch;created_at;updated_at;has_pipeline;yaml_files_content
4ra1n;super-xray;4ra1n/super-xray;https://github.com/4ra1n/super-xray;https://api.github.com/repos/4ra1n/super-xray;main;18/11/2022 15:52;17/04/2024 08:14;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

---
"
constanline;XQuickEnergy;constanline/XQuickEnergy;https://github.com/constanline/XQuickEnergy;https://api.github.com/repos/constanline/XQuickEnergy;master;13/07/2023 03:48;22/04/2024 10:35;TRUE;"name: Android CI

on:
  release:
    types: [published]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleRelease

      - name: Sign app APK
        uses: ilharp/sign-android-release@v1
        id: sign_app
        with:
          releaseDir: app/build/outputs/apk/release/
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
          buildToolsVersion: 31.0.0

      - name: Upload to Release Action
        uses: termux/upload-release-action@v4.1.0
        with:
          asset_name: xqe-sesame-${{ github.event.release.tag_name }}.apk
          file: ${{ steps.sign_app.outputs.signedFile }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
          checksums: sha256

---
"
amigoscode;spring-boot-security-course;amigoscode/spring-boot-security-course;https://github.com/amigoscode/spring-boot-security-course;https://api.github.com/repos/amigoscode/spring-boot-security-course;1-Bootstrap;03/11/2019 22:59;20/04/2024 00:56;FALSE;
cinit;TMoe;cinit/TMoe;https://github.com/cinit/TMoe;https://api.github.com/repos/cinit/TMoe;main;16/01/2022 09:46;22/04/2024 06:59;TRUE;"name: Pull Request Check

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '!.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: set up JDK 17
        uses: actions/setup-java@v3.9.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3.2.4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-core-${{ hashFiles('**/build.gradle.kts', '**/build.gradle', '**/libs.versions.toml') }}
          restore-keys: |
            gradle-deps

      - name: Cache Gradle Build
        uses: actions/cache@v3.2.4
        with:
          path: |
            ~/.gradle/caches/build-cache-*
            ~/.gradle/buildOutputCleanup/cache.properties
          key: gradle-builds-core-${{ github.sha }}
          restore-keys: |
            gradle-builds

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew :app:assembleDebug

---
name: main

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - uses: actions/checkout@v3.3.0
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: set up JDK 17
        uses: actions/setup-java@v3.9.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3.2.4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-core-${{ hashFiles('**/build.gradle.kts', '**/build.gradle', '**/libs.versions.toml') }}
          restore-keys: |
            gradle-deps

      - name: Cache Gradle Build
        uses: actions/cache@v3.2.4
        with:
          path: |
            ~/.gradle/caches/build-cache-*
            ~/.gradle/buildOutputCleanup/cache.properties
          key: gradle-builds-core-${{ github.sha }}
          restore-keys: |
            gradle-builds

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          echo ""${{ secrets.SIGN_KEYSTORE_BASE64 }}"" | base64 -d > keystore.jks
          ./gradlew :app:assembleRelease
        env:
          KEYSTORE_PATH: ""../keystore.jks""
          KEYSTORE_PASSWORD: ${{ secrets.SIGN_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.SIGN_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        # don't upload the artifacts if it's a pull request
        if: ${{ !github.event.pull_request }}
        with:
          path: './app/build/outputs/*'
          name: build_output_${{ github.event.head_commit.id }}.zip

  upload-telegram:
    name: Upload Release
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - telegram-bot-api
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Release
        env:
          COMMIT_MESSAGE: |+
            New push to github\!
            ```
            ${{ github.event.head_commit.message }}
            ```by `${{ github.event.head_commit.author.name }}`
            See commit detail [here](${{ github.event.head_commit.url }})
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ[""COMMIT_MESSAGE""]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ[""COMMIT_URL""])))'`
          export universal=$(find artifacts -name ""*.apk"")
          chmod +x telegram-bot-api-binary
          ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
          curl -v ""http://127.0.0.1:8081/bot${{ secrets.TELEGRAM_TOKEN  }}/sendMediaGroup?chat_id=-${{ vars.TG_CI_UPLOAD_TARGET_CHANNEL }}&message_thread_id=${{ vars.TG_CI_UPLOAD_TARGET_REPLY_ID }}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Funiversal%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22:${ESCAPED}%7D%5D"" \
           -F universal=""@$universal""
          pkill telegram-bot

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v3.2.4
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary

---
"
runsidekick;sidekick;runsidekick/sidekick;https://github.com/runsidekick/sidekick;https://api.github.com/repos/runsidekick/sidekick;master;22/08/2022 15:46;19/04/2024 18:23;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build-maven

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docker/**'
      - 'mysql/**'
      - '*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docker/**'
      - 'mysql/**'
      - '*.md'
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Collect Workflow Telemetry
        uses: runforesight/foresight-workflow-kit-action@v1
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn -f sidekick -q clean install
      - name: Analyze Test and/or Coverage Results
        if: always()
        uses: runforesight/foresight-test-kit-action@v1
        with:
          api_key: ${{ secrets.FORESIGHT_API_KEY }}
          test_format: junit
          test_framework: junit
          test_path: sidekick/*/target/surefire-reports/**
          coverage_format: jacoco/xml
          coverage_path: sidekick/*/target/site/jacoco/*.xml

---
name: publish-sidekick-api-docker

on:
  workflow_dispatch:

jobs:
  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-latest
    env:
      REPO: runsidekick/sidekick-api
      DOCKERFILE: sidekick/sidekick-api/Dockerfile
      JAR_FILE: sidekick/sidekick-api/target/sidekick-api.jar

    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Create artifact
        run: mvn -f sidekick -B clean package -DskipTests
      - name: Login to Docker Hub
        run: docker login -u runsidekick -p ${{ secrets.SIDEKICK_DOCKERHUB_PASSWORD }}
      - name: Build Docker image
        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} -f $DOCKERFILE --build-arg JAR_FILE=$JAR_FILE .
      - name: Publish Docker image
        run: docker push $REPO -a

---
name: publish-sidekick-broker-docker

on:
  workflow_dispatch:

jobs:
  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-latest
    env:
      REPO: runsidekick/sidekick-broker
      DOCKERFILE: sidekick/sidekick-broker/sidekick-broker-app/Dockerfile
      JAR_FILE: sidekick/sidekick-broker/sidekick-broker-app/target/sidekick-broker-app.jar

    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Create artifact
        run: mvn -f sidekick -B clean package -DskipTests
      - name: Login to Docker Hub
        run: docker login -u runsidekick -p ${{ secrets.SIDEKICK_DOCKERHUB_PASSWORD }}
      - name: Build Docker image
        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} -f $DOCKERFILE --build-arg JAR_FILE=$JAR_FILE .
      - name: Publish Docker image
        run: docker push $REPO -a

---
name: release-internal-repo

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.SIDEKICK_DEVOPS_GITHUB_ACCESS_TOKEN }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Configure CI Git User
        run: |
          git config --global user.email ""action@github.com""
          git config --global user.name ""GitHub Action""

      - name: Configure Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          repositories: >-
            [
              {
                ""id"": ""sidekick-oss-releases"",
                ""url"": ""https://repo.thundra.io/content/repositories/sidekick-oss-releases"",
                ""releases"": {
                  ""enabled"": ""true""
                },
                ""snapshots"": {
                  ""enabled"": ""false""
                }
              },
              {
                ""id"": ""sidekick-oss-snapshots"",
                ""url"": ""https://repo.thundra.io/content/repositories/sidekick-oss-snapshots"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true""
                }
              }
            ]
          servers: >-
            [
              {
                ""id"": ""sidekick-oss-releases"",
                ""username"": ""${{ secrets.SIDEKICK_INTERNAL_REPO_USERNAME  }}"",
                ""password"": ""${{ secrets.SIDEKICK_INTERNAL_REPO_PASSWORD  }}""
              },
              {
                ""id"": ""sidekick-oss-snapshots"",
                ""username"": ""${{ secrets.SIDEKICK_INTERNAL_REPO_USERNAME  }}"",
                ""password"": ""${{ secrets.SIDEKICK_INTERNAL_REPO_PASSWORD  }}""
              }
            ]
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.SIDEKICK_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SIDEKICK_GPG_PASSPHRASE}}
      - name: Build and Release Snapshot with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.SIDEKICK_DEVOPS_GITHUB_ACCESS_TOKEN }}
        run: mvn -f sidekick -DskipTests=true -q clean package release:clean release:prepare release:perform release:clean --batch-mode -P internal-release

---
name: release-maven-central

on:
  workflow_dispatch:
    inputs:
      version_scale:
        description: ""Version scale""
        required: true
        default: ""patch""
jobs:
  publish:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.SIDEKICK_DEVOPS_GITHUB_ACCESS_TOKEN }}
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Configure CI Git User
        run: |
          git config --global user.email ""action@github.com""
          git config --global user.name ""GitHub Action""
      - name: Configure Maven settings.xml
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          servers: >-
            [
              {
                ""id"": ""ossrh"",
                ""username"": ""${{ secrets.SIDEKICK_SONATYPE_NEXUS_USERNAME}}"",
                ""password"": ""${{ secrets.SIDEKICK_SONATYPE_NEXUS_PASSWORD}}""
              }
            ]
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.SIDEKICK_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.SIDEKICK_GPG_PASSPHRASE}}
      - name: Increase Minor Version
        if: ${{ github.event.inputs.version_scale == 'minor' }}
        run: mvn -f sidekick build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0-SNAPSHOT versions:commit
      - name: Increase Major Version
        if: ${{ github.event.inputs.version_scale == 'major' }}
        run: mvn -f sidekick build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0-SNAPSHOT versions:commit
      - name: Build and Release with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.SIDEKICK_DEVOPS_GITHUB_ACCESS_TOKEN }}
        run: mvn -f sidekick clean package release:clean release:prepare release:perform release:clean --batch-mode -P release
---
"
Xin-Felix;Mango;Xin-Felix/Mango;https://github.com/Xin-Felix/Mango;https://api.github.com/repos/Xin-Felix/Mango;master;05/11/2019 10:44;22/04/2024 11:39;FALSE;
jbellis;jvector;jbellis/jvector;https://github.com/jbellis/jvector;https://api.github.com/repos/jbellis/jvector;main;25/08/2023 03:45;22/04/2024 00:19;TRUE;"name: Unit Test CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    paths:
      - .github/workflows/unit-tests.yaml
      - '**.java'
      - '**/pom.xml'

jobs:
  build:
    concurrency:
        group: ${{ github.ref }}-${{ github.job }}-${{ matrix.jdk }}-${{ matrix.os }}
        cancel-in-progress: true
    strategy:
      matrix:
        jdk: [ 11, 20, 22]
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: temurin
          cache: maven
      - name: Compile, run tests, and package (JDK 22)
        run: mvn -B verify
        if: matrix.jdk == '22'
      - name: Compile, run tests, and package (JDK 20)
        run: mvn -B -Pjdk20 -am -pl jvector-tests test
        if: matrix.jdk == '20'
      - name: Compile and run tests (JDK 11)
        run: mvn -B -Pjdk11 -am -pl jvector-tests test
        if: matrix.jdk == '11'

---
"
yangzongzhuan;RuoYi-Vue;yangzongzhuan/RuoYi-Vue;https://github.com/yangzongzhuan/RuoYi-Vue;https://api.github.com/repos/yangzongzhuan/RuoYi-Vue;master;07/11/2019 03:18;22/04/2024 05:23;FALSE;
guchengwuyue;yshopmall;guchengwuyue/yshopmall;https://github.com/guchengwuyue/yshopmall;https://api.github.com/repos/guchengwuyue/yshopmall;master;07/11/2019 14:53;22/04/2024 05:25;FALSE;
six2dez;wahh_extras;six2dez/wahh_extras;https://github.com/six2dez/wahh_extras;https://api.github.com/repos/six2dez/wahh_extras;master;10/11/2019 00:41;13/04/2024 23:07;FALSE;
boy-hack;wooyun-payload;boy-hack/wooyun-payload;https://github.com/boy-hack/wooyun-payload;https://api.github.com/repos/boy-hack/wooyun-payload;master;10/11/2019 04:18;06/04/2024 06:46;FALSE;
TrackerControl;tracker-control-android;TrackerControl/tracker-control-android;https://github.com/TrackerControl/tracker-control-android;https://api.github.com/repos/TrackerControl/tracker-control-android;master;10/11/2019 18:33;22/04/2024 02:02;FALSE;
201206030;novel;201206030/novel;https://github.com/201206030/novel;https://api.github.com/repos/201206030/novel;master;11/11/2019 02:13;22/04/2024 08:45;FALSE;
veracode-research;rogue-jndi;veracode-research/rogue-jndi;https://github.com/veracode-research/rogue-jndi;https://api.github.com/repos/veracode-research/rogue-jndi;master;13/11/2019 19:11;21/04/2024 23:34;FALSE;
TideSec;Decrypt_Weblogic_Password;TideSec/Decrypt_Weblogic_Password;https://github.com/TideSec/Decrypt_Weblogic_Password;https://api.github.com/repos/TideSec/Decrypt_Weblogic_Password;master;14/11/2019 16:25;16/04/2024 04:29;FALSE;
uniVocity;univocity-trader;uniVocity/univocity-trader;https://github.com/uniVocity/univocity-trader;https://api.github.com/repos/uniVocity/univocity-trader;master;15/11/2019 09:43;12/04/2024 22:36;FALSE;
rymcu;forest;rymcu/forest;https://github.com/rymcu/forest;https://api.github.com/repos/rymcu/forest;master;16/11/2019 02:55;19/04/2024 11:14;FALSE;
WeiYe-Jing;datax-web;WeiYe-Jing/datax-web;https://github.com/WeiYe-Jing/datax-web;https://api.github.com/repos/WeiYe-Jing/datax-web;master;19/11/2019 02:09;22/04/2024 11:45;FALSE;
yeqifu;warehouse;yeqifu/warehouse;https://github.com/yeqifu/warehouse;https://api.github.com/repos/yeqifu/warehouse;master;21/11/2019 16:15;21/04/2024 12:40;FALSE;
WeBankFinTech;Qualitis;WeBankFinTech/Qualitis;https://github.com/WeBankFinTech/Qualitis;https://api.github.com/repos/WeBankFinTech/Qualitis;master;22/11/2019 08:29;22/04/2024 11:57;FALSE;
CoocooFroggy;FutureRestore-GUI;CoocooFroggy/FutureRestore-GUI;https://github.com/CoocooFroggy/FutureRestore-GUI;https://api.github.com/repos/CoocooFroggy/FutureRestore-GUI;master;03/03/2021 17:37;20/04/2024 16:00;TRUE;"name: Build, Pack; Manual

# Controls when the action will run. 
on:
  # Triggers the workflow on push but only for the master branch
  workflow_dispatch:

jobs:
  build-and-setup:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Parse version
        id: parse-version
        run: |
          version=$(cat src/main/java/Main.java | grep -Po '(?<=futureRestoreGUIVersion = \"").*(?=\"")')
          echo $version > version.txt
          echo '::set-output name=version::(echo $version)'

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Jar
        run: ./gradlew shadowJar
      # Upload this built jar
      - name: Upload final jar
        uses: actions/upload-artifact@v3
        with:
          name: fat-jar
          path: ./build/libs/FutureRestore GUI-1.0-all.jar

      - name: Upload version
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

  ubuntu-pack:
    needs: [ build-and-setup ]
    runs-on: ubuntu-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          version=$(tail version.txt)
          echo ""::set-output name=version::$version""

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_linux-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage deb
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type deb --icon ./.github/workflows/ubuntu/Icon-1024.png --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION 2>&1 | tee /tmp/jpackoutput.txt
      - name: Grep DEB name
        id: grep_deb_name
        run: |
          deb_name=$(grep -Po '(?<=Package \(.deb\) saved to: ).*(?=.)' /tmp/jpackoutput.txt)
          echo ""::set-output name=deb_filename::$deb_name""

      - name: Run JPackage app-image
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type app-image --icon ./.github/workflows/ubuntu/Icon-1024.png --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION

      - name: Zip app-image and script
        run: |
          cp ./.github/workflows/ubuntu/""run.sh"" ./
          zip -r FutureRestore-GUI-Linux-Universal.zip ""FutureRestore GUI"" ""run.sh""

      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
          name: FutureRestore-GUI-Debian-${{ steps.output-version.outputs.version }}.deb
          path: ${{ steps.grep_deb_name.outputs.deb_filename }}
          
      - name: Upload app image
        uses: actions/upload-artifact@v3
        with:
          name: FutureRestore-GUI-Linux-Universal-${{ steps.output-version.outputs.version }}.zip
          path: FutureRestore-GUI-Linux-Universal.zip

  macos-pack:
    needs: [ build-and-setup ]
    runs-on: macos-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          version=$(tail version.txt)
          echo ""::set-output name=version::$version""

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_osx-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage and remove signature
        env:
          RUN_NUMBER: ${{ github.run_number}}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: |
          jpackage --input ./input --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type app-image --icon ./.github/workflows/mac/FutureRestoreGUIIcons.icns --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --mac-package-identifier com.coocoofroggy.futurerestoregui --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION
          codesign --remove-signature FutureRestore\ GUI.app
          mkdir dmg-input
          mv ""FutureRestore GUI.app"" dmg-input

      - name: Create DMG from .app
        run: |
          create-dmg --hdiutil-quiet --volname ""FutureRestore GUI Installer"" --volicon "".github/workflows/mac/DMG Images/FRGUI-Drive-Icon.icns"" --background "".github/workflows/mac/DMG Images/DMG-Background.png"" --window-pos 200 120 --window-size 600 342 --icon-size 100 --icon ""FutureRestore GUI.app"" 80 200 --hide-extension ""FutureRestore GUI.app"" --app-drop-link 450 200 ""FutureRestore GUI Installer.dmg"" ""dmg-input/""

#      - name: Zip .app
#        id: zip_app
#        run: zip -r FutureRestore-GUI-Mac.zip ""FutureRestore GUI.app""
        
      - name: Upload Mac release
        uses: actions/upload-artifact@v3
        with:
          name: FutureRestore-GUI-Mac-${{ steps.output-version.outputs.version }}.dmg
          path: FutureRestore GUI Installer.dmg

  windows-pack:
    needs: [ build-and-setup ]
    runs-on: windows-latest
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          FOR /F ""tokens=*"" %%g IN ('tail version.txt') do (SET version=%%g)
          echo ::set-output name=version::%version%
        shell: cmd

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_windows-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type msi --icon ./.github/workflows/windows/FRWindows.ico --copyright ""© CoocooFroggy $(date +'%Y')"" --vendor ""CoocooFroggy"" --verbose --name ""FutureRestore GUI"" --win-shortcut --win-menu --win-console --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version %VERSION%
        shell: cmd

      - name: Find MSI name
        id: grep_msi_name
        run: |
          FOR /F ""tokens=*"" %%g IN ('ls *.msi') do (SET msi_name=%%g)
          echo ::set-output name=msi_filename::%msi_name%
        # Otherwise it tries powershell
        shell: cmd
        
      - name: Upload Windows release
        uses: actions/upload-artifact@v3
        with:
          name: FutureRestore-GUI-Windows-${{ steps.output-version.outputs.version }}.msi
          path: ${{ steps.grep_msi_name.outputs.msi_filename }}

---
name: Build, Pack, Prerelease

# Controls when the action will run. 
on:
  workflow_dispatch:

jobs:
  build-and-create-draft:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Parse version
        id: parse-version
        run: |
          version=$(cat src/main/java/Main.java | grep -Po '(?<=futureRestoreGUIVersion = \"").*(?=\"")')
          echo $version > version.txt
          echo ""::set-output name=version::$version""

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Jar
        run: ./gradlew shadowJar
      # Upload this built jar
      - name: Upload final jar
        uses: actions/upload-artifact@v3
        with:
          name: fat-jar
          path: ./build/libs/FutureRestore GUI-1.0-all.jar

      - name: Upload version
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.parse-version.outputs.version }}
          release_name: FutureRestore GUI Prerelease — v${{ steps.parse-version.outputs.version }}
          draft: true
          prerelease: true

      - name: Create upload URL file
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: echo $UPLOAD_URL > upload-url.txt
      - name: Upload release's upload URL
        uses: actions/upload-artifact@v3
        with:
          name: upload-url
          path: upload-url.txt

      - name: Create release ID file
        env:
          RELEASE_ID: ${{ steps.create_release.outputs.id }}
        run: echo $RELEASE_ID > release-id.txt
      - name: Upload release's upload URL
        uses: actions/upload-artifact@v3
        with:
          name: release-id
          path: release-id.txt

  ubuntu-pack:
    needs: [ build-and-create-draft ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          version=$(tail version.txt)
          echo ""::set-output name=version::$version""

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_linux-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage deb
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type deb --icon ./.github/workflows/ubuntu/Icon-1024.png --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION 2>&1 | tee /tmp/jpackoutput.txt
      - name: Grep DEB name
        id: grep_deb_name
        run: |
          deb_name=$(grep -Po '(?<=Package \(.deb\) saved to: ).*(?=.)' /tmp/jpackoutput.txt)
          echo ""::set-output name=deb_filename::$deb_name""

      - name: Run JPackage app-image
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type app-image --icon ./.github/workflows/ubuntu/Icon-1024.png --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION

      - name: Zip app-image and script
        run: |
          cp ./.github/workflows/ubuntu/""run.sh"" ./
          zip -r FutureRestore-GUI-Linux-Universal.zip ""FutureRestore GUI"" ""run.sh""

      - name: Download URL to upload to
        uses: actions/download-artifact@v3
        with:
          name: upload-url
        # Make it usable in GitHub actions
      - name: Set output for upload-url
        id: set_upload_url
        run: |
          upload_url=$(tail upload-url.txt)
          echo ""::set-output name=upload-url::$upload_url""

      - name: Upload DEB to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: ${{ steps.grep_deb_name.outputs.deb_filename }}
          asset_name: FutureRestore-GUI-Debian-${{ steps.output-version.outputs.version }}.deb
          asset_content_type: application/octet-stream

      - name: Upload app-image zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: FutureRestore-GUI-Linux-Universal.zip
          asset_name: FutureRestore-GUI-Linux-Universal-${{ steps.output-version.outputs.version }}.zip
          asset_content_type: application/zip




  macos-pack:
    needs: [ build-and-create-draft ]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          version=$(tail version.txt)
          echo ""::set-output name=version::$version""

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_osx-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage and remove signature
        env:
          RUN_NUMBER: ${{ github.run_number}}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: |
          jpackage --input ./input --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type app-image --icon ./.github/workflows/mac/FutureRestoreGUIIcons.icns --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --mac-package-identifier com.coocoofroggy.futurerestoregui --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION
          codesign --remove-signature FutureRestore\ GUI.app
          mkdir dmg-input
          mv ""FutureRestore GUI.app"" dmg-input

      - name: Create DMG from .app
        run: |
          create-dmg --hdiutil-quiet --volname ""FutureRestore GUI Installer"" --volicon "".github/workflows/mac/DMG Images/FRGUI-Drive-Icon.icns"" --background "".github/workflows/mac/DMG Images/DMG-Background.png"" --window-pos 200 120 --window-size 600 342 --icon-size 100 --icon ""FutureRestore GUI.app"" 80 200 --hide-extension ""FutureRestore GUI.app"" --app-drop-link 450 200 ""FutureRestore GUI Installer.dmg"" ""dmg-input/""

#      - name: Zip .app
#        id: zip_app
#        run: zip -r FutureRestore-GUI-Mac.zip ""FutureRestore GUI.app""

      - name: Download URL to upload to
        uses: actions/download-artifact@v3
        with:
          name: upload-url
        # Make it usable in GitHub actions
      - name: Set output for upload-url
        id: set_upload_url
        run: |
          upload_url=$(tail upload-url.txt)
          echo ""::set-output name=upload-url::$upload_url""

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: FutureRestore GUI Installer.dmg
          asset_name: FutureRestore-GUI-Mac-${{ steps.output-version.outputs.version }}.dmg
          asset_content_type: application/octet-stream

  windows-pack:
    needs: [ build-and-create-draft ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          FOR /F ""tokens=*"" %%g IN ('tail version.txt') do (SET version=%%g)
          echo ::set-output name=version::%version%
        shell: cmd

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_windows-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type msi --icon ./.github/workflows/windows/FRWindows.ico --copyright ""© CoocooFroggy $(date +'%Y')"" --vendor ""CoocooFroggy"" --verbose --name ""FutureRestore GUI"" --win-shortcut --win-menu --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version %VERSION%
        shell: cmd

      - name: Find MSI name
        id: grep_msi_name
        run: |
          FOR /F ""tokens=*"" %%g IN ('ls *.msi') do (SET msi_name=%%g)
          echo ::set-output name=msi_filename::%msi_name%
        # Otherwise it tries powershell
        shell: cmd

      - name: Download URL to upload to
        uses: actions/download-artifact@v3
        with:
          name: upload-url
        # Make it usable in GitHub actions
      - name: Set output for upload-url
        id: set_upload_url
        run: |
          FOR /F ""tokens=*"" %%g IN ('tail upload-url.txt') do (SET upload_url=%%g)
          echo ::set-output name=upload-url::%upload_url%
        # Otherwise it tries powershell
        shell: cmd

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: ${{ steps.grep_msi_name.outputs.msi_filename }}
          asset_name: FutureRestore-GUI-Windows-${{ steps.output-version.outputs.version }}.msi
          asset_content_type: application/octet-stream

#   publish-release:
#     needs: [ ubuntu-pack, macos-pack, windows-pack ]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download release ID
#         uses: actions/download-artifact@v3
#         with:
#           name: release-id
#       - name: Output release ID
#         id: output-release-id
#         run: |
#           release_id=$(tail release-id.txt)
#           echo ""::set-output name=release-id::$release_id""

#      # - name: Publish release from draft
#      #   uses: StuYarrow/publish-release@v1
#      #   env:
#      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      #   with:
#      #     id: ${{ steps.output-release-id.outputs.release-id }}

---
name: Build, Pack, Release

# Controls when the action will run. 
on:
  pull_request:
    branches: [ master ]
    types: [ closed ]

jobs:
  build-and-create-draft:
    # Only run if it was a PR merge
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Parse version
        id: parse-version
        run: |
          version=$(cat src/main/java/Main.java | grep -Po '(?<=futureRestoreGUIVersion = \"").*(?=\"")')
          echo $version > version.txt
          echo ""::set-output name=version::$version""

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build Jar
        run: ./gradlew shadowJar
      # Upload this built jar
      - name: Upload final jar
        uses: actions/upload-artifact@v3
        with:
          name: fat-jar
          path: ./build/libs/FutureRestore GUI-1.0-all.jar

      - name: Upload version
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.parse-version.outputs.version }}
          release_name: FutureRestore GUI — v${{ steps.parse-version.outputs.version }}
          draft: true
          prerelease: false

      - name: Create upload URL file
        env:
          UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
        run: echo $UPLOAD_URL > upload-url.txt
      - name: Upload release's upload URL
        uses: actions/upload-artifact@v3
        with:
          name: upload-url
          path: upload-url.txt

      - name: Create release ID file
        env:
          RELEASE_ID: ${{ steps.create_release.outputs.id }}
        run: echo $RELEASE_ID > release-id.txt
      - name: Upload release's upload URL
        uses: actions/upload-artifact@v3
        with:
          name: release-id
          path: release-id.txt

  ubuntu-pack:
    needs: [ build-and-create-draft ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          version=$(tail version.txt)
          echo ""::set-output name=version::$version""

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_linux-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage deb
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type deb --icon ./.github/workflows/ubuntu/Icon-1024.png --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION 2>&1 | tee /tmp/jpackoutput.txt
      - name: Grep DEB name
        id: grep_deb_name
        run: |
          deb_name=$(grep -Po '(?<=Package \(.deb\) saved to: ).*(?=.)' /tmp/jpackoutput.txt)
          echo ""::set-output name=deb_filename::$deb_name""

      - name: Run JPackage app-image
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type app-image --icon ./.github/workflows/ubuntu/Icon-1024.png --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION

      - name: Zip app-image and script
        run: |
          cp ./.github/workflows/ubuntu/""run.sh"" ./
          zip -r FutureRestore-GUI-Linux-Universal.zip ""FutureRestore GUI"" ""run.sh""

      - name: Download URL to upload to
        uses: actions/download-artifact@v3
        with:
          name: upload-url
        # Make it usable in GitHub actions
      - name: Set output for upload-url
        id: set_upload_url
        run: |
          upload_url=$(tail upload-url.txt)
          echo ""::set-output name=upload-url::$upload_url""

      - name: Upload DEB to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: ${{ steps.grep_deb_name.outputs.deb_filename }}
          asset_name: FutureRestore-GUI-Debian-${{ steps.output-version.outputs.version }}.deb
          asset_content_type: application/octet-stream

      - name: Upload app-image zip to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: FutureRestore-GUI-Linux-Universal.zip
          asset_name: FutureRestore-GUI-Linux-Universal-${{ steps.output-version.outputs.version }}.zip
          asset_content_type: application/zip

  macos-pack:
    needs: [ build-and-create-draft ]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          version=$(tail version.txt)
          echo ""::set-output name=version::$version""

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_osx-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage and remove signature
        env:
          RUN_NUMBER: ${{ github.run_number}}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: |
          jpackage --input ./input --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type app-image --icon ./.github/workflows/mac/FutureRestoreGUIIcons.icns --copyright ""© CoocooFroggy $(date +'%Y')"" --verbose --mac-package-identifier com.coocoofroggy.futurerestoregui --name ""FutureRestore GUI"" --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version $VERSION
          codesign --remove-signature FutureRestore\ GUI.app
          mkdir dmg-input
          mv ""FutureRestore GUI.app"" dmg-input

      - name: Create DMG from .app
        run: |
          create-dmg --hdiutil-quiet --volname ""FutureRestore GUI Installer"" --volicon "".github/workflows/mac/DMG Images/FRGUI-Drive-Icon.icns"" --background "".github/workflows/mac/DMG Images/DMG-Background.png"" --window-pos 200 120 --window-size 600 342 --icon-size 100 --icon ""FutureRestore GUI.app"" 80 200 --hide-extension ""FutureRestore GUI.app"" --app-drop-link 450 200 ""FutureRestore GUI Installer.dmg"" ""dmg-input/""

#      - name: Zip .app
#        id: zip_app
#        run: zip -r FutureRestore-GUI-Mac.zip ""FutureRestore GUI.app""

      - name: Download URL to upload to
        uses: actions/download-artifact@v3
        with:
          name: upload-url
        # Make it usable in GitHub actions
      - name: Set output for upload-url
        id: set_upload_url
        run: |
          upload_url=$(tail upload-url.txt)
          echo ""::set-output name=upload-url::$upload_url""

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload-url }}
          asset_path: FutureRestore GUI Installer.dmg
          asset_name: FutureRestore-GUI-Mac-${{ steps.output-version.outputs.version }}.dmg
          asset_content_type: application/octet-stream

  windows-pack:
    needs: [ build-and-create-draft ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Download final jar
        uses: actions/download-artifact@v3
        with:
          name: fat-jar
          path: ./input

      - name: Download version
        uses: actions/download-artifact@v3
        with:
          name: version
      - name: Output version
        id: output-version
        run: |
          FOR /F ""tokens=*"" %%g IN ('tail version.txt') do (SET version=%%g)
          echo ::set-output name=version::%version%
        shell: cmd

      - name: Download JavaFX
        run: |
          curl -o jmods.zip https://download2.gluonhq.com/openjfx/19/openjfx-19_windows-x64_bin-jmods.zip
          unzip jmods.zip

      - name: Run JPackage
        env:
          RUN_NUMBER: ${{ github.run_number }}
          VERSION: ${{ steps.output-version.outputs.version }}
        run: jpackage --input ./input --name ""FutureRestore GUI"" --main-jar ""FutureRestore GUI-1.0-all.jar"" --main-class Main --type msi --icon ./.github/workflows/windows/FRWindows.ico --copyright ""© CoocooFroggy $(date +'%Y')"" --vendor ""CoocooFroggy"" --verbose --name ""FutureRestore GUI"" --win-shortcut --win-menu --module-path ./javafx-jmods-19 --add-modules javafx.swing,java.logging,java.sql,java.base,jdk.crypto.ec,java.naming --app-version %VERSION%
        shell: cmd

      - name: Find MSI name
        id: grep_msi_name
        run: |
          FOR /F ""tokens=*"" %%g IN ('ls *.msi') do (SET msi_name=%%g)
          echo ::set-output name=msi_filename::%msi_name%
        # Otherwise it tries powershell
        shell: cmd

      - name: Download URL to upload to
        uses: actions/download-artifact@v3
        with:
          name: upload-url
        # Make it usable in GitHub actions
      - name: Set output for upload-url
        id: set_upload_url
        run: |
          FOR /F ""tokens=*"" %%g IN ('tail upload-url.txt') do (SET upload_url=%%g)
          echo ::set-output name=upload-url::%upload_url%
        # Otherwise it tries powershell
        shell: cmd

      - name: Upload Release Asset
        id: upload-release-asset
     "
CatVodTVOfficial;CatVodTVSpider;CatVodTVOfficial/CatVodTVSpider;https://github.com/CatVodTVOfficial/CatVodTVSpider;https://api.github.com/repos/CatVodTVOfficial/CatVodTVSpider;master;21/09/2021 09:55;21/04/2024 12:56;TRUE;"name: Spider Jar Gen CI

on: workflow_dispatch

jobs:
  build:

    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
        
    - name: Build with Gradle
      run: ./buildAndGenJar.bat ec
        
    - name: Update spider jar
      uses: EndBug/add-and-commit@v7
      with:
        default_author: github_actions
        message: 'update spider jar'
        add: ""['./jar/custom_spider.jar', './jar/custom_spider.jar.md5']""

---
"
ReChronoRain;Cemiuiler;ReChronoRain/Cemiuiler;https://github.com/ReChronoRain/Cemiuiler;https://api.github.com/repos/ReChronoRain/Cemiuiler;main;28/02/2023 13:25;21/04/2024 02:50;TRUE;"name: Android CI

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]
    paths-ignore:
      - "".github/**""
      - ""!.github/workflows/**""
      - "".idea/""
      - ""doc/*""
      - ""*.md""
      - "".github/workflows/crowdin.yml""
      - ""crowdin.yml""
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build App
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Create Sign File
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          touch signing.properties
          echo storePassword=${{ secrets.KEY_STORE_PASSWORD }} >> signing.properties
          echo keyAlias=${{ secrets.ALIAS }} >> signing.properties
          echo keyPassword='${{ secrets.KEY_STORE_PASSWORD }}' >> signing.properties
          echo storeFile=key.jks >> signing.properties
          echo ${{ secrets.SIGNING_KEY }} | base64 --decode > key.jks

      - name: Build with Gradle
        shell: bash
        run: ./gradlew assembleCanary

      - name: Find APKs
        run: |
          echo ""APK_FILE_CANARY=$(find app/build/outputs/apk/canary -name '*.apk')"" >> $GITHUB_ENV

      - name: Show APKs SHA256
        if: success()
        run: |
          echo ""### Build Success"" >> $GITHUB_STEP_SUMMARY
          echo ""|Artifact|SHA256|"" >> $GITHUB_STEP_SUMMARY
          echo ""|:--------:|:----------|"" >> $GITHUB_STEP_SUMMARY
          canary=($(sha256sum '${{ env.APK_FILE_CANARY }}'))
          echo ""|Canary|$canary"" >> $GITHUB_STEP_SUMMARY

      - name: Upload Canary APK
        if: contains(github.event.head_commit.message, '[upload]') == true
        uses: actions/upload-artifact@v3
        with:
          name: Cemiuiler Canary
          path: ${{ env.APK_FILE_CANARY }}

      - name: Post to Beta Channel & Canary Group
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && github.ref_type != 'tag' && contains(github.event.head_commit.message, '[skip post]') == false && contains(github.event.head_commit.message, 's#') == false }}
        shell: bash
        env:
          GROUP_ID: ${{ secrets.CANARY_GROUP_ID }}
          GROUP_ID_TEMPORARY: ${{ secrets.GROUP_TEMPORARY_ID }}
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CANARY: ${{ env.APK_FILE_CANARY }}
        run: |
          mkdir -p ${{ github.workspace }}/git_clone
          git clone ${{ github.event.repository.url }} ${{ github.workspace }}/git_clone -b ${{ github.ref_name }}
          cd ${{ github.workspace }}/git_clone
          { echo -e 'Github CI\n'; git log ${{ github.event.before }}..${{ github.event.after }} --pretty=format:""%h %s""; } > ${{ github.workspace }}/git_log
          ESCAPED=""$(cat ${{ github.workspace }}/git_log | gawk '{gsub(/[_*[\]()~`>#+=\|{}.!-]/,""\\\\\\\\&"")}1' | sed -e 's|""|\\""|g' -e 's|^[0-9a-z]\+|__&__|' | hexdump -v -e '/1 ""%02X""' | sed 's/\(..\)/%\1/g')""
          cd ${{ github.workspace }}
          curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${GROUP_ID}&message_thread_id=${MESSAGE_THREAD_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fcanary%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22%3A%22${ESCAPED}%22%7D%5D"" -F canary=""@${CANARY}""
          curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fcanary%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22%3A%22${ESCAPED}%22%7D%5D"" -F canary=""@${CANARY}""

---
name: Android U Action

on:
  push:
    branches: [ ""Android-U"" ]
  pull_request:
    branches: [ ""Android-U"" ]
    paths-ignore:
      - "".github/**""
      - ""!.github/workflows/**""
      - "".idea/""
      - ""doc/*""
      - ""*.md""
      - "".github/workflows/crowdin.yml""
      - ""crowdin.yml""
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build App
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Create Sign File
        run: |
          touch signing.properties
          echo storePassword=${{ secrets.KEY_STORE_PASSWORD }} >> signing.properties
          echo keyAlias=${{ secrets.ALIAS }} >> signing.properties
          echo keyPassword='${{ secrets.KEY_STORE_PASSWORD }}' >> signing.properties
          echo storeFile=key.jks >> signing.properties
          echo ${{ secrets.SIGNING_KEY }} | base64 --decode > key.jks

      - name: Build with Gradle
        if: contains(github.event.head_commit.message, '[skip]') == false
        shell: bash
        run: ./gradlew assembleCanary

      - name: Find APKs
        if: contains(github.event.head_commit.message, '[skip]') == false
        run: |
          echo ""APK_FILE_CANARY=$(find app/build/outputs/apk/canary -name '*.apk')"" >> $GITHUB_ENV

      - name: Show APKs SHA256
        if: success() && contains(github.event.head_commit.message, '[skip]') == false
        run: |
          echo ""### Build Success"" >> $GITHUB_STEP_SUMMARY
          echo ""|Artifact|SHA256|"" >> $GITHUB_STEP_SUMMARY
          echo ""|:--------:|:----------|"" >> $GITHUB_STEP_SUMMARY
          canary=($(sha256sum '${{ env.APK_FILE_CANARY }}'))
          echo ""|Canary|$canary"" >> $GITHUB_STEP_SUMMARY

      - name: Upload Canary APK
        if: contains(github.event.head_commit.message, '[upload]') == true
        uses: actions/upload-artifact@v3
        with:
          name: Cemiuiler Canary
          path: ${{ env.APK_FILE_CANARY }}

      - name: Post to Android 14 Debug Group
        if: contains(github.event.head_commit.message, '[skip]') == false
        shell: bash
        env:
          GROUP_ID: ${{ secrets.DEBUG_GROUP_ID }}
          GROUP_ID_TEMPORARY: ${{ secrets.GROUP_TEMPORARY_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CANARY: ${{ env.APK_FILE_CANARY }}
        run: |
          mkdir -p ${{ github.workspace }}/git_clone
          git clone ${{ github.event.repository.url }} ${{ github.workspace }}/git_clone -b ${{ github.ref_name }}
          cd ${{ github.workspace }}/git_clone
          { echo -e 'Github CI\n'; git log ${{ github.event.before }}..${{ github.event.after }} --pretty=format:""%h %s""; } > ${{ github.workspace }}/git_log
          ESCAPED=""$(cat ${{ github.workspace }}/git_log | gawk '{gsub(/[_*[\]()~`>#+=\|{}.!-]/,""\\\\\\\\&"")}1' | sed -e 's|""|\\""|g' -e 's|^[0-9a-z]\+|__&__|' | hexdump -v -e '/1 ""%02X""' | sed 's/\(..\)/%\1/g')""
          cd ${{ github.workspace }}
          curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${GROUP_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fcanary%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22%3A%22${ESCAPED}%22%7D%5D"" -F canary=""@${CANARY}""

---
name: Crowdin Action

on:
   workflow_dispatch:
   push:
     branches: [ main ]
     paths:
       - app/src/main/res/values/strings.xml
   schedule:
     - cron: '0 0 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
   synchronize-with-crowdin:
     runs-on: ubuntu-latest
     steps:
     - name: Checkout
       uses: actions/checkout@v4

     - name: Crowdin Action
       uses: crowdin/github-action@master
       with:
         # Upload and download translation settings
         upload_sources: true
         upload_translations: true
         download_translations: true

         # Pull request settings
         create_pull_request: true
         localization_branch_name: crowdin_branch
         pull_request_labels: 'enhancement, documentation'

         # Global settings
         config: 'crowdin.yml'
         crowdin_branch_name: main
       env:
         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
         CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
         CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}

---
"
macrozheng;mall-swarm;macrozheng/mall-swarm;https://github.com/macrozheng/mall-swarm;https://api.github.com/repos/macrozheng/mall-swarm;master;25/11/2019 07:55;22/04/2024 11:41;FALSE;
bytedance;AabResGuard;bytedance/AabResGuard;https://github.com/bytedance/AabResGuard;https://api.github.com/repos/bytedance/AabResGuard;develop;25/11/2019 09:28;20/04/2024 03:37;FALSE;
bin392328206;six-finger;bin392328206/six-finger;https://github.com/bin392328206/six-finger;https://api.github.com/repos/bin392328206/six-finger;master;26/11/2019 02:11;22/04/2024 07:47;FALSE;
qaiu;netdisk-fast-download;qaiu/netdisk-fast-download;https://github.com/qaiu/netdisk-fast-download;https://api.github.com/repos/qaiu/netdisk-fast-download;main;20/04/2023 11:41;21/04/2024 08:54;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

# The API requires write permission on the repository to submit dependencies
permissions:
  contents: write

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@v3

#    - uses: release-drafter/release-drafter@v5
#      env:
#        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

---
"
chat2db;Chat2DB;chat2db/Chat2DB;https://github.com/chat2db/Chat2DB;https://api.github.com/repos/chat2db/Chat2DB;main;20/06/2023 16:05;22/04/2024 13:30;TRUE;"# When tagging a release, do two things
# 1.
name: Push To Docker

# Workflow's trigger
on:
  release:
    types: [ published ]

# Workflow's jobs
jobs:
  docker:
    strategy:
      matrix:
        include:
          - arch: amd64
          - arch: arm64
            variant: v8
    runs-on: ubuntu-latest
    steps:
      - name: Check out git repository
        uses: actions/checkout@main

      # Unable to obtain version number. Since the workflow doesn't support it, we'll use a plugin
      - name: Create version
        id: chat2db_version
        uses: bhowell2/github-substring-action@1.0.1
        with:
          value: ${{ github.ref }}
          index_of_str: ""refs/tags/v""


      # Outputting basic information
      - name: Print basic information
        run: |
          echo ""current version: ${{ steps.chat2db_version.outputs.substring }}""

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: 16
          cache: ""yarn""
          cache-dependency-path: chat2db-client/yarn.lock

      # Build static file information
      - name: Yarn install & build & copy
        run: |
          cd chat2db-client
          yarn install 
          yarn run build:web:prod --app_version=${{ steps.chat2db_version.outputs.substring }}
          cp -r dist ../chat2db-server/chat2db-server-web-start/src/main/resources/static/front
          cp -r dist/index.html ../chat2db-server/chat2db-server-web-start/src/main/resources/thymeleaf/

      # Install java and maven
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""adopt""
          cache: ""maven""

      # Compile server-side Java version
      - name: Build Java
        run: mvn clean package -B '-Dmaven.test.skip=true' -f chat2db-server/pom.xml
      

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in docker hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Packaging and sending to Docker
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64/v8
          tags: chat2db/chat2db:${{ steps.chat2db_version.outputs.substring }},chat2db/chat2db:latest
          file: docker/Dockerfile
---
# Workflow's name
name: Build Client

# Workflow's trigger
# Pack when creating tags
on:
  push:
    tags:
      - v*

# Workflow's jobs
# A total of 3 computers are required to run
# windows
# macos-latest x86_64
# macos-latest arm64
jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out git repository
        uses: actions/checkout@main

      # Obtaining the version number is not supported by workflow, so a plug-in is used.
      - name: Create version
        id: chat2db_version
        uses: bhowell2/github-substring-action@1.0.1
        with:
          value: ${{ github.ref }}
          index_of_str: ""refs/tags/v""

      # Output basic information
      - name: Print basic information
        run: |
          echo ""current environment: ${{ env.CHAT2DB_ENVIRONMENT }}""
          echo ""current version: ${{ steps.chat2db_version.outputs.substring }}""

      # Install jre Windows
      - name: Install Jre for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          java-package: ""jre""

      # Install jre MacOS X64
      - name: Install Jre MacOS X64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          java-package: ""jre""

      # Install jre MacOS arm64
      - name: Install Jre MacOS arm64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          java-package: ""jre""
          architecture: ""aarch64""

          # Install jre Linux
      - name: Install Jre for Linux
        if: ${{ runner.os == 'Linux' }}
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          java-package: ""jre""

      # java.security open tls1 Windows
      - name: Enable tls1
        if: ${{ runner.os == 'Windows' }}
        run: |
          # sed -i '' ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\( TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""${{ env.JAVA_HOME }}/conf/security/java.security""
          $filePath = ""${{ env.JAVA_HOME }}\conf\security\java.security""
          $content = Get-Content $filePath -Raw
          $updatedContent = $content -replace '^(jdk.tls.disabledAlgorithms=)(.*)( TLSv1, TLSv1.1,)(.*)', '$1$2$4'
          $updatedContent | Set-Content $filePath
        shell: pwsh

      # java.security open tls1 macOS
      - name: Enable tls1
        if: ${{ runner.os == 'macOS' }}
        run: |
          sed -i '' ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\( TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" $JAVA_HOME/conf/security/java.security

      # Copy jre Windows
      - name: Copy Jre for Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir chat2db-client/static
          cp -r ""${{ env.JAVA_HOME }}"" chat2db-client/static/jre

      # Copy jre macOS
      - name: Copy Jre for macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          mkdir chat2db-client/static
          cp -r $JAVA_HOME chat2db-client/static/jre
          chmod -R 777 chat2db-client/static/jre/

      # Copy jre Linux
      - name: Copy Jre for Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir chat2db-client/static
          cp -r $JAVA_HOME chat2db-client/static/jre
          chmod -R 777 chat2db-client/static/jre/

      # Install node
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: 16
          cache: ""yarn""
          cache-dependency-path: chat2db-client/yarn.lock

      # Install java
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          cache: ""maven""

      # Build static file information
      - name: Yarn install & build & copy
        run: |
          cd chat2db-client
          yarn 
          yarn run build:web:prod --app_version=${{ steps.chat2db_version.outputs.substring }}
          cp -r dist ../chat2db-server/chat2db-server-start/src/main/resources/static/front
          cp -r dist/index.html ../chat2db-server/chat2db-server-start/src/main/resources/thymeleaf/
          cd src/main
          yarn
          yarn run build

      # Compile server-side java version
      - name: Build Java
        run: mvn clean package -B '-Dmaven.test.skip=true' -f chat2db-server/pom.xml

      # touch versions
      - name: touch versions
        run: |
          cd chat2db-client
          mkdir versions
          mkdir versions/${{ steps.chat2db_version.outputs.substring }}
          mkdir versions/${{ steps.chat2db_version.outputs.substring }}/static
          touch version
          echo -n ${{ steps.chat2db_version.outputs.substring }} > version
          cp -r version ./versions/

      # Copy server-side java to the specified location
      - name: Copy App
        run: |
          cp chat2db-server/chat2db-server-start/target/chat2db-server-start.jar chat2db-client/versions/${{ steps.chat2db_version.outputs.substring }}/static/
      #    cp -r chat2db-server/chat2db-server-start/target/lib chat2db-client/versions/${{ steps.chat2db_version.outputs.substring }}/static/lib

      - name: Prepare Build Electron
        run: |
          cd chat2db-client
          yarn run build:web:desktop --app_version=${{ steps.chat2db_version.outputs.substring }}
          cp -r dist ./versions/${{ steps.chat2db_version.outputs.substring }}/
          rm -r dist

      # windows
      - name: Build/release Electron app for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ""chat2db-client/""
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          skip_build: true
          args: ""-c.extraMetadata.version=${{ steps.chat2db_version.outputs.substring }} --win --x64""
          release: true

      # macos x86_64
      - name: Build/release Electron app for MacOS X64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ""chat2db-client/""
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          skip_build: true
          args: ""-c.extraMetadata.version=${{ steps.chat2db_version.outputs.substring }} --mac --x64""
          release: true

      # x86_64 notarization
      - name: Notarization x86_64 App
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        run: |
          xcrun notarytool store-credentials ""Chat2DB"" --apple-id ""${{secrets.MAC_APPLE_ID}}"" --password ""${{secrets.MAC_APPLE_PASSWORD}}"" --team-id ""${{secrets.MAC_TEAM_ID}}""
          xcrun notarytool submit chat2db-client/release/Chat2DB-${{ steps.chat2db_version.outputs.substring }}.dmg --keychain-profile ""Chat2DB""
      
      # macos arm64
      - name: Build/release Electron app for MacOS arm64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ""chat2db-client/""
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          skip_build: true
          args: ""-c.extraMetadata.version=${{ steps.chat2db_version.outputs.substring }} --mac --arm64""
          release: true

      # arm notarization
      - name: Notarization arm64 App
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        run: |
          xcrun notarytool store-credentials ""Chat2DB"" --apple-id ""${{secrets.MAC_APPLE_ID}}"" --password ""${{secrets.MAC_APPLE_PASSWORD}}"" --team-id ""${{secrets.MAC_TEAM_ID}}""
          xcrun notarytool submit chat2db-client/release/Chat2DB-${{ steps.chat2db_version.outputs.substring }}-arm64.dmg --keychain-profile ""Chat2DB""

      # Linux
      - name: Delete File
        if: ${{ runner.os == 'Linux' }}
        run: |
          cd chat2db-client/static/jre/
          ls -la
          rm -rf legal
          ls -la

      - name: Build/release Electron app for Linux
        if: ${{ runner.os == 'Linux' }}
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ""chat2db-client/""
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          skip_build: true
          args: ""-c.extraMetadata.version=${{ steps.chat2db_version.outputs.substring }} --linux""
          release: true

      # Prepare the required data Windows
      - name: Prepare upload for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir oss_temp_file
          cp -r chat2db-client/release/*Setup*.exe ./oss_temp_file

      # Prepare the required data MacOS x86_64
      - name: Prepare upload for MacOS x86_64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        run: |
          mkdir oss_temp_file
          cp chat2db-client/versions/${{ steps.chat2db_version.outputs.substring }}/static/chat2db-server-start.jar   ./oss_temp_file
          cp -r chat2db-client/release/*.dmg ./oss_temp_file
          cp -r chat2db-client/versions/${{ steps.chat2db_version.outputs.substring }}/dist ./oss_temp_file/dist
          cd chat2db-client/versions/${{ steps.chat2db_version.outputs.substring }}/ && zip -r ${{ steps.chat2db_version.outputs.substring }}.zip ./
          cp -r ${{ steps.chat2db_version.outputs.substring }}.zip ../../../oss_temp_file
          cd static/ && zip -r chat2db-server-start.zip ./ 
          cp -r chat2db-server-start.zip ../../../../oss_temp_file

      # Prepare the required data MacOS arm64
      - name: Prepare upload for MacOS arm64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        run: |
          mkdir oss_temp_file
          cp -r chat2db-client/release/*.dmg ./oss_temp_file

      # Prepare the required data Linux
      - name: Prepare upload for Linux
        if: runner.os == 'Linux'
        run: |
          mkdir oss_temp_file
          cp -r chat2db-client/release/*.AppImage ./oss_temp_file

      # Upload files to OSS for easy downloading
      - name: Set up oss utils
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: ""oss-accelerate.aliyuncs.com""
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: ""1.7.16""
      - name: Upload to oss
        run: |
          ossutil cp -rf --acl=public-read ./oss_temp_file/ oss://chat2db-client/release/${{ steps.chat2db_version.outputs.substring }}/

      # Build completion notification
      - name: Send dingtalk message for Windows
        if: ${{ runner.os == 'Windows' }}
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              ""title"": ""Windows-release-打包完成通知"",
              ""text"": ""# Windows-release-打包完成通知   \n ![bang](https://oss.sqlgpt.cn/static/happy100.jpg)   \n ###  任务id：[${{ github.run_id }}](https://github.com/chat2db/Chat2DB/actions/runs/${{ github.run_id }})   \n ### Windows下载地址：[https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB%20Setup%20${{ steps.chat2db_version.outputs.substring }}.exe](https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB%20Setup%20${{ steps.chat2db_version.outputs.substring }}.exe) ""
            }

      # Build completion notification
      - name: Send dingtalk message for MacOS x86_64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              ""title"": ""MacOS-x86_64-release-构建完成通知"",
              ""text"": ""# MacOS-x86_64-release-打包完成通知   \n ![bang](https://oss.sqlgpt.cn/static/happy100.jpg)   \n ###  任务id：[${{ github.run_id }}](https://github.com/chat2db/Chat2DB/actions/runs/${{ github.run_id }})    \n ### Intel芯片下载地址：[https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB-${{ steps.chat2db_version.outputs.substring }}.dmg](https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB-${{ steps.chat2db_version.outputs.substring }}.dmg)   \n ### jar包下载地址：[https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/chat2db-server-start.zip](https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/chat2db-server-start.zip) ""
            }

      # Build completion notification
      - name: Send dingtalk message for MacOS arm64
        if: ${{ runner.os == 'macOS' && matrix.arch == 'arm64' }}
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              ""title"": ""MacOS-arm64-release-构建完成通知"",
              ""text"": ""# MacOS-arm64-release-打包完成通知   \n ![bang](https://oss.sqlgpt.cn/static/happy100.jpg)   \n ###  任务id：[${{ github.run_id }}](https://github.com/chat2db/Chat2DB/actions/runs/${{ github.run_id }})   \n ### Apple芯片下载地址：[https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB-${{ steps.chat2db_version.outputs.substring }}-arm64.dmg](https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB-${{ steps.chat2db_version.outputs.substring }}-arm64.dmg) ""
            }

      # Build completion notification
      - name: Send dingtalk message for Linux
        if: ${{ runner.os == 'Linux' }}
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              ""title"": ""Linux-test-打包完成通知"",
              ""text"": ""# Linux-test-打包完成通知   \n ![bang](https://oss.sqlgpt.cn/static/happy100.jpg)   \n ###  任务id：[${{ github.run_id }}](https://github.com/chat2db/Chat2DB/actions/runs/${{ github.run_id }})   \n ### Linux下载地址：[https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB-${{ steps.chat2db_version.outputs.substring }}.AppImage](https://oss.sqlgpt.cn/release/${{ steps.chat2db_version.outputs.substring }}/Chat2DB-${{ steps.chat2db_version.outputs.substring }}.AppImage)""
            }

---
name: Build Test Client

on:
  push:
    branches:
    - ""release_test""

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            file_extension: "".exe""
            file_name: ""https://oss.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test%20Setup%2099.0.${{ github.run_id }}-Test.exe""
            build_arg: ""--win --x64""
          - os: macos-latest
            arch: x86_64
            file_name: ""https://download.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test-99.0.${{ github.run_id }}-Test.dmg""
            file_extension: "".dmg""
            build_arg: ""--mac --x64""
          - os: macos-latest
            arch: arm64
            file_name: ""https://download.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test-99.0.${{ github.run_id }}-Test-arm64.dmg""
            file_extension: "".dmg""
            build_arg: ""--mac --arm64""
          - os: ubuntu-latest
            file_name: ""https://download.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test-99.0.${{ github.run_id }}-Test.AppImage""
            file_extension: "".AppImage""
            build_arg: ""--linux""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out git repository
        uses: actions/checkout@main

      # Install JRE
      - name: Install JRE
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          java-package: ""jre""
          # architecture: ${{ matrix.arch == 'arm64' && 'aarch64' || 'x64' }}

      # OpenTLS
      - name: Enable TLS 1.0 and 1.1 in java.security
        run: |
          if [ ""$RUNNER_OS"" = ""Windows"" ]; then
            sed -i ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\(TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""$JAVA_HOME/conf/security/java.security""
          elif [ ""$RUNNER_OS"" = ""Linux"" ]; then
            sed -i ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\(TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""$JAVA_HOME/conf/security/java.security""
          elif [ ""$RUNNER_OS"" = ""macOS"" ]; then
            sed -i '' ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\(TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""$JAVA_HOME/conf/security/java.security""
          fi
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
          JAVA_HOME: ${{ env.JAVA_HOME }}

      # Copy JRE to the front-end static directory
      - name: Copy JRE to static directory
        run: |
          mkdir -p chat2db-client/static
          cp -r ""$JAVA_HOME""/ chat2db-client/static/jre
          if [ ""${{ runner.os }}"" != ""Windows"" ]; then
            chmod -R 777 chat2db-client/static/jre
          fi
        shell: bash
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

      # Delete related files in jre in Linux
      - if: ${{ runner.os == 'Linux' }}
        name: Delete File on Linux
        run: |
          cd chat2db-client/static/jre/
          ls -la
          rm -rf legal
          ls -la

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: ""16""
          cache: ""yarn""
          cache-dependency-path: chat2db-client/yarn.lock

      # Install Java
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          cache: ""maven""

      # Packaging web front-end resources
      - name: Build FE Static
        run: |
          cd chat2db-client
          yarn
          yarn run build:web:prod --app_version=99.0.${{ github.run_id }} --app_port=10822
          cp -r dist ../chat2db-server/chat2db-server-start/src/main/resources/static/front
          cp -r dist/index.html ../chat2db-server/chat2db-server-start/src/main/resources/thymeleaf/
          cd src/main
          yarn
          yarn run build


      # Package backend project & send to frontend
      - name: Build BE Static
        run: |
          mvn clean package -B '-Dmaven.test.skip=true' -f chat2db-server/pom.xml
          mkdir -p chat2db-client/versions/99.0.${{ github.run_id }}/static
          echo -n 99.0.${{ github.run_id }} > chat2db-client/version
          cp -r chat2db-client/version chat2db-client/versions/
          cp chat2db-server/chat2db-server-start/target/chat2db-server-start.jar chat2db-client/versions/99.0.${{ github.run_id }}/static/

      # Packaging desktop front-end resources
      - name: Prepare Build Electron
        run: |
          cd chat2db-client
          yarn run build:web:desktop --app_version=99.0.${{ github.run_id }} --app_port=10822
          cp -r dist ./versions/99.0.${{ github.run_id }}/
          rm -r dist

      # Packaging Electron
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ""chat2db-client/""
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          mac_certs: ${{ secrets.mac_certs_temp }}
          mac_certs_password: ${{ secrets.mac_certs_password_temp }}
          skip_build: true
          args: >
            -c.appId=com.chat2db.test
            -c.productName=Chat2DB-Test
            -c.win.publisherName=Chat2DB-Test
            -c.nsis.shortcutName=Chat2DB-Test
            -c.extraMetadata.version=99.0.${{ github.run_id }}-Test
            ${{ matrix.build_arg}}

      # Notarization & Signature Mac App
      - name: Notarize MacOS x86_64 App
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        run: |
          xcrun notarytool store-credentials ""Chat2DB"" --apple-id ""${{ secrets.MAC_APPLE_ID }}"" --password ""${{ secrets.MAC_APPLE_PASSWORD }}"" --team-id ""${{ secrets.MAC_TEAM_ID }}""
          xcrun notarytool submit chat2db-client/release/Chat2DB-Test-99.0.${{ github.run_id }}-Test.dmg --keychain-profile ""Chat2DB""
      
      - name: Notarize MacOS ARM64 App
        if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
        run: |
          xcrun notarytool store-credentials ""Chat2DB"" --apple-id ""${{ secrets.MAC_APPLE_ID }}"" --password ""${{ secrets.MAC_APPLE_PASSWORD }}"" --team-id ""${{ secrets.MAC_TEAM_ID }}""
          xcrun notarytool submit chat2db-client/release/Chat2DB-Test-99.0.${{ github.run_id }}-Test-arm64.dmg --keychain-profile ""Chat2DB""
    
          
      

      # Build Jar
      - name: Prepare upload for Jar
        if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        run: |
          mkdir -p oss_temp_file
          cp chat2db-client/versions/99.0.${{ github.run_id }}/static/chat2db-server-start.jar   ./oss_temp_file
          cp -r chat2db-client/release/*.dmg ./oss_temp_file
          cp -r chat2db-client/versions/99.0.${{ github.run_id }}/dist ./oss_temp_file/dist
          cd chat2db-client/versions/99.0.${{ github.run_id }}/ && zip -r 99.0.${{ github.run_id }}.zip ./
          cp -r 99.0.${{ github.run_id }}.zip ../../../oss_temp_file
          cd static/ && zip -r chat2db-server-start.zip ./ 
          cp -r chat2db-server-start.zip ../../../../oss_temp_file

      # Prepare files to be sent to OSS
      - name: Prepare upload for OSS
        run: |
          mkdir -p oss_temp_file
          cp -r chat2db-client/release/*${{ matrix.file_extension }} ./oss_temp_file

      # Set up OSS
      - name: Set up oss utils
        uses: yizhoumo/setup-ossutil@v1
        with:
          endpoint: ""oss-accelerate.aliyuncs.com""
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: ""1.7.16""

      # Upload to OSS
      - name: Upload to OSS
        run: |
          ossutil cp -rf --acl=public-read ./oss_temp_file/ oss://chat2db-client/test/99.0.${{ github.run_id }}/

      # Configure SSH to be uploaded to the server
      - name: Install ssh key
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.SERVER_DOWNLOAD_SSH_PRIVATE_KEY }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ secrets.SERVER_DOWNLOAD_HOST }} >> ~/.ssh/known_hosts
          eval `ssh-agent -s`
          ssh-add ~/.ssh/id_rsa     
      # upload to server
      - name: Upload package
        run: |
          ssh -t ${{ secrets.SERVER_DOWNLOAD_USERNAME }}@${{ secrets.SERVER_DOWNLOAD_HOST }} ""mkdir -p ${{ secrets.SERVER_DOWNLOAD_PATH }}/test//99.0.${{ github.run_id }}"" 
          scp ./oss_temp_file/* ${{ secrets.SERVER_DOWNLOAD_USERNAME }}@${{ secrets.SERVER_DOWNLOAD_HOST }}:${{ secrets.SERVER_DOWNLOAD_PATH }}/test//99.0.${{ github.run_id }}/ 
              

      # Send to DingTalk
      - name: Send dingtalk message
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              ""title"": ""${{ matrix.os }}-test-打包完成通知"",
              ""text"": ""# ${{ matrix.os }}-test-打包完成通知\n !\n ###  任务id：[${{ github.run_id }}](https://github.com/chat2db/Chat2DB/actions/runs/${{ github.run_id }})\n ### 下载地址：[${{matrix.file_name}}](${{matrix.file_name}})""
            }

      # Send Jar package address to DingTalk
      - if: ${{ runner.os == 'macOS' && matrix.arch == 'x86_64' }}
        name: Send dingtalk message
        uses: ghostoy/dingtalk-action@master
        with:
          webhook: ${{ secrets.DINGTALK_WEBHOOK }}
          msgtype: markdown
          content: |
            {
              ""title"": ""Jar-test-构建完成通知"",
              ""text"": ""### jar包下载地址：[https://download.sqlgpt.cn/test/99.0.${{ github.run_id }}/chat2db-server-start.zip](https://download.sqlgpt.cn/test/99.0.${{ github.run_id }}/chat2db-server-start.zip) ""
            }

---
name: Build Test Client 2 

on:
  push:
    branches:
    - ""release_test_2""

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            file_extension: "".exe""
            file_name: ""https://oss.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test%20Setup%2099.0.${{ github.run_id }}-Test.exe""
            build_arg: ""--win --x64""
          - os: macos-latest
            arch: x86_64
            file_name: ""https://oss.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test-99.0.${{ github.run_id }}-Test.dmg""
            file_extension: "".dmg""
            build_arg: ""--mac --x64""
          - os: macos-latest
            arch: arm64
            file_name: ""https://oss.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test-99.0.${{ github.run_id }}-Test-arm64.dmg""
            file_extension: "".dmg""
            build_arg: ""--mac --arm64""
          - os: ubuntu-latest
            file_name: ""https://oss.sqlgpt.cn/test/99.0.${{ github.run_id }}/Chat2DB-Test-99.0.${{ github.run_id }}-Test.AppImage""
            file_extension: "".AppImage""
            build_arg: ""--linux""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out git repository
        uses: actions/checkout@main

      # Install JRE
      - name: Install JRE
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          java-package: ""jre""
          # architecture: ${{ matrix.arch == 'arm64' && 'aarch64' || 'x64' }}

      # Open TLS
      - name: Enable TLS 1.0 and 1.1 in java.security
        run: |
          if [ ""$RUNNER_OS"" = ""Windows"" ]; then
            sed -i ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\(TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""$JAVA_HOME/conf/security/java.security""
          elif [ ""$RUNNER_OS"" = ""Linux"" ]; then
            sed -i ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\(TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""$JAVA_HOME/conf/security/java.security""
          elif [ ""$RUNNER_OS"" = ""macOS"" ]; then
            sed -i '' ""s/\(^jdk.tls.disabledAlgorithms=\)\(.*\)\(TLSv1, TLSv1.1,\)\(.*\)/\1\2\4/"" ""$JAVA_HOME/conf/security/java.security""
          fi
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
          JAVA_HOME: ${{ env.JAVA_HOME }}

      # Copy JRE to the front-end static directory
      - name: Copy JRE to static directory
        run: |
          mkdir -p chat2db-client/static
          cp -r ""$JAVA_HOME""/ chat2db-client/static/jre
          if [ ""${{ runner.os }}"" != ""Windows"" ]; then
            chmod -R 777 chat2db-client/static/jre
          fi
        shell: bash
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

      # Delete related files in jre in Linux
      - if: ${{ runner.os == 'Linux' }}
        name: Delete File on Linux
        run: |
          cd chat2db-client/static/jre/
          ls -la
          rm -rf legal
          ls -la

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@main
        with:
          node-version: ""16""
          cache: ""yarn""
          cache-dependency-path: chat2db-client/yarn.lock

      # Install Java
      - name: Install Java and Maven
        uses: actions/setup-java@main
        with:
          java-version: ""17""
          distribution: ""temurin""
          cache: ""maven""

      # Packaging web front-end resources
      - name: Build FE Static
        run: |
          cd chat2db-client
          yarn
          yarn run build:web:prod --app_version=99.0.${{ github.run_id }} --app_port=10822
          cp -r dist ../chat2db-server/chat2db-server-start/src/main/resources/static/front
          cp -r dist/index.html ../chat2db-server/chat2db-server-start/src/main/resources/thymeleaf/
          cd src/main
          yarn
          yarn run build

      # Package backend project & send to frontend
      - name: Build BE Static
        run: |
          mvn clean package -B '-Dmaven.test.skip=true' -f chat2db-server/pom.xml
          mkdir -p chat2db-client/versions/99.0.${{ github.run_id }}/static
          echo -n 99.0.${{ github.run_id }} > chat2db-client/version
          cp -r chat2db-client/version chat2db-client/versions/
          cp chat2db-server/chat2db-server-start/target/chat2db-server-start.jar chat2db-client/versions/99.0.${{ github.run_id }}/static/

      # Packaging desktop front-end resources
      - name: Prepare Build Electron
        run: |
          cd chat2db-client
          yarn run build:web:desktop --app_version=99.0.${{ github.run_id }} --app_port=10822
          cp -r dist ./versions/99.0.${{ github.run_id }}/
          rm -r dist

      # Packing Electron
      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        with:
          package_root: ""chat2db-client/""
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}
          skip_build: true
          args: >
            -c.appId=com.chat2db.test
            -c.productName=Chat2DB-Test
            -c.win.publisherName=Chat2DB-Test
            -c.nsis.shortcutName=Chat2DB-Test
            -c.extraMetadata.version=99.0.${{ github.run_id }}-Test
            ${{ matrix.build_arg}}

      # Notar"
ag2s20150909;TTS;ag2s20150909/TTS;https://github.com/ag2s20150909/TTS;https://api.github.com/repos/ag2s20150909/TTS;master;09/05/2021 09:38;22/04/2024 09:25;TRUE;"name: Build Release

on:
  push:
    branches:
      - master
    paths:
      - 'CHANGELOG.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Remove old apk
        run: |
          rm -rf ./release/*

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build With Gradle
        run: |
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all
      - name: Get VerName
        run: |
          echo ""ver_name=$(grep 'versionName' release/output-metadata.json | cut -d\"" -f4)"" >> $GITHUB_ENV
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TTS_${{ env.ver_name }}
          path: ${{ github.workspace }}/release/*
      - name: Release
        uses: softprops/action-gh-release@d4e8205d7e959a9107da6396278b2f1f07af0f9b
        with:
          name: TTS_${{ env.ver_name }}
          tag_name: ${{ env.ver_name }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: false
          prerelease: false
          files: ${{ github.workspace }}/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Git Push to release
        run: |
          cd ./release
          git init
          git checkout -b release
          git config --global user.name ""github-actions[bot]""
          git config --global user.email ""41898282+github-actions[bot]@users.noreply.github.com""
          git remote add origin ""https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}""
          git add *.apk
          git add *.json
          git commit -m ""${{ env.ver_name }}""
          git push -f -u origin release

---
name: Build Test

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Remove old apk
        run: |
          rm -rf ./release/*

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build With Gradle
        run: |
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all
      - name: Get VerName
        run: |
          echo ""ver_name=$(grep 'versionName' release/output-metadata.json | cut -d\"" -f4)"" >> $GITHUB_ENV
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: TTS_${{ env.ver_name }}
          path: ${{ github.workspace }}/release/*

---
"
vran-dev;databasir;vran-dev/databasir;https://github.com/vran-dev/databasir;https://api.github.com/repos/vran-dev/databasir;master;26/12/2021 16:23;22/04/2024 09:44;TRUE;"name: check
on:
  pull_request:
    paths:
      - 'api/**'
      - 'common/**'
      - 'core/**'
      - 'dao/**'
      - 'meta/**'
      - 'gradle/**'
      - 'config/**'

jobs:
  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: download checkstyle
        run: curl -o checkstyle.jar -L https://github.com/checkstyle/checkstyle/releases/download/checkstyle-9.3/checkstyle-9.3-all.jar
      - name: checkstyle
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: java -jar checkstyle.jar -c config/checkstyle/checkstyle.xml -f xml . | reviewdog -f=checkstyle -name=""Checkstyle Report"" -reporter=""github-check"" -fail-on-error=true -level=""error"" -filter-mode=nofilter

  mysql-integration-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ""123456""
          MYSQL_DATABASE: databasir
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Gradle Permission Grant
        run: chmod +x ./gradlew

      - name: Gradle Test
        run: ./gradlew api:check core:check

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'

---
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: docker latest

on:
  push:
    branches:
      - 'master'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Gradle Permission Grant
        run: chmod +x ./gradlew

      - name: Gradle Build
        run: ./gradlew api:build -x checkstyleMain -x checkstyleTest

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Image Release
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./local.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/databasir:latest
---
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: jar latest

on:
  push:
    branches:
      - 'master'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Gradle Permission Grant
        run: chmod +x ./gradlew
      - name: Publish package
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: api:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '40 0 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: 'release tag version'

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Gradle Permission Grant
        run: chmod +x ./gradlew

      - name: Gradle Build
        run: ./gradlew api:build -x checkstyleMain -x checkstyleTest

      - name: Application Jar Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: api/build/libs/databasir.jar
          draft: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Image Release
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./local.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/databasir:${{ github.event.inputs.tag }}
---
"
snakerflow-starter;snakerflow-spring-boot-starter;snakerflow-starter/snakerflow-spring-boot-starter;https://github.com/snakerflow-starter/snakerflow-spring-boot-starter;https://api.github.com/repos/snakerflow-starter/snakerflow-spring-boot-starter;master;29/11/2019 14:03;21/04/2024 06:09;FALSE;
Grasscutters;Grasscutter;Grasscutters/Grasscutter;https://github.com/Grasscutters/Grasscutter;https://api.github.com/repos/Grasscutters/Grasscutter;development;17/04/2022 14:43;22/04/2024 11:54;TRUE;"name: ""Build""
on:
  workflow_dispatch: ~
  push:
    paths:
      - ""**.java""
    branches:
      - ""stable""
      - ""development""
      - ""unstable""
  pull_request:
    paths:
      - ""**.java""
    types:
      - opened
      - synchronize
      - reopened
jobs:
  Build-Server-Jar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
      - name: Cache gradle files
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./.gradle/loom-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle', 'gradle.properties', '**/*.accesswidener') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Download Handbook
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/handbook.html
          target: src/main/resources/html/
      - name: Run Gradle
        run: ./gradlew -PskipHandbook=1 && ./gradlew jar -PskipHandbook=1
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: Grasscutter
          path: grasscutter-*.jar

---
name: Build Docker Container
on:
  push:
  release:
    types: [published]
  workflow_dispatch: ~

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Generate Docker Meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5.2.0
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

---
name: ""Lint & Format Code""

on:
  workflow_dispatch: ~
  push:
    paths:
      - ""src/main/**.java""
      - ""**.json""
    branches:
      - ""development""
      - ""unstable""

jobs:
  Format-Code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Extract branch name
        shell: bash
        run: echo ""branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
      - name: Cache gradle files
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ./.gradle/loom-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle', 'gradle.properties', '**/*.accesswidener') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Format Code
        run: ./gradlew -PskipHandbook=1 && ./gradlew spotlessApply -PskipHandbook=1

      - run: git config --global user.name ""github-actions""
      - run: git config --global user.email ""41898282+github-actions[bot]@users.noreply.github.com""
      - run: git stash
      - run: git checkout ${{ steps.extract_branch.outputs.branch }} && git pull
      - run: git stash pop || true

      - name: Commit Code Changes
        run: git add -u && git commit -m 'Format code [skip actions]' || true
      - name: Push Code Changes
        run: git push --set-upstream --force origin ${{ steps.extract_branch.outputs.branch }}

  Update-Languages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Extract branch name
        shell: bash
        run: echo ""branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Update Languages
        run: python scripts/manage_languages.py -u

      - run: git config --global user.name ""github-actions""
      - run: git config --global user.email ""41898282+github-actions[bot]@users.noreply.github.com""
      - run: git stash
      - run: git checkout ${{ steps.extract_branch.outputs.branch }} && git pull
      - run: git stash pop || true

      - name: Commit any language changes
        run: git add -u && git commit -m 'Update languages [skip actions]' || true
      - name: Push language changes
        run: git push --set-upstream --force origin ${{ steps.extract_branch.outputs.branch }}

---
name: ""Handbook""

on:
  workflow_dispatch: ~
  push:
    paths:
      - ""src/handbook/**.tsx""
    branches:
      - ""development""
      - ""unstable""
  pull_request:
    paths:
      - ""src/handbook/**.tsx""
    types:
      - opened
      - synchronize
      - reopened

jobs:
  Lint-Code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Extract branch name
        shell: bash
        run: echo ""branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        working-directory: src/handbook
        run: npm install --force
      - name: Run linter
        working-directory: src/handbook
        run: npm run lint

      - run: git config --global user.name ""github-actions""
      - run: git config --global user.email ""41898282+github-actions[bot]@users.noreply.github.com""
      - run: git stash
      - run: git checkout ${{ steps.extract_branch.outputs.branch }} && git pull
      - run: git stash pop || true
      - name: Commit changes
        if: ${{ github.event_name == 'push' }}
        run: git add -u && git commit -m ""Lint Code [skip actions]"" || true
      - name: Push changes
        if: ${{ github.event_name == 'push' }}
        run: git push --set-upstream --force origin ${{ steps.extract_branch.outputs.branch }}

  Build-Handbook:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        working-directory: src/handbook
        run: npm install --force

      - name: Download Avatar Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/avatars.csv
          target: src/handbook/data/
      - name: Download Command Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/commands.json
          target: src/handbook/data/
      - name: Download Entity Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/entities.csv
          target: src/handbook/data/
      - name: Download Item Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/items.csv
          target: src/handbook/data/
      - name: Download Scene Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/scenes.csv
          target: src/handbook/data/
      - name: Download Quest Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/quests.csv
          target: src/handbook/data/
      - name: Download Main Quest Data
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://api.grasscutter.io/static/mainquests.csv
          target: src/handbook/data/

      - name: Build handbook
        working-directory: src/handbook
        run: npm run build
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: Handbook
          path: src/handbook/dist/*.html

---
name: ""Language Lint""
on:
  workflow_dispatch: ~
  push:
    paths:
      - "".github/workflows/**""
      - ""src/main/**.java""
      - ""**.json""
      - ""scripts/manage_languages.py""
    branches:
      - ""stable""
      - ""development""
      - ""unstable""
  pull_request:
    paths:
      - "".github/workflows/**""
      - ""src/main/**.java""
      - ""**.json""
      - ""scripts/manage_languages.py""
    types:
      - opened
      - synchronize
      - reopened
jobs:
  Lint-Language-Keys:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
      - run: python3 scripts/manage_languages.py -l

---
name: Protect write-access files from being PR'd

on:
  pull_request_target:
    types:
      - opened
    branches:
      - development
    paths:
      - '.github/'
      - '.editorconfig'
      - 'CODE_OF_CONDUCT.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: superbrothers/close-pull-request@v3
        with:
          comment: ""This PR has been closed for modifying protected files. See `CONTRIBUTING.md` for more information.""

---
"
linhaojun857;aurora;linhaojun857/aurora;https://github.com/linhaojun857/aurora;https://api.github.com/repos/linhaojun857/aurora;master;19/08/2022 15:39;22/04/2024 11:32;TRUE;"name: Aurora CI

on:
  push:
    branches: [""master""]
  workflow_dispatch:

jobs:
  aurora-springboot-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ""8""
          distribution: ""temurin""
          cache: ""maven""

      - name: Build with Maven
        run: |
          cd aurora-springboot
          mvn -B package --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: aurora-springboot
          tags: ${{secrets.DOCKER_USERNAME}}/aurora-springboot:latest
          file: aurora-springboot/Dockerfile

      - name: Update aurora-springboot container
        run:
          sshpass -p ${{secrets.REMOTE_HOST_B_PASSWORD}} ssh -o StrictHostKeyChecking=no
          root@${{secrets.REMOTE_HOST_B_IP}} ""cd /usr/local/aurora-springboot && sh aurora-springboot.sh""

  aurora-vue-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ""16""
          cache: ""npm""
          cache-dependency-path: ""aurora-vue/aurora-*/package-lock.json""

      - name: Install aurora-blog dependencies
        run: |
          cd aurora-vue/aurora-blog
          npm install

      - name: Build aurora-blog
        run: |
          cd aurora-vue/aurora-blog
          npm run build

      - name: Install aurora-admin dependencies
        run: |
          cd aurora-vue/aurora-admin
          npm install

      - name: Build aurora-admin
        run: |
          cd aurora-vue/aurora-admin
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: aurora-vue
          tags: ${{ secrets.DOCKER_USERNAME }}/aurora-vue:latest
          file: aurora-vue/Dockerfile

      - name: HostB transfer aurora-vue to tencent-registery
        run:
          sshpass -p ${{secrets.REMOTE_HOST_B_PASSWORD}} ssh -o StrictHostKeyChecking=no
          root@${{secrets.REMOTE_HOST_B_IP}} ""cd /usr/local/aurora-vue && sh aurora-vue.sh""

      - name: Update aurora-vue container
        run:
          sshpass -p ${{secrets.REMOTE_HOST_A_PASSWORD}} ssh -o StrictHostKeyChecking=no
          root@${{secrets.REMOTE_HOST_A_IP}} ""cd /usr/local/aurora-vue && sh aurora-vue.sh""

---
"
MoRan1607;BigDataGuide;MoRan1607/BigDataGuide;https://github.com/MoRan1607/BigDataGuide;https://api.github.com/repos/MoRan1607/BigDataGuide;master;30/11/2019 13:02;20/04/2024 07:27;FALSE;
bytedance;bitsail;bytedance/bitsail;https://github.com/bytedance/bitsail;https://api.github.com/repos/bytedance/bitsail;master;29/09/2022 10:39;17/04/2024 10:46;TRUE;"name: CICD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the ""master"" branch
  push:
    branches: [ ""master"" ]
    paths-ignore:
      - 'website/**'
      - '**.md'
      - 'LICENSE'
      - 'NOTICE'
      - 'package.json'
      - 'yarn.lock'
      - 'tools/release'

  pull_request:
    branches: [ ""master"" ]
    paths-ignore:
      - 'website/**'
      - '**.md'
      - 'LICENSE'
      - 'NOTICE'
      - 'package.json'
      - 'yarn.lock'
      - 'tools/release'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called ""license-rc""
  license-rc:
    name: License header
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Check License Header
        uses: apache/skywalking-eyes/header@main

  # This workflow compile the project on Windows without running any test
  compile:
    name: Compile
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]
        engine: [ flink-1.11 ]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: git config --global core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64
          cache: 'maven'
      - name: Compile
        run:
          mvn clean verify -pl bitsail-dist -am -DskipUT=true -DskipITCase=true -P""${{ matrix.engine }}""

  # This workflow contains a single job called ""unit-test""
  unit-test:
    name: Unit Test
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        engine: [ flink-1.11 ]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: git config --global core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64
          cache: 'maven'

      - name: Maven Verify Unit Test
        run:
          mvn clean verify -pl bitsail-dist -am -DskipUT=false -DskipITCase=true -P${{ matrix.engine }}

    # This workflow contains a single job called ""integration-tests""
  integration-tests:
    name: Integration Test
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        engine: [ flink-1.11 ]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: git config --global core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64
          cache: 'maven'
      - name: Maven Verify Integration Test
        run: |
          all_integration_test_modules=`python tools/test/list-test-modules.py integration`
          mvn clean verify -pl $all_integration_test_modules -DskipUT=true -DskipITCase=false -DskipE2E=true -D""checkstyle.skip""=true -am -P${{ matrix.engine }}

    # This workflow contains a single job called ""integration-tests""
  end-to-end-tests:
    name: End-to-End Test
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        engine: [ flink-1.11 ]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - run: git config --global core.longpaths true
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64
          cache: 'maven'

      - name: Maven Verify End-to-End Test
        run: |
          all_e2e_test_modules=`python tools/test/list-test-modules.py e2e`
          mvn clean verify -pl $all_e2e_test_modules -DskipUT=true -DskipITCase=true -DskipE2E=false -D""checkstyle.skip""=true -am -P${{ matrix.engine }}

---

name: 部署文档

on:
  push:
    branches:
      - master
    paths:
      - 'website/**'
      - 'package.json'
      - 'yarn.lock'

jobs:
  deploy-gh-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn

      - name: 安装依赖
        run: yarn install --frozen-lockfile

      - name: 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |-
          yarn run docs:build
          > website/.vuepress/dist/.nojekyll

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: website/.vuepress/dist

---
"
PlexPt;chatgpt-java;PlexPt/chatgpt-java;https://github.com/PlexPt/chatgpt-java;https://api.github.com/repos/PlexPt/chatgpt-java;main;07/12/2022 05:55;22/04/2024 09:39;TRUE;"name: Maven Central Repo Deployment
# 触发脚本的事件  这里为发布release之后触发
on:
  release:
    types: [released]
# 定义一个发行任务
jobs:
  publish:
    # 任务运行的环境
    runs-on: ubuntu-latest
    # 任务的步骤
    steps:
      # 1. 声明 checkout 仓库代码到工作区
      - name: Checkout Git Repo
        uses: actions/checkout@v2
      # 2. 安装Java 环境 这里会用到的参数就是 Git Action secrets中配置的，
      #    取值要在key前面加  secrets.
      - name: Set up Maven Central Repo
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: sonatype-nexus-staging
          server-username: ${{ secrets.OSSRH_USER }}
          server-password: ${{ secrets.OSSRH_PASSWORD }}
          gpg-passphrase:  ${{ secrets.GPG_PASSWORD }}
      # 3. 发布到Maven中央仓库
      - name: Publish to Maven Central Repo
        # 这里用到了其他人写的action脚本，详细可以去看他的文档。
        uses: samuelmeuli/action-maven-publish@v1
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET }}
          gpg_passphrase: ${{ secrets.GPG_PASSWORD }}
          nexus_username: ${{ secrets.OSSRH_USER }}
          nexus_password: ${{ secrets.OSSRH_PASSWORD }}

---
"
jeecgboot;JimuReport;jeecgboot/JimuReport;https://github.com/jeecgboot/JimuReport;https://api.github.com/repos/jeecgboot/JimuReport;master;05/12/2019 13:25;22/04/2024 13:40;FALSE;
Jzvd;JZVideo;Jzvd/JZVideo;https://github.com/Jzvd/JZVideo;https://api.github.com/repos/Jzvd/JZVideo;develop;05/12/2019 16:59;19/04/2024 10:11;FALSE;
mercyblitz;geekbang-lessons;mercyblitz/geekbang-lessons;https://github.com/mercyblitz/geekbang-lessons;https://api.github.com/repos/mercyblitz/geekbang-lessons;master;06/12/2019 12:29;08/04/2024 16:25;FALSE;
qiguliuxing;dts-shop;qiguliuxing/dts-shop;https://github.com/qiguliuxing/dts-shop;https://api.github.com/repos/qiguliuxing/dts-shop;master;08/12/2019 14:15;22/04/2024 07:46;FALSE;
PlayEdu;PlayEdu;PlayEdu/PlayEdu;https://github.com/PlayEdu/PlayEdu;https://api.github.com/repos/PlayEdu/PlayEdu;main;23/02/2023 02:34;22/04/2024 11:56;TRUE;"name: EstablishDockerImage

on:
  push:
    branches:
      - main
      - dev
      - 'feat/**'
    tags:
      - '*'

env:
  IMAGE_FQDN: registry.cn-hangzhou.aliyuncs.com/playedu/api
  IMAGE_TAG: ''

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALI_REGISTRY_EMAIL }}
          password: ${{ secrets.ALI_REGISTRY_PASS }}
      - name: Build
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_FQDN }}:${{ env.IMAGE_TAG }}
        env:
          IMAGE_TAG: ${{ startsWith(github.ref, 'refs/heads/main') && 'latest' || startsWith(github.ref, 'refs/heads/dev') && 'dev' || github.ref_name }}
        if: startsWith(github.ref, 'refs/heads/')
      - name: Build with Tag
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_FQDN }}:${{ github.ref_name }}
        if: startsWith(github.ref, 'refs/tags/')

---
"
fenixsoft;jvm_book;fenixsoft/jvm_book;https://github.com/fenixsoft/jvm_book;https://api.github.com/repos/fenixsoft/jvm_book;master;10/12/2019 10:13;19/04/2024 11:30;FALSE;
Hicores;QTool;Hicores/QTool;https://github.com/Hicores/QTool;https://api.github.com/repos/Hicores/QTool;main;13/02/2022 13:11;22/04/2024 02:46;TRUE;"name: Test Build CI

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: |
          mkdir tempDir
          cd tempDir
          git clone https://github.com/Hicores/QTool
          cd QTool
          export CommitNumber=`git rev-list --count main`
          echo $CommitNumber
          cd ../..
          echo ${{ secrets.SIGN_KEY }} | base64 -d > key.jks
          git submodule update --init --recursive
          echo $CommitNumber
          ./gradlew :QTool:assembleRelease
        env:
          KEYSTORE_PATH: ""../key.jks""
          KEYSTORE_PASSWORD: ${{ secrets.SIGN_PASS }}
          KEY_ALIAS: ${{ secrets.SIGN_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ALIA_PASS }}
---
"
TDuckCloud;tduck-platform;TDuckCloud/tduck-platform;https://github.com/TDuckCloud/tduck-platform;https://api.github.com/repos/TDuckCloud/tduck-platform;master;11/12/2019 11:13;17/04/2024 09:34;FALSE;
HamaWhiteGG;langchain-java;HamaWhiteGG/langchain-java;https://github.com/HamaWhiteGG/langchain-java;https://api.github.com/repos/HamaWhiteGG/langchain-java;main;24/05/2023 17:22;22/04/2024 07:46;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven Build and Test

on:
  push:
    branches: [ ""dev"" ]
  pull_request:
    branches: [ ""dev"", ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B test --file pom.xml

---
name: Maven Generate Javadoc

on:
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Import GPG key
        run: |
          echo ""${{ secrets.GPG_SECRET }}"" | gpg --batch --yes --import
        env:
          GPG_TTY: $(tty)

      - name: Install with Maven
        run: mvn clean install -DskipTests -Dgpg.passphrase=${{ secrets.GPG_PASSWORD }}

      - name: Build and generate Javadoc
        run: mvn javadoc:javadoc

      - name: Deploy to gh-pages
        run: |
          mkdir -p /tmp/javadoc
          # create /tmp/javadoc/index.html
          echo ""<html><head><style>body {font-family: Arial, sans-serif;}h1 {color: #373E4D;}ul {list-style-type: none;}li {margin: 5px 0px;}a {color: #9C6ADE;text-decoration: none;}a:hover {text-decoration: underline;}</style></head><body><h1>API Documentation</h1><ul>"" > /tmp/javadoc/index.html
          echo ""Listing all directories containing target/site/apidocs""
          for dir in $(find . -type d -path '*target/site/apidocs'); do
            echo ""Processing $dir""
            parent_dir=$(echo ${dir%/target/site/apidocs} | cut -c 3-)
            echo ""Processing $parent_dir""
            # Create corresponding directory
            mkdir -p ""/tmp/javadoc/${parent_dir}""
            # Copy Javadoc to corresponding directory
            cp -R ""$dir/""* ""/tmp/javadoc/${parent_dir}""
            echo ""<li><a href='${parent_dir}/index.html'>${parent_dir}</a></li>"" >> /tmp/javadoc/index.html
          done
          echo ""</ul></body></html>"" >> /tmp/javadoc/index.html
          git config --global user.name ""HamaWhiteGG""
          git config --global user.email ""baisongxx@gmail.com""
          git checkout --orphan gh-pages
          git reset --hard
          git clean -df
          cp -R /tmp/javadoc/* .
          git add .
          git commit -m ""Update Javadoc"" || true 
          
          cat << EOF > README.md
          # Langchain-Java
      
          Welcome to the Langchain-Java project!
      
          ## API Documentation
      
          Our comprehensive API documentation is available at the following link:
          
          [https://hamawhitegg.github.io/langchain-java](https://hamawhitegg.github.io/langchain-java)
      
          This includes detailed information about the various modules, functionalities, and more within our project.

          Enjoy exploring Langchain-Java!
          EOF
          git add README.md
          git commit -m ""Add README""

          # Make sure ""Read and write permissions"" are enabled in Settings -> Actions -> General -> Workflow permissions
          git push origin gh-pages --force
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
---
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Publish to Sonatype

on:
  release:
    types: [released]

jobs:
  publish:
  
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Update version
      run: |
        VERSION=$(echo ""${{ github.ref }}"" | sed -e 's/refs\/tags\/v//')
        mvn versions:set -DnewVersion=""${VERSION}""
        
    - name: Publish to Sonatype
      uses: samuelmeuli/action-maven-publish@v1
      with:
        gpg_private_key: ${{ secrets.GPG_SECRET }}
        gpg_passphrase: ${{ secrets.GPG_PASSWORD }}
        nexus_username: ${{ secrets.OSSRH_USERNAME }}
        nexus_password: ${{ secrets.OSSRH_PASSWORD }}
        server_id: ossrh

---
"
aiceking;AppStartFaster;aiceking/AppStartFaster;https://github.com/aiceking/AppStartFaster;https://api.github.com/repos/aiceking/AppStartFaster;master;12/12/2019 15:07;19/04/2024 02:54;FALSE;
Tornaco;Thanox;Tornaco/Thanox;https://github.com/Tornaco/Thanox;https://api.github.com/repos/Tornaco/Thanox;master;14/12/2019 12:54;22/04/2024 10:49;FALSE;
AutohomeCorp;frostmourne;AutohomeCorp/frostmourne;https://github.com/AutohomeCorp/frostmourne;https://api.github.com/repos/AutohomeCorp/frostmourne;master;16/12/2019 04:22;22/04/2024 09:41;FALSE;
AutoMQ;automq;AutoMQ/automq;https://github.com/AutoMQ/automq;https://api.github.com/repos/AutoMQ/automq;main;17/08/2023 09:50;22/04/2024 07:45;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  push:
    branches: [ ""main"" ]

jobs:
  build-automq:
    uses: ./.github/workflows/build_automq.yml
  build-result:
    runs-on: ubuntu-latest
    needs: [ build-automq ]
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Collect build result
        run: |
          if echo build-automq-${{ needs.build-automq.result }} | grep -E 'cancelled|failure' -o > null
          then
            echo ""There are failed/cancelled builds""
            exit 1
          else
            echo ""All builds are successful/skipped""
            exit 0
          fi

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Kafka on S3 - CI

on:
  workflow_call:

permissions:
  contents: read

jobs:
  checkstyle:
    name: ""Checkstyle""
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        jdk: [ 17 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: ""zulu""
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.9.0
      - name: Checkstyle
        run: ./gradlew --build-cache rat checkstyleMain checkstyleTest
  spotbugs:
    name: ""Spotbugs""
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        jdk: [ 17 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: ""zulu""
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.9.0
      - name: Spotbugs
        run: ./gradlew --build-cache spotbugsMain spotbugsTest
  test:
    name: ""Unit Test""
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        jdk: [ 17 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: ""zulu""
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.9.0
      - name: Unit Test
        run: ./gradlew --build-cache metadata:S3UnitTest core:S3UnitTest s3stream:test

---
name: Docker Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'

jobs:
  docker-release:
    name: Docker Image Release
    strategy:
      matrix:
        platform: [ ""ubuntu-22.04"" ]
        jdk: [""17""]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: ""zulu""
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.12.0
      - name: Get project version
        id: get_project_version
        run: |
          project_version=$(./gradlew properties | grep ""version:"" | awk '{print $2}')
          echo ""PROJECT_VERSION=${project_version}"" >> $GITHUB_OUTPUT

      - name: Build TarGz
        run: |
          ./gradlew -Pprefix=automq-${{ github.ref_name }}_ --build-cache --refresh-dependencies clean releaseTarGz

      # docker image release
      - name: Cp TarGz to Docker Path
        run: |
          cp ./core/build/distributions/automq-${{ github.ref_name }}_kafka-${{ steps.get_project_version.outputs.PROJECT_VERSION }}.tgz ./docker/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kafka:${{ github.ref_name }}
          platforms: linux/amd64,linux/arm64

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Docker Build Test

on:
  workflow_dispatch:
    inputs:
      image_type:
        type: choice
        description: Docker image type to build and test
        options: 
          - ""jvm""
      kafka_url:
        description: Kafka url to be used to build the docker image
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docker/requirements.txt
    - name: Build image and run tests
      working-directory: ./docker
      run: |
        python docker_build_test.py kafka/test -tag=test -type=${{ github.event.inputs.image_type }} -u=${{ github.event.inputs.kafka_url }}
    - name: Run CVE scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'kafka/test:test'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        output: scan_report_${{ github.event.inputs.image_type }}.txt
        exit-code: '1'
    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: report_${{ github.event.inputs.image_type }}.html
        path: docker/test/report_${{ github.event.inputs.image_type }}.html
    - name: Upload CVE scan report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: scan_report_${{ github.event.inputs.image_type }}.txt
        path: scan_report_${{ github.event.inputs.image_type }}.txt

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Promote Release Candidate Docker Image

on:
  workflow_dispatch:
    inputs:
      rc_docker_image:
        description: RC docker image that needs to be promoted (Example:- apache/kafka:3.6.0-rc0)
        required: true
      promoted_docker_image:
        description: Docker image name of the promoted image (Example:- apache/kafka:3.6.0)
        required: true

jobs:
  promote:
    if: github.repository == 'apache/kafka'
    runs-on: ubuntu-latest
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Copy RC Image to promoted image
      run: |
        docker buildx imagetools create --tag ${{ github.event.inputs.promoted_docker_image }} ${{ github.event.inputs.rc_docker_image }}

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Push Release Candidate Docker Image

on:
  workflow_dispatch:
    inputs:
      image_type:
        type: choice
        description: Docker image type to be built and pushed
        options: 
          - ""jvm""
      rc_docker_image:
        description: RC docker image that needs to be built and pushed to Dockerhub (Example:- apache/kafka:3.6.0-rc0)
        required: true
      kafka_url:
        description: Kafka url to be used to build the docker image
        required: true

jobs:
  release:
    if: github.repository == 'apache/kafka'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docker/requirements.txt
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Release the RC docker image
      run: |
        python docker/docker_release.py ${{ github.event.inputs.rc_docker_image }} --kafka-url ${{ github.event.inputs.kafka_url }} --image-type ${{ github.event.inputs.image_type }}

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Docker Image CVE Scanner
on:
  schedule:
    # This job will run at 3:30 UTC daily
    - cron: '30 3 * * *'
  workflow_dispatch:
jobs:
  scan_jvm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This is an array of supported tags. Make sure this array only contains the supported tags
        supported_image_tag: ['latest', '3.7.0']
    steps:
      - name: Run CVE scan
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: apache/kafka:${{ matrix.supported_image_tag }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          output: scan_report_jvm_${{ matrix.supported_image_tag }}.txt
          exit-code: '1'
      - name: Upload CVE scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: scan_report_jvm_${{ matrix.supported_image_tag }}.txt
          path: scan_report_jvm_${{ matrix.supported_image_tag }}.txt

---
name: Run E2E tests
on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      suite-id:
        required: true
        type: string
      test-yaml:
        required: false
        type: string
      test-path:
        required: false
        type: string
      storage-path:
        required: true
        type: string

jobs:
  run_e2e:
    name: ""Run E2E tests""
    runs-on: ${{ inputs.runner }}
    env:
      TC_GENERAL_MIRROR_URL: ""mirrors.ustc.edu.cn""
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Clean last running results
        run: |
          rm -rf results
          rm -rf ""${{ inputs.storage-path }}/${{ inputs.suite-id }}""
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.12.0
      - name: Run E2E tests with yaml
        if: ${{ inputs.test-path == '' }}
        run: ./tests/docker/run_tests.sh
        env:
          ESK_TEST_YML: ${{ inputs.test-yaml }}
        shell: bash
      - name: Run E2E tests with path
        if: ${{ inputs.test-path != '' }}
        run: ./tests/docker/run_tests.sh
        env:
          TC_PATHS: ${{ inputs.test-path }}
        shell: bash
      - name: Move results
        run: |
          results_path=""$(pwd)/results/$(readlink results/latest | cut -d'/' -f5)""
          mv ""${results_path}"" ""${{ inputs.storage-path }}/${{ inputs.suite-id }}""
        if: ${{ always() }}
        shell: bash
      - name: Bring down docker containers
        run: ./tests/docker/ducker-ak down
        shell: bash
        if: ${{ always() }}
---
name: Github Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'

jobs:
  github-release:
    name: Github Release with tgz
    strategy:
      matrix:
        platform: [ ""ubuntu-22.04"" ]
        jdk: [""17""]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: ""zulu""
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.12.0

      - name: Build TarGz
        run: |
          ./gradlew -Pprefix=automq-${{ github.ref_name }}_ --build-cache --refresh-dependencies clean releaseTarGz
          mkdir -p core/build/distributions/latest
          for file in core/build/distributions/automq-*.tgz; do
              if [[ ! ""$file"" =~ site-docs ]]; then
                  echo ""Find latest tgz file: $file""
                  cp ""$file"" core/build/distributions/latest/automq-kafka-latest.tgz
                  break
              fi
          done

      - uses: jakejarvis/s3-sync-action@master
        name: s3-upload-latest
        if: ${{ github.repository_owner == 'AutoMQ' }}
        with:
          args: --follow-symlinks --delete
        env:
          AWS_S3_BUCKET:  automq-download-center
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_CN_PROD_AK }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_CN_PROD_SK }}
          AWS_REGION: 'cn-northwest-1'
          SOURCE_DIR: 'core/build/distributions/latest'
          DEST_DIR: 'automq-for-kafka/tgz/latest'

      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          generate_release_notes: true
          files: |
            ./core/build/distributions/automq-*.tgz

---
name: Nightly Extra E2E tests
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'

jobs:
  benchmarks_e2e:
    name: ""Run benchmarks E2E Tests""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""benchmarks""
      test-path: ""tests/kafkatest/benchmarks""
      storage-path: ""/data/github-actions/reports""
      runner: ""extra""
  connect_e2e:
    name: ""Run connect E2E Tests""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""connect""
      test-path: ""tests/kafkatest/tests/connect""
      storage-path: ""/data/github-actions/reports""
      runner: ""extra""
  streams_e2e:
    name: ""Run streams E2E Tests""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""streams""
      test-path: ""tests/kafkatest/tests/streams""
      storage-path: ""/data/github-actions/reports""
      runner: ""extra""
  e2e_summary:
    name: ""E2E Tests Summary""
    runs-on: [ self-hosted, extra ]
    if: ${{ always() && github.repository_owner == 'AutoMQ' }}
    needs: [ benchmarks_e2e, connect_e2e, streams_e2e ]
    steps:
      - name: Report results
        run: python3 tests/report_e2e_results.py
        env:
          WEB_HOOK_URL: ${{ secrets.E2E_REPORT_WEB_HOOK_URL }}
          SHOW_RESULTS_URL: ${{ secrets.E2E_REPORT_SHOW_RESULTS_URL2 }}
          STORAGE_PATH: ""/data/github-actions/reports""
          REPORT_TITLE_PREFIX: ""Extra""
---
name: Nightly Main E2E tests
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *'

jobs:
  main_e2e_1:
    name: ""Run Main E2E Tests 1""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""main1""
      test-yaml: ""tests/suites/main_kos_test_suite1.yml""
      storage-path: ""/data/github-actions/reports""
      runner: ""main""
  main_e2e_2:
    name: ""Run Main E2E Tests 2""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""main2""
      test-yaml: ""tests/suites/main_kos_test_suite2.yml""
      storage-path: ""/data/github-actions/reports""
      runner: ""main""
  main_e2e_3:
    name: ""Run Main E2E Tests 3""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""main3""
      test-yaml: ""tests/suites/main_kos_test_suite3.yml""
      storage-path: ""/data/github-actions/reports""
      runner: ""main""
  main_e2e_4:
    name: ""Run Main E2E Tests 4""
    uses: ./.github/workflows/e2e-run.yml
    if: ${{ github.repository_owner == 'AutoMQ' }}
    with:
      suite-id: ""main4""
      test-yaml: ""tests/suites/main_kos_test_suite4.yml""
      storage-path: ""/data/github-actions/reports""
      runner: ""main""
  e2e_summary:
    name: ""E2E Tests Summary""
    runs-on: [ self-hosted, main ]
    if: ${{ always() && github.repository_owner == 'AutoMQ' }}
    needs: [ main_e2e_1, main_e2e_2, main_e2e_3, main_e2e_4 ]
    steps:
      - name: Report results
        run: python3 tests/report_e2e_results.py
        env:
          WEB_HOOK_URL: ${{ secrets.E2E_REPORT_WEB_HOOK_URL }}
          SHOW_RESULTS_URL: ${{ secrets.E2E_REPORT_SHOW_RESULTS_URL }}
          STORAGE_PATH: ""/data/github-actions/reports""
          REPORT_TITLE_PREFIX: ""Main""
---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Handle stale PRs'
on:
  schedule:
    - cron: '30 3 * * *'    # Run at 3:30 UTC nightly
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry Run'
        required: true
        default: true
        type: boolean
      operationsPerRun:
        description: 'Max GitHub API operations'
        required: true
        default: 30
        type: number

permissions:
  issues: write
  pull-requests: write

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v8
        with:
          debug-only: ${{ inputs.dryRun || false }}
          operations-per-run: ${{ inputs.operationsPerRun || 100 }}
          days-before-stale: 90
          days-before-close: -1
          stale-pr-label: 'stale'
          stale-pr-message: >
            This PR is being marked as stale since it has not had any activity in 90 days. If you
            would like to keep this PR alive, please ask a committer for review. If the PR has 
            merge conflicts, please update it with the latest from trunk (or appropriate release branch)
            <p>
            If this PR is no longer valid or desired, please feel free to close it. If no activity
            occurs in the next 30 days, it will be automatically closed.
          

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Lint PR""

on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize

jobs:
  main:
    name: Validate PR title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
wzqjava;MVVMSmart;wzqjava/MVVMSmart;https://github.com/wzqjava/MVVMSmart;https://api.github.com/repos/wzqjava/MVVMSmart;MVVMSmart-kotlin;18/12/2019 09:05;04/04/2024 04:55;FALSE;
Rapsssito;react-native-background-actions;Rapsssito/react-native-background-actions;https://github.com/Rapsssito/react-native-background-actions;https://api.github.com/repos/Rapsssito/react-native-background-actions;master;14/01/2020 19:59;21/04/2024 15:07;TRUE;"name: Tests

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    name: CI
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: CI
      run: yarn ci

---
name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: CI
        run: yarn ci
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

---
"
WangJi92;arthas-idea-plugin;WangJi92/arthas-idea-plugin;https://github.com/WangJi92/arthas-idea-plugin;https://api.github.com/repos/WangJi92/arthas-idea-plugin;master;21/12/2019 15:20;12/04/2024 10:35;FALSE;
moxi624;LearningNotes;moxi624/LearningNotes;https://github.com/moxi624/LearningNotes;https://api.github.com/repos/moxi624/LearningNotes;master;22/12/2019 08:03;20/04/2024 16:54;FALSE;
KdotJPG;OpenSimplex2;KdotJPG/OpenSimplex2;https://github.com/KdotJPG/OpenSimplex2;https://api.github.com/repos/KdotJPG/OpenSimplex2;master;22/12/2019 16:54;22/04/2024 10:13;FALSE;
AndreyPavlenko;Fermata;AndreyPavlenko/Fermata;https://github.com/AndreyPavlenko/Fermata;https://api.github.com/repos/AndreyPavlenko/Fermata;master;23/12/2019 20:14;22/04/2024 09:36;FALSE;
guang19;framework-learning;guang19/framework-learning;https://github.com/guang19/framework-learning;https://api.github.com/repos/guang19/framework-learning;dev;24/12/2019 07:42;19/04/2024 03:52;FALSE;
rosehgal;TrashEmail;rosehgal/TrashEmail;https://github.com/rosehgal/TrashEmail;https://api.github.com/repos/rosehgal/TrashEmail;master;07/05/2020 11:01;17/04/2024 13:08;TRUE;"# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Publish package to GitHub Packages
on:
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Publish package
        run: mvn -B deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
jiayaoO3O;18-comic-finder;jiayaoO3O/18-comic-finder;https://github.com/jiayaoO3O/18-comic-finder;https://api.github.com/repos/jiayaoO3O/18-comic-finder;master;16/02/2021 07:38;22/04/2024 13:30;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
    paths:
      - 'src/main/resources/*.json'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: 签出代码
        uses: actions/checkout@v3.3.0
      - name: 初始化JDK
        uses: actions/setup-java@v3.5.1
        with:
          java-version: '19'
          distribution: 'temurin'
      - name: 开始打包
        run: |
          mvn -B clean package -Dmaven.test.skip=true --file pom.xml -T 4
      - name: 开始下载
        run: |
          cd ./target
          java -jar -Xms1g -Xmx7g ./*.jar
      - name: 开始上传
        uses: actions/upload-artifact@v3.1.2
        with:
          # Artifact name
          name: finder-result
          # A file, directory or wildcard pattern that describes what to upload
          path: /home/runner/work/finder
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: warn
          # Duration after which artifact will expire in days. 0 means using default retention.Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
          retention-days: 90

---
"
Han-YLun;SaaS_IHRM;Han-YLun/SaaS_IHRM;https://github.com/Han-YLun/SaaS_IHRM;https://api.github.com/repos/Han-YLun/SaaS_IHRM;master;29/12/2019 16:06;19/04/2024 17:24;FALSE;
tyron12233;CodeAssist;tyron12233/CodeAssist;https://github.com/tyron12233/CodeAssist;https://api.github.com/repos/tyron12233/CodeAssist;main;16/08/2021 13:30;22/04/2024 08:29;TRUE;"name: Android Tests CI

on:
  workflow_dispatch:
  push:
    branches: [ javac-17 ]
  pull_request:
    branches: [ javac-17 ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew test

---
name: Android CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build debug apk
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2
    
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build debug apk
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: assembleDebug
          distributions-cache-enabled: true
          dependencies-cache-enabled: true
          configuration-cache-enabled: true

      - name: Upload debug apk
        uses: actions/upload-artifact@v2
        with:
          name: apk-debug
          path: app/build/outputs/apk/debug

---
"
TencentFemas;femas;TencentFemas/femas;https://github.com/TencentFemas/femas;https://api.github.com/repos/TencentFemas/femas;develop;22/02/2022 07:17;31/03/2024 16:25;TRUE;"name: build & test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    name: build & test
    runs-on: ubuntu-latest
    services:
      etcd:
        image: gcr.io/etcd-development/etcd:v3.5.0
        ports:
          - 2379:2379
        env:
          ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
          ETCD_ADVERTISE_CLIENT_URLS: http://0.0.0.0:2379
      consul:
        image: consul:latest
        ports:
          - 8500:8500
      nacos:
        image: nacos/nacos-server:latest
        env:
          MODE: standalone
        ports:
          - ""8848:8848""
          - ""9848:9848""
      polaris:
        image: polarismesh/polaris-server-standalone:latest
        ports:
          - 8090:8090
          - 8091:8091
      eureka:
        image: huyuanxin/eureka-server:3.1.2
        ports:
          - 8761:8761
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up Java jdk
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          settings-path: ${{ github.workspace }}

      - name: test
        run: mvn test

      - name: build
        run: mvn -Dmaven.test.skip=true clean install -U
---
"
ouchuangxin;leave-sample;ouchuangxin/leave-sample;https://github.com/ouchuangxin/leave-sample;https://api.github.com/repos/ouchuangxin/leave-sample;master;31/12/2019 03:43;22/04/2024 07:56;FALSE;
Aizistral-Studios;No-Chat-Reports;Aizistral-Studios/No-Chat-Reports;https://github.com/Aizistral-Studios/No-Chat-Reports;https://api.github.com/repos/Aizistral-Studios/No-Chat-Reports;1.20-Unified;17/06/2022 14:43;19/04/2024 03:36;TRUE;"# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: Build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        java: [ 17 ]
        os: [ubuntu-22.04, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - name: Make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - name: Build the mod
        run: ./gradlew build
      - name: Upload build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # Only upload artifacts from one OS and required JDK.
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: |
            build/libs/
            forge/build/libs/
---
name: Gitlab Sync

on:
  - push
  - delete

jobs:
  sync:
    runs-on: ubuntu-22.04
    name: Git Repo Sync
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: wangchucheng/git-repo-sync@v0.1.0
      with:
        target-url: ${{ secrets.TARGET_URL }}
        target-username: ${{ secrets.TARGET_USERNAME }}
        target-token: ${{ secrets.TARGET_TOKEN }}

---
"
REAndroid;APKEditor;REAndroid/APKEditor;https://github.com/REAndroid/APKEditor;https://api.github.com/repos/REAndroid/APKEditor;master;09/12/2022 19:55;21/04/2024 17:55;TRUE;"name: Build Jar

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: fatJar
      - uses: actions/upload-artifact@v3
        with:
          name: APKEditor
          path: build/libs

---
"
LillteZheng;FlowHelper;LillteZheng/FlowHelper;https://github.com/LillteZheng/FlowHelper;https://api.github.com/repos/LillteZheng/FlowHelper;feature_3.0;02/01/2020 09:11;02/04/2024 19:45;FALSE;
niefy;wx-api;niefy/wx-api;https://github.com/niefy/wx-api;https://api.github.com/repos/niefy/wx-api;master;02/01/2020 10:09;21/04/2024 16:33;FALSE;
apache;incubator-fury;apache/incubator-fury;https://github.com/apache/incubator-fury;https://api.github.com/repos/apache/incubator-fury;main;28/04/2023 05:57;22/04/2024 07:16;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Fury CI

on:
  push:
    branches:
      - main
      - 'releases/**'
      - 'deploy/**'
      - 'test*'
    tags:
      - v*
  pull_request:
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.vscode/**'
      - '.gitignore'
      - 'licenses/**'
      - 'DISCLAIMER'
      - 'NOTICE'
    types: ['opened', 'reopened', 'synchronize']

jobs:
  java:
    name: Java CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: ""PATH""
    strategy:
      matrix:
        java-version: [""8"", ""11"", ""17"", ""21""]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Install python
        run: ./ci/run_ci.sh install_python
      - name: Install pyfury
        run: ./ci/run_ci.sh install_pyfury
      - name: Run CI with Maven
        run: ./ci/run_ci.sh java${{ matrix.java-version }}
  openj9:
    name: Openj9 Java CI
    runs-on: ubuntu-latest
    env:
      MY_VAR: ""PATH""
    strategy:
      matrix:
        # String in openj9 1.8 share byte array by offset, fury doesn't allow it.
        java-version: [""21""]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt-openj9'
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Install python
        run: ./ci/run_ci.sh install_python
      - name: Install pyfury
        run: ./ci/run_ci.sh install_pyfury
      - name: Run CI with Maven
        run: ./ci/run_ci.sh java${{ matrix.java-version }}
  graalvm:
    name: GraalVM CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
      - name: Build native image and run
        run: ./ci/run_ci.sh graalvm_test

  scala:
    name: Scala CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'temurin'
      - name: Install fury java
        run: cd java && mvn -T10 --no-transfer-progress clean install -DskipTests && cd -
      - name: Test
        run: |
          # Avoid sbt download jackson-databind error
          rm -rf /home/runner/.m2/repository/com/fasterxml/jackson/
          cd scala && sbt +test && cd -

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'temurin'
      - name: Run CI
        run: ./ci/run_ci.sh integration_tests

  javascript:
    name: JavaScript CI
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x, 20.x]
        os: [ubuntu-latest, macos-13, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Upgrade npm
        run: npm install -g npm@8
      # node-gyp needs to use python and relies on the distutils module.
      # The distutils module has been removed starting from python 3.12
      # (see https://docs.python.org/3.10/library/distutils.html). Some
      # OS (such as macos -latest) uses python3.12 by default, so python 3.8
      # is used here to avoid this problem.
      - name: Set up Python3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Run CI with NodeJS
        run: python ./ci/run_ci.py javascript

  rust:
    name: Rust CI
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-14] # macos-12: x86, macos-14: arm64
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - uses: dtolnay/rust-toolchain@nightly
      - name: Run Rust CI
        run: python ./ci/run_ci.py rust

  cpp:
    name: C++ CI
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-14] # macos-12: x86, macos-14: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Run C++ CI with Bazel
        run: python ./ci/run_ci.py cpp
  python:
    name: Python CI
    # Fix python 3.6 install issue, see
    # https://github.com/rwth-i6/returnn/commit/38ecab17d781c4b74db6a174c8097187380b4ddc
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7, 3.12]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Run Python CI
        run: ./ci/run_ci.sh python

  go:
    name: Golang CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.13', '1.18' ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Install python
        run: ./ci/run_ci.sh install_python
      - name: Install pyfury
        run: ./ci/run_ci.sh install_pyfury
      - name: Run Golang CI
        run: ./ci/run_ci.sh go

  lint:
    name: Code Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'oracle'
      - name: Check License Header
        uses: korandoru/hawkeye@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
      - name: Check code style
        run: ./ci/run_ci.sh format

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: ""Lint PR""

on:
  pull_request_target:
    types:
      - opened
      - edited
      - synchronize

permissions:
  pull-requests: read

jobs:
  main:
    name: Validate PR title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed (newline-delimited).
          # Default: https://github.com/commitizen/conventional-commit-types
          types: |
            fix
            feat
            build
            chore
            ci
            docs
            perf
            refactor
            revert
            style
            test
          # Configure which scopes are allowed (newline-delimited).
          # These are regex patterns auto-wrapped in `^ $`.
          scopes: |
            \S+
          # Configure that a scope must always be provided.
          requireScope: false
          # Configure which scopes are disallowed in PR titles (newline-delimited).
          # For instance by setting the value below, `chore(release): ...` (lowercase)
          # and `ci(e2e,release): ...` (unknown scope) will be rejected.
          # These are regex patterns auto-wrapped in `^ $`.
          # disallowScopes: |
          #   release
          #   [A-Z]+
          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          # subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          # subjectPatternError: |
          #   The subject ""{subject}"" found in the pull request title ""{title}""
          #   didn't match the configured pattern. Please ensure that the subject
          #   doesn't start with an uppercase character.
          # The GitHub base URL will be automatically set to the correct value from the GitHub context variable.
          # If you want to override this, you can do so here (not recommended).
          # githubBaseUrl: https://github.myorg.com/api/v3
          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            ignore-semantic-pull-request
          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          # headerPattern: '^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$'
          # headerPatternCorrespondence: type, scope, subject

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Publish Fury Java Snapshot

on:
  push:
    branches:
      - main
      - release-java-snapshot

jobs:
  publish-java:
    runs-on: ubuntu-latest
    if: github.repository == 'apache/incabator-fury'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'adopt'
          architecture: x64
          cache: maven
          server-id: apache.snapshots.https
          server-username: NEXUS_USERNAME
          server-password: NEXUS_PASSWORD
      - name: Publish Fury Java Snapshot
        run: cd java && mvn deploy -Dgpg.skip -DskipTests -Papache-release
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USER }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PW }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Publish Fury

on:
  push:
    tags:
      - 'v*'

jobs:
  release-python:
    name: Publish Fury Python to PyPI
    runs-on: ubuntu-20.04
    if: github.repository == 'apache/incubator-fury'
    environment:
      name: pypi
      url: https://pypi.org/project/pyfury
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, 3.10.12, 3.11, 3.12]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install bazel
        run: ./ci/run_ci.sh install_bazel
      - name: Update version in setup.py
        run: |
          echo ""GITHUB_REF: $GITHUB_REF"" 
          tag=$(echo $GITHUB_REF | cut -d / -f 3)
          echo ""tag: $tag""
          version=${tag:1}
          echo ""version $version""
          ci/deploy.sh bump_py_version $version
      - name: Build a binary wheel
        run: |
          ci/deploy.sh install_pyarrow
          pip install setuptools wheel Cython numpy pytest
          cd python
          pip list
          export PATH=~/bin:$PATH
          echo ""Build pyfury""
          python setup.py bdist_wheel --dist-dir=../dist
          ../ci/deploy.sh rename_linux_wheels $PWD/../dist
      - name: Publish wheel to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Sync Files

on:
  push:
    branches: 
      - main

jobs:
  sync:
    runs-on: ubuntu-latest    
    steps:    
      - uses: actions/checkout@v4
      - name: Sync files
        uses: BetaHuhn/repo-file-sync-action@v1
        with:
          GH_PAT: ${{ secrets.GH_PAT }}
          SKIP_PR: true 

---
"
88250;symphony;88250/symphony;https://github.com/88250/symphony;https://api.github.com/repos/88250/symphony;master;01/12/2019 11:34;22/04/2024 03:09;TRUE;"name: Build Test
on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          cache: 'maven'
      - name: Build with Maven
        run: |
          mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V -Pci -DskipAssembly

---
name: Docker Image CI
on: 
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Build the Docker image
      run: |
        docker login --username=${{ secrets.DOCKER_HUB_USER }} --password=${{ secrets.DOCKER_HUB_PWD }}
        docker build -t b3log/symphony:latest .
        docker push b3log/symphony

---
"
microsoft;gctoolkit;microsoft/gctoolkit;https://github.com/microsoft/gctoolkit;https://api.github.com/repos/microsoft/gctoolkit;main;21/07/2021 00:44;22/04/2024 10:34;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '32 17 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        java: [11, 17, 21]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #  uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      with:
        java-version: ${{ matrix.java }}
        distribution: 'microsoft'
        cache: 'maven'
        
    - name: Build with Maven
      run: ./mvnw -B verify -Dmaven.compiler.release=${{ matrix.java }} --file pom.xml 

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

---
name: GCToolKit Pre-release Notes

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, '[maven-release-plugin]') != true

    steps:
    - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

    - name: Set up JDK 11
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      java-version: 11
      distribution: 'microsoft'
      cache: 'maven'
        
    - name: Build with Maven
      run: ./mvnw -B verify --file pom.xml

    - name: Git-release
      run: |
        ./mvnw -B -pl :gctoolkit -Pjreleaser jreleaser:release
      env:
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
name: GCToolKit build with Maven

on:
  workflow_dispatch:
  schedule:
    - cron: 0 0 * * *
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'    
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17, 21]

    steps:
    - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      with:
        java-version: ${{ matrix.java }}
        distribution: 'microsoft'
        cache: 'maven'
        
    - name: Build with Maven
      run: ./mvnw -B verify -Dmaven.compiler.release=${{ matrix.java }} --file pom.xml 

---
name: Publish to Maven Central

on:
  workflow_dispatch:

jobs:
  publish:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          ref: main
          fetch-depth: 0

      - name: Cache Maven
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Setup Java JDK
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          java-version: '11'
          distribution: 'microsoft'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.GPG_PRIVATEKEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Configure Git user
        run: |
          git config user.email ""actions@github.com""
          git config user.name ""GitHub Actions""

      - name: Version
        id: version
        run: |
          release_version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          release_version=${release_version%-*}
          echo ::set-output name=version::${release_version}
          
      - name: Release
        run: |
          export GPG_TTY=$(tty)
          ./mvnw -Darguments=""-Drelease=true"" -B release:prepare release:perform -Drelease=true \
            -Drepository.url=https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_NAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Git-release
        run: |
          ./mvnw -B versions:set -DnewVersion=${{steps.version.outputs.version}}
          ./mvnw -B -pl :gctoolkit -Pjreleaser jreleaser:release
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
"
houbb;sensitive-word;houbb/sensitive-word;https://github.com/houbb/sensitive-word;https://api.github.com/repos/houbb/sensitive-word;master;07/01/2020 04:10;22/04/2024 11:22;FALSE;
projectdiscovery;nuclei-burp-plugin;projectdiscovery/nuclei-burp-plugin;https://github.com/projectdiscovery/nuclei-burp-plugin;https://api.github.com/repos/projectdiscovery/nuclei-burp-plugin;main;17/01/2022 11:31;22/04/2024 08:10;TRUE;"name: Java CI

on: [ push, workflow_dispatch ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v2
        with:
          name: nuclei-burp-plugin-SNAPSHOT-build
          path: target/nuclei-burp-plugin-1.1.3-SNAPSHOT-jar-with-dependencies.jar
---
"
Jarrettluo;all-docs;Jarrettluo/all-docs;https://github.com/Jarrettluo/all-docs;https://api.github.com/repos/Jarrettluo/all-docs;main;02/06/2022 17:12;22/04/2024 09:50;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish Docker
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: jarrettluo/all-docs
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PWD }}
        tags: latest

---
"
phodal;migration;phodal/migration;https://github.com/phodal/migration;https://api.github.com/repos/phodal/migration;master;08/01/2020 03:11;12/04/2024 11:31;FALSE;
react-native-cookies;cookies;react-native-cookies/cookies;https://github.com/react-native-cookies/cookies;https://api.github.com/repos/react-native-cookies/cookies;master;09/01/2020 23:51;19/04/2024 12:28;FALSE;
bytedance;ByteX;bytedance/ByteX;https://github.com/bytedance/ByteX;https://api.github.com/repos/bytedance/ByteX;master;10/01/2020 13:20;19/04/2024 11:01;FALSE;
yuanguangxin;LeetCode;yuanguangxin/LeetCode;https://github.com/yuanguangxin/LeetCode;https://api.github.com/repos/yuanguangxin/LeetCode;master;11/01/2020 02:02;22/04/2024 03:26;FALSE;
yinjihuan;kitty;yinjihuan/kitty;https://github.com/yinjihuan/kitty;https://api.github.com/repos/yinjihuan/kitty;master;11/01/2020 07:57;16/04/2024 15:34;FALSE;
CloudExplorer-Dev;CloudExplorer-Lite;CloudExplorer-Dev/CloudExplorer-Lite;https://github.com/CloudExplorer-Dev/CloudExplorer-Lite;https://api.github.com/repos/CloudExplorer-Dev/CloudExplorer-Lite;main;29/07/2022 04:29;22/04/2024 10:53;TRUE;"on: [push, pull_request, release]

name: pull request handler

jobs:
  generic_handler:
    name: Generic handler for CloudExplorer Lite Repos
    runs-on: ubuntu-latest
    steps:
      - name: Add labels
        uses: jumpserver/action-generic-handler@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

---
name: Issue Check Inactive

on:
  schedule:
    - cron: ""0 0 */15 * *""

jobs:
  issue-check-inactive:
    runs-on: ubuntu-latest
    steps:
      - name: check-inactive
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'check-inactive'
          inactive-label: 'Inactive'
          inactive-day: 30

---
name: Issue Close Require

on:
  schedule:
    - cron: ""0 0 * * *""

jobs:
  issue-close-require:
    runs-on: ubuntu-latest
    steps:
      - name: need reproduce
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'close-issues'
          labels: '状态:待用户反馈'
          inactive-day: 90
          body: |
            您超过 90 天未反馈信息，我们将关闭该 issue，如有需求您可以重新打开或者提交新的 issue。
      

---
on:
  issue_comment:
    types: [created]

name: Add issues workflow labels

jobs:
  add-label-if-is-author:
    runs-on: ubuntu-latest
    if: (github.event.issue.user.id == github.event.comment.user.id) && !github.event.issue.pull_request && (github.event.issue.state == 'open')
    steps:
      - name: Add require handle label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'add-labels'
          labels: '状态:待处理'

      - name: Remove require reply label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'remove-labels'
          labels: '状态:待用户反馈'

  add-label-if-not-author:
    runs-on: ubuntu-latest
    if: (github.event.issue.user.id != github.event.comment.user.id) && !github.event.issue.pull_request && (github.event.issue.state == 'open')
    steps:
      - name: Add require replay label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'add-labels'
          labels: '状态:待用户反馈'

      - name: Remove require handle label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'remove-labels'
          labels: '状态:待处理'

---
on:
  schedule:
    - cron: ""0 9 * * 1-5""

name: Check untimely handle issues

jobs:
  check-untimely-handle-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Check untimely issues and send msg
        uses: jumpserver/action-issues-alert@master
        with:
          hook: ${{ secrets.WECHAT_GROUP_WEB_HOOK }}
          type: untimely
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

---
name: Issue Open Check

on:
  issues:
    types: [opened]

jobs:
  issue-open-add-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Add labels
        uses: actions-cool/issues-helper@v2
        if: ${{ !github.event.comment.pull_request.pull_request }}
        with:
          actions: 'add-labels'
          labels: '状态:待处理'

---
on:
  schedule:
    - cron: ""0 1 * * *""

name: Check recent handle issues

jobs:
  check-recent-issues-not-handle:
    runs-on: ubuntu-latest
    steps:
      - name: Check recent issues and send msg
        uses: jumpserver/action-issues-alert@master
        with:
          hook: ${{ secrets.WECHAT_GROUP_WEB_HOOK }}
          type: recent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

---
name: sync2gitee
on: [push]

jobs:
  repo-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Mirror the Github organization repos to Gitee.
        uses: Yikun/hub-mirror-action@master
        with:
          src: 'github/CloudExplorer-Dev'
          dst: 'gitee/fit2cloud-feizhiyun'
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
          dst_token:  ${{ secrets.GITEE_TOKEN }}
          static_list: ""CloudExplorer-Lite""
          force_update: true

---
"
tiann;Leoric;tiann/Leoric;https://github.com/tiann/Leoric;https://api.github.com/repos/tiann/Leoric;master;16/01/2020 07:06;22/04/2024 10:24;FALSE;
alibaba;SmartEngine;alibaba/SmartEngine;https://github.com/alibaba/SmartEngine;https://api.github.com/repos/alibaba/SmartEngine;master;17/01/2020 04:35;21/04/2024 14:10;FALSE;
yindz;common-random;yindz/common-random;https://github.com/yindz/common-random;https://api.github.com/repos/yindz/common-random;master;18/01/2020 11:09;15/04/2024 07:50;FALSE;
in28minutes;devops-master-class;in28minutes/devops-master-class;https://github.com/in28minutes/devops-master-class;https://api.github.com/repos/in28minutes/devops-master-class;master;20/01/2020 04:46;21/04/2024 22:36;FALSE;
BishopFox;GadgetProbe;BishopFox/GadgetProbe;https://github.com/BishopFox/GadgetProbe;https://api.github.com/repos/BishopFox/GadgetProbe;master;21/01/2020 20:45;31/03/2024 16:23;FALSE;
feihong-cs;ShiroExploit-Deprecated;feihong-cs/ShiroExploit-Deprecated;https://github.com/feihong-cs/ShiroExploit-Deprecated;https://api.github.com/repos/feihong-cs/ShiroExploit-Deprecated;master;23/01/2020 12:25;16/04/2024 10:31;FALSE;
krahets;hello-algo;krahets/hello-algo;https://github.com/krahets/hello-algo;https://api.github.com/repos/krahets/hello-algo;main;04/11/2022 12:08;22/04/2024 13:38;TRUE;"# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: C

on:
  push:
    branches: [""main""]
    paths: [""codes/c/**/*.c"", ""codes/c/**/*.h""]
  pull_request:
    branches: [""main""]
    paths: [""codes/c/**/*.c"", ""codes/c/**/*.h""]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ github.workspace }}/codes/c/build
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}/codes/c

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ github.workspace }}/codes/c/build --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ github.workspace }}/codes/c/build
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

---
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: C++

on:
  push:
    branches: [""main""]
    paths: [""codes/cpp/**/*.cpp"", ""codes/cpp/**/*.hpp""]
  pull_request:
    branches: [""main""]
    paths: [""codes/cpp/**/*.cpp"", ""codes/cpp/**/*.hpp""]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ github.workspace }}/codes/cpp/build
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}/codes/cpp

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ github.workspace }}/codes/cpp/build --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ github.workspace }}/codes/cpp/build
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

---
# This workflow will install Dart SDK, run format, analyze and build with Dart

name: Dart

on:
  push:
    branches: [""main""]
    paths: [""codes/dart/**/*.dart""]
  pull_request:
    branches: [""main""]
    paths: [""codes/dart/**/*.dart""]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Dart ${{ matrix.dart-sdk }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dart-sdk: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Dart ${{ matrix.dart-sdk }}
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart-sdk}}
      - name: Run format
        run: dart format codes/dart
      - name: Run analyze
        run: dart analyze codes/dart
      - name: Run build
        run: dart codes/dart/build.dart

---
# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ ""main"" ]
    paths: [""codes/csharp/**/*.cs""]
  pull_request:
    branches: [ ""main"" ]
    paths: [""codes/csharp/**/*.cs""]
  workflow_dispatch:

jobs:
  build:
    name: .NET ${{ matrix.dotnet-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: codes/csharp/
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        dotnet-version: [""8.0.x""]

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Restore dependencies
      run: dotnet restore hello-algo.csproj
    - name: Build
      run: dotnet build --no-restore hello-algo.csproj
    - name: Test with dotnet
      run: dotnet test hello-algo.csproj

---
name: Go

on:
  push:
    branches: [ ""main"" ]
    paths: [""codes/go/**/*.go""]
  pull_request:
    branches: [ ""main"" ]
    paths: [""codes/go/**/*.go""]
  workflow_dispatch:

jobs:
  build:
    name: Go ${{ matrix.go-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: codes/go/
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: [""1.19.x""]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
    - name: Check out code into the Go module directory
      run: go get -v -t -d ./...
    - name: Build
      run: go build -v ./...
    - name: Test with Go
      run: go test -v ./...

---
# # This workflow will install OpenJDK and build the Java project
# For more information see: https://github.com/actions/setup-java

name: Java

on:
  push:
    branches: [ ""main"" ]
    paths: [""codes/java/**/*.java""]
  pull_request:
    branches: [ ""main"" ]
    paths: [""codes/java/**/*.java""]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        java: [ '11', '17' ]
    name: Java ${{ matrix.Java }} sample
    steps:
      - uses: actions/checkout@v4
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - run: javac -d codes/java/build codes/java/**/*.java

---
name: JavaScript

on:
  push:
    branches: ['main']
    paths: ['codes/javascript/**/*.js']
  pull_request:
    branches: ['main']
    paths: ['codes/javascript/**/*.js']
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Run JavaScript Code
        run: deno run -A codes/javascript/test_all.js

---
name: Kotlin

on:
  push:
    branches: [ ""main"" ]
    paths: [""codes/kotlin/**/*.kt""]
  pull_request:
    branches: [ ""main"" ]
    paths: [""codes/kotlin/**/*.kt""]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    name: Kotlin on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4.1.2

      - name: Build JAR
        run: kotlinc codes/kotlin/**/*.kt -include-runtime -d codes/kotlin/build/test.jar

---
# This workflow will install Python dependencies, run tests and lint with Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python

on:
  push:
    branches: [""main""]
    paths: [""codes/python/**/*.py""]
  pull_request:
    branches: [""main""]
    paths: [""codes/python/**/*.py""]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.10"", ""3.11""]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black
      - name: Lint with black
        run: |
          black codes/python
      - name: Test python code
        run: |
          python codes/python/test_all.py

---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by separate terms of service, privacy policy, and support documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake。
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Ruby

on:
  push:
    branches: [ ""main"" ]
    paths: [""codes/ruby/**/*.rb""]
  pull_request:
    branches: [ ""main"" ]
    paths: [""codes/ruby/**/*.rb""]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:

    name: Ruby ${{ matrix.ruby-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ruby-version: ['3.3']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
    - name: Run tests
      run: ruby codes/ruby/test_all.rb

---
name: Rust

on:
  push:
    branches: [""main""]
    paths: [""codes/rust/**/*.rs"", ""codes/rust/Cargo.toml""]
  pull_request:
    branches: [""main""]
    paths: [""codes/rust/**/*.rs"", ""codes/rust/Cargo.toml""]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: brndnmtthws/rust-action-rustup@v1
        with:
            toolchain: nightly
      
      - uses: actions/checkout@v4
      
      - name: Build
        run: cargo build --manifest-path=codes/rust/Cargo.toml && cargo build --manifest-path=codes/rust/Cargo.toml --release

---
# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [""main""]
    paths: [""codes/swift/**/*.swift""]
  pull_request:
    branches: [""main""]
    paths: [""codes/swift/**/*.swift""]
  workflow_dispatch:

jobs:
  build:
    name: Swift ${{ matrix.swift }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        swift: [""5.10"", ""5.9"", ""5.8""]
    steps:
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: ${{ matrix.swift }}
      - uses: actions/checkout@v4
      - name: Build
        run: swift build --package-path codes/swift

---
name: TypeScript

on:
  push:
    branches: ['main']
    paths: ['codes/typescript/**/*.ts']
  pull_request:
    branches: ['main']
    paths: ['codes/typescript/**/*.ts']
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
      - name: Install dependencies
        run: cd codes/typescript && npm install
      - name: Check TypeScript code
        run: cd codes/typescript && npm run check

---
"
canyie;Dreamland;canyie/Dreamland;https://github.com/canyie/Dreamland;https://api.github.com/repos/canyie/Dreamland;master;24/01/2020 10:57;22/04/2024 08:12;FALSE;
artipie;artipie;artipie/artipie;https://github.com/artipie/artipie;https://api.github.com/repos/artipie/artipie;master;08/01/2020 01:39;17/04/2024 00:27;TRUE;"---
name: CI checks
""on"":
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  maven-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Download Linux JDK
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          curl --silent -o ${{ runner.temp }}/jdk-21_linux-x64_bin.tar.gz \
            https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
      - name: Set up Linux JDK
        uses: actions/setup-java@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          distribution: jdkfile
          jdkFile: ${{ runner.temp }}/jdk-21_linux-x64_bin.tar.gz
          java-version: 21
      - name: Download Windows JDK
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          curl --silent -o ${{ runner.temp }}/jdk-21_windows-x64_bin.zip https://download.oracle.com/java/21/latest/jdk-21_windows-x64_bin.zip
      - name: Set up Windows JDK
        uses: actions/setup-java@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          distribution: jdkfile
          jdkFile: ${{ runner.temp }}/jdk-21_windows-x64_bin.zip
          java-version: 21
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-jdk-21-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-jdk-21-maven-
      - name: Build it with Maven
        run: mvn -B install
  xcop-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: g4s8/xcop-action@master

---
name: Release Docker images
on:
  push:
    tags:
      - ""v*""
jobs:
  docker-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: adopt
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-jdk-21-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-jdk-21-maven-
          runs-on: ubuntu-latest
      - run: echo ""RELEASE_VERSION=${GITHUB_REF#refs/*/}"" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - run: mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }}
      - run: mvn install -DskipTests
      - run: mvn -B deploy -Pdocker-build -Ddocker.image.name=${{ secrets.DOCKERHUB_REPO }} -DskipTests
        working-directory: artipie-main
      - run: mvn versions:set -DnewVersion=latest
      - run: mvn install -DskipTests
      - run: mvn -B deploy -Pdocker-build -Ddocker.image.name=${{ secrets.DOCKERHUB_REPO }} -DskipTests
        working-directory: artipie-main
      - run: mvn package -Pjar-build -DskipTests
        working-directory: artipie-main
      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artipie-main/target/artipie-main-latest-jar-with-dependencies.jar
          asset_name: artipie-${{ env.RELEASE_VERSION }}-jar-with-dependencies.jar
          asset_content_type: application/jar
          working-directory: artipie-main

  # run-benchmarks:
  #   runs-on: ubuntu-latest
  #   needs: docker-publish
  #   steps:
  #     - name: Check out the code
  #       uses: actions/checkout@v2
  #       with:
  #         ref: gh-pages
  #     - name: Set env
  #       env:
  #         ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
  #       run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF:10}
  #     - name: Run benchmarks
  #       id: run_benchmarks
  #       uses: artipie/benchmarks@master
  #       with:
  #         aws-access-key: '${{ secrets.PERF_AWS_ACCESS_KEY }}'
  #         aws-secret-key: '${{ secrets.PERF_AWS_SECRET_KEY }}'
  #         version: '${{ env.RELEASE_VERSION }}'
  #     - name: Commit benchmark results
  #       run: |
  #         export REPORT=${{ steps.run_benchmarks.outputs.report }}
  #         export VERSION=${{ env.RELEASE_VERSION }}
  #         mkdir -p benchmarks/$VERSION
  #         mv $REPORT benchmarks/$VERSION/
  #         git config --local user.email ""action@github.com""
  #         git config --local user.name ""GitHub Action""
  #         git add benchmarks/$VERSION/$REPORT
  #         git commit -m ""Add benchmark results for version=$VERSION""
  #     - name: Push benchmark results
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         branch: 'gh-pages'

---
name: Release ubuntu-based Docker image
on:
  push:
    tags:
      - ""v*""
jobs:
  docker-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: adopt
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-jdk-21-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-jdk-21-maven-
          runs-on: ubuntu-latest
      - run: echo ""RELEASE_VERSION=${GITHUB_REF#refs/*/}"" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - run: mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }}
      - run: mvn install -DskipTests
      - run: mvn -B deploy -Pubuntu-docker -DskipTests
        working-directory: artipie-main
      - run: mvn versions:set -DnewVersion=latest
      - run: mvn install -DskipTests
      - run: mvn -B deploy -Pubuntu-docker -DskipTests
        working-directory: artipie-main

---
---
name: Integration tests
""on"":
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  maven-it:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download Linux JDK
        run: |
          wget --no-verbose --directory-prefix ${{ runner.temp }} \
            https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: jdkfile
          jdkFile: ${{ runner.temp }}/jdk-21_linux-x64_bin.tar.gz
          java-version: 21
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ubuntu-latest-jdk-21-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ubuntu-latest-jdk-21-maven-
      - name: Verify with maven
        run: mvn -B verify -Pdocker-build -Pitcase
#        working-directory: artipie-main

---
name: Create Maven release
on:
  push:
    tags:
      - ""v*""
jobs:
  build:
    name: Build release
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        run: echo ""TAG=${GITHUB_REF#refs/*/}"" >> $GITHUB_ENV
      - uses: actions/checkout@v2.3.3
      - uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: adopt
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ env.TAG }} versions:commit
      - name: Create settings.xml
        uses: whelk-io/maven-settings-xml-action@v15
        with:
          servers: |
            [
              {
                ""id"": ""oss.sonatype.org"",
                ""username"": ""${{ secrets.SONATYPE_USER }}"",
                ""password"": ""${{ secrets.SONATYPE_PASSWORD }}""
              }
            ]
          profiles: |
            [
              {
                ""id"": ""artipie"",
                ""properties"": {
                  ""gpg.keyname"": ""${{ secrets.GPG_KEYNAME }}"",
                  ""gpg.passphrase"": ""${{ secrets.GPG_PASSPHRASE }}""
                }
              }
            ]
      - run: mvn -B install -DskipTests
      - run: mvn deploy -pl '!:artipie-main,!:helm-bench,!:debian-bench,!:conda-bench,!:rpm-bench,!:build-tools' -Psonatype,gpg-sign -DskipTests --errors
        env:
          MAVEN_OPTS: --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED

---
name: Run Artipie perftests
concurrency: perftest_env
on:
  workflow_run:
    workflows: [Prepare Artipie for perftests]
    types: [ completed ]

jobs:
  perf-test2:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: [wsl-client]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
      - run: env;git branch -a; git status
      - name: Check connection
        run: . ""/opt/.benchvars"" && timeout 30 curl -v ""http://$SERVER_HOST:$REPO_PORT/bintest""
      - name: Check variables
        run: test ! -f /opt/.benchvars && exit 1;exit 0
      - name: Checkout benchmarks repo
        run: git clone --depth=1 https://github.com/artipie/benchmarks.git
      - name: Checkout benchmarks branch
        run: |
          pwd; ls -lah; git branch -a
          git fetch --all
          git checkout master
          git pull --ff-only
          cd loadtests
        working-directory: benchmarks
      - name: Prepare JMeter
        run: |
          [ ! -s $HOME/apache-jmeter-5.5.tgz ] && wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz -O $HOME/apache-jmeter-5.5.tgz
          tar xf $HOME/apache-jmeter-5.5.tgz
        working-directory: benchmarks/loadtests
      - name: Prepare artifacts repo
        run: time ./prep-maven-dyn.py --total-artifacts 100 && du -ms ./test-data/maven-dyn
        working-directory: benchmarks/loadtests
      - name: Run upload test
        run: |
          . ""/opt/.benchvars""
          perfRes=""./_perf_results""
          rm -rf ""$perfRes"" ./root/var/.storage/data
          mkdir -p ""$perfRes""
          tests=""jmx-files-maven-ul jmx-files-maven-dl jmx-files-ul jmx-files-dl jmx-maven-ul jmx-maven-dl""
          set -x
          for testName in $tests ; do
            echo ""Running test $testName for $SERVER_HOST with $REPO_PORT port ...""
            timeout 300 ""./$testName.sh"" ""$SERVER_HOST"" ""$REPO_PORT"" 180 maven-dyn
            DOCKER_HOST=""$SERVER_HOST:$DOCKER_PORT"" docker exec artipie jcmd 1 GC.run
            sleep 10
            testRes=`readlink -f last_test_result`
            mv -fv ""$testRes"" ""$perfRes/$testName""
            ls -lah ""$perfRes/$testName""
            rm -fv last_test_result
          done
        working-directory: benchmarks/loadtests
      - name: Extract JFR log
        run: |
          . ""/opt/.benchvars""
          DOCKER_HOST=""$SERVER_HOST:$DOCKER_PORT"" docker exec artipie jcmd 1 JFR.dump filename=/var/artipie/.storage/data/bintest/artipie.jfr
          sleep 30
          rm -fv artipie.jfr artipie.jfr.tar.xz
          timeout 30 wget ""http://$SERVER_HOST:$REPO_PORT/bintest/artipie.jfr""
          tar cJf artipie.jfr.tar.xz artipie.jfr
        working-directory: benchmarks/loadtests
      - name: Uploading results
        env:
          GITHUB_TAG: ${{ github.event.workflow_run.head_branch }}
        run: |
          ls -lah && pwd
          tag=""$GITHUB_TAG""
          if [ -z ""$tag"" ] ; then
            hash=`git rev-parse HEAD`
            tag=""$hash""
            echo ""Error: tag is empty with commit $hash""
            exit 1
          fi
          . /opt/.benchvars
          cd ""benchmarks/loadtests""

          perftestsRepo='./perftests_repo'
          rm -rfv ""$perftestsRepo""
          dstDir=""$perftestsRepo/perftests/$tag""
          mkdir -p ""$dstDir""
          perfRes=""./_perf_results""
          for t in ""$perfRes""/* ; do
            dst=""./$dstDir/$(basename $t)""
            mkdir -p ""$dst""
            ls -lah ""$t""
            cp -fv ""$t/statistics.json"" ""$dst""
          done
          tree ""$perftestsRepo""
          ls -lah ""$dstDir""

          time ./sync_perftests.sh https://central.artipie.com/artipie/benchmarks ""${UPLOAD_LOGIN}"" ""${UPLOAD_PASSWORD}""

          git config --global user.name ""Perftest Action""
          git config --global user.email ""perftest@test.com""

          url=""https://central.artipie.com/artipie/benchmarks/perftests_repo/jfr/artipie.last.jfr.tar.xz""
          curl -vT ""./artipie.jfr.tar.xz"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""

          env
          rm -rf ""$perfRes""
          echo ""Uploaded all test results for tag: $tag; commit: $hash""
      - name: Generating graphs
        working-directory: benchmarks/loadtests
        run: |
          pip3 install packaging==21.3 matplotlib==3.6.3 mdutils==1.6.0

          . ""/opt/.benchvars""
          rm -rfv ./graphs
          time ./perfplot.py perftests_repo/perftests ./graphs
          for f in ./graphs/* ; do
            echo ""$f""
            url=""https://central.artipie.com/artipie/benchmarks/perftests_repo/graphs/$(basename $f)""
            echo curl -vT ""$f"" -u""UPLOAD_LOGIN:UPLOAD_PASSWORD"" ""$url""
            curl -vT ""$f"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""
          done

          tmpDir=""perftests_repo/tmp""

          # For v* tags:
          rm -rfv ""$tmpDir""
          mkdir -p ""$tmpDir""
          if [ -n ""`find perftests_repo/perftests -maxdepth 1 -name 'v*'`"" ] ; then
            cp -rfv ""perftests_repo/perftests""/v* ""$tmpDir""
            rm -rfv ./graphs_v
            time ./perfplot.py ""$tmpDir"" ./graphs_v
            for f in ./graphs_v/* ; do
              echo ""$f""
              url=""https://central.artipie.com/artipie/benchmarks/perftests_repo/graphs_v/$(basename $f)""
              echo curl -vT ""$f"" -u""UPLOAD_LOGIN:UPLOAD_PASSWORD"" ""$url""
              curl -vT ""$f"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""
            done
          else
            echo ""No v* tag results in perftests_repo/perftests""
          fi

          # For t* tags:
          rm -rfv ""$tmpDir""
          mkdir -p ""$tmpDir""
          if [ -n ""`find perftests_repo/perftests -maxdepth 1 -name 't*'`"" ] ; then
            cp -rfv ""perftests_repo/perftests""/t* ""$tmpDir""
            rm -rfv ./graphs_t
            time ./perfplot.py ""$tmpDir"" ./graphs_t
            for f in ./graphs_t/* ; do
              echo ""$f""
              url=""https://central.artipie.com/artipie/benchmarks/perftests_repo/graphs_t/$(basename $f)""
              echo curl -vT ""$f"" -u""UPLOAD_LOGIN:UPLOAD_PASSWORD"" ""$url""
              curl -vT ""$f"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""
            done
          else
            echo ""No t* tag results in perftests_repo/perftests""
          fi

          rm -rfv ""$tmpDir""

      - name: Check performance difference stability
        env:
          GITHUB_TAG: ${{ github.event.workflow_run.head_branch }}
        working-directory: benchmarks/loadtests
        run: |
          tag=""$GITHUB_TAG""
          hash=`git rev-parse HEAD`
          if [ -z ""$tag"" ] ; then
            tag=""$hash""
            echo ""Error: tag is empty with commit $hash""
            exit 1
          fi

          tmpDir=""perftests_repo/tmp"" # compare with previous tag of the same type
          rm -rfv ""$tmpDir""
          mkdir -p ""$tmpDir""
          if [[ ""$tag"" =~ ^v.*$ ]] ; then
            cp -rfv ""perftests_repo/perftests""/v* ""$tmpDir""
          elif [[ ""$tag"" =~ ^t.*$ ]] ; then
            cp -rfv ""perftests_repo/perftests""/t* ""$tmpDir""
          else
            cp -rfv ""perftests_repo/perftests""/* ""$tmpDir""
          fi

          diffLimit=""15.0"" # wsl client <--> wsl server currently less stable
          ls -lah perftests_repo/perftests
          if ./checkstats.py perftests_repo/perftests ""$diffLimit"" ; then
            echo ""Performance difference withit limit range""
          else
            echo ""WARNING: Performance difference out of range. Sending emails...""
            email=""Subject: Artipie perftests\n\nArtipie perfrormance testing warning:\n\nPerformance difference is out of range in perftest-client.yml with threshold ${diffLimit}%.
              Please check GitHub Actions logs for Artipie git tag: $tag; commit hash: $hash\n""
            echo -e ""$email"" | ssmtp artipiebox@gmail.com chgenn.x@gmail.com
          fi
          rm -rf ""$tmpDir""

---
name: Prepare Artipie for perftests
concurrency: perftest_env
on:
  push:
    tags:
      - ""t*""
      - ""v*""

jobs:
  perf-test1:
    runs-on: [wsl-server]
    steps:
      - uses: actions/checkout@v3
      - run: cat /etc/issue; mount; ls -lah; env; pwd; git status
      - name: Check variables
        run: test ! -f $HOME/.benchvars && exit 1;exit 0
      - name: Prepare docker env
        run: |
          docker info
          docker stop artipie || :
          docker rm -fv artipie || :
          docker image rm -f artipie/artipie:1.0-SNAPSHOT || :
          docker ps
      - name: Maven adapters build
        run: mvn install -DskipTests
      - name: Artipie docker image build
        run: timeout 600 mvn clean install -Pdocker-build -DskipTests
        working-directory: artpie-main
      - name: Check docker image
        run: docker image inspect artipie/artipie:1.0-SNAPSHOT|head -n50
      - name: Checkout results repo/branch
        run: git clone --depth=1 https://github.com/artipie/benchmarks.git
      - name: Branch + Artipie server
        run: |
          pwd; ls -lah; git branch -a
          git fetch
          git checkout master
          git pull --ff-only
          cd loadtests
          ./artipie-snapshot.sh 8081
          sleep 10
          docker ps
          tree ./root
          ls -lah root/var/repo/artipie
        working-directory: benchmarks
      - name: Check connection
        run: . ""/opt/.benchvars"" && timeout 30 curl -v ""http://$SERVER_HOST:$REPO_PORT/bintest""

      - name: Prepare JMeter
        run: |
          [ ! -s $HOME/apache-jmeter-5.5.tgz ] && wget https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz -O $HOME/apache-jmeter-5.5.tgz
          tar xf $HOME/apache-jmeter-5.5.tgz
        working-directory: benchmarks/loadtests
      - name: Prepare artifacts repo
        run: time ./prep-maven-dyn.py --total-artifacts 100 && du -ms ./test-data/maven-dyn
        working-directory: benchmarks/loadtests
      - name: Run upload test
        run: |
          . ""/opt/.benchvars""
          perfRes=""./_perf_results""
          rm -rf ""$perfRes"" ./root/var/.storage/data
          mkdir -p ""$perfRes""
          tests=""jmx-files-maven-ul jmx-files-maven-dl jmx-files-ul jmx-files-dl jmx-maven-ul jmx-maven-dl""
          set -x
          for testName in $tests ; do
            echo ""Running test $testName for $SERVER_HOST with $REPO_PORT port ...""
            timeout 300 ""./$testName.sh"" ""$SERVER_HOST"" ""$REPO_PORT"" 180 maven-dyn
            docker exec artipie jcmd 1 GC.run
            sleep 10
            testRes=`readlink -f last_test_result`
            mv -fv ""$testRes"" ""$perfRes/$testName""
            ls -lah ""$perfRes/$testName""
            rm -fv last_test_result
          done
        working-directory: benchmarks/loadtests
      - name: Extract JFR log
        run: |
          . ""/opt/.benchvars""
          DOCKER_HOST=""$SERVER_HOST:$DOCKER_PORT"" docker exec artipie jcmd 1 JFR.dump filename=/var/artipie/.storage/data/bintest/artipie.jfr
          sleep 30
          rm -fv artipie.jfr artipie.jfr.tar.xz
          timeout 30 wget ""http://$SERVER_HOST:$REPO_PORT/bintest/artipie.jfr""
          tar cJf artipie.jfr.tar.xz artipie.jfr
        working-directory: benchmarks/loadtests
      - name: Uploading results
        run: |
          ls -lah && pwd
          tag=""$GITHUB_REF_NAME"" # GITHUB_TAG
          if [ -z ""$tag"" ] ; then
            hash=`git rev-parse HEAD`
            tag=""$hash""
            echo ""Error: tag is empty with commit $hash""
            exit 1
          fi
          . /opt/.benchvars
          cd ""benchmarks/loadtests""

          perftestsRepo='./perftests_repo'
          rm -rfv ""$perftestsRepo""
          dstDir=""$perftestsRepo/perftests/$tag""
          mkdir -p ""$dstDir""
          perfRes=""./_perf_results""
          for t in ""$perfRes""/* ; do
            dst=""./$dstDir/$(basename $t)""
            mkdir -p ""$dst""
            ls -lah ""$t""
            cp -fv ""$t/statistics.json"" ""$dst""
          done
          tree ""$perftestsRepo""
          ls -lah ""$dstDir""

          time ./sync_perftests.sh https://central.artipie.com/artipie/benchmarks/localhost ""${UPLOAD_LOGIN}"" ""${UPLOAD_PASSWORD}""

          git config --global user.name ""Perftest Action""
          git config --global user.email ""perftest@test.com""

          url=""https://central.artipie.com/artipie/benchmarks/localhost/perftests_repo/jfr/artipie.last.jfr.tar.xz""
          echo SKIPPING curl -vT ""./artipie.jfr.tar.xz"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""

          env
          rm -rf ""$perfRes""
          echo ""Uploaded all test results for tag: $tag; commit: $hash""
      - name: Generating graphs
        working-directory: benchmarks/loadtests
        run: |
          pip3 install packaging==21.3 matplotlib==3.6.3 mdutils==1.6.0

          . ""/opt/.benchvars""
          rm -rfv ./graphs
          time ./perfplot.py perftests_repo/perftests ./graphs
          for f in ./graphs/* ; do
            echo ""$f""
            url=""https://central.artipie.com/artipie/benchmarks/localhost/perftests_repo/graphs/$(basename $f)""
            echo curl -vT ""$f"" -u""UPLOAD_LOGIN:UPLOAD_PASSWORD"" ""$url""
            curl -vT ""$f"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""
          done

          tmpDir=""perftests_repo/tmp""

          # For v* tags:
          rm -rfv ""$tmpDir""
          mkdir -p ""$tmpDir""
          if [ -n ""`find perftests_repo/perftests -maxdepth 1 -name 'v*'`"" ] ; then
            cp -rfv ""perftests_repo/perftests""/v* ""$tmpDir""
            rm -rfv ./graphs_v
            time ./perfplot.py ""$tmpDir"" ./graphs_v
            for f in ./graphs_v/* ; do
              echo ""$f""
              url=""https://central.artipie.com/artipie/benchmarks/localhost/perftests_repo/graphs_v/$(basename $f)""
              echo curl -vT ""$f"" -u""UPLOAD_LOGIN:UPLOAD_PASSWORD"" ""$url""
              curl -vT ""$f"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""
            done
          else
            echo ""No v* tag results in perftests_repo/perftests""
          fi

          # For t* tags:
          rm -rfv ""$tmpDir""
          mkdir -p ""$tmpDir""
          if [ -n ""`find perftests_repo/perftests -maxdepth 1 -name 't*'`"" ] ; then
            cp -rfv ""perftests_repo/perftests""/t* ""$tmpDir""
            rm -rfv ./graphs_t
            time ./perfplot.py ""$tmpDir"" ./graphs_t
            for f in ./graphs_t/* ; do
              echo ""$f""
              url=""https://central.artipie.com/artipie/benchmarks/localhost/perftests_repo/graphs_t/$(basename $f)""
              echo curl -vT ""$f"" -u""UPLOAD_LOGIN:UPLOAD_PASSWORD"" ""$url""
              curl -vT ""$f"" -u""${UPLOAD_LOGIN}:${UPLOAD_PASSWORD}"" ""$url""
            done
          else
            echo ""No t* tag results in perftests_repo/perftests""
          fi

          rm -rfv ""$tmpDir""

      - name: Check performance difference stability
        working-directory: benchmarks/loadtests
        run: |
          tag=""$GITHUB_REF_NAME"" # GITHUB_TAG
          hash=`git rev-parse HEAD`
          if [ -z ""$tag"" ] ; then
            tag=""$hash""
            echo ""Error: tag is empty with commit $hash""
            exit 1
          fi

          tmpDir=""perftests_repo/tmp"" # compare with previous tag of the same type
          rm -rfv ""$tmpDir""
          mkdir -p ""$tmpDir""
          if [[ ""$tag"" =~ ^v.*$ ]] ; then
            cp -rfv ""perftests_repo/perftests""/v* ""$tmpDir""
          elif [[ ""$tag"" =~ ^t.*$ ]] ; then
            cp -rfv ""perftests_repo/perftests""/t* ""$tmpDir""
          else
            cp -rfv ""perftests_repo/perftests""/* ""$tmpDir""
          fi

          diffLimit=""7.0""
          ls -lah perftests_repo/perftests
          if ./checkstats.py perftests_repo/perftests ""$diffLimit"" ; then
            echo ""Performance difference withit limit range""
          else
            echo ""WARNING: Performance difference out of range. Sending emails...""
            email=""Subject: Artipie perftests\n\nArtipie perfrormance testing warning:\n\nPerformance difference is out of range in perftest-server.yml with threshold ${diffLimit}%.
              Please check GitHub Actions logs for Artipie git tag: $tag; commit hash: $hash\n""
            echo -e ""$email"" | ssmtp artipiebox@gmail.com chgenn.x@gmail.com
          fi
          rm -rf ""$tmpDir""

---
name: ""Smoke tests""
on:
  push:
    branches:
      - ""master""
  pull_request:
    branches:
      - ""master""
jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 21
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-jdk-21-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-jdk-21-maven-
      - run: mvn install -DskipTests
      - run: mvn -B package -Pdocker-build -DskipTests
        working-directory: artipie-main
      - run: examples/run.sh
        working-directory: artipie-main

---

name: Mark stale issues and pull requests
on:
  schedule:
  - cron: '00 */6 * * *'
jobs:
  stale:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
    - uses: actions/stale@v3
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: 'Issue is stale, CC: @artipie/maintainers'
        stale-pr-message: 'PR is stale, CC: @artipie/maintainers'
        stale-issue-label: 'stale'
        stale-pr-label: 'stale'
        days-before-issue-close: -1
        operations-per-run: 100

---
name: Update Wiki
on:
  push:
    paths:
      - '.wiki/**'
    branches:
      - master
jobs:
  update-wiki:
    runs-on: ubuntu-latest
    name: Update wiki
    steps:
      - uses: OrlovM/Wiki-Action@v1
        with:
          path: '.wiki'
          token: ${{ secrets.GITHUB_TOKEN }}

---
"
Delta2Force;MCVmComputers;Delta2Force/MCVmComputers;https://github.com/Delta2Force/MCVmComputers;https://api.github.com/repos/Delta2Force/MCVmComputers;master;04/06/2020 12:34;22/04/2024 00:07;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

---
"
Suwayomi;Suwayomi-Server;Suwayomi/Suwayomi-Server;https://github.com/Suwayomi/Suwayomi-Server;https://api.github.com/repos/Suwayomi/Suwayomi-Server;master;23/12/2020 21:31;22/04/2024 04:22;TRUE;"name: CI Pull Request

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_wrapper:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

  build:
    name: Build pull request
    needs: check_wrapper
    runs-on: ubuntu-latest

    steps:
      - name: Checkout pull request
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          path: master
          fetch-depth: 0

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'temurin'

      - name: Copy CI gradle.properties
        run: |
          cd master
          mkdir -p ~/.gradle
          cp .github/runner-files/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Build Jar
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: master
          arguments: ktlintCheck :server:shadowJar --stacktrace


---
name: CI build

on:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_wrapper:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

  build:
    name: Build Jar
    needs: check_wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          ref: master
          path: master
          fetch-depth: 0

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'temurin'

      - name: Copy CI gradle.properties
        run: |
          cd master
          mkdir -p ~/.gradle
          cp .github/runner-files/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Build Jar
        uses: gradle/gradle-build-action@v2
        env:
          ProductBuildType: ""Preview""
        with:
          build-root-directory: master
          arguments: :server:shadowJar --stacktrace

      - name: Upload Jar
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: master/server/build/*.jar
          if-no-files-found: error

      - name: Upload icons
        uses: actions/upload-artifact@v3
        with:
          name: icon
          path: master/server/src/main/resources/icon
          if-no-files-found: error

      - name: Tar scripts dir to maintain file permissions
        run: tar -cvzf scripts.tar.gz -C master/ scripts/

      - name: Upload scripts.tar.gz
        uses: actions/upload-artifact@v3
        with:
          name: scripts
          path: scripts.tar.gz
          if-no-files-found: error

  bundle:
    strategy:
      fail-fast: false
      matrix:
        os:
          - debian-all
          - linux-assets
          - linux-x64
          - macOS-x64
          - macOS-arm64
          - windows-x64
          - windows-x86

    name: Make ${{ matrix.os }} release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Jar
        uses: actions/download-artifact@v3
        with:
          name: jar
          path: server/build

      - name: Download icons
        uses: actions/download-artifact@v3
        with:
          name: icon
          path: server/src/main/resources/icon

      - name: Download scripts.tar.gz
        uses: actions/download-artifact@v3
        with:
          name: scripts

      - name: Make ${{ matrix.os }} release
        run: |
          mkdir upload
          tar -xvpf scripts.tar.gz
          scripts/bundler.sh -o upload/ ${{ matrix.os }}

      - name: Upload ${{ matrix.os }} release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: upload/*
          if-no-files-found: error

  release:
    needs: bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: jar
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: debian-all
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: linux-assets
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: linux-x64
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: macOS-x64
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: macOS-arm64
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: windows-x64
          path: release
      - uses: actions/download-artifact@v3
        with:
          name: windows-x86
          path: release

      - name: Checkout Preview branch
        uses: actions/checkout@v3
        with:
          repository: ""Suwayomi/Suwayomi-Server-preview""
          ref: main
          path: preview
          token: ${{ secrets.DEPLOY_PREVIEW_TOKEN }}

      - name: Generate Tag Name
        id: GenTagName
        run: |
          cd release
          genTag=$(ls *.jar | sed -e's/Suwayomi-Server-\|.jar//g')
          echo ""$genTag""
          echo ""value=$genTag"" >> $GITHUB_OUTPUT

      - name: Create Tag
        run: |
          TAG=""${{ steps.GenTagName.outputs.value }}""
          echo ""tag: $TAG""
          cd preview
          echo ""{ \""latest\"": \""$TAG\"" }"" > index.json
          git add index.json
          git config --global user.email \
            ""github-actions[bot]@users.noreply.github.com""
          git config --global user.name ""github-actions[bot]""
          git commit -m ""Updated to $TAG""
          git push origin main

          git tag $TAG
          git push origin $TAG

      - name: Upload Preview Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.DEPLOY_PREVIEW_TOKEN }}
          repository: ""Suwayomi/Suwayomi-Server-preview""
          tag_name:  ${{ steps.GenTagName.outputs.value }}
          files: release/*


---
name: Docker Build Stable

on:
  release:
    types: [published]
  
jobs:
  build_publish_docker_container:
    runs-on: ubuntu-latest

    steps:         
      - name: run docker build and publish script
        run: |
          curl -X POST -H ""Accept: application/vnd.github.v3+json"" -H ""Authorization: token ${{ secrets.DEPLOY_PREVIEW_TOKEN }}"" -d '{""ref"":""main"", ""inputs"":{""tachidesk_release_type"": ""stable""}}' https://api.github.com/repos/suwayomi/docker-tachidesk/actions/workflows/build_container_images.yml/dispatches
          

---
name: Issue moderator

on:
  issues:
    types: [opened, edited, reopened]
  issue_comment:
    types: [created]

jobs:
  autoclose:
    runs-on: ubuntu-latest
    steps:
      - name: Moderate issues
        uses: tachiyomiorg/issue-moderator-action@v1
        with:
          repo-token: ${{ github.token }}
          duplicate-check-enabled: true
          duplicate-check-label: Source request
          existing-check-enabled: true
          existing-check-label: Source request
          auto-close-rules: |
            [
              {
                ""type"": ""title"",
                ""regex"": "".*<short description>.*"",
                ""message"": ""You did not fill out the description in the title""
              },
              {
                ""type"": ""title"",
                ""regex"": "".*(<|>)+.*"",
                ""message"": ""You did not remove Angle brackets(< and >) from the title""
              },
              {
                ""type"": ""body"",
                ""regex"": "".*DELETE THIS SECTION IF YOU HAVE READ AND ACKNOWLEDGED IT.*"",
                ""message"": ""The acknowledgment section was not removed""
              },
              {
                ""type"": ""body"",
                ""regex"": "".*(Suwayomi-Server version|Server Operating System|Server Desktop Environment|Server JVM version|Client Operating System|Client Web Browser):.*(\\(Example:|<usually).*"",
                ""message"": ""The requested information was not filled out""
              },
              {
                ""type"": ""body"",
                ""regex"": "".*Remove this line after you are done.*"",
                ""message"": ""The lines requesting to be removed were not removed.""
              }
            ]

---
name: CI Publish

on:
  workflow_dispatch:
  push:
    tags:
      - ""v*""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_wrapper:
    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

  build:
    name: Build Jar
    needs: check_wrapper
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: master
          fetch-depth: 0

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'temurin'

      - name: Copy CI gradle.properties
        run: |
          cd master
          mkdir -p ~/.gradle
          cp .github/runner-files/ci-gradle.properties \
            ~/.gradle/gradle.properties

      - name: Build and copy webUI, Build Jar
        uses: gradle/gradle-build-action@v2
        env:
          ProductBuildType: ""Stable""
        with:
          build-root-directory: master
          arguments: :server:downloadWebUI :server:shadowJar --stacktrace

      - name: Upload Jar
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: master/server/build/*.jar
          if-no-files-found: error

      - name: Upload icons
        uses: actions/upload-artifact@v4
        with:
          name: icon
          path: master/server/src/main/resources/icon
          if-no-files-found: error

      - name: Tar scripts dir to maintain file permissions
        run: tar -cvzf scripts.tar.gz -C master/ scripts/

      - name: Upload scripts.tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: scripts
          path: scripts.tar.gz
          if-no-files-found: error

  bundle:
    strategy:
      fail-fast: false
      matrix:
        os:
          - debian-all
          - linux-assets
          - linux-x64
          - macOS-x64
          - macOS-arm64
          - windows-x64
          - windows-x86

    name: Make ${{ matrix.os }} release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Jar
        uses: actions/download-artifact@v4
        with:
          name: jar
          path: server/build

      - name: Download icons
        uses: actions/download-artifact@v4
        with:
          name: icon
          path: server/src/main/resources/icon

      - name: Download scripts.tar.gz
        uses: actions/download-artifact@v4
        with:
          name: scripts

      - name: Make ${{ matrix.os }} release
        run: |
          mkdir upload/
          tar -xvpf scripts.tar.gz
          scripts/bundler.sh -o upload/ ${{ matrix.os }}

      - name: Upload ${{ matrix.os }} files
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: upload/*
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: jar
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: debian-all
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: linux-assets
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: macOS-x64
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: macOS-arm64
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: windows-x64
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: windows-x86
          path: release

      - name: Generate checksums
        run: cd release && sha256sum * > Checksums.sha256

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.DEPLOY_RELEASE_TOKEN }}
          draft: true
          files: release/*

---
name: Publish to WinGet
on:
  workflow_run:
    workflows: [""CI Publish""]
    types:
      - completed
jobs:
  publish:
    runs-on: windows-latest # action can only be run on windows
    steps:
      - uses: vedantmgoyal2009/winget-releaser@v2
        with:
          identifier: Suwayomi.Tachidesk-Server
          installers-regex: '.*x64.msi$'
          token: ${{ secrets.WINGET_PUBLISH_PAT }}

---
"
YuJian95;hospital;YuJian95/hospital;https://github.com/YuJian95/hospital;https://api.github.com/repos/YuJian95/hospital;master;01/02/2020 09:52;21/04/2024 15:45;FALSE;
Aliucord;Aliucord;Aliucord/Aliucord;https://github.com/Aliucord/Aliucord;https://api.github.com/repos/Aliucord/Aliucord;main;27/02/2021 17:59;22/04/2024 12:25;TRUE;"name: Build Aliucord

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/build-aliucord.yml
      - Aliucord/**
      - .assets/data.json

jobs:
  build-aliucord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          path: src

      - name: Checkout builds
        uses: actions/checkout@master
        with:
          ref: builds
          path: builds

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        uses: android-actions/setup-android@3404b45d4c43e74e30dcad1a47fb89a0573f5a7e # v2.0.6

      - name: Build Aliucord
        run: |
          cd $GITHUB_WORKSPACE/src
          chmod +x gradlew
          ./gradlew :Aliucord:make
          cp Aliucord/build/Aliucord.zip $GITHUB_WORKSPACE/builds
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

      - name: Push builds
        run: |
          cd $GITHUB_WORKSPACE/builds
          cp ../src/.assets/AndroidManifest.xml .
          if git diff --exit-code Aliucord.zip >/dev/null; then
            # No changes to Aliucord.zip, simply merge builds data.json and Aliucord data.json to keep the old aliucordHash
            jq -s '.[0] * .[1]' data.json ../src/.assets/data.json > data.json.new
            mv data.json.new data.json
          else
            # Changes to Aliucord.zip, update aliucordHash
            jq "". + { aliucordHash: \""$(git --git-dir=../src/.git rev-parse --short HEAD)\"" }"" < ../src/.assets/data.json > data.json
          fi
          git config --local user.email ""actions@github.com""
          git config --local user.name ""GitHub Actions""
          git pull
          git add .
          git commit -m ""Build $GITHUB_SHA""
          git push

---
name: Build Injector

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/build-injector.yml
      - Injector/**

jobs:
  build-injector:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          path: src

      - name: Checkout builds
        uses: actions/checkout@master
        with:
          ref: builds
          path: builds

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        uses: android-actions/setup-android@3404b45d4c43e74e30dcad1a47fb89a0573f5a7e # v2.0.6

      - name: Build Injector
        run: |
          cd $GITHUB_WORKSPACE/src
          chmod +x gradlew
          ./gradlew :Injector:make
          cp Injector/build/Injector.dex $GITHUB_WORKSPACE/builds

      - name: Push builds
        run: |
          cd $GITHUB_WORKSPACE/builds
          git config --local user.email ""actions@github.com""
          git config --local user.name ""GitHub Actions""
          git pull
          git add .
          git commit -m ""Build $GITHUB_SHA""
          git push

---
name: Build Installer

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: The version of this release. Should be lower than the last and in the format 1.0.0
        default: ""1.0.0""
      title:
        required: true
        description: Title of this release
      description:
        required: false
        description: Description of this release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master
      with:
        path: src

    - name: Setup Flutter
      uses: subosito/flutter-action@48cafc24713cca54bbe03cdc3a423187d413aafa # v2.10.0
      with:
        flutter-version: '3.10.6'

    - name: Build Installer
      run: |
        cd $GITHUB_WORKSPACE/src/installer
        echo ""${{ secrets.keystore }}"" | base64 -d > ../../keystore.jks
        echo ""storePassword: ${{ secrets.keystorePassword }}"" > android/key.properties
        echo ""keyPassword: ${{ secrets.keyPassword }}"" >> android/key.properties
        echo ""keyAlias: Installer"" >> android/key.properties
        echo ""storeFile: ../../../../keystore.jks"" >> android/key.properties

        versionName=""${{ github.event.inputs.version }}""
        versionCode=""${versionName//./}""
        flutter build apk --build-number ""$versionCode"" --build-name ""$versionName""

        mv build/app/outputs/flutter-apk/app-release.apk ../../Installer-release.apk
        rm ../../keystore.jks
        rm android/key.properties

    - name: Release
      run: |
        cd $GITHUB_WORKSPACE/src
        git config --local user.email ""actions@github.com""
        git config --local user.name ""GitHub Actions""
        tag=""${{ github.event.inputs.version }}""
        git tag ""$tag""
        git push origin ""$tag""
        gh release create ""$tag"" \
          --title ""${{ github.event.inputs.title }}"" \
          --notes ""${{ github.event.inputs.description }}"" \
          ../Installer-release.apk
      env:
        GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

---
name: Dokka

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/generate-dokka.yml
      - Aliucord/**

jobs:
  dokka:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Generate Dokka
        run: |
          chmod +x ./gradlew
          ./gradlew Aliucord:dokkaHtml
          ./gradlew Aliucord:dokkaJavadoc

      - name: Push Dokka
        shell: bash # GLOBIGNORE is a special bash variable so explicitly target bash
        env:
          API_TOKEN: ${{ secrets.API_PAT_GITHUB }}
          USERNAME: Github-Actions
          REPO: Aliucord/dokka
        run: |
          git config --global user.name ""$USERNAME""
          git config --global user.email actions@github.com

          git clone https://$USERNAME:$API_TOKEN@github.com/$REPO.git
          cd dokka

          GLOBIGNORE=README.md:.git     # do not glob README and .git
          rm -rf *

          cp -r ../Aliucord/build/dokka/* .

          git add .
          git commit -m ""Generate dokka for https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"" || exit 0
          git push https://$USERNAME:$API_TOKEN@github.com/$REPO.git

---
name: Publish Aliucord

on:
  push:
    paths:
      - .github/workflows/publish-aliucord.yml
      - Aliucord/**

jobs:
  build-aliucord:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build Aliucord
        run: |
          chmod +x gradlew
          ./gradlew :Aliucord:publish -Pversion=${GITHUB_REF##*/}-SNAPSHOT
          ./gradlew :Aliucord:publish -Pversion=$(git rev-parse --short ""$GITHUB_SHA"") | exit 0
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}

---
name: PR Artifact

on:
  pull_request:
    paths:
      - .github/workflows/upload-pr-artifact.yml
      - Aliucord/**
      - gradle/**
      - settings.gradle
      - gradlew
      - gradle.properties
      - build.gradle

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Setup Android SDK
        uses: android-actions/setup-android@3404b45d4c43e74e30dcad1a47fb89a0573f5a7e # v2.0.6

      - name: Build Aliucord
        run: |
          cd $GITHUB_WORKSPACE
          chmod +x gradlew
          ./gradlew :Aliucord:make

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Aliucord
          path: Aliucord/build/Aliucord.zip

---
"
JosephZhu1983;java-common-mistakes;JosephZhu1983/java-common-mistakes;https://github.com/JosephZhu1983/java-common-mistakes;https://api.github.com/repos/JosephZhu1983/java-common-mistakes;master;03/02/2020 10:45;22/04/2024 11:05;FALSE;
dromara;Sa-Token;dromara/Sa-Token;https://github.com/dromara/Sa-Token;https://api.github.com/repos/dromara/Sa-Token;dev;03/02/2020 11:34;22/04/2024 12:26;FALSE;
KikiLetGo;VirusBroadcast;KikiLetGo/VirusBroadcast;https://github.com/KikiLetGo/VirusBroadcast;https://api.github.com/repos/KikiLetGo/VirusBroadcast;master;03/02/2020 13:41;09/04/2024 20:26;FALSE;
apk-editor;APK-Explorer-Editor;apk-editor/APK-Explorer-Editor;https://github.com/apk-editor/APK-Explorer-Editor;https://api.github.com/repos/apk-editor/APK-Explorer-Editor;master;04/03/2021 13:56;21/04/2024 14:33;TRUE;"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo ""date_today=$(date +'%Y-%m-%d')"" >> $GITHUB_ENV

      # Set App Name As Env Variable
      - name: Set repository name as env variable
        run: echo ""repository_name=AEE"" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Tests Build
      - name: Run gradle tests
        run: ./gradlew test

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build

      # Create APK Release
      - name: Build apk release project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew assemble

      # Upload Artifact Build
      - name: Upload APK Release - ${{ env.repository_name }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.repository_name }} - ${{ env.date_today }} - APK(s) release generated
          path: app/build/outputs/apk/full/release/

---
"
tapdata;tapdata;tapdata/tapdata;https://github.com/tapdata/tapdata;https://api.github.com/repos/tapdata/tapdata;develop;29/06/2022 07:31;22/04/2024 11:50;TRUE;"name: Auto Post Commit Message to Coding Work Order

on:
  push:
    branches: [ ""release-v*.*"", ""develop-v*.*"" ]
  pull_request:
    branches: [ ""release-v*.*"", ""develop-v*.*"" ]

jobs:

  Check-Commit-Style:
    runs-on: ubuntu-latest
    outputs:
      check-style: ${{ steps.check-style.outputs.error }}
      commit-message: ${{ steps.check-style.outputs.commit-message }}
      issue-code: ${{ steps.check-style.outputs.issue-code }}
      commit-id: ${{ steps.check-style.outputs.commit-id }}
    steps:
      - name: Checkout Enterprise Branch if PUSH
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout Enterprise Branch if PULL_REQUEST
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Commit Message With \#$number
        id: check-style
        run: |
          message=`git log -1 --pretty=%B`
          echo ::set-output name=commit-message::$message
          commit_id=`git rev-parse HEAD`
          echo ::set-output name=commit-id::$commit_id
          echo $message | egrep ""#[0-9]+"" -o | egrep ""[0-9]+"" -o > /tmp/commit_msg | cat /tmp/commit_msg
          echo ::set-output name=issue-code::`cat /tmp/commit_msg`
          flag=`cat /tmp/commit_msg`
          if [[ ""X${flag}"" != ""X"" ]]; then isPost='true'; else isPost='false'; fi
          echo ::set-output name=error::$isPost

  Post-Commit-Message:
    runs-on: ubuntu-latest
    needs: Check-Commit-Style
    if: needs.Check-Commit-Style.outputs.check-style == 'true'
    steps:
      - name: Post Commit Message to Work Order
        run: |
          echo ""${{ needs.Check-Commit-Style.outputs.check-style }}""
          curl \
          -X POST \
          -H ""Accept: */*"" \
          -H ""Authorization: token ${{ secrets.CODING_TOKEN }}"" \
          https://tapdata.coding.net/open-api?Action=CreateIssueComment \
          -d '{
            ""Action"": ""CreateIssueComment"",
            ""ProjectName"": ""tapdata"",
            ""IssueCode"": ${{ needs.Check-Commit-Style.outputs.issue-code }},
            ""Content"": ""'""$GITHUB_ACTOR Commit: [${{ needs.Check-Commit-Style.outputs.commit-message }}]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)""'""
          }'

---
name: OpenSource Version Construction

on:
  workflow_dispatch:
    inputs:
      frontend_branch:
        description: 'Tapdata-Enterprise-Web Repo Branch:'
        required: true
        type: string
        default: 'develop'
      connectors_branch:
        description: 'Tapdata-Connectors Repo Branch:'
        required: true
        type: string
        default: 'main'

env:
  REGISTRY: ghcr.io

jobs:

  Set-Branch:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      TAPDATA_BRANCH: ${{ steps.set-outputs.outputs.TAPDATA_BRANCH }}
      TAG_NAME: ${{ steps.set-outputs.outputs.TAG_NAME }}
    steps:
      - name: Set Env
        run: |
          echo ""TAPDATA_BRANCH=${{ github.ref_name }}"" >> $GITHUB_ENV
      - name: Checkout Tapdata Code
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata'
          ref: ${{ github.ref_name }}
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata
          fetch-depth: 0
      - name: Set Tag
        run: |
          cd tapdata
          main_tag=$(git branch --show-current | cut -d '-' -f 2)
          current_timestamp=$(date +%s)
          hex_timestamp=$(printf ""%X"" ""$current_timestamp"" | tr 'A-F' 'a-f')
          tag_name=""$main_tag-$hex_timestamp""
          echo ""TAG_NAME=$tag_name"" >> $GITHUB_ENV
      - name: Set Outpus
        id: set-outputs
        run: |
          echo ""::set-output name=TAPDATA_BRANCH::${TAPDATA_BRANCH}""
          echo ""::set-output name=TAG_NAME::${TAG_NAME}""

  Sync-Code-to-Internal-Repo:
    runs-on: ubuntu-latest
    needs:
      - Set-Branch
    steps:
      - name: Checkout Tapdata Code
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata'
          ref: ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }}
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata
          fetch-depth: 0
      - name: Checkout Tapdata Connectors Code
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata-connectors'
          ref: ${{ inputs.connectors_branch }}
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-connectors
          fetch-depth: 0
      - name: Checkout Tapdata Enterprise Web Code
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata-enterprise-web'
          ref: ${{ inputs.frontend_branch }}
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-enterprise-web
          fetch-depth: 0
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: main
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
          fetch-depth: 0
      - name: Push Tapdata to Gogs
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash tapdata-application/build/upgrade.sh --upgrade-code=true --upgrade-code-path=tapdata --gogs-project-name=tapdata
      - name: Push Tapdata Connectors to Gogs
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash tapdata-application/build/upgrade.sh --upgrade-code=true --upgrade-code-path=tapdata-connectors --gogs-project-name=tapdata-connectors
      - name: Push Tapdata Enterprise Web to Gogs
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash tapdata-application/build/upgrade.sh --upgrade-code=true --upgrade-code-path=tapdata-enterprise-web --gogs-project-name=tapdata-enterprise-web
      - name: Push Tapdata Application to Gogs
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash tapdata-application/build/upgrade.sh --upgrade-code=true --upgrade-code-path=tapdata-application --gogs-project-name=tapdata-application

  Build-Tapdata:
    runs-on: office-scan
    timeout-minutes: 60
    needs:
      - Set-Branch
      - Sync-Code-to-Internal-Repo
    steps:
      - name: Patch Maven Dependens
        run: |
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync --delete --password-file=/tmp/rsync.passwd -avz rsync://root@192.168.1.184:873/data/enterprise-temp/tapdata/ /root/.m2/
      - name: Checkout Tapdata Repo
        run: |
          rm -rf tapdata
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Get Tapdata Version
        run: |
          cd tapdata && tapdata_version=$(git rev-parse --short HEAD) && cd ..
          mkdir -p version/${{ needs.Set-Branch.outputs.TAG_NAME }}/
          echo ""- tapdata: ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }} $tapdata_version"" > version/${{ needs.Set-Branch.outputs.TAG_NAME }}/tapdata.version
          echo ""Gotapd8!"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --password-file=/tmp/rsync.passwd version/* rsync://root@192.168.1.184:873/data/version/
      - name: compile opensource tapdata
        run: |
          cd tapdata && bash build/build.sh -c tapdata -u false -l ""-Dmaven.compile.fork=true -P idaas -P oss""
      - name: Upload Outputs
        run: |
          cd tapdata && bash build/build.sh -p tapdata
          temp_dir=temp/${{ needs.Set-Branch.outputs.TAG_NAME }}
          mkdir -p $temp_dir
          cp -r output/* $temp_dir/
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --password-file=/tmp/rsync.passwd temp/ rsync://root@192.168.1.184:873/data/temp/

  Build-Connectors:
    runs-on: office-scan
    timeout-minutes: 60
    needs:
      - Set-Branch
      - Sync-Code-to-Internal-Repo
    steps:
      - name: Checkout Tapdata Repo
        run: |
          rm -rf tapdata
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Patch Maven Dependens
        run: |
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync --delete --password-file=/tmp/rsync.passwd -avz rsync://root@192.168.1.184:873/data/enterprise-temp/tapdata/ /root/.m2/
      - name: Checkout Connectors Code
        run: |
          rm -rf tapdata-connectors
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ inputs.connectors_branch }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata-connectors.git
          cd tapdata-connectors && git fetch --tags
      - name: Get Connectors Version
        run: |
          cd tapdata-connectors && tapdata_connectors_version=$(git rev-parse --short HEAD) && cd ..
          mkdir -p version/${{ needs.Set-Branch.outputs.TAG_NAME }}/
          echo ""- tapdata-connectors: ${{ inputs.connectors_branch }} $tapdata_connectors_version"" > version/${{ needs.Set-Branch.outputs.TAG_NAME }}/tapdata-connectors.version
          echo ""Gotapd8!"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --password-file=/tmp/rsync.passwd version/* rsync://root@192.168.1.184:873/data/version/
      - name: compile tapdata connectors
        run: |
          cd tapdata && bash build/build.sh -c connectors -u false -l ""-Dmaven.compile.fork=true""
      - name: Upload Outputs
        run: |
          cd tapdata && bash build/build.sh -p connectors
          temp_dir=temp/${{ needs.Set-Branch.outputs.TAG_NAME }}
          mkdir -p $temp_dir
          cp -r output/* $temp_dir/
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --password-file=/tmp/rsync.passwd temp/ rsync://root@192.168.1.184:873/data/temp/

  Build-Frontend:
    runs-on: office-scan
    timeout-minutes: 60
    needs:
      - Set-Branch
      - Sync-Code-to-Internal-Repo
    steps:
      - name: Checkout Tapdata Repo
        run: |
          rm -rf tapdata
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Checkout Frontend Code
        run: |
          rm -rf tapdata-enterprise-web
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ inputs.frontend_branch }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata-enterprise-web.git
          cd tapdata-enterprise-web && git fetch --tags
      - name: Get Frontend Version
        run: |
          cd tapdata-enterprise-web && tapdata_enterprise_web_version=$(git rev-parse --short HEAD) && cd ..
          mkdir -p version/${{ needs.Set-Branch.outputs.TAG_NAME }}/
          echo ""- tapdata-enterprise-web: ${{ inputs.frontend_branch }} $tapdata_enterprise_web_version"" > version/${{ needs.Set-Branch.outputs.TAG_NAME }}/tapdata-enterprise-web.version
          echo ""Gotapd8!"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --password-file=/tmp/rsync.passwd version/* rsync://root@192.168.1.184:873/data/version/
      - name: Build Frontend
        run: |
          pnpm config set registry https://registry.npmmirror.com
          cd tapdata && bash build/build.sh -c frontend -t ${{ needs.Set-Branch.outputs.TAG_NAME }}
      - name: Upload Outputs
        run: |
          cd tapdata && bash build/build.sh -p frontend
          temp_dir=temp/${{ needs.Set-Branch.outputs.TAG_NAME }}
          mkdir -p $temp_dir
          cp -r output/* $temp_dir/
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --password-file=/tmp/rsync.passwd temp/ rsync://root@192.168.1.184:873/data/temp/

  Build-Image:
    runs-on: office-scan
    timeout-minutes: 60
    needs:
      - Build-Tapdata
      - Build-Connectors
      - Build-Frontend
      - Set-Branch
    steps:
      - name: Clean Directory
        run: |
          rm -rf ./*
      - name: Checkout Tapdata Repo
        run: |
          rm -rf tapdata
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Package and Push Image
        run: |
          cd tapdata
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          mkdir -p output
          rsync -r --links --progress --password-file=/tmp/rsync.passwd rsync://root@192.168.1.184:873/data/temp/${{ needs.Set-Branch.outputs.TAG_NAME }}/ output/
          bash build/build.sh -o docker -t ${{ needs.Set-Branch.outputs.TAG_NAME }}
          echo '${{ secrets.HARBOR_PASS }}' | docker login harbor.internal.tapdata.io --username=${{ secrets.HARBOR_USER }} --password-stdin
          docker push harbor.internal.tapdata.io/tapdata/tapdata:${{ needs.Set-Branch.outputs.TAG_NAME }}
      - name: Print Image Info
        run: |
          echo '**Google Docker Image:**' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo ""harbor.internal.tapdata.io/tapdata/tapdata:${{ needs.Set-Branch.outputs.TAG_NAME }}"" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: Checkout Tapdata Application
        run: |
          rm -rf tapdata-application
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b version --single-branch ${{ secrets.INTERNAL_REPO }}/tapdata/tapdata-application.git
      - name: Add Commit ID and Version Map
        run: |
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --progress --password-file=/tmp/rsync.passwd rsync://root@192.168.1.184:873/data/version/${{ needs.Set-Branch.outputs.TAG_NAME }}/ ./
          echo ""## ${{ needs.Set-Branch.outputs.TAG_NAME }}"" >> tapdata-application/README.md
          cat tapdata.version >> tapdata-application/README.md
          cat tapdata-enterprise-web.version >> tapdata-application/README.md
          cat tapdata-connectors.version >> tapdata-application/README.md
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: ""Update README.md""
          branch: 'version'
          repository: 'tapdata-application'
          commit_user_name: 'cicd'
          commit_user_email: 'cicd@tapdata.io'
  
  Make-Tar-File:
    runs-on: office-scan
    timeout-minutes: 60
    needs:
      - Build-Tapdata
      - Build-Connectors
      - Build-Frontend
      - Set-Branch
    steps:
      - name: Clean Directory
        run: |
          rm -rf ./*
      - name: Checkout Tapdata Repo
        run: |
          rm -rf tapdata
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ needs.Set-Branch.outputs.TAPDATA_BRANCH }} --single-branch ssh://git@192.168.1.170:10022/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Package and Push Tar File
        run: |
          cd tapdata
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          mkdir -p output
          rsync -r --links --progress --password-file=/tmp/rsync.passwd rsync://root@192.168.1.184:873/data/temp/${{ needs.Set-Branch.outputs.TAG_NAME }}/ output/
          bash build/build.sh -o tar -t ${{ needs.Set-Branch.outputs.TAG_NAME }}
          rsync -r --progress --password-file=/tmp/rsync.passwd output/tapdata-${{ needs.Set-Branch.outputs.TAG_NAME }}.tar.gz rsync://root@58.251.34.123:873/data/enterprise-artifact/gz/

  Clean-Build-Temp:
    runs-on: office-scan
    timeout-minutes: 30
    needs:
      - Make-Tar-File
      - Build-Image
      - Set-Branch
    if: ${{ always() }}
    steps:
      - name: Clean Build Temp
        run: |
          mkdir -p temp/${{ needs.Set-Branch.outputs.TAG_NAME }}/
          echo ""${{ secrets.RSYNC_PASSWORD }}"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync -r --delete --password-file=/tmp/rsync.passwd temp/${{ needs.Set-Branch.outputs.TAG_NAME }}/ rsync://root@192.168.1.184:873/data/temp/${{ needs.Set-Branch.outputs.TAG_NAME }}/

---
name: LDP Continuous Integration With TEST

on:
  push:
    branches: [ ""master"", ""release-v*.*.*"", ""develop-v*.*.0"", ""develop-v*.*"", ""release-v*.*"" ]
  pull_request:
    branches: [ ""master"", ""release-v*.*.*"", ""develop-v*.*.0"", ""develop-v*.*"", ""release-v*.*"" ]
  schedule:
    - cron: ""30 17 * * *""
    - cron: ""30 20 * * *""
    - cron: ""30 1 * * *""

env:
  REGISTRY: ghcr.io
  TEST_DATABASE: ${{ secrets.TEST_DATABASE }}
  PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
  PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  FEISHU_PERSON_IN_CHARGE: ${{ secrets.FEISHU_PERSON_IN_CHARGE }}
  FEISHU_CHAT_ID: ${{ secrets.FEISHU_CHAT_ID }}
  FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID}}
  FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}


jobs:

  Code-Style-Check:
    runs-on: ubuntu-latest
    outputs:
      check-style: ${{ steps.check-style.outputs.error }}
    steps:
      - name: Checkout Code to Get Message
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set env
        run: |
          message=`git log -1 --pretty=%B`
          echo ""COMMIT_MESSAGE=""$message"""" >> $GITHUB_ENV
      - name: check commit message
        id: check-style
        if: (!startsWith(env.COMMIT_MESSAGE, 'feat')) && 
            (!startsWith(env.COMMIT_MESSAGE, 'fix')) &&
            (!startsWith(env.COMMIT_MESSAGE, 'refactor')) &&
            (!startsWith(env.COMMIT_MESSAGE, 'test')) &&
            (!startsWith(env.COMMIT_MESSAGE, 'chore')) &&
            (!startsWith(env.COMMIT_MESSAGE, 'Merge'))
        run: |
          echo ${{ env.COMMIT_MESSAGE }}
          echo ""error=true"" >>$GITHUB_OUTPUT

  Integration-Testing:
    runs-on: ubuntu-latest
    needs: Code-Style-Check
    timeout-minutes: 60
    if: needs.Code-Style-Check.outputs.check-style != 'true'
    steps:
      - name: Set Env if Push
        if: ${{ github.event_name == 'push' }}
        run: |
          echo ""CURRENT_BRANCH=${{ github.ref_name }}"" >> $GITHUB_ENV
          echo ""TAG_BRANCH=${{ github.ref_name }}"" >> $GITHUB_ENV
      - name: Set Env if Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo ""CURRENT_BRANCH=${{ github.ref }}"" >> $GITHUB_ENV
          echo ""TAG_BRANCH=${{ github.base_ref }}"" >> $GITHUB_ENV
          echo ""server_url=${{ github.server_url }}"" >> $GITHUB_ENV
          echo ""repository=${{ github.repository }}"" >> $GITHUB_ENV
          echo ""run_id=${{ github.run_id }}"" >> $GITHUB_ENV
          echo ""FEISHU_APP_ID=${{ env.FEISHU_APP_ID }}"" >> $GITHUB_ENV
          echo ""FEISHU_PERSON_IN_CHARGE=${{ env.FEISHU_PERSON_IN_CHARGE }}"" >> $GITHUB_ENV
          echo ""GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"" >> $GITHUB_ENV
          echo ""FEISHU_APP_SECRET=${{ env.FEISHU_APP_SECRET }}"" >> $GITHUB_ENV
      - name: Checkout Enterprise Repo to Set Env if Cron Job
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set Env if Cron Job
        if: ${{ github.event_name == 'schedule' }}
        run: |
          current_branch=""`git branch -r | cut -d ""/"" -f 2 | grep '^develop-v[0-9]*.[0-9]*.[0-9]*$' | sort -rV | head -n 1`""
          echo ""CURRENT_BRANCH=$current_branch"" >> $GITHUB_ENV
          echo ""TAG_BRANCH=$current_branch"" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Login to the github container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: get test history
        uses: actions/checkout@v2
        if: always()
        continue-on-error: true
        with:
          ref: report-test
          path: report-test
      - name: compile plugin-kit module
        run: |
          chmod u+x build/build.sh
          build/build.sh -c plugin-kit || exit 1
      - name: file-storages 模块编译
        run: |
          chmod u+x build/build.sh
          build/build.sh -c file-storages || exit 1
      - name: compile connectors-common module
        run:
          build/build.sh -c connectors-common
      - name: compile manager module
        run:
          build/build.sh -c manager
      - name: compile iengine modules
        run: |
          build/build.sh -c iengine
      - name: compile connectors module
        run:
          build/build.sh -c connectors
      - name: compile opensource tapdata-cli module
        run:
          build/build.sh -c tapdata-cli
      - name: package module and make image
        run: |
          cur_timestamp=$((`date '+%s'`))
          tag=`git describe --tag --long HEAD | awk -F '-' '{print $3}'`""-${cur_timestamp}""
          docker_tag=""ghcr.io/tapdata/${{ env.TAG_BRANCH }}:$tag""
          echo $docker_tag > build/image/tag
          echo ""docker_tag=$docker_tag"" >> $GITHUB_ENV
          sudo build/build.sh -p 1 -o image
      - name: ""启动本地测试环境""
        run: |
          echo $docker_tag
          docker run -e mode=use --name tapd -d -p 3000:3000 $docker_tag bash
          bash build/wait_tapd_ready.sh
      - name: ""基本用例集成测试""
        env:
          CASE_CONFIG: ${{ secrets.CASE_CONFIG }}
        run: |
          sudo apt update -y
          sudo apt install -y libmysqlclient-dev
          pip3 install poetry
          cd tapshell && pip3 install . && cd ..
          cd auto-test && pip3 install -r requirements.txt && cd -
          cd auto-test && chmod +x ./test.sh && bash ./test.sh
          if [[ -f /tmp/fail ]]; then echo ""**基本用例集成测试结果: 未通过, 请点开步骤检查详细日志**"" >> $GITHUB_STEP_SUMMARY; fi
          if [[ ! -f /tmp/fail ]]; then echo ""**基本用例集成测试结果: 通过**"" >> $GITHUB_STEP_SUMMARY; fi
      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v7
      - name: publish pip package if push
        if: ${{ success() && env.CURRENT_BRANCH == 'master' && github.event_name == 'push' }}
        run: |
          git diff-tree --name-only HEAD^ HEAD | grep tapshell > /dev/null
          if [[ $? -ne 0 ]]; then echo ""Do not publish pip package"" && exit 0; fi
          cd tapshell && poetry build && poetry publish --username ${{ env.PYPI_USERNAME }} --password ${{ env.PYPI_PASSWORD }}
      - name: update github page
        id: gh_pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: report-test
          publish_dir: gh_pages
          keep_files: true
      - name: print summary
        if: ${{ steps.gh_pages.conclusion == 'success' }}
        env:
          RUN_SIGN: ${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}
          BRANCH: ${{ github.ref }}
        run: |
          BRANCH_DIR=`echo $BRANCH | sed ""s:/:-:g""`
          echo ""[Click to view test report](https://tapdata.github.io/tapdata/$BRANCH_DIR/$RUN_SIGN)"" >> $GITHUB_STEP_SUMMARY

---
name: Merge Request CI and Nightly Build

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"", ""develop"", ""release-v*.*"" ]
  schedule:
    - cron: ""0 21 * * *""
  workflow_dispatch:
    inputs:
      mrci_run:
        description: 'MRCI run or not'
        required: true
        type: boolean
        default: false

jobs:

  Get-Stable-Branch:
    runs-on: ubuntu-latest
    outputs:
      OPENSOURCE_BRANCH: ${{ steps.set-output.outputs.OPENSOURCE_BRANCH }}
      ENTERPRISE_BRANCH: ${{ steps.set-output.outputs.ENTERPRISE_BRANCH }}
      FRONTEND_BRANCH: ${{ steps.set-output.outputs.FRONTEND_BRANCH }}
      TAG_NAME: ${{ steps.set-output.outputs.TAG_NAME }}
    steps:
      - name: Checkout Tapdata Opensource
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata
          fetch-depth: 0
      - name: Set Tag
        run: |
          cd tapdata
          main_tag=$(git describe --tags | cut -d '-' -f 1)
          current_timestamp=$(date +%s)
          hex_timestamp=$(printf ""%X"" ""$current_timestamp"" | tr 'A-F' 'a-f')
          tag_name=""$main_tag-$hex_timestamp""
          echo ""TAG_NAME=$tag_name"" >> $GITHUB_ENV
      - name: Checkout Tapdata Enterprise Web
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-enterprise-web'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-enterprise-web
          depth: 0
      - name: Checkout Tapdata Enterpris
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-enterprise'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-enterprise
          depth: 0
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: ""main""
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
      - name: Get OpenSource Branch Name -- Common
        run: |
          echo ""OPENSOURCE_BRANCH=${{ github.ref_name }}"" >> $GITHUB_ENV
      - name: Get OpenSource Branch Name -- Pr
        if: github.event_name == 'pull_request'
        run: |
          echo ""OPENSOURCE_BRANCH=${{ github.event.pull_request.head.ref }}"" >> $GITHUB_ENV
      - name: Get last stable branch
        id: set-output
        run: |
          cd tapdata-application
          OPENSOURCE_BRANCH=${{ env.OPENSOURCE_BRANCH }}
          ENTERPRISE_BRANCH=""develop""
          FRONTEND_BRANCH=""develop""
          echo ""::set-output name=OPENSOURCE_BRANCH::${OPENSOURCE_BRANCH}""
          echo ""::set-output name=ENTERPRISE_BRANCH::${ENTERPRISE_BRANCH}""
          echo ""::set-output name=FRONTEND_BRANCH::${FRONTEND_BRANCH}""
          echo ""::set-output name=TAG_NAME::${TAG_NAME}""

  Push-Code-To-GOGS:
    runs-on: ubuntu-latest
    needs: Get-Stable-Branch
    steps:
      - name: Checkout Tapdata Code
        uses: actions/checkout@v3
        with:
          repository: 'tapdata/tapdata'
          ref: ${{ needs.Get-Stable-Branch.outputs.OPENSOURCE_BRANCH }}
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata
          fetch-depth: 0
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: 'main'
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
          fetch-depth: 0
      - name: Push Tapdata to Gogs
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: |
            bash tapdata-application/build/upgrade.sh --upgrade-code=true --upgrade-code-path=tapdata --gogs-project-name=tapdata

  Scan-Tapdata:
    runs-on: office-scan
    needs:
      - Get-Stable-Branch
      - Push-Code-To-GOGS
    timeout-minutes: 30
    steps:
      - name: Clean Directory
        run: |
          rm -rf ./*
      - name: Checkout Tapdata Code
        run: |
          export GIT_SSH_COMMAND=""ssh -o StrictHostKeyChecking=no""
          git clone -b ${{ needs.Get-Stable-Branch.outputs.OPENSOURCE_BRANCH }} ${{ secrets.INTERNAL_REPO }}/tapdata/tapdata.git
          cd tapdata && git fetch --tags
      - name: Patch Maven Dependens
        run: |
          echo ""Gotapd8!"" > /tmp/rsync.passwd && chmod 600 /tmp/rsync.passwd
          rsync --delete --password-file=/tmp/rsync.passwd -avz rsync://root@192.168.1.184:873/data/enterprise-temp/tapdata/ /root/.m2/
      - name: Get OpenSource Branch Name -- Common
        run: |
          echo ""OPENSOURCE_BRANCH=${{ github.ref_name }}"" >> $GITHUB_ENV
      - name: Set OpenSource Branch Name -- Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          branch_name=""${{ github.event.pull_request.head.ref }}""
          echo ""OPENSOURCE_BRANCH=$branch_name"" >> $GITHUB_ENV
      - name: Build Tapdata - And Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd tapdata && mvn clean test -T1C -Dmaven.compile.fork=true -P idaas && mvn sonar:sonar \
            -Dsonar.projectKey=tapdata -Dsonar.host.url=${{ secrets.SONAR_HOST }} \
            -Dsonar.login=${{ secrets.SONAR_USER }} -Dsonar.password=${{ secrets.SONAR_PASS }} \
            -Dsonar.branch.name=${{ env.OPENSOURCE_BRANCH }}
      - name: Prevent Skip Unittest
        run: |
          cd tapdata
          find ./ -name jacoco | grep iengine
          find ./ -name jacoco | grep manager
      - name: Install Dependens
        run: |
          apt install -y jq
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: tapdata/target/sonar/report-task.txt

  Build-And-Deploy:
    if: ${{ github.event_name == 'schedule' || inputs.mrci_run }}
    runs-on: ubuntu-latest
    needs:
      - Get-Stable-Branch
    outputs:
      IP: ${{ steps.get_ip_port.outputs.IP }}
      PORT: ${{ steps.get_ip_port.outputs.PORT }}
    steps:
      - name: Get OpenSource Branch Name -- Common
        run: |
          echo ""OPENSOURCE_BRANCH=${{ github.ref_name }}"" >> $GITHUB_ENV
      - name: Set OpenSource Branch Name -- Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          branch_name=""${{ github.event.pull_request.head.ref }}""
          echo ""OPENSOURCE_BRANCH=$branch_name"" >> $GITHUB_ENV
      - name: Trigger - Build And Deploy
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: tapdata
          repo: tapdata-enterprise
          github_token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          workflow_file_name: build-self-hosted.yaml
          ref: ${{ needs.Get-Stable-Branch.outputs.ENTERPRISE_BRANCH }}
          wait_interval: 10
          client_payload: '{""FRONTEND_BRANCH"": ""${{ needs.Get-Stable-Branch.outputs.FRONTEND_BRANCH }}"", ""OPENSOURCE_BRANCH"": ""${{ env.OPENSOURCE_BRANCH }}"", ""FOR_AUTO_TEST"": ""true"", ""TAG_NAME"": ""${{ needs.Get-Stable-Branch.outputs.TAG_NAME }}""}'
          propagate_failure: true
          trigger_workflow: true
          wait_workflow: true
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: 'tapdata-cloud-cluster'
          location: 'asia-east2'
      - name: Checkout Tapdata Application
        uses: actions/checkout@v2
        with:
          repository: 'tapdata/tapdata-application'
          ref: ""main""
          token: ${{ secrets.TAPDATA_ENT_CICD_TOKEN }}
          path: tapdata-application
      - name: Get IP and Port
        id: get_ip_port
        run: |
          bash tapdata-application/build/upgrade.sh --get-ip-port=true --version=${{ needs.Get-Stable-Branch.outputs.TAG_NAME }} --deploy-way=docker-compose
          IP=$(cat .service_ip_port | awk -F':' '{print $1}')
          PORT=$(cat .service_ip_port | awk -F':' '{print $2}')
          echo ""::set-output name=IP::$IP""
          echo ""::set-output name=PORT::$PORT""

  MRCI:
    runs-on: office-scan
    if: ${{ github.event_name == 'schedule' || inputs.mrci_r"
alibaba;fastjson2;alibaba/fastjson2;https://github.com/alibaba/fastjson2;https://api.github.com/repos/alibaba/fastjson2;main;17/04/2022 06:27;22/04/2024 05:45;TRUE;"name: Java CI

on:
  push:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-excluding-paths
    paths-ignore:
      - 'docs/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        java: [ 8, 11, 17, 21 ]
      fail-fast: false
      max-parallel: 16
    name: Test on JDK ${{ matrix.java }} OS ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          cache: maven
      - name: Build with Maven and generate code coverage
        run: ./mvnw -V --no-transfer-progress -Pgen-javadoc -Pgen-dokka clean package
      # https://github.com/marketplace/actions/codecov
      - uses: codecov/codecov-action@v3
        with:
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

---
"
ververica;flink-sql-gateway;ververica/flink-sql-gateway;https://github.com/ververica/flink-sql-gateway;https://api.github.com/repos/ververica/flink-sql-gateway;master;07/02/2020 14:44;02/04/2024 19:44;FALSE;
mio4;Java-Gold;mio4/Java-Gold;https://github.com/mio4/Java-Gold;https://api.github.com/repos/mio4/Java-Gold;master;07/02/2020 17:32;04/04/2024 18:58;FALSE;
TaleLin;lin-cms-spring-boot;TaleLin/lin-cms-spring-boot;https://github.com/TaleLin/lin-cms-spring-boot;https://api.github.com/repos/TaleLin/lin-cms-spring-boot;master;09/02/2020 16:20;21/04/2024 09:00;TRUE;"name: Java CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 8, 9, 11 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Build with Maven
        run: mvn test

---
"
fanyong920;jvppeteer;fanyong920/jvppeteer;https://github.com/fanyong920/jvppeteer;https://api.github.com/repos/fanyong920/jvppeteer;master;11/03/2020 10:45;21/04/2024 08:23;TRUE;"name: Java CI build and test

on: [push]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        java: [8]
      fail-fast: false
      max-parallel: 4
    name: Test JDK ${{ matrix.java }}, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Verify with Maven
        run: mvn verify
...

---
"
LGH1996;TapClick;LGH1996/TapClick;https://github.com/LGH1996/TapClick;https://api.github.com/repos/LGH1996/TapClick;master;09/02/2020 16:25;22/04/2024 13:19;FALSE;
Urunov;SpringBoot-Projects-FullStack;Urunov/SpringBoot-Projects-FullStack;https://github.com/Urunov/SpringBoot-Projects-FullStack;https://api.github.com/repos/Urunov/SpringBoot-Projects-FullStack;master;15/02/2020 15:05;20/04/2024 16:38;FALSE;
Anuj-Kumar-Sharma;DS-Algo;Anuj-Kumar-Sharma/DS-Algo;https://github.com/Anuj-Kumar-Sharma/DS-Algo;https://api.github.com/repos/Anuj-Kumar-Sharma/DS-Algo;master;15/02/2020 21:36;19/04/2024 10:41;FALSE;
RudeCrab;rude-java;RudeCrab/rude-java;https://github.com/RudeCrab/rude-java;https://api.github.com/repos/RudeCrab/rude-java;master;16/02/2020 10:20;22/04/2024 13:31;FALSE;
coding-parrot;Low-Level-Design;coding-parrot/Low-Level-Design;https://github.com/coding-parrot/Low-Level-Design;https://api.github.com/repos/coding-parrot/Low-Level-Design;master;18/02/2020 13:33;21/04/2024 11:25;FALSE;
bacen;pix-dict-quickstart;bacen/pix-dict-quickstart;https://github.com/bacen/pix-dict-quickstart;https://api.github.com/repos/bacen/pix-dict-quickstart;master;18/02/2020 15:44;03/04/2024 02:13;FALSE;
yeecode;EasyRPC;yeecode/EasyRPC;https://github.com/yeecode/EasyRPC;https://api.github.com/repos/yeecode/EasyRPC;master;22/02/2020 03:04;22/04/2024 06:55;FALSE;
datageartech;datagear;datageartech/datagear;https://github.com/datageartech/datagear;https://api.github.com/repos/datageartech/datagear;master;22/02/2020 05:06;18/04/2024 14:18;FALSE;
JesusFreke;smalidea;JesusFreke/smalidea;https://github.com/JesusFreke/smalidea;https://api.github.com/repos/JesusFreke/smalidea;master;24/02/2020 01:33;18/04/2024 11:07;FALSE;
alipay;alipay-easysdk;alipay/alipay-easysdk;https://github.com/alipay/alipay-easysdk;https://api.github.com/repos/alipay/alipay-easysdk;master;24/02/2020 07:03;19/04/2024 05:54;FALSE;
patzly;grocy-android;patzly/grocy-android;https://github.com/patzly/grocy-android;https://api.github.com/repos/patzly/grocy-android;master;06/04/2020 22:01;22/04/2024 10:34;TRUE;"name: Android nightly build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout branch
      uses: actions/checkout@v3
      with:
        ref: 'master'
    
    - name: Replace applicationId and name
      run: |
        sed -i 's/applicationId ""xyz.zedler.patrick.grocy""/applicationId ""xyz.zedler.patrick.grocy.nightly""/' app/build.gradle
        sed -i 's|<string name=""app_name"" translatable=""false"">Grocy</string>|<string name=""app_name"" translatable=""false"">Grocy Nightly</string>|g' app/src/main/res/values/strings.xml
        
    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Rename artifacts
      run: |
        mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/Grocy-Android-master-$(date +'%Y%m%d').apk
        cp app/src/main/res/raw/changelog.txt app/build/outputs/apk/debug/Grocy-Android-master-$(date +'%Y%m%d')-changelog.txt
    
    - name: Upload artifacts
      uses: pyTooling/Actions/releaser@r0
      continue-on-error: true
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        rm: true
        tag: nightly
        files: |
          app/build/outputs/apk/debug/*.apk
          app/build/outputs/apk/debug/*.txt
    
    - name: Replace applicationId to default for checkout without git commit
      run: |
        sed -i 's/applicationId ""xyz.zedler.patrick.grocy.nightly""/applicationId ""xyz.zedler.patrick.grocy""/' app/build.gradle
        sed -i 's|<string name=""app_name"" translatable=""false"">Grocy</string>|<string name=""app_name"" translatable=""false"">Grocy Nightly</string>|g' app/src/main/res/values/strings.xml
        
    - name: Checkout branch
      uses: actions/checkout@v3
      with:
        ref: 'feature/mlkit_scanner'
        
    - name: Replace applicationId and name
      run: |
        sed -i 's/applicationId ""xyz.zedler.patrick.grocy""/applicationId ""xyz.zedler.patrick.grocy.nightly""/' app/build.gradle
        sed -i 's%@string/app_name%Grocy Nightly%' app/src/main/AndroidManifest.xml
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Rename artifacts
      run: |
        mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/Grocy-Android-mlkit-$(date +'%Y%m%d').apk
        cp app/src/main/res/raw/changelog.txt app/build/outputs/apk/debug/Grocy-Android-mlkit-$(date +'%Y%m%d')-changelog.txt

    - name: Upload artifacts
      uses: pyTooling/Actions/releaser@r0
      continue-on-error: true
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        rm: false
        tag: nightly
        files: |
          app/build/outputs/apk/debug/*.apk
          app/build/outputs/apk/debug/*.txt

---
"
373675032;moti-cloud;373675032/moti-cloud;https://github.com/373675032/moti-cloud;https://api.github.com/repos/373675032/moti-cloud;master;29/02/2020 02:50;21/04/2024 12:21;FALSE;
youlaitech;youlai-mall;youlaitech/youlai-mall;https://github.com/youlaitech/youlai-mall;https://api.github.com/repos/youlaitech/youlai-mall;master;01/03/2020 03:19;22/04/2024 12:06;FALSE;
darryrzhong;Android-MvvmComponent-App;darryrzhong/Android-MvvmComponent-App;https://github.com/darryrzhong/Android-MvvmComponent-App;https://api.github.com/repos/darryrzhong/Android-MvvmComponent-App;master;01/03/2020 13:12;22/04/2024 12:53;FALSE;
ZaneYork;SMAPI-Android-Installer;ZaneYork/SMAPI-Android-Installer;https://github.com/ZaneYork/SMAPI-Android-Installer;https://api.github.com/repos/ZaneYork/SMAPI-Android-Installer;master;04/03/2020 11:12;20/04/2024 00:36;FALSE;
unline2;RandomImage;unline2/RandomImage;https://github.com/unline2/RandomImage;https://api.github.com/repos/unline2/RandomImage;master;04/03/2020 11:41;19/04/2024 14:34;FALSE;
luoye663;e5;luoye663/e5;https://github.com/luoye663/e5;https://api.github.com/repos/luoye663/e5;master;05/03/2020 04:35;22/04/2024 10:20;FALSE;
leelovejava;cloud2020;leelovejava/cloud2020;https://github.com/leelovejava/cloud2020;https://api.github.com/repos/leelovejava/cloud2020;master;06/03/2020 03:22;31/03/2024 16:23;FALSE;
krlvm;PowerTunnel-Android;krlvm/PowerTunnel-Android;https://github.com/krlvm/PowerTunnel-Android;https://api.github.com/repos/krlvm/PowerTunnel-Android;master;07/03/2020 23:16;22/04/2024 08:37;FALSE;
EiletXie;cloud2020;EiletXie/cloud2020;https://github.com/EiletXie/cloud2020;https://api.github.com/repos/EiletXie/cloud2020;master;09/03/2020 17:45;31/03/2024 16:23;FALSE;
BanqiJane;Bilibili_Danmuji;BanqiJane/Bilibili_Danmuji;https://github.com/BanqiJane/Bilibili_Danmuji;https://api.github.com/repos/BanqiJane/Bilibili_Danmuji;master;11/05/2020 14:23;20/04/2024 15:52;TRUE;"name: Delete Workflow Runs

on:
  workflow_dispatch:

  schedule:
    - cron: ""0 16 * * *""

jobs:
  del_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3

---
# 利用GitHub Action自动构建多框架的docker镜像
name: release

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release Tag' 
        required: true
        default: 'v'
  # main分支的push操作会触发当前脚本的执行
#  push:
#    branches: [ master ]
  # main分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ main ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
  # schedule:
  #   - cron: '0 16 * * *'
  # # 点击star时开始任务
  # watch:
  #   types: started


jobs:
  release:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    # 步骤
    steps:
      # 切换到主分支
      - name: Checkout
        uses: actions/checkout@master
      
      # 获取一些参数
      - name: Prepare
        id: prepare
        run: |
          sed -n 7p build.gradle > version
          awk '{printf(""%s"",$0)}' version | sed 's/\ //g' $1 > new
          sed -i ""s/'//g"" new
          sed -i ""s/version=//g"" new
          mv new version
          FILE_NAME=$(cat version)
          sed -i ""s/beta//g"" version
          TAG_VERSION=$(cat version)
          echo ""file_name=${FILE_NAME}"" >> $GITHUB_OUTPUT
          echo ""tag_version=${TAG_VERSION}"" >> $GITHUB_OUTPUT

          echo ""TAG=弹幕姬发行版${TAG_VERSION}(含绿色版本)"" >> $GITHUB_OUTPUT

          echo ${FILE_NAME}
          echo ${TAG_VERSION}

      # 初始化 JDK8 环境
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      # 使用Gradle编译构建
      - name: Build with Gradle
        run: |
          sudo chmod +x ./gradlew
          sudo chmod +x lib/javastruct-0.1.jar
          sudo ./gradlew build -x test
          sudo mv $(find build -type f -size +10M) ./

      # 下载openjdk-8-jre 的压缩包，网上没有下载Windows jre8的地方，所以使用danmuji docker构建的release下载
      - name: Download OpenJDK8 Archive
        run: |
          sudo apt-get install -y rar zip unzip
          wget https://github.com/zzcabc/Docker_Buildx_Danmuji/releases/download/openjdk-8-jre/openjdk-8-jre.zip
          unzip openjdk-8-jre.zip -d openjdk-8-jre

      # 编辑文件
      - name: Edit files
        run: |
          mkdir danmuji
          mkdir danmuji-green

          mv openjdk-8-jre danmuji-green/openjdk-8-jre

          echo ""仅在本机有jdk8或jre8版本以上的环境下"" > danmuji/readme.txt
          echo ""window下：直接run.bat运行"" >> danmuji/readme.txt
          echo ""其它系统或方法：在本软件目录下cmd命令行执行 java -jar -Xms64m -Xmx128m  BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333 即可运行"" >> danmuji/readme.txt
          echo ""--server.port=23333为端口 想修改端口可以修改run.bat里面的这个参数"" >> danmuji/readme.txt
          echo ""如何设置？打开浏览器地址栏输入http://127.0.0.1:23333进行设置；"" >> danmuji/readme.txt
          echo ""如何退出？直接关闭命令行窗口即可退出"" >> danmuji/readme.txt
          echo ""如何获取更新？建议持续关注github项目官页"" >> danmuji/readme.txt
          echo ""不会使用？有问题反馈？ GitHub上开个issue提问 或者 主页 点击联系我 邮件发送"" >> danmuji/readme.txt

          echo ""@echo off"" > danmuji/run.bat
          echo ""title BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}-%date%-%time%-%cd%"" >> danmuji/run.bat
          echo ""java -jar -Xms64m -Xmx128m BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333"" >> danmuji/run.bat


          echo ""该版本为window绿色版本，"" > danmuji-green/readme.txt
          echo ""运行方法："" >> danmuji-green/readme.txt
          echo ""直接运行run.bat（window下）记得允许网络"" >> danmuji-green/readme.txt
          echo ""其他系统或方法：解压完成 直接在本目录打开控制台 或者 控制台cd本目录命令执行openjdk-8-jre\bin\java -jar -Xms64m -Xmx128m BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333 即可运行"" >> danmuji-green/readme.txt
          echo ""--server.port=23333为端口 想修改端口可以修改run.bat里面的这个参数"" >> danmuji-green/readme.txt
          echo ""如何设置？打开浏览器地址栏输入 http://127.0.0.1:23333进行设置；"" >> danmuji-green/readme.txt
          echo ""如何退出？直接关闭命令行窗口即可退出"" >> danmuji-green/readme.txt
          echo ""如何获取更新？建议持续关注github项目官页"" >> danmuji-green/readme.txt
          echo ""不会使用？有问题反馈？ GitHub上开个issue提问 或者 主页 点击联系我 邮件发送"" >> danmuji-green/readme.txt

          echo ""@echo off"" > danmuji-green/run.bat
          echo ""title BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}-%date%-%time%-%cd%"" >> danmuji-green/run.bat
          echo ""openjdk-8-jre\bin\java -jar -Xms64m -Xmx128m BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333"" >> danmuji-green/run.bat
      
    
      # 压缩文件
      - name: Compressed Files
        run: |
          export BUILD_DATE=$(date +""%Y-%m-%d"")
          echo ""BUILD_DATE=$BUILD_DATE"" >> $GITHUB_ENV
          cp ./*.jar danmuji/
          cp ./*.jar danmuji-green/
          zip -r danmuji-green.zip danmuji-green/
          zip -r danmuji.zip danmuji/
          rar a -r danmuji-green.rar danmuji-green/
          rar a danmuji.rar danmuji/
          tar cvf danmuji.tar danmuji/

      # - name: Upload Files To Release
      #   uses: ncipollo/release-action@main
      #   with:
      #     tag: ${{ steps.prepare.outputs.TAG }}
      #     allowUpdates: true
      #     replacesArtifacts: true
      #     body: ${{ env.BUILD_DATE }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     artifacts: danmuji.tar,danmuji-green.rar,danmuji-green.zip,danmuji.rar,danmuji.zip
      - name: Upload Files To Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.prepare.outputs.TAG }}
          tag_name: ${{ steps.prepare.outputs.tag_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: danmuji.tar,danmuji-green.rar,danmuji-green.zip,danmuji.rar,danmuji.zip
---
# 利用GitHub Action自动构建多框架的docker镜像
name: release_update_readme

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release Tag' 
        required: true
        default: 'v'
  # main分支的push操作会触发当前脚本的执行
#  push:
#    branches: [ master ]
  # main分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ main ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
  # schedule:
  #   - cron: '0 16 * * *'
  # # 点击star时开始任务
  # watch:
  #   types: started


jobs:
  release_update_readme:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    # 步骤
    steps:
      # 切换到主分支
      - name: Checkout
        uses: actions/checkout@master
      
      # 获取一些参数
      - name: Prepare
        id: prepare
        run: |
          GITHUB_VERSION=$(curl -sX GET ""https://api.github.com/repos/BanqiJane/Bilibili_Danmuji/releases/latest"" | awk '/tag_name/{print $4;exit}' FS='[""""]')
          echo ""github_version=${GITHUB_VERSION}"" >> $GITHUB_OUTPUT
          
          sed -n 7p build.gradle > version
          awk '{printf(""%s"",$0)}' version | sed 's/\ //g' $1 > new
          sed -i ""s/'//g"" new
          sed -i ""s/version=//g"" new
          mv new version
          FILE_NAME=$(cat version)
          sed -i ""s/beta//g"" version
          TAG_VERSION=$(cat version)
          echo ""file_name=${FILE_NAME}"" >> $GITHUB_OUTPUT
          echo ""tag_version=${TAG_VERSION}"" >> $GITHUB_OUTPUT

          echo ""TAG=弹幕姬发行版${TAG_VERSION}(含绿色版本)"" >> $GITHUB_OUTPUT

          echo ${GITHUB_VERSION}
          echo ${FILE_NAME}
          echo ${TAG_VERSION}

      # 初始化 JDK8 环境
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'

      # 使用Gradle编译构建
      - name: Build with Gradle
        run: |
          sudo chmod +x ./gradlew
          sudo chmod +x lib/javastruct-0.1.jar
          sudo ./gradlew build -x test
          sudo mv $(find build -type f -size +10M) ./

      # 下载openjdk-8-jre 的压缩包，网上没有下载Windows jre8的地方，所以使用danmuji docker构建的release下载
      - name: Download OpenJDK8 Archive
        run: |
          sudo apt-get install -y rar zip unzip
          wget https://github.com/zzcabc/Docker_Buildx_Danmuji/releases/download/openjdk-8-jre/openjdk-8-jre.zip
          unzip openjdk-8-jre.zip -d openjdk-8-jre

      # 编辑文件
      - name: Edit files
        run: |
          mkdir danmuji
          mkdir danmuji-green

          mv openjdk-8-jre danmuji-green/openjdk-8-jre

          echo ""仅在本机有jdk8或jre8版本以上的环境下"" > danmuji/readme.txt
          echo ""window下：直接run.bat运行"" >> danmuji/readme.txt
          echo ""其它系统或方法：在本软件目录下cmd命令行执行 java -jar -Xms64m -Xmx128m  BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333 即可运行"" >> danmuji/readme.txt
          echo ""--server.port=23333为端口 想修改端口可以修改run.bat里面的这个参数"" >> danmuji/readme.txt
          echo ""如何设置？打开浏览器地址栏输入http://127.0.0.1:23333进行设置；"" >> danmuji/readme.txt
          echo ""如何退出？直接关闭命令行窗口即可退出"" >> danmuji/readme.txt
          echo ""如何获取更新？建议持续关注github项目官页"" >> danmuji/readme.txt
          echo ""不会使用？有问题反馈？ GitHub上开个issue提问 或者 主页 点击联系我 邮件发送"" >> danmuji/readme.txt

          echo ""@echo off"" > danmuji/run.bat
          echo ""title BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}-%date%-%time%-%cd%"" >> danmuji/run.bat
          echo ""java -jar -Xms64m -Xmx128m BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333"" >> danmuji/run.bat


          echo ""该版本为window绿色版本，"" > danmuji-green/readme.txt
          echo ""运行方法："" >> danmuji-green/readme.txt
          echo ""直接运行run.bat（window下）记得允许网络"" >> danmuji-green/readme.txt
          echo ""其他系统或方法：解压完成 直接在本目录打开控制台 或者 控制台cd本目录命令执行openjdk-8-jre\bin\java -jar -Xms64m -Xmx128m BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333 即可运行"" >> danmuji-green/readme.txt
          echo ""--server.port=23333为端口 想修改端口可以修改run.bat里面的这个参数"" >> danmuji-green/readme.txt
          echo ""如何设置？打开浏览器地址栏输入 http://127.0.0.1:23333进行设置；"" >> danmuji-green/readme.txt
          echo ""如何退出？直接关闭命令行窗口即可退出"" >> danmuji-green/readme.txt
          echo ""如何获取更新？建议持续关注github项目官页"" >> danmuji-green/readme.txt
          echo ""不会使用？有问题反馈？ GitHub上开个issue提问 或者 主页 点击联系我 邮件发送"" >> danmuji-green/readme.txt

          echo ""@echo off"" > danmuji-green/run.bat
          echo ""title BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}-%date%-%time%-%cd%"" >> danmuji-green/run.bat
          echo ""openjdk-8-jre\bin\java -jar -Xms64m -Xmx128m BiliBili_Danmuji-${{ steps.prepare.outputs.file_name }}.jar --server.port=23333"" >> danmuji-green/run.bat
      
    
      # 压缩文件
      - name: Compressed Files
        run: |
          export BUILD_DATE=$(date +""%Y-%m-%d"")
          echo ""BUILD_DATE=$BUILD_DATE"" >> $GITHUB_ENV
          cp ./*.jar danmuji/
          cp ./*.jar danmuji-green/
          zip -r danmuji-green.zip danmuji-green/
          zip -r danmuji.zip danmuji/
          rar a -r danmuji-green.rar danmuji-green/
          rar a danmuji.rar danmuji/
          tar cvf danmuji.tar danmuji/

      # - name: Upload Files To Release
      #   uses: ncipollo/release-action@main
      #   with:
      #     tag: ${{ steps.prepare.outputs.TAG }}
      #     allowUpdates: true
      #     replacesArtifacts: true
      #     body: ${{ env.BUILD_DATE }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     artifacts: danmuji.tar,danmuji-green.rar,danmuji-green.zip,danmuji.rar,danmuji.zip
      - name: Upload Files To Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.prepare.outputs.TAG }}
          tag_name: ${{ steps.prepare.outputs.tag_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: danmuji.tar,danmuji-green.rar,danmuji-green.zip,danmuji.rar,danmuji.zip

      # 初始化版本号与git 
      - name: commit
        run: |
          git config --global user.name 
          git config --global user.email 


          echo ""更新MD文档 版本${{ steps.prepare.outputs.github_version }} 替换成 版本${{ steps.prepare.outputs.tag_version }}""
          sed -i ""s/版本${{ steps.prepare.outputs.github_version }}/版本${{ steps.prepare.outputs.tag_version }}/g"" README.md

          echo ""更新MD文档URL""
          sed -i ""s|releases/tag/${{ steps.prepare.outputs.github_version }}|releases/tag/${{ steps.prepare.outputs.tag_version }}|g"" README.md
          
          echo ""更新文档中java运行""
          sed -i ""s/BiliBili_Danmuji-${{ steps.prepare.outputs.github_version }}beta/BiliBili_Danmuji-${{ steps.prepare.outputs.tag_version }}beta/g"" README.md
          
          git add README.md
          git commit -m ""${{ steps.prepare.outputs.tag_version }} update""

      # 推送版本号到GitHub 
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
---
"
SceneView;sceneform-android;SceneView/sceneform-android;https://github.com/SceneView/sceneform-android;https://api.github.com/repos/SceneView/sceneform-android;master;22/10/2020 00:06;16/04/2024 05:35;TRUE;"name: Build Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Debug build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build library
        run: ./gradlew assembleDebug --stacktrace
---
name: 'Close stale issues and PRs'
on:
  schedule:
    - cron: '30 5 * * *'

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v4
        with:
          close-issue-message: 'Closing this issue after a prolonged period of inactivity. If this issue is still present in the latest release, please feel free to create a new issue with up-to-date information.'
          stale-issue-message: 'Hey there, it looks like there has been no activity on this issue recently. Has the issue been fixed, or does it still require the community&#39;s attention? This issue may be closed if no further activity occurs. Thank you for your contributions.'
          days-before-stale: 90
          days-before-close: 7
          enable-statistics: true
          operations-per-run: 60
          exempt-issue-labels: 'acknowledged,needs-triage'
---
name: Publish Release To Maven Central

on:
  # Run this workflow when a new GitHub release is created
  #  release:
  #    types: [ released ]
  workflow_dispatch:

jobs:
  publish:
    name: Release build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Publish release
        run: ./gradlew closeAndReleaseRepository --no-daemon --no-parallel
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
---
name: Upload release to Sonatype Staging Repository

# Run this workflow when a tag is pushed
on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  publish:
    name: Release build and updload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 17

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Upload release to Sonatype Staging Repository
        run: ./gradlew publishAllPublicationsToMavenCentralRepository --no-daemon --no-parallel
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
          #SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          #SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          #SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
---
"
anji-plus;captcha;anji-plus/captcha;https://github.com/anji-plus/captcha;https://api.github.com/repos/anji-plus/captcha;master;12/03/2020 06:09;19/04/2024 12:53;FALSE;
gaucho-matrero;altoclef;gaucho-matrero/altoclef;https://github.com/gaucho-matrero/altoclef;https://api.github.com/repos/gaucho-matrero/altoclef;main;15/12/2020 03:47;20/04/2024 07:09;TRUE;"# This workflow will build a Java project with Gradle
# For more information check https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
     branches: [ main ]
  pull_request:
     branches: [ main ]
    
jobs:   
  build:
   runs-on: ubuntu-latest
   
   steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Artifacts
        path: ./build/libs
        
    - name: Hash Artifacts 
      run: |
        for u in $(ls) 
        do
        echo ""$(sha256sum $u)"" >> hashes.sha256
        done
      shell: bash
      working-directory: ./build/libs
  
    - name: Upload Hashes
      uses: actions/upload-artifact@v2
      with:
        name: Hashes
        path: ./build/libs/hashes.sha256

---
name: Deploy Javadoc

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'
      - name: Generate Javadoc
        run: ./gradlew javadoc
      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.8
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: javadoc
          CLEAN: true
          FOLDER: build/docs/javadoc
          TARGET_FOLDER: javadoc
---
"
donkingliang;ConsecutiveScroller;donkingliang/ConsecutiveScroller;https://github.com/donkingliang/ConsecutiveScroller;https://api.github.com/repos/donkingliang/ConsecutiveScroller;master;15/03/2020 09:01;22/04/2024 08:10;FALSE;
ByteLegend;ByteLegend;ByteLegend/ByteLegend;https://github.com/ByteLegend/ByteLegend;https://api.github.com/repos/ByteLegend/ByteLegend;master;01/02/2021 11:11;21/04/2024 18:04;TRUE;"name: build-test-webeditor
on:
  push:
    branches-ignore:
      - release
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - versions.json
      - livestream-data.json
  pull_request:
    branches-ignore:
      - release
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - versions.json
      - livestream-data.json
jobs:
  build:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Use Node.js 14
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn cache dir)""
      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ matrix.node-version }}
      - run: yarn config set script-shell /bin/bash && yarn
        working-directory: github1s
      - run: yarn build:vscode
        working-directory: github1s
      - run: yarn yalc
        working-directory: github1s
      - run: yarn build && yarn hash
        working-directory: github1s
      # don't remove them, otherwise it will be redirected to index.html on CDN and show a lot of warnings in browser console
      # DevTools failed to load source map: Could not parse content for https://XXXX.js.map: Unexpected token < in JSON at position 0
      - run: find github1s/dist -name '*.js.map' -exec cp .github/empty.json {} \;
      - run: find github1s/dist -name '*.gif' | xargs rm -rf
      - run: find github1s/dist -name 'learn.svg' | xargs rm -rf
      - uses: actions/upload-artifact@v3
        with:
          name: webeditor
          path: github1s/dist
  test:
    runs-on: 'ubuntu-latest'
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - uses: actions/download-artifact@v3
        with:
          name: webeditor
          path: github1s/dist
      - name: Display structure of downloaded files
        run: ls -alth github1s/dist
      - name: Use Node.js 14
        uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - run: yarn config set script-shell /bin/bash && yarn install
        working-directory: github1s
      - run: yarn serve > ./output 2>&1 &
        working-directory: github1s
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          # default GITHUB_TOKEN has no access to other repository, but we need to access other repo in WebEditorBrowserTest
          arguments: >
            server:app:webEditorBrowserTest
            -DagreePublicBuildScanTermOfService=yes
            -Dforest.github.read.token=${{ secrets.BYTELEGENDBOT_TOKEN }}
            -Dforest.test.enableRecording=true
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: artifacts
          path: |
            server/app/build/tmp/**/*.mp4
            server/app/build/reports/test

---
name: check

on:
  push:
    branches-ignore:
      - release
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - versions.json
      - livestream-data.json
  pull_request:
    branches-ignore:
      - release
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - versions.json
      - livestream-data.json
jobs:
  member-check:
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.pull_request.author_association != 'CONTRIBUTOR' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Ktlint
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ktlint -DagreePublicBuildScanTermOfService=yes
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: check -x server:app:browserTest -x server:app:integTest -x server:app:webEditorBrowserTest -DagreePublicBuildScanTermOfService=yes
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: artifacts
          path: |
            server/app/build/reports/tests
  integ-test:
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.pull_request.author_association != 'CONTRIBUTOR' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ktlint server:app:integTest -DagreePublicBuildScanTermOfService=yes -Dforest.github.read.token=${{ secrets.GITHUB_TOKEN }}
  browser-test:
    runs-on: 'ubuntu-latest'
    if: ${{ github.event.pull_request.author_association != 'CONTRIBUTOR' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: server:app:browserTest -DagreePublicBuildScanTermOfService=yes
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: artifacts
          path: |
            server/app/build/tmp/**/*.mp4
            server/app/build/reports/tests
  contributor-check:
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false
      - name: Checkout server-opensource
        run: git submodule update --init -- game-data
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: Ktlint
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ktlint -DagreePublicBuildScanTermOfService=yes
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: server-opensource:check utils:checkLicenses -DagreePublicBuildScanTermOfService=yes
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: artifacts
          path: |
            server/app/build/tmp/**/*.mp4
            server/app/build/reports/tests

---
name: deploy-webeditor
on:
  workflow_dispatch:
    inputs:
      deployCommit:
        description: 'Commit (empty to deploy the latest commit on release)'
        required: true
        default: 'latest'
      fromBranch:
        description: ""From which branch (valid only when commit='latest')""
        required: true
        default: 'release'
jobs:
  deploy:
    name: Deploy webeditor
    runs-on: ubuntu-latest
    if: github.repository == 'ByteLegend/ByteLegend'
    steps:
      - id: determine-webeditor-commit
        name: Determine webeditor commit to deploy
        uses: actions/github-script@v5
        with:
          script: |
            if ('${{ github.event.inputs.deployCommit }}' == 'latest') {
              const response = await github.rest.git.getRef({
                owner: 'ByteLegend',
                repo: 'ByteLegend',
                ref: 'heads/${{ github.event.inputs.fromBranch }}'
              })
              console.log(`Commit to deploy: ${response.data.object.sha}`)
              core.setOutput('deploy-commit', response.data.object.sha)
            } else {
              console.log(`Commit to deploy: ${{ github.event.inputs.deployCommit }}`)
              core.setOutput('deploy-commit', '${{ github.event.inputs.deployCommit }}')
            }
      - uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-test-webeditor.yml
          name: webeditor
          commit: ${{ steps.determine-webeditor-commit.outputs.deploy-commit }}
          path: github1s/dist
          workflow_conclusion: completed
      - run: tree github1s/dist
      - name: Upload /static to s3 Seoul
        run: >
          docker run -v $GITHUB_WORKSPACE/github1s/dist:/dist
          -e AWS_ACCESS_KEY_ID=${{secrets.ACCESS_KEY_ID_SEOUL}}
          -e AWS_SECRET_ACCESS_KEY=${{secrets.SECRET_ACCESS_KEY_SEOUL}}
          -e AWS_DEFAULT_REGION=ap-northeast-2
          amazon/aws-cli
          s3 sync /dist/static s3://bytelegend-web-editor/static
      - name: Upload /static to s3 Beijing
        run: >
          docker run -v $GITHUB_WORKSPACE/github1s/dist:/dist
          -e AWS_ACCESS_KEY_ID=${{secrets.ACCESS_KEY_ID_BEIJING}}
          -e AWS_SECRET_ACCESS_KEY=${{secrets.SECRET_ACCESS_KEY_BEIJING}}
          -e AWS_DEFAULT_REGION=cn-north-1
          amazon/aws-cli
          s3 sync /dist/static s3://bytelegend-web-editor/static
      - name: Sync index.html to s3 Seoul
        run: >
          docker run -v $GITHUB_WORKSPACE/github1s/dist:/dist
          -e AWS_ACCESS_KEY_ID=${{secrets.ACCESS_KEY_ID_SEOUL}}
          -e AWS_SECRET_ACCESS_KEY=${{secrets.SECRET_ACCESS_KEY_SEOUL}}
          -e AWS_DEFAULT_REGION=ap-northeast-2
          amazon/aws-cli
          s3 sync --exclude 'static/*' --delete /dist s3://bytelegend-web-editor
      - name: Sync /index.html to s3 Beijing
        run: >
          docker run -v $GITHUB_WORKSPACE/github1s/dist:/dist
          -e AWS_ACCESS_KEY_ID=${{secrets.ACCESS_KEY_ID_BEIJING}}
          -e AWS_SECRET_ACCESS_KEY=${{secrets.SECRET_ACCESS_KEY_BEIJING}}
          -e AWS_DEFAULT_REGION=cn-north-1
          amazon/aws-cli
          s3 sync --exclude 'static/*' --delete /dist s3://bytelegend-web-editor

---
name: deploy

on:
  workflow_dispatch:
    inputs:
      buildTimestamp:
        description: 'Build timestamp (empty to deploy the latest)'
        required: true
        default: 'latest'

jobs:
  deploy:
    name: Deploy production
    runs-on: ubuntu-latest
    if: github.repository == 'ByteLegend/ByteLegend'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: https://bytelegend.com
          environment: production
      - name: Deploy to k8s
        uses: gradle/gradle-build-action@v2
        with:
          arguments: deploy ""-PbuildTimestamp=${{ github.event.inputs.buildTimestamp }}"" -DagreePublicBuildScanTermOfService=yes
        env:
          ACCESS_KEY_ID_BEIJING: ${{ secrets.ACCESS_KEY_ID_BEIJING }}
          SECRET_ACCESS_KEY_BEIJING: ${{ secrets.SECRET_ACCESS_KEY_BEIJING }}
          ACCESS_KEY_ID_SEOUL: ${{ secrets.ACCESS_KEY_ID_SEOUL }}
          SECRET_ACCESS_KEY_SEOUL: ${{ secrets.SECRET_ACCESS_KEY_SEOUL }}
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: https://bytelegend.com
          state: ""success""
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          target_url: https://bytelegend.com
          state: ""failure""
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

---
name: Markdown Lint

on:
  push:
    branches-ignore:
      - release
  pull_request:
    branches-ignore:
      - release

jobs:
  markdown-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Fetch game-data
        run: git submodule update --init -- game-data

      - name: markdownlint
        uses: nosborn/github-action-markdown-cli@v3.0.1
        with:
          files: "".""
          config_file: .markdownlint.yaml

---
name: release-code-checker

on:
  workflow_dispatch:

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Check and Release
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :server:github-release:uploadCodeCheckerToGitHubRelease -DgitHubToken=${{ secrets.BYTELEGENDBOT_TOKEN }} -DagreePublicBuildScanTermOfService=yes

---
name: release-code-merger

on: workflow_dispatch

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Check and Release
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :server:github-release:uploadCodeMergerToGitHubRelease -DgitHubToken=${{ secrets.BYTELEGENDBOT_TOKEN }} -DagreePublicBuildScanTermOfService=yes

---
name: Release repo-cleaner
on: workflow_dispatch

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Check and Release
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :server:github-release:uploadRepoCleanerToGitHubRelease -DgitHubToken=${{ secrets.BYTELEGENDBOT_TOKEN }} -DagreePublicBuildScanTermOfService=yes

---
name: release

on:
  push:
    branches:
      - release

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository == 'ByteLegend/ByteLegend'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      - name: ""Release to ECR and S3""
        uses: gradle/gradle-build-action@v2
        with:
          arguments: release -PupdateVersions -DagreePublicBuildScanTermOfService=yes
        env:
          ACCESS_KEY_ID_BEIJING: ${{ secrets.ACCESS_KEY_ID_BEIJING }}
          SECRET_ACCESS_KEY_BEIJING: ${{ secrets.SECRET_ACCESS_KEY_BEIJING }}
          ACCESS_KEY_ID_SEOUL: ${{ secrets.ACCESS_KEY_ID_SEOUL }}
          SECRET_ACCESS_KEY_SEOUL: ${{ secrets.SECRET_ACCESS_KEY_SEOUL }}
          GITHUB_TOKEN: ${{ secrets.BYTELEGENDBOT_TOKEN }}

---
name: update-star-distribution
on:
  workflow_dispatch:
  schedule:
    - cron: '54 22 * * *'

jobs:
  deploy:
    name: Update star distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ByteLegend/ByteLegend
          submodules: recursive
          token: ${{ secrets.BYTELEGENDBOT_TOKEN }}
      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: server:dal-dynamodb:updateStarDistribution -Ddynamodb.serverLocation=Seoul -Ddynamodb.accessKeyId=${{ secrets.DYNAMODB_ADMIN_ACCESS_KEY_ID }} -Ddynamodb.secretAccessKey=${{ secrets.DYNAMODB_ADMIN_SECRET_ACCESS_KEY }} -DagreePublicBuildScanTermOfService=yes

---
"
fenixsoft;monolithic_arch_springboot;fenixsoft/monolithic_arch_springboot;https://github.com/fenixsoft/monolithic_arch_springboot;https://api.github.com/repos/fenixsoft/monolithic_arch_springboot;master;16/03/2020 17:03;19/04/2024 11:30;FALSE;
bttv-android;bttv;bttv-android/bttv;https://github.com/bttv-android/bttv;https://api.github.com/repos/bttv-android/bttv;master;13/02/2021 15:42;20/04/2024 23:42;TRUE;"name: build
on:
  push:
    tags:
      - ""v*""
  pull_request:
    paths-ignore:
      - ""README.md""
      - ""architecture.md""
      - 'CHANGELOG.md'
      - 'CONTRIBUTING.md'
    branches-ignore:
    - 'bttv/l10n_master'
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # checkout current state of repo
      - uses: actions/checkout@v3

      # set env variables
      - name: set variables
        run: |
          echo ""APK_URL=https://www.dropbox.com/s/at7p13mfn08k77j/twitch-15.4.1.apk\?\dl=1"" >> $GITHUB_ENV

      # get keystore.kjs from secret
      - name: create keystore.kjs from secret
        run: echo ""${{ secrets.KEYSTORE }}"" | base64 -d > keystore.jks

      # download apk when cache miss
      - name: download base
        if: steps.apk-cache.outputs.cache-hit != 'true'
        run: wget ${{ env.APK_URL }} -O twitch.apk

      # run the build using docker container
      - name: run build
        run: |
          docker run --rm \
            -v $(pwd)/twitch.apk:/usr/build/twitch.apk \
            -v $(pwd)/bttv.manifest.json:/usr/build/bttv.manifest.json \
            -v $(pwd)/dist:/usr/build/dist \
            -v $(pwd)/mod:/usr/build/mod \
            -v $(pwd)/patches:/usr/build/patches \
            -v $(pwd)/.all-contributorsrc:/usr/build/.all-contributorsrc \
            -v $(pwd)/keystore.jks:/usr/build/keystore.jks \
            -e KS=/usr/build/keystore.jks \
            -e KSPASS=${{ secrets.KSPASS }} \
            ghcr.io/bttv-android/builder

      # print checksums so anybody can confirm legitimacy of their apk
      - name: print checksums
        run: cp dist/twitch.apk bttv.apk && shasum *.apk

      # send to other release job if needed
      - uses: actions/upload-artifact@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: bttv-apk
          path: bttv.apk
          retention-days: 1
  release:
    needs: build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get CHANGELOGA
        id: changelog
        run: |
          echo ""RELEASE_BODY<<EOF"" > /tmp/bttv &&
          head -n25 CHANGELOG.md >> /tmp/bttv &&
          echo ""EOF"" >> /tmp/bttv &&
          cat /tmp/bttv >> $GITHUB_OUTPUT
      - uses: actions/download-artifact@v2
        with:
          name: bttv-apk
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.changelog.outputs.RELEASE_BODY }}
          draft: true
          prerelease: false
      - id: version_tag
        run: echo ""version_tag=${GITHUB_REF/refs\/tags\//}"" >> $GITHUB_OUTPUT
      - name: upload Release Apk
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bttv.apk
          asset_name: bttv-${{ steps.version_tag.outputs.version_tag }}.apk
          asset_content_type: application/vnd.android.package-archive

---
name: Docker
on:
  push:
    branches:
      - master
    paths-ignore:
     - 'mod/**'
     - 'patches/**'
     - 'README.md'
     - '.github/**'
     - 'architecture.md'
     - 'CHANGELOG.md'
     - 'CONTRIBUTING.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build docker images using cache
        uses: whoan/docker-build-with-cache-action@v6
        with:
          username: bttv-android
          password: ""${{ secrets.BGITHUB_TOKEN }}""
          registry: ghcr.io
          image_name: builder

---
"
bit4woo;Fiora;bit4woo/Fiora;https://github.com/bit4woo/Fiora;https://api.github.com/repos/bit4woo/Fiora;master;26/02/2021 13:45;21/04/2024 14:02;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Archive Jar file
      uses: actions/upload-artifact@v2
      with:
        name: jar-with-dependencies
        path: ./target/*-jar-with-dependencies.jar  # 指定二进制文件的路径

---
"
aitangbao;springboot-manager;aitangbao/springboot-manager;https://github.com/aitangbao/springboot-manager;https://api.github.com/repos/aitangbao/springboot-manager;master;21/03/2020 02:57;17/04/2024 22:01;FALSE;
xaecbd;KCenter;xaecbd/KCenter;https://github.com/xaecbd/KCenter;https://api.github.com/repos/xaecbd/KCenter;master;21/03/2020 03:15;02/04/2024 19:44;FALSE;
GrapheneOS;Camera;GrapheneOS/Camera;https://github.com/GrapheneOS/Camera;https://api.github.com/repos/GrapheneOS/Camera;main;17/08/2021 08:38;20/04/2024 17:02;TRUE;"name: Build application

on: [pull_request, push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          cache: gradle
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

---
name: Validate Gradle Wrapper

on: [pull_request, push]

jobs:
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/actions/wrapper-validation@v3

---
"
Joolun;JooLun-wx;Joolun/JooLun-wx;https://github.com/Joolun/JooLun-wx;https://api.github.com/repos/Joolun/JooLun-wx;master;21/03/2020 13:29;19/04/2024 11:56;FALSE;
skidfuscatordev;skidfuscator-java-obfuscator;skidfuscatordev/skidfuscator-java-obfuscator;https://github.com/skidfuscatordev/skidfuscator-java-obfuscator;https://api.github.com/repos/skidfuscatordev/skidfuscator-java-obfuscator;master;23/08/2021 12:16;22/04/2024 09:44;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
        #cache: maven
    - name: Build with Gradle
      run: |
        ./gradlew shadowJar --no-daemon
        mkdir staging/ && cp dev.skidfuscator.client.standalone/build/libs/client-standalone-all.jar staging
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: Skidfuscator.jar
        path: staging/client-1.0.0-SNAPSHOT.jar

---
"
qqxx6661;log-record;qqxx6661/log-record;https://github.com/qqxx6661/log-record;https://api.github.com/repos/qqxx6661/log-record;master;06/11/2021 07:35;22/04/2024 05:26;TRUE;"name: CI

# workflow_dispatch:
#   Allows you to run this workflow manually from the Actions tab
#   https://github.com/marketplace/actions/workflow-dispatch
on: [ push, pull_request, workflow_dispatch ]

jobs:
  code_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: zulu
      - name: Cache mvn dependencies
        uses: actions/cache@v3
        env:
          cache-name: mvn-deps
        with:
          path: ~/.m2
          key: ${{ env.cache-name }}-${{ hashFiles('./log-record-starter/pom.xml') }}
          restore-keys: ${{ env.cache-name }}-
      - name: Test with Maven
        working-directory: ./log-record-starter
        run: mvn -V --no-transfer-progress test
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./target/site/jacoco/jacoco.xml
          flags: unittests

---
"
zykzhangyukang;Xinguan;zykzhangyukang/Xinguan;https://github.com/zykzhangyukang/Xinguan;https://api.github.com/repos/zykzhangyukang/Xinguan;master;23/03/2020 05:02;09/04/2024 08:48;FALSE;
gh0stkey;HaE;gh0stkey/HaE;https://github.com/gh0stkey/HaE;https://api.github.com/repos/gh0stkey/HaE;master;24/03/2020 11:12;22/04/2024 04:51;FALSE;
Link-Kou;intellij-mybaitslog;Link-Kou/intellij-mybaitslog;https://github.com/Link-Kou/intellij-mybaitslog;https://api.github.com/repos/Link-Kou/intellij-mybaitslog;master;25/03/2020 02:27;20/04/2024 18:07;FALSE;
dromara;liteflow;dromara/liteflow;https://github.com/dromara/liteflow;https://api.github.com/repos/dromara/liteflow;master;25/03/2020 17:49;22/04/2024 07:51;FALSE;
jammy928;CoinExchange_CryptoExchange_Java;jammy928/CoinExchange_CryptoExchange_Java;https://github.com/jammy928/CoinExchange_CryptoExchange_Java;https://api.github.com/repos/jammy928/CoinExchange_CryptoExchange_Java;master;27/03/2020 08:03;21/04/2024 23:30;FALSE;
ssssssss-team;spider-flow;ssssssss-team/spider-flow;https://github.com/ssssssss-team/spider-flow;https://api.github.com/repos/ssssssss-team/spider-flow;master;27/03/2020 12:07;22/04/2024 13:15;FALSE;
mohamed-taman;Springy-Store-Microservices;mohamed-taman/Springy-Store-Microservices;https://github.com/mohamed-taman/Springy-Store-Microservices;https://api.github.com/repos/mohamed-taman/Springy-Store-Microservices;master;29/03/2020 01:34;20/04/2024 05:42;FALSE;
testsigmahq;testsigma;testsigmahq/testsigma;https://github.com/testsigmahq/testsigma;https://api.github.com/repos/testsigmahq/testsigma;dev;27/12/2021 09:20;21/04/2024 16:07;TRUE;"name: 'Agent Zip Build'
on:
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build Type'
        required: true
        options: 
          - Testing
          - Release
      buildVersion:
        description: 'Build Version'
        required: true
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Downloading Packages
        run: |
          mkdir $HOME/.testsigma_os
          aws s3 cp s3://hybrid-staging.testsigma.com/testsigma_os $HOME/.testsigma_os --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Building 
        run: |
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Testing"" ]]; then
            bash agent/scripts/build.sh --VERSION=v${{ github.event.inputs.buildVersion }} --PUBLISH_TO_GIT=false
          fi
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Release"" ]]; then
            bash agent/scripts/build.sh --VERSION=v${{ github.event.inputs.buildVersion }} --PUBLISH_TO_GIT=true
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
name: Create ticket in Jira

on:
  issues:
    types: [labeled]

jobs:
  Jira:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
          persist-credentials: false

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Store Github Issue url as environment variable
        run: |
          echo ""URL=${{ github.event.issue.url }}"" >> $GITHUB_ENV

      - name: Get Issue Body and store as environment variable
        id: get_issue
        run: |
          issue_body=$(node ./action.js --url=${{ env.URL }})
          echo ""BODY=$issue_body"" >> $GITHUB_ENV

      - name: Create Bug in Jira
        if: ${{github.event.label.name == 'bug'}}
        env:
          JIRA_PROJECT_ID: ${{ secrets.JIRA_PROJECT_ID }}
          JIRA_ISSUE_ID: ${{ secrets.JIRA_ISSUE_ID }}
          JIRA_REPORTER_ID: ${{ secrets.JIRA_REPORTER_ID }}
        run: >
          curl
          -u ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}
          -X POST  ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/
          -H 'Content-Type: application/json'
          -d '{
            ""fields"": {
              ""project"":
              {
                ""id"": ""${{env.JIRA_PROJECT_ID}}""
              },
              ""summary"": ""${{ github.event.issue.title }}"",
              ""issuetype"": {
                ""id"": ""${{env.JIRA_ISSUE_ID}}""
              },
              ""reporter"": {
                ""id"": ""${{env.JIRA_REPORTER_ID}}""
              },
               ""labels"": [
                  ""github_issues""
               ],
              ""description"": {
                    ""type"": ""doc"",
                    ""version"": 1,
                    ""content"": [
                      {
                        ""type"": ""paragraph"",
                        ""content"": [
                          {
                            ""type"": ""text"",
                            ""text"":  ${{env.BODY}}
                          }
                        ]
                      }
                    ]
                  }
            }
          }'

      - name: Create Enhancement in Jira
        if: ${{github.event.label.name == 'enhancement'}}
        env:
          JIRA_PROJECT_ID: ${{ secrets.JIRA_PROJECT_ID }}
          JIRA_REPORTER_ID: ${{ secrets.JIRA_REPORTER_ID }}
          JIRA_ENHANCEMENT_ID: ${{ secrets.JIRA_ENHANCEMENT_ID }}
        run: >
          curl
          -u ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}
          -X POST  ${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/
          -H 'Content-Type: application/json'
          -d '{
            ""fields"": {
              ""project"":
              {
                ""id"": ""${{env.JIRA_PROJECT_ID}}""
              },
              ""summary"": ""${{ github.event.issue.title }}"",
              ""issuetype"": {
                ""id"": ""${{env.JIRA_ENHANCEMENT_ID}}""
              },
              ""reporter"": {
                ""id"": ""${{env.JIRA_REPORTER_ID}}""
              },
               ""labels"": [
                  ""github_issues""
               ],
              ""description"": {
                    ""type"": ""doc"",
                    ""version"": 1,
                    ""content"": [
                      {
                        ""type"": ""paragraph"",
                        ""content"": [
                          {
                            ""type"": ""text"",
                            ""text"": ${{env.BODY}}
                          }
                        ]
                      }
                    ]
                  }
            }
          }'


---
name: 'M1 Docker Build'
on:
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build Type'
        required: true
        options: 
          - Testing
          - Release
      buildVersion:
        description: 'Build Version'
        required: true
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Downloading Packages
        run: |
          mkdir $HOME/.testsigma_os
          aws s3 cp s3://hybrid-staging.testsigma.com/testsigma_os $HOME/.testsigma_os --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Building 
        run: |
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Testing"" ]]; then
            bash deploy/docker/build.sh --DOCKER_VERSION=v${{ github.event.inputs.buildVersion }}-m1 --AGENT_TAG=v${{ github.event.inputs.buildVersion }} --IMAGE_NAME=server-dev
          fi
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Release"" ]]; then
            bash deploy/docker/build.sh --DOCKER_VERSION=v${{ github.event.inputs.buildVersion }}-m1 --AGENT_TAG=v${{ github.event.inputs.buildVersion }} --IMAGE_NAME=server
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json

---
name: 'Docker Build'
on:
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build Type'
        required: true
        options: 
          - Testing
          - Release
      buildVersion:
        description: 'Build Version'
        required: true
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Downloading Packages
        run: |
          mkdir $HOME/.testsigma_os
          aws s3 cp s3://hybrid-staging.testsigma.com/testsigma_os $HOME/.testsigma_os --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
      - name: Building 
        run: |
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Testing"" ]]; then
            bash deploy/docker/build.sh --DOCKER_VERSION=v${{ github.event.inputs.buildVersion }} --AGENT_TAG=v${{ github.event.inputs.buildVersion }} --IMAGE_NAME=server-dev
          fi
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Release"" ]]; then
            bash deploy/docker/build.sh --DOCKER_VERSION=v${{ github.event.inputs.buildVersion }} --AGENT_TAG=v${{ github.event.inputs.buildVersion }} --IMAGE_NAME=server
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json

---
name: 'Server Zip Build'
on:
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build Type'
        required: true
        options: 
          - Testing
          - Release
      buildVersion:
        description: 'Build Version'
        required: true
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Downloading Packages
        run: |
          mkdir $HOME/.testsigma_os
          aws s3 cp s3://hybrid-staging.testsigma.com/testsigma_os $HOME/.testsigma_os --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Building 
        run: |
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Testing"" ]]; then
            bash deploy/installer/build.sh --VERSION=v${{ github.event.inputs.buildVersion }} --PUBLISH_TO_GIT=false
          fi
          if [[ ""${{ github.event.inputs.buildType }}"" == ""Release"" ]]; then
            bash deploy/installer/build.sh --VERSION=v${{ github.event.inputs.buildVersion }} --PUBLISH_TO_GIT=true
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
          AWS_DEFAULT_OUTPUT: json
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
lakesoul-io;LakeSoul;lakesoul-io/LakeSoul;https://github.com/lakesoul-io/LakeSoul;https://api.github.com/repos/lakesoul-io/LakeSoul;main;28/12/2021 09:53;20/04/2024 10:18;TRUE;"# SPDX-FileCopyrightText: 2023 LakeSoul Contributors
#
# SPDX-License-Identifier: Apache-2.0

on:
  push:
    paths:
      - ""rust/**""
    branches:
      - 'main'
  pull_request:
    paths:
      - ""rust/**""
    branches:
      - 'main'
      - 'release/**'
  workflow_dispatch:

name: Consistency CI

env:
  RUSTFLAGS: ""-Awarnings""

permissions:
  actions: write

jobs:
  verify-hash-consistency:
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14.5
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: lakesoul_test
          POSTGRES_USER: lakesoul_test
          POSTGRES_DB: lakesoul_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name lakesoul-test-pg
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Install requirement
        uses: ConorMacBride/install-package@v1
        with:
          apt: postgresql-client-14 cargo
      - name: Init PG
        run: |
          ./script/meta_init_for_local_test.sh -j 2
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pymysql cryptography jproperties --no-cache-dir
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""23.x""
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: vemonet/setup-spark@v1
        with:
          spark-version: '3.3.1'
          hadoop-version: '3'
      - run: spark-submit --version

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-20
          default: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ""./rust -> target""
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: '--manifest-path rust/Cargo.toml --target x86_64-unknown-linux-gnu --release --all-features'
      - name: Build with Maven
        run: |
          mkdir -p rust/target/release
          cp rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_io_c.so rust/target/release
          cp rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_metadata_c.so rust/target/release
          MAVEN_OPTS=""-Xmx4000m"" mvn -q -B package -f pom.xml -Pcross-build -DskipTests
      - name: Get jar names
        run: |
          echo ""FLINK_JAR_NAME=$(python script/get_jar_name.py lakesoul-flink)"" >> $GITHUB_ENV
          echo ""FLINK_TEST_JAR_NAME=$(python script/get_jar_name.py lakesoul-flink | sed -e 's/.jar/-tests.jar/g')"" >> $GITHUB_ENV
          echo ""SPARK_JAR_NAME=$(python script/get_jar_name.py lakesoul-spark)"" >> $GITHUB_ENV
          echo ""SPARK_TEST_JAR_NAME=$(python script/get_jar_name.py lakesoul-spark | sed -e 's/.jar/-tests.jar/g')"" >> $GITHUB_ENV
      - name: Copy built jar to work-dir
        run: |
          cp ./lakesoul-flink/target/$FLINK_JAR_NAME ./script/ci/work-dir
          cp ./lakesoul-flink/target/$FLINK_TEST_JAR_NAME ./script/ci/work-dir
          cp ./lakesoul-spark/target/$SPARK_JAR_NAME ./script/ci/work-dir
          cp ./lakesoul-spark/target/$SPARK_TEST_JAR_NAME ./script/ci/work-dir
      - name: Generate benchmark data and expected query results
        run: |
          mkdir -p lakesoul/test_files/tpch/data
          git clone https://github.com/databricks/tpch-dbgen.git
          cd tpch-dbgen
          make
          ./dbgen -f -s 0.1
          mv *.tbl ../lakesoul/test_files/tpch/data
      - name: Verify that benchmark queries return expected results
        run: |
          export TPCH_DATA=`realpath lakesoul/test_files/tpch/data`
          cd ./rust
          # use release build for plan verificaton because debug build causes stack overflow
          cargo test load_tpch_data --package lakesoul-datafusion --features=ci -- --nocapture
          PGPASSWORD='lakesoul_test' psql -U lakesoul_test  -h 127.0.0.1 -p 5432 -d lakesoul_test -c ""select * from table_info;""
          PGPASSWORD='lakesoul_test' psql -U lakesoul_test  -h 127.0.0.1 -p 5432 -d lakesoul_test -c ""select * from data_commit_info;""
      - name: Hash-Consistency Verification task
        run: |
          export TPCH_DATA=`realpath lakesoul/test_files/tpch/data`
          export lakesoul_home=`realpath script/ci/work-dir/lakesoul.properties`
          spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars script/ci/work-dir/$SPARK_JAR_NAME --class org.apache.spark.sql.lakesoul.benchmark.ConsistencyCI --master local[4] script/ci/work-dir/$SPARK_TEST_JAR_NAME
  

---
# SPDX-FileCopyrightText: 2023 LakeSoul Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: Deployment
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:


jobs:
  build-linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-20
          default: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ""./rust -> target""
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.4.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('rust/Cross.toml') }}
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: '--manifest-path rust/Cargo.toml --target x86_64-unknown-linux-gnu --release --all-features'
      - uses: actions/upload-artifact@v4
        with:
          name: lakesoul-nativeio-x86_64-unknown-linux-gnu
          path: ./rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_io_c.so
      - uses: actions/upload-artifact@v4
        with:
          name: lakesoul-nativemetadata-x86_64-unknown-linux-gnu
          path: ./rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_metadata_c.so

  build-windows-x86_64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""23.x""
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-20
          default: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ""./rust -> target""
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--manifest-path rust/Cargo.toml --release --all-features'
      - uses: actions/upload-artifact@v4
        with:
          name: lakesoul-nativeio-x86_64-pc-windows-msvc
          path: ./rust/target/release/lakesoul_io_c.dll
      - uses: actions/upload-artifact@v4
        with:
          name: lakesoul-nativemetadata-x86_64-pc-windows-msvc
          path: ./rust/target/release/lakesoul_metadata_c.dll

  build-macos-x86_64:
    runs-on: macos-latest
    steps:
      - name: Install automake
        run: brew install automake
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""23.x""
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-20
          default: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ""./rust -> target""
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: '--manifest-path rust/Cargo.toml --release --all-features'
      - uses: actions/upload-artifact@v4
        with:
          name: lakesoul-nativeio-x86_64-apple-darwin
          path: ./rust/target/release/liblakesoul_io_c.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: lakesoul-nativemetadata-x86_64-apple-darwin
          path: ./rust/target/release/liblakesoul_metadata_c.dylib


  deploy-maven-package:
    runs-on: ubuntu-latest
    needs: [ build-linux-x86_64, build-windows-x86_64, build-macos-x86_64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: lakesoul-nativeio-x86_64-unknown-linux-gnu
          path: ./rust/target/release/
      - uses: actions/download-artifact@v4
        with:
          name: lakesoul-nativeio-x86_64-apple-darwin
          path: ./rust/target/release/
      - uses: actions/download-artifact@v4
        with:
          name: lakesoul-nativeio-x86_64-pc-windows-msvc
          path: ./rust/target/release/
      - uses: actions/download-artifact@v4
        with:
          name: lakesoul-nativemetadata-x86_64-unknown-linux-gnu
          path: ./rust/target/release/
      - uses: actions/download-artifact@v4
        with:
          name: lakesoul-nativemetadata-x86_64-apple-darwin
          path: ./rust/target/release/
      - uses: actions/download-artifact@v4
        with:
          name: lakesoul-nativemetadata-x86_64-pc-windows-msvc
          path: ./rust/target/release/
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""23.x""
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Release to Maven Central Repository
        uses: samuelmeuli/action-maven-publish@v1
        with:
          gpg_private_key: ${{ secrets.MAVEN_SIGN_GPG_KEY }}
          gpg_passphrase: ${{ secrets.MAVEN_SIGN_GPG_PASSPHRASE }}
          nexus_username: ${{ secrets.OSSRH_USERNAME }}
          nexus_password: ${{ secrets.OSSRH_TOKEN }}
          maven_goals_phases: ""deploy""
          maven_args: ""-DskipTests -Dmaven.test.skip=true""
          maven_profiles: ""cross-build,release-sign-artifacts""

---
# SPDX-FileCopyrightText: 2023 LakeSoul Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: CI with flink cdc Test on HDFS

on:
  push:
    paths-ignore:
      - ""javadoc/**""
      - ""website/**""
      - ""cpp/**""
      - ""python/**""
      - ""**.md""
    branches:
      - 'main'
  pull_request:
    paths-ignore:
      - ""javadoc/**""
      - ""website/**""
      - ""cpp/**""
      - ""python/**""
      - ""**.md""
    branches:
      - 'main'
      - 'release/**'
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pymysql cryptography jproperties --no-cache-dir
          wget https://repo1.maven.org/maven2/org/apache/flink/flink-s3-fs-hadoop/1.17.1/flink-s3-fs-hadoop-1.17.1.jar -O $HOME/flink-s3-fs-hadoop-1.17.1.jar
          wget https://repo1.maven.org/maven2/org/apache/parquet/parquet-hadoop-bundle/1.12.3/parquet-hadoop-bundle-1.12.3.jar -O $HOME/parquet-hadoop-bundle-1.12.3.jar
          wget https://repo1.maven.org/maven2/org/apache/flink/flink-parquet/1.17.1/flink-parquet-1.17.1.jar -O $HOME/flink-parquet-1.17.1.jar
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""23.x""
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-20
          default: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ""./rust -> target""
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.4.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('rust/Cross.toml', 'docker/lakesoul-docker-compose-env/docker-compose.yml') }}
      - name: Pull images
        run: |
          docker pull -q bitnami/spark:3.3.1
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: '--manifest-path rust/Cargo.toml --target x86_64-unknown-linux-gnu --release --all-features'
      - name: Build with Maven
        run: |
          mkdir -p rust/target/release
          cp rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_io_c.so rust/target/release
          cp rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_metadata_c.so rust/target/release
          MAVEN_OPTS=""-Xmx4000m"" mvn -q -B package -f pom.xml -Pcross-build -DskipTests
      - name: Get jar names
        run: |
          echo ""FLINK_JAR_NAME=$(python script/get_jar_name.py lakesoul-flink)"" >> $GITHUB_ENV
          echo ""FLINK_TEST_JAR_NAME=$(python script/get_jar_name.py lakesoul-flink | sed -e 's/.jar/-tests.jar/g')"" >> $GITHUB_ENV
          echo ""SPARK_JAR_NAME=$(python script/get_jar_name.py lakesoul-spark)"" >> $GITHUB_ENV
          echo ""SPARK_TEST_JAR_NAME=$(python script/get_jar_name.py lakesoul-spark | sed -e 's/.jar/-tests.jar/g')"" >> $GITHUB_ENV
      - name: Copy built jar to work-dir
        run: |
          cp ./lakesoul-flink/target/$FLINK_JAR_NAME ./script/benchmark/work-dir
          cp ./lakesoul-flink/target/$FLINK_TEST_JAR_NAME ./script/benchmark/work-dir
          cp ./lakesoul-spark/target/$SPARK_JAR_NAME ./script/benchmark/work-dir
          cp ./lakesoul-spark/target/$SPARK_TEST_JAR_NAME ./script/benchmark/work-dir
      - uses: beyondstorage/setup-hdfs@master
        with:
          hdfs-version: '3.3.6'
      - name: Modify HDFS Host
        run: |
          sed -i 's/localhost/172.17.0.1/g' $HADOOP_HOME/etc/hadoop/core-site.xml
          sed -i 's/localhost/172.17.0.1/g' $HADOOP_HOME/etc/hadoop/hdfs-site.xml
          $HADOOP_HOME/sbin/stop-dfs.sh
          $HADOOP_HOME/sbin/start-dfs.sh
          $HADOOP_HOME/bin/hadoop fs -chmod -R 777 /
      - name: Deploy cluster
        run: |
          cd ./docker/lakesoul-docker-compose-env
          docker compose pull -q
          docker compose up -d
          sleep 30s
      - name: Start flink mysql cdc task-1
        run: |
          docker exec -t -u flink lakesoul-docker-compose-env-jobmanager-1 flink run -d -c org.apache.flink.lakesoul.entry.MysqlCdc /opt/flink/work-dir/$FLINK_JAR_NAME --source_db.host mysql --source_db.port 3306 --source_db.db_name test_cdc --source_db.user root --source_db.password root --source.parallelism 2 --sink.parallelism 4 --use.cdc true --warehouse_path hdfs://172.17.0.1:9000/lakesoul-test-bucket/data/ --flink.checkpoint hdfs://172.17.0.1:9000/lakesoul-test-bucket/chk --flink.savepoint hdfs://172.17.0.1:9000/lakesoul-test-bucket/svp --job.checkpoint_interval 5000 --server_time_zone UTC
          sleep 30s
      - name: Start flink source to sink task-2
        run: |
          docker exec -t -u flink lakesoul-docker-compose-env-jobmanager-1 flink run -d -c org.apache.flink.lakesoul.test.benchmark.LakeSoulSourceToSinkTable -C file:///opt/flink/work-dir/$FLINK_JAR_NAME /opt/flink/work-dir/$FLINK_TEST_JAR_NAME --source.database.name test_cdc --source.table.name default_init --sink.database.name flink_sink --sink.table.name default_init --use.cdc true --hash.bucket.number 2 --job.checkpoint_interval 10000 --server_time_zone UTC --warehouse.path hdfs://172.17.0.1:9000/lakesoul-test-bucket/flink-sink/data --flink.checkpoint hdfs://172.17.0.1:9000/lakesoul-test-bucket/flink-sink/chk
          sleep 30s
      - name: Start flink DataGenSource without primary key task-3
        run: |
          docker exec -t -u flink lakesoul-docker-compose-env-jobmanager-1 flink run -d -c org.apache.flink.lakesoul.test.benchmark.LakeSoulDataGenSourceTable -C file:///opt/flink/work-dir/$FLINK_JAR_NAME /opt/flink/work-dir/$FLINK_TEST_JAR_NAME --sink.database.name flink --sink.table.name sink_table --job.checkpoint_interval 10000 --server_time_zone UTC --warehouse.path hdfs://172.17.0.1:9000/lakesoul-test-bucket/flink/ --flink.checkpoint hdfs://172.17.0.1:9000/lakesoul-test-bucket/flink/chk --sink.parallel 2 --data.size 1000 --write.time 5
      - name: Download mysql driver jar
        run: |
          cd ./script/benchmark/work-dir
          if [ ! -e mysql-connector-java-8.0.30.jar ]; then wget -q https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.30/mysql-connector-java-8.0.30.jar; fi
      - name: Create table and insert data
        run: |
          cd ./script/benchmark
          python 1_create_table.py
          docker exec -i lakesoul-docker-compose-env-mysql-1 bash /2_insert_table_data.sh
          sleep 30s
      - name: Mysql cdc data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME
      - name: Flink source to sink data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME --cdc.contract false --single.table.contract true
      - name: Adding columns for tables and deleting some data from tables
        run: |
          cd ./script/benchmark
          python3 3_add_column.py
          python3 delete_data.py
          docker exec -i lakesoul-docker-compose-env-mysql-1 bash /2_insert_table_data.sh
          sleep 30s
      - name: Mysql cdc data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME
      - name: Flink source to sink data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME --cdc.contract false --single.table.contract true
      - name: Updating data in tables
        run: |
          cd ./script/benchmark
          python3 4_update_data.py
          sleep 30s
      - name: Mysql cdc data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --conf spark.dmetasoul.lakesoul.native.io.enable=true --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME
      - name: Flink source to sink data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME --cdc.contract false --single.table.contract true
      - name: Dropping columns and deleting some data in tables
        run: |
          cd ./script/benchmark
          python3 6_drop_column.py
          python3 delete_data.py
          docker exec -i lakesoul-docker-compose-env-mysql-1 bash /2_insert_table_data.sh
          sleep 30s
      - name: Mysql cdc data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --conf spark.dmetasoul.lakesoul.native.io.enable=true --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME
      - name: Flink source to sink data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.Benchmark --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME --cdc.contract false --single.table.contract true
      - name: Table without primary key data accuracy verification task
        run: |
          cd ./script/benchmark
          docker run --cpus 2 -m 5000m --net lakesoul-docker-compose-env_default --rm -t -v $HADOOP_HOME:/opt/hadoop --env HADOOP_HOME=/opt/hadoop -v ${PWD}/work-dir:/opt/spark/work-dir --env lakesoul_home=/opt/spark/work-dir/lakesoul.properties bitnami/spark:3.3.1 spark-submit --driver-memory 4G --executor-memory 4G --conf spark.driver.memoryOverhead=1500m --conf spark.executor.memoryOverhead=1500m  --jars /opt/spark/work-dir/$SPARK_JAR_NAME,/opt/spark/work-dir/mysql-connector-java-8.0.30.jar --class org.apache.spark.sql.lakesoul.benchmark.FlinkWriteDataCheck --master local[4] /opt/spark/work-dir/$SPARK_TEST_JAR_NAME --csv.path hdfs://172.17.0.1:9000/lakesoul-test-bucket/flink/csv --lakesoul.table.path hdfs://172.17.0.1:9000/lakesoul-test-bucket/flink/sink_table --server.time.zone UTC
      - name: Print Flink Log
        if: always()
        run: |
          docker logs lakesoul-docker-compose-env-jobmanager-1 > flink-session-cluster.log
      - name: Upload Log
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: flink-cluster-log
          path: flink-session-cluster.log
          retention-days: 5
          if-no-files-found: error

---
# SPDX-FileCopyrightText: 2023 LakeSoul Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: CI with flink cdc Test

on:
  push:
    paths-ignore:
      - ""javadoc/**""
      - ""website/**""
      - ""cpp/**""
      - ""python/**""
      - ""**.md""
    branches:
      - 'main'
  pull_request:
    paths-ignore:
      - ""javadoc/**""
      - ""website/**""
      - ""cpp/**""
      - ""python/**""
      - ""**.md""
    branches:
      - 'main'
      - 'release/**'
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pymysql cryptography jproperties --no-cache-dir
          wget https://dlcdn.apache.org/hadoop/common/hadoop-3.3.5/hadoop-3.3.5.tar.gz -O $HOME/hadoop-3.3.5.tar.gz && tar xf $HOME/hadoop-3.3.5.tar.gz -C $HOME
          echo ""HADOOP_HOME=$HOME/hadoop-3.3.5"" >> $GITHUB_ENV
          wget https://repo1.maven.org/maven2/org/apache/flink/flink-s3-fs-hadoop/1.17.1/flink-s3-fs-hadoop-1.17.1.jar -O $HOME/flink-s3-fs-hadoop-1.17.1.jar
          wget https://repo1.maven.org/maven2/org/apache/parquet/parquet-hadoop-bundle/1.12.3/parquet-hadoop-bundle-1.12.3.jar -O $HOME/parquet-hadoop-bundle-1.12.3.jar
          wget https://repo1.maven.org/maven2/org/apache/flink/flink-parquet/1.17.1/flink-parquet-1.17.1.jar -O $HOME/flink-parquet-1.17.1.jar
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""23.x""
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-05-20
          default: true
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: ""./rust -> target""
      - name: Cache Docker images
        uses: ScribeMD/docker-cache@0.4.0
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('rust/Cross.toml', 'docker/lakesoul-docker-compose-env/docker-compose.yml') }}
      - name: Pull images
        run: |
          docker pull -q bitnami/spark:3.3.1
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: '--manifest-path rust/Cargo.toml --target x86_64-unknown-linux-gnu --release --all-features'
      - name: Build with Maven
        run: |
          mkdir -p rust/target/release
          cp rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_io_c.so rust/target/release
          cp rust/target/x86_64-unknown-linux-gnu/release/liblakesoul_metadata_c.so rust/target/release
          MAVEN_OPTS=""-Xmx4000m"" mvn -q -B package -f pom.xml -Pcross-build -DskipTests
      - name: Get jar names
        run: |
          echo ""FLINK_JAR_NAME=$(python script/get_jar_name.py lakesoul-flink)"" >> $GITHUB_ENV
          echo ""FLINK_TEST_JAR_NAME=$(python script/get_jar_name.py lakesoul-flink | sed -e 's/.jar/-tests.jar/g')"" >> $GITHUB_ENV
          echo ""SPARK_JAR_NAME=$(python script/get_jar_name.py lakesoul-spark)"" >> $GITHUB_ENV
          echo ""SPARK_TEST_JAR_NAME=$(python script/get_jar_name.py lakesoul-spark | sed -e 's/.jar/-tests.jar/g')"" >> $GITHUB_ENV
      - name: Copy built jar to work-dir
        run: |
          cp ./lakesoul-flink/target/$FLINK_JAR_NAME ./script/benchmark/work-dir
          cp ./lakesoul-flink/target/$FLINK_TEST_JAR_NAME ./script/benchmark/work-dir
          cp ./lakesoul-spark/target/$SPARK_JAR_NAME ./script/benchmark/work-dir
          cp ./lakesoul-spark/target/$SPARK_TEST_JAR_NAME ./script/benchmark/work-dir
      - name: Deploy cluster
        run: |
          cd ./docker/lakesoul-docker-compose-env
          docker compose pull -q
          docker compose --profile s3 up -d
          sleep 30s
      - name: Start flink mysql cdc task-1
        run: |
          docker exec -t lakesoul-docker-compose-env-jobmanager-1 flink run -d -c org.apache.flink.lakesoul.entry.MysqlCdc /opt/flink/work-dir/$FLINK_JAR_NAME --source_db.host mysql --source_db.port 3306 --source_db.db_name test_cdc --source_db.user root --source_db.password root --source.parallelism 2 --sink.parallelism 4 --use.cdc true --warehouse_path s3://lakesoul-test-bucket/data/ --flink.checkpoint s3://lakesoul-test-bucket/chk --flink.savepoint s3://lakesoul-test-bucket/svp --job.checkpoint_interval 5000 --server_time_zone UTC
          sleep 30s
      - name: Start flink source to sink task-2
        run: |
          docker exec -t lakesoul-docker-compose-env-jobmanager-1 flink run -d -c org.apache.flink.lakesoul.test.benchmark.LakeSoulSourceToSinkTable -C file:///opt/flink/work-dir/$FLINK_JAR_NAME /opt/flink/work-dir/$FLINK_TEST_JAR_NAME --source.database.name test_cdc --source.table.name default_init --sink.database.name flink_sink --sink.table.name default_init --use.cdc true --hash.bucket.number 2 --job.checkpoint_interval 10000 --server_time_zone UTC --warehouse.path s3://lakesoul-test-bucket/flink-sink/data --flink.checkpoint s3://lakesoul-test-bucket/flink-sink/chk
          sleep 30s
      - name: Start flink DataGenSource without primary key task-3
        run: |
          docker exec -t lakesoul-docker-compose-env-jobmanager-1 flink run -d -c org.apache.flink.lakesoul.test.benchmark.LakeSoulDataGenSourceTable -C file:///opt/flink/work-dir/$FLINK_JAR_NAME /opt/flink/work-dir/$FLINK_TEST_JAR_NAME --sink.database.name flink --sink.table.name sink_table --job.checkpoint_interval 10000 --server_time_zone UTC --warehouse.path s3://lakesoul-test-bucket/flink/ --flink.checkpoint s3://lakesoul-test-bucket/flink/chk --sink.parallel 2 --data.size 1000 --write.time 5
      - name: Download mysql driver jar
        run: |
          cd ./script/benchmark/work-dir
          if [ ! -e mysql-connector-java-8.0.30.jar ]; then wget -q https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.30/mys"
troyzhxu;okhttps;troyzhxu/okhttps;https://github.com/troyzhxu/okhttps;https://api.github.com/repos/troyzhxu/okhttps;master;31/03/2020 10:22;19/04/2024 19:28;FALSE;
HummerRisk;HummerRisk;HummerRisk/HummerRisk;https://github.com/HummerRisk/HummerRisk;https://api.github.com/repos/HummerRisk/HummerRisk;master;03/06/2022 04:49;22/04/2024 12:50;TRUE;"#自动merge分支，dev -> master
#name: auto merge dev
#on:
#  schedule:
#    - cron: '0 0 * * WED'
#
#jobs:
#  merge_schedule:
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout
#        uses: actions/checkout@v2
##      - name: Commit
##        id: create_release_file
##        env:
##          RELEASE_VERSION: ${{github.ref}}
##        run: |
##          git config --global user.email guodongxiaren@163.com
##          git config --global user.name guodongxiaren
##          git merge dev
##          git commit -m""action:`merge dev`""
##          git pull --rebase
##      - name: Push changes
##        uses: ad-m/github-push-action@master
##        with:
##          github_token: ${{ secrets.GITHUB_TOKEN }}
#      - name: merge
#        uses: mtanzi/action-automerge@v1
#        id: merge
#        with:
#          github_token: ${{ github.token }}
#          source: 'dev'
#          target: 'master'

---

name: Create Release And Upload assets

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Create Release File To Upload
        id: create_release_file
        env:
          RELEASE_VERSION: ${{github.ref}}
        run: |
          git clone https://github.com/HummerRisk/installer.git --depth=1
          cd installer
          rm -rf hudson.* .travis.yml .git .github
          chmod +x hummerrisk/hrctl
          sed -i ""s@VERSION=.*@VERSION=${version}@g"" quick_start.sh
          cd ..
          version=`echo ${RELEASE_VERSION##*/}`
          filename=hummerrisk-installer-$version
          mv installer/hummerrisk $filename
          sed -i ""s@HMR_CURRENT_VERSION=.*@HMR_CURRENT_VERSION=${version}@g"" $filename/install.conf
          sed -i ""s@VERSION=.*@VERSION=${version}@g"" $filename/scripts/const.sh
          tar -czvf $filename.tar.gz $filename
          mv installer/quick_start.sh ./
          echo ""::set-output name=VERSION::$(echo $version)""
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            # 快速开始
            仅需两步快速安装 HummerRisk：
              1.  准备一台不小于 4 核 8 G 内存的 64位 Linux 主机；
              2.  以 root 用户执行如下命令一键安装 HummerRisk。
            
            全球：
            ```sh
            curl -sSL https://github.com/HummerRisk/HummerRisk/releases/latest/download/quick_start.sh | sh
            ```
            
            中国大陆：
            ```sh
            curl -sSL https://download.hummerrisk.com/hummerrisk/hummerrisk/releases/download/latest/quick_start.sh | sh
            ```
            
            v0.1.0-v0.10.x 版本为 SpringBoot 单机版，之间可以互相升级:
            ```sh
              # 升级
              hrctl upgrade v0.10.x
            ```
            
            v1.x.x 版本为 SpringCloud 微服务版，不可由单机版直接升级:
            如果您已经部署 v1.x.x 旧版本，可通过如下命令一键升级至最新版本:
            ```sh
              # 升级
              hrctl upgrade v1.0.1
            ```
            
            # 产品文档
            点击 [完整文档](https://docs.hummerrisk.com/) 查看完整的安装和使用文档
            
            # 更新内容
            
            
            # 离线安装包
            百度网盘下载链接: https://pan.baidu.com/s/1ytLxkdrTgHEjyBKnPoalyg 提取码: aso7
            网站资源下载链接: https://docs.hummerrisk.com/v1.x/about/download/
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./hummerrisk-installer-${{ steps.create_release_file.outputs.VERSION }}.tar.gz
          asset_name: hummerrisk-installer-${{ steps.create_release_file.outputs.VERSION }}.tar.gz
          asset_content_type: application/zip

      - name: Upload Quick Start Script
        id: upload-release-quick-start-shell
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./quick_start.sh
          asset_name: quick_start.sh
          asset_content_type: application/text

---
#自动同步，github -> gitee
#name: sync2gitee
#on: [push]
#
#jobs:
#  repo-sync:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Mirror the Github organization repos to Gitee.
#        uses: Yikun/hub-mirror-action@master
#        with:
#          src: 'github/HummerRisk'
#          dst: 'gitee/HummerCloud'
#          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
#          dst_token:  ${{ secrets.GITEE_TOKEN }}
#          account_type: org
#          clone_style: ""https""
#          static_list: ""HummerRisk""
#          force_update: true
#          debug: true

---
"
datavane;datasophon;datavane/datasophon;https://github.com/datavane/datasophon;https://api.github.com/repos/datavane/datasophon;dev;11/10/2022 05:06;22/04/2024 05:33;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""CodeQL""

on:
  schedule:
    - cron: '0 1 * * *'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java','javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality


      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo ""Run, Build Application using script""
      #   ./location_of_script_within_repo/buildscript.sh
      - run: |
          ./mvnw -Pgoogle-mirror -B clean install \
                 -Dmaven.test.skip=true \
                 --no-snapshot-updates

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
---
name: Dependency Review

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Dependency Review
        uses: actions/dependency-review-action@v3

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: issue-robot

on:
  issues:
    types: [opened]

jobs:
  issueRobot:
    runs-on: ubuntu-latest
    steps:
      - name: ""Checkout ${{ github.ref }}""
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          submodules: true

      - name: ""Translation into English in issue""
        uses: ./.github/actions/translate-on-issue
        with:
          translate-title: true
          translate-body: true

      - name: ""Comment in issue""
        uses: ./.github/actions/comment-on-issue
        with:
          message: |
            Thank you for your feedback, we have received your issue, Please wait patiently for a reply.
            * In order for us to understand your request as soon as possible, please provide detailed information, version or pictures.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ ""dev"" ]
  pull_request:
    branches: [ ""dev"" ]

concurrency:
  group: backend-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      MAVEN_OPTS: -Xmx2G -Xms2G
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
#       - name: Check Style
#         run: |
#           ./mvnw -T 2C -B --no-snapshot-updates clean checkstyle:check
      - name: Build and Package
        run: |
          ./mvnw -Pgoogle-mirror -B clean install \
                 -Dmaven.test.skip=true \
                 --no-snapshot-updates \
                 -pl !datasophon-ui,!datasophon-api,!datasophon-service -am

---
"
JetBrains;intellij-sdk-code-samples;JetBrains/intellij-sdk-code-samples;https://github.com/JetBrains/intellij-sdk-code-samples;https://api.github.com/repos/JetBrains/intellij-sdk-code-samples;main;02/04/2020 17:20;22/04/2024 08:02;FALSE;
jobrunr;jobrunr;jobrunr/jobrunr;https://github.com/jobrunr/jobrunr;https://api.github.com/repos/jobrunr/jobrunr;master;02/04/2020 19:34;21/04/2024 21:34;FALSE;
adlered;bolo-solo;adlered/bolo-solo;https://github.com/adlered/bolo-solo;https://api.github.com/repos/adlered/bolo-solo;master;28/11/2019 14:27;21/04/2024 04:02;TRUE;"# This is a basic workflow to help you get started with Actions

name: Bolo-Build-Amd64

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # schedule:
  #   - cron: ""0 0 * * */3""

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  bolo-buildx:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: Get current date
        id: date
        run: echo ""::set-output name=today::$(date +'%Y-%m-%d')""
      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_REF | cut -d / -f 3)
          IMAGE=""tangcuyu/bolo-solo""
          echo ::set-output name=image::${IMAGE}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - 
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          tags: |
            ${{ steps.prep.outputs.image }}:latest

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

---
"
JessYanCoding;InsGallery;JessYanCoding/InsGallery;https://github.com/JessYanCoding/InsGallery;https://api.github.com/repos/JessYanCoding/InsGallery;master;03/04/2020 13:29;30/03/2024 16:08;FALSE;
LianjiaTech;retrofit-spring-boot-starter;LianjiaTech/retrofit-spring-boot-starter;https://github.com/LianjiaTech/retrofit-spring-boot-starter;https://api.github.com/repos/LianjiaTech/retrofit-spring-boot-starter;master;04/04/2020 03:44;21/04/2024 10:31;FALSE;
JetBrains;skija;JetBrains/skija;https://github.com/JetBrains/skija;https://api.github.com/repos/JetBrains/skija;master;06/04/2020 19:25;10/04/2024 08:09;TRUE;"on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - 'extras/**'
      - .dockerignore
      - .gitignore
      - CHANGELOG.md
      - Dockerfile
      - LICENSE
      - README.md

jobs:
  shared:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: |
          echo ""JAVA_HOME=$JAVA_HOME_11_X64"" >> $GITHUB_ENV
          echo ""$JAVA_HOME_11_X64/bin"" >> $GITHUB_PATH
      - run: python3 script/deploy_shared.py
        if: github.ref == 'refs/heads/master'
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          SPACE_TOKEN: ${{ secrets.SPACE_TOKEN }}
      - run: python3 script/deploy_shared.py --dry-run
        if: github.ref != 'refs/heads/master'
      - uses: actions/upload-artifact@v2
        with:
          name: skija-shared-jar
          path: shared/target/*.jar

  macos:
    runs-on: macos-10.15
    needs: shared
    strategy:
      matrix:
        arch: [""x64"", ""arm64""]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: seanmiddleditch/gha-setup-ninja@master
      - run: |
          echo ""JAVA_HOME=$JAVA_HOME_11_X64"" >> $GITHUB_ENV
          echo ""$JAVA_HOME_11_X64/bin"" >> $GITHUB_PATH
      - run: python3 script/build.py --arch=${{ matrix.arch }}
      - name: Test
        if: ${{ matrix.arch == 'x64'}}
        run: python3 script/test.py
      - run: python3 script/deploy_platform.py --arch=${{ matrix.arch }}
        if: github.ref == 'refs/heads/master'
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          SPACE_TOKEN: ${{ secrets.SPACE_TOKEN }}
      - run: python3 script/deploy_platform.py --arch=${{ matrix.arch }} --dry-run
        if: github.ref != 'refs/heads/master'
      - uses: actions/upload-artifact@v2
        with:
          name: skija-macos-${{ matrix.arch }}-jar
          path: platform/target/*.jar

  linux:
    runs-on: ubuntu-16.04
    needs: shared
    steps:
      - run: |
          echo ""JAVA_HOME=$JAVA_HOME_11_X64"" >> $GITHUB_ENV
          echo ""$JAVA_HOME_11_X64/bin"" >> $GITHUB_PATH
          sudo apt-get --quiet --yes install ninja-build libglu1-mesa-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9
          sudo update-alternatives --config gcc
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: python3 script/build.py
      - run: python3 script/test.py
      - run: python3 script/deploy_platform.py
        if: github.ref == 'refs/heads/master'
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          SPACE_TOKEN: ${{ secrets.SPACE_TOKEN }}
      - run: python3 script/deploy_platform.py --dry-run
        if: github.ref != 'refs/heads/master'
      - uses: actions/upload-artifact@v2
        with:
          name: skija-linux-jar
          path: platform/target/*.jar

  windows:
    runs-on: windows-2019
    needs: shared
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: microsoft/setup-msbuild@v1
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: seanmiddleditch/gha-setup-ninja@master
      - shell: bash
        run: |
          echo ""JAVA_HOME=$JAVA_HOME_11_X64"" >> $GITHUB_ENV
          echo ""$JAVA_HOME_11_X64/bin"" >> $GITHUB_PATH
      - run: python3 script/build.py
      - shell: bash
        run: python3 script/test.py
      - run: python3 script/deploy_platform.py
        if: github.ref == 'refs/heads/master'
        env:
          USER_NAME: ${{ secrets.USER_NAME }}
          SPACE_TOKEN: ${{ secrets.SPACE_TOKEN }}
      - run: python3 script/deploy_platform.py --dry-run
        if: github.ref != 'refs/heads/master'
      - uses: actions/upload-artifact@v2
        with:
          name: skija-windows-jar
          path: platform/target/*.jar

---
"
paulorievrs;java4noobs;paulorievrs/java4noobs;https://github.com/paulorievrs/java4noobs;https://api.github.com/repos/paulorievrs/java4noobs;master;04/04/2020 23:34;21/04/2024 05:02;FALSE;
Jackson0714;PassJava-Platform;Jackson0714/PassJava-Platform;https://github.com/Jackson0714/PassJava-Platform;https://api.github.com/repos/Jackson0714/PassJava-Platform;master;05/04/2020 07:31;22/04/2024 10:20;FALSE;
dkanada;gelli;dkanada/gelli;https://github.com/dkanada/gelli;https://api.github.com/repos/dkanada/gelli;master;07/05/2020 11:21;04/04/2024 13:34;TRUE;"name: main
on: push
jobs:
  main:
    runs-on: ubuntu-latest
    steps:
    - name: Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Variables
      id: variables
      run: echo ::set-output name=version::$(git describe --tags --always)
    - name: Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Secrets
      run: echo ""${STORE_DATA}"" | base64 --decode > store.jks
      env:
        STORE_DATA: ${{ secrets.STORE_DATA }}
    - name: Build
      uses: eskatos/gradle-command-action@v1
      env:
        STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      with:
        arguments: assemble
        gradle-version: 7.3.3
    - name: Move
      run: mv app/build/outputs/apk/release/*.apk gelli-release-${version}.apk
      env:
        version: ${{ steps.variables.outputs.version }}
    - name: Publish
      if: startsWith(github.ref, 'refs/tags')
      uses: ncipollo/release-action@v1
      with:
        artifacts: '*.apk'
        tag: ${{ steps.variables.outputs.version }}
        commit: ${{ github.sha }}
        token: ${{ github.token }}

---
"
microsoft;playwright-java;microsoft/playwright-java;https://github.com/microsoft/playwright-java;https://api.github.com/repos/microsoft/playwright-java;main;25/09/2020 19:37;22/04/2024 08:10;TRUE;"name: Publish Release Docker
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      is_release:
        required: true
        type: boolean
        description: ""Is this a release image?""
jobs:
  publish-canary-docker:
    name: publish to DockerHub
    runs-on: ubuntu-22.04
    permissions:
      id-token: write   # This is required for OIDC login (azure/login) to succeed
      contents: read    # This is required for actions/checkout to succeed
    environment: Docker
    if: github.repository == 'microsoft/playwright-java'
    steps:
    - uses: actions/checkout@v4
    - name: Azure login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_DOCKER_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_DOCKER_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_DOCKER_SUBSCRIPTION_ID }}
    - name: Login to ACR via OIDC
      run: az acr login --name playwright
    - name: Set up Docker QEMU for arm64 docker builds
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64
    - uses: actions/checkout@v4
    - run: ./utils/docker/publish_docker.sh stable
      if: (github.event_name != 'workflow_dispatch' && !github.event.release.prerelease) || (github.event_name == 'workflow_dispatch' && github.event.inputs.is_release == 'true')
    - run: ./utils/docker/publish_docker.sh canary
      if: (github.event_name != 'workflow_dispatch' && github.event.release.prerelease) || (github.event_name == 'workflow_dispatch' && github.event.inputs.is_release != 'true')

---
name: Build & Test
on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - main
      - release-*
jobs:
  dev:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/playwright-github-action@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: 8
    - name: Download drivers
      shell: bash
      run: scripts/download_driver_for_all_platforms.sh
    - name: Build & Install
      run: mvn -B install -D skipTests --no-transfer-progress
    - name: Run tests
      run: mvn test --no-transfer-progress --fail-at-end -D org.slf4j.simpleLogger.showDateTime=true -D org.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss
      env:
        BROWSER: ${{ matrix.browser }}
    - name: Run tracing tests w/ sources
      run: mvn test --no-transfer-progress --fail-at-end --projects=playwright -D test=*TestTracing* -D org.slf4j.simpleLogger.showDateTime=true -D org.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss
      env:
        BROWSER: ${{ matrix.browser }}
        PLAYWRIGHT_JAVA_SRC: src/test/java
    - name: Test Spring Boot Starter
      shell: bash
      env:
        BROWSER: ${{ matrix.browser }}
      run: |
        cd tools/test-spring-boot-starter
        mvn package -D skipTests --no-transfer-progress
        java -jar target/test-spring-boot*.jar

  stable:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser-channel: [chrome]
        include:
          - os: windows-latest
            browser-channel: msedge
          - os: macos-latest
            browser-channel: msedge
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/playwright-github-action@v1
      - name: Install Media Pack
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: Install-WindowsFeature Server-Media-Foundation
      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
      - name: Download drivers
        shell: bash
        run: scripts/download_driver_for_all_platforms.sh
      - name: Build & Install
        run: mvn -B install -D skipTests --no-transfer-progress
      - name: Run tests
        run: mvn test --no-transfer-progress --fail-at-end -D org.slf4j.simpleLogger.showDateTime=true -D org.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss
        env:
          BROWSER: chromium
          BROWSER_CHANNEL: ${{ matrix.browser-channel }}

  Java_17:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/playwright-github-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 17
      - name: Download drivers
        shell: bash
        run: scripts/download_driver_for_all_platforms.sh
      - name: Build & Install
        run: mvn -B install -D skipTests --no-transfer-progress
      - name: Run tests
        run: mvn test --no-transfer-progress --fail-at-end
        env:
          BROWSER: ${{ matrix.browser }}
      - name: Test Spring Boot Starter
        shell: bash
        env:
          BROWSER: ${{ matrix.browser }}
        run: |
          cd tools/test-spring-boot-starter
          mvn package -D skipTests --no-transfer-progress
          java -jar target/test-spring-boot*.jar

---
name: Test CLI
on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - main
      - release-*
jobs:
  verify:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Download drivers
        run: scripts/download_driver_for_all_platforms.sh
      - name: Intall Playwright
        run: mvn install -D skipTests --no-transfer-progress
      - name: Test CLI
        run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -f playwright/pom.xml  -D exec.args=-V
      - name: Test CLI version
        shell: bash
        run: tools/test-cli-version/test.sh
      - name: Test CLI Fatjar
        shell: bash
        run: tools/test-cli-fatjar/test.sh

---
name: Docker
on:
  push:
    paths:
      - '.github/workflows/test_docker.yml'
      - '**/Dockerfile*'
    branches:
      - main
      - release-*
  pull_request:
    paths:
      - .github/workflows/test_docker.yml
      - '**/Dockerfile*'
      - scripts/CLI_VERSION
      - '**/pom.xml'
    branches:
      - main
      - release-*
jobs:
  test:
    name: Test
    timeout-minutes: 120
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        flavor: [focal, jammy]
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: bash utils/docker/build.sh --amd64 ${{ matrix.flavor }} playwright-java:localbuild-${{ matrix.flavor }}
      - name: Test
        run: |
          CONTAINER_ID=""$(docker run --rm --ipc=host -v $(pwd):/root/playwright --name playwright-docker-test -d -t playwright-java:localbuild-${{ matrix.flavor }} /bin/bash)""
          docker exec ""${CONTAINER_ID}"" /root/playwright/tools/test-local-installation/create_project_and_run_tests.sh

---
name: ""Internal Tests""

on:
  push:
    branches:
      - main
      - release-*

jobs:
  trigger:
    name: ""trigger""
    runs-on: ubuntu-20.04
    steps:
    - run: |
        curl -X POST \
          -H ""Accept: application/vnd.github.v3+json"" \
          -H ""Authorization: token ${GH_TOKEN}"" \
          --data ""{\""event_type\"": \""playwright_tests_java\"", \""client_payload\"": {\""ref\"": \""${GITHUB_SHA}\""}}"" \
          https://api.github.com/repos/microsoft/playwright-browsers/dispatches
      env:
        GH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_PERSONAL_ACCESS_TOKEN }}

---
name: Verify API
on:
  push:
    branches:
      - main
      - release-*
    paths:
      - 'scripts/*'
      - 'api-generator/*'
  pull_request:
    branches:
      - main
      - release-*
    paths:
      - 'scripts/**'
      - 'api-generator/**'
jobs:
  verify:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/playwright-github-action@v1
      - name: Download drivers
        run: scripts/download_driver_for_all_platforms.sh
      - name: Regenerate APIs
        run: scripts/generate_api.sh
      - name: Update browser versions in README
        run: scripts/update_readme.sh
      - name: Verify API is up to date
        run: |
          if [[ -n $(git status -s) ]]; then
            echo ""ERROR: generated interfaces/docs differ from the current sources:""
            git diff
            exit 1
          fi

---
"
DantSu;ESCPOS-ThermalPrinter-Android;DantSu/ESCPOS-ThermalPrinter-Android;https://github.com/DantSu/ESCPOS-ThermalPrinter-Android;https://api.github.com/repos/DantSu/ESCPOS-ThermalPrinter-Android;master;07/04/2020 08:42;20/04/2024 09:51;FALSE;
lilongweidev;GoodWeather;lilongweidev/GoodWeather;https://github.com/lilongweidev/GoodWeather;https://api.github.com/repos/lilongweidev/GoodWeather;master;07/04/2020 10:37;21/04/2024 13:36;FALSE;
MeteorDevelopment;meteor-client;MeteorDevelopment/meteor-client;https://github.com/MeteorDevelopment/meteor-client;https://api.github.com/repos/MeteorDevelopment/meteor-client;master;03/11/2020 16:33;22/04/2024 09:55;TRUE;"name: Dev Build

concurrency:
  group: ""build""
  cancel-in-progress: false

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - run: chmod +x gradlew

      - name: Set up Node JS
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Get current dev build number
        id: dev-build
        run: |
          cd .github/devbuilds
          npm install
          node get_number.js >> $GITHUB_OUTPUT

      - name: Build
        run: ./gradlew build -Pcommit=${{ github.sha }} -Pdevbuild=${{ steps.dev-build.outputs.number }}

      - name: Webhook Failure
        if: ${{ failure() }}
        run: |
          cd .github/devbuilds
          npm start ${{ github.ref_name }} https://api.github.com/repos/MeteorDevelopment/meteor-client/compare/${{ github.event.before }}...${{ github.event.after }} false
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}


      - name: Publish
        run: ./gradlew publish -Pcommit=${{ github.sha }} -Pdevbuild=${{ steps.dev-build.outputs.number }}
        env:
          MAVEN_METEOR_ALIAS: ${{ secrets.MAVEN_METEOR_ALIAS }}
          MAVEN_METEOR_TOKEN: ${{ secrets.MAVEN_METEOR_TOKEN }}

      - name: Upload file & Discord webhook
        run: |
          cd .github/devbuilds
          npm start ${{ github.ref_name }} https://api.github.com/repos/MeteorDevelopment/meteor-client/compare/${{ github.event.before }}...${{ github.event.after }} true
        env:
          SERVER_TOKEN: ${{ secrets.SERVER_TOKEN }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

---
name: Issue automatic actions

on:
  issues:
    types: [opened]

permissions:
  issues: write

jobs:
  issue-moderator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Automatically close issues that don't follow the issue template
        uses: lucasbento/auto-close-issues@v1.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          issue-close-message: |
            @${issue.user.login}: hello! :wave:
            This issue is being automatically closed because it does not follow the issue template.""
          closed-issues-label: ""invalid""


---
name: Publish

on:
  release:
    types: [ created ]

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - run: chmod +x gradlew

      - name: Publish
        run: ./gradlew publish

---
name: Build Pull Request

on: [ pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - run: chmod +x gradlew

      - name: Build
        run: ./gradlew build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: pull-request-build
          path: build/libs/

---
"
LSPosed;LSPosed;LSPosed/LSPosed;https://github.com/LSPosed/LSPosed;https://api.github.com/repos/LSPosed/LSPosed;master;12/12/2020 09:39;22/04/2024 11:21;TRUE;"name: Core

on:
  workflow_dispatch:
    inputs:
      post_telegram:
        description: 'Post to Telegram'
        required: true
        type: boolean
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: ""%compiler% -dumpmachine; %compiler% -dumpversion""
      CCACHE_NOHASHDIR: ""true""
      CCACHE_HARDLINK: ""true""
      CCACHE_BASEDIR: ""${{ github.workspace }}""

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: ""recursive""
          fetch-depth: 0

      - name: Write key
        if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/master' ) || github.ref_type == 'tag' }}
        run: |
          if [ ! -z ""${{ secrets.KEY_STORE }}"" ]; then
            echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
            echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
            echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
            echo androidStoreFile='key.jks' >> gradle.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          fi

      - name: Checkout libxposed/api
        uses: actions/checkout@v3
        with:
          repository: libxposed/api
          path: libxposed/api

      - name: Checkout libxposed/service
        uses: actions/checkout@v3
        with:
          repository: libxposed/service
          path: libxposed/service

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ""temurin""
          java-version: ""17""

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

      - name: Build dependencies
        working-directory: libxposed
        run: |
          echo 'org.gradle.caching=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.parallel=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -XX:+UseParallelGC' >> ~/.gradle/gradle.properties
          echo 'android.native.buildOutput=verbose' >> ~/.gradle/gradle.properties
          cd api
          ./gradlew publishToMavenLocal
          cd ../service
          ./gradlew publishToMavenLocal

      - name: Build with Gradle
        run: |
          ./gradlew zipAll

      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          riruReleaseName=`ls magisk-loader/release/LSPosed-v*-riru-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""riruReleaseName=$riruReleaseName"" >> $GITHUB_OUTPUT
          riruDebugName=`ls magisk-loader/release/LSPosed-v*-riru-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""riruDebugName=$riruDebugName"" >> $GITHUB_OUTPUT
          zygiskReleaseName=`ls magisk-loader/release/LSPosed-v*-zygisk-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""zygiskReleaseName=$zygiskReleaseName"" >> $GITHUB_OUTPUT
          zygiskDebugName=`ls magisk-loader/release/LSPosed-v*-zygisk-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""zygiskDebugName=$zygiskDebugName"" >> $GITHUB_OUTPUT
          unzip magisk-loader/release/LSPosed-v*-riru-release.zip -d LSPosed-riru-release
          unzip magisk-loader/release/LSPosed-v*-riru-debug.zip -d LSPosed-riru-debug
          unzip magisk-loader/release/LSPosed-v*-zygisk-release.zip -d LSPosed-zygisk-release
          unzip magisk-loader/release/LSPosed-v*-zygisk-debug.zip -d LSPosed-zygisk-debug

      - name: Upload riru release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.riruReleaseName }}
          path: ""./LSPosed-riru-release/*""

      - name: Upload riru debug
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.riruDebugName }}
          path: ""./LSPosed-riru-debug/*""

      - name: Upload zygisk release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskReleaseName }}
          path: ""./LSPosed-zygisk-release/*""

      - name: Upload zygisk debug
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskDebugName }}
          path: ""./LSPosed-zygisk-debug/*""

      - name: Upload mappings
        uses: actions/upload-artifact@v3
        with:
          name: mappings
          path: |
            magisk-loader/build/outputs/mapping
            app/build/outputs/mapping

      - name: Upload symbols
        uses: actions/upload-artifact@v3
        with:
          name: symbols
          path: build/symbols

      - name: Post to channel
        if: ${{ success() && github.event_name != 'pull_request' && github.ref == 'refs/heads/master' && github.ref_type != 'tag' && inputs.post_telegram != 'false' }}
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          DISCUSSION_ID: ${{ secrets.DISCUSSION_ID }}
          TOPIC_ID: ${{ secrets.TOPIC_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          if [ ! -z ""${{ secrets.BOT_TOKEN }}"" ]; then
            OUTPUT=""magisk-loader/release/""
            export riruRelease=$(find $OUTPUT -name ""LSPosed-v*-riru-release.zip"")
            export riruDebug=$(find $OUTPUT -name ""LSPosed-v*-riru-debug.zip"")
            export zygiskRelease=$(find $OUTPUT -name ""LSPosed-v*-zygisk-release.zip"")
            export zygiskDebug=$(find $OUTPUT -name ""LSPosed-v*-zygisk-debug.zip"")
            ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ[""COMMIT_MESSAGE""]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ[""COMMIT_URL""])))'`
            curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruDebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskDebug%22%2C%22caption%22:${ESCAPED}%7D%5D"" -F riruRelease=""@$riruRelease"" -F riruDebug=""@$riruDebug"" -F zygiskRelease=""@$zygiskRelease"" -F zygiskDebug=""@$zygiskDebug""
            # curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${DISCUSSION_ID}&message_thread_id=${TOPIC_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FriruDebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FzygiskDebug%22%2C%22caption%22:${ESCAPED}%7D%5D"" -F riruRelease=""@$riruRelease"" -F riruDebug=""@$riruDebug"" -F zygiskRelease=""@$zygiskRelease"" -F zygiskDebug=""@$zygiskDebug""
          fi

---
name: Crowdin Action

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - app/src/main/res/values/strings.xml
      - daemon/src/main/res/values/strings.xml

jobs:
  synchronize-with-crowdin:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: crowdin action
      uses: crowdin/github-action@master
      with:
        upload_translations: false
        download_translations: false
        upload_sources: true
        config: 'crowdin.yml'
        crowdin_branch_name: master
      env:
        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}

---
"
c0ny1;java-object-searcher;c0ny1/java-object-searcher;https://github.com/c0ny1/java-object-searcher;https://api.github.com/repos/c0ny1/java-object-searcher;master;12/04/2020 17:58;19/04/2024 06:18;FALSE;
GraxCode;threadtear;GraxCode/threadtear;https://github.com/GraxCode/threadtear;https://api.github.com/repos/GraxCode/threadtear;master;13/04/2020 11:45;11/04/2024 05:52;FALSE;
fit2cloud;rackshift;fit2cloud/rackshift;https://github.com/fit2cloud/rackshift;https://api.github.com/repos/fit2cloud/rackshift;master;12/06/2020 07:27;11/04/2024 08:33;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build rackshift image with maven & node

on:
  push:
    branches: [ v1.1.0 ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
          check-latest: true

      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: |
          cd ./rackshift-web
          npm install
          npm run build
          rm -rf ../rackshift-server/src/main/resources/static
          mkdir -p ../rackshift-server/src/main/resources/static
          cp -r ./dist/* ../rackshift-server/src/main/resources/static
          cd ../
          mvn clean install -DskipTests
          cd ./rackshift-server
          sudo docker build -t rackshift/rackshift:actions .
          sudo docker login --username=${{secrets.DH_USERNAME}} --password=${{ secrets.DH_PWD }}
          sudo docker push rackshift/rackshift:actions
---
name: upload release asset

on:
  create:
    tag:
      - ""v1.7.1""

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Create Release File To Upload
        id: create_release_file
        env:
          RELEASE_VERSION: ${{github.ref}}
        run: |
          git clone https://github.com/rackshift/rackshift-installer.git
          cd rackshift-installer
          rm -rf docker .git
          cd ..
          chmod +x rackshift-installer/installer/install.sh
          version=`echo $RELEASE_VERSION | tr -d 'refs/tags/'`
          filename=rackshift-online-installer-$version
          mv rackshift-installer $filename
          tar -czvf $filename.tar.gz $filename
          echo ""::set-output name=FILENAME::$(echo $filename)""

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            # 快速开始
            仅需两步快速安装 RackShift：

             * 准备一台不小于 8 G内存且可以访问互联网的 64位 Linux 主机；
             * 以 root 用户执行如下命令一键安装 RackShift。
            ```sh
            sh -c ""$(curl -sSL https://github.com/rackshift/rackshift/releases/latest/download/quick_start.sh)""
            ```

            ## 新增
            - 联想 WEBKVM
            - 支持添加单台裸金属
            - 支持给裸金属备注
            - 增加是否检查网络连通开关
            - 支持 CentOS6.X 装机

            ## 修复
            - IP 排序问题
            - 日志打印过多
            - websocket 卡死

            # 产品文档
            点击 [完整文档](https://rackshift.io) 查看完整的安装和使用文档
            # 离线安装包
            [离线安装包下载地址](https://community.fit2cloud.com/#/download/rackshift/v1-7-1)

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ steps.create_release_file.outputs.FILENAME }}.tar.gz
          asset_name: ${{ steps.create_release_file.outputs.FILENAME }}.tar.gz
          asset_content_type: application/zip

      - name: Upload Quick Start Script
        id: upload-release-quick-start-shell
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ steps.create_release_file.outputs.FILENAME }}/installer/quick_start.sh
          asset_name: quick_start.sh
          asset_content_type: application/text`
---
"
alibaba;alibaba-rsocket-broker;alibaba/alibaba-rsocket-broker;https://github.com/alibaba/alibaba-rsocket-broker;https://api.github.com/repos/alibaba/alibaba-rsocket-broker;master;27/11/2019 06:42;20/04/2024 13:28;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -DskipTests -B package --file pom.xml

---
"
oversecured;ovaa;oversecured/ovaa;https://github.com/oversecured/ovaa;https://api.github.com/repos/oversecured/ovaa;master;17/04/2020 14:09;11/04/2024 07:56;FALSE;
CaffeineMC;phosphor-fabric;CaffeineMC/phosphor-fabric;https://github.com/CaffeineMC/phosphor-fabric;https://api.github.com/repos/CaffeineMC/phosphor-fabric;1.19.x/dev;31/03/2020 00:16;20/04/2024 20:43;TRUE;"name: gradle-ci

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout sources
      uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: 17
    - name: Set release tag
      if: startsWith(github.ref, 'refs/tags/')
      run: echo ""RELEASE_TAG=${GITHUB_REF#refs/tags/}"" >> $GITHUB_ENV
    - name: Build with Gradle
      run: ./gradlew build
      env:
        BUILD_ID: ${{ github.run_number }}
    - name: Upload prod artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          build/libs/
          !build/libs/*-sources.jar
    - name: Upload dev artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: build/devlibs/

---
name: release-artifacts

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
      - name: Set release tag
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ""RELEASE_TAG=${GITHUB_REF#refs/tags/}"" >> $GITHUB_ENV
      - name: Set build id
        if: github.event.release.prerelease
        run: echo ""BUILD_ID=SNAPSHOT"" >> $GITHUB_ENV
      - name: Build with Gradle
        run: ./gradlew build
      - name: Upload assets to GitHub
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'build/libs/*;!build/libs/*-sources.jar;build/devlibs/*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

---
"
mitch-seymour;mastering-kafka-streams-and-ksqldb;mitch-seymour/mastering-kafka-streams-and-ksqldb;https://github.com/mitch-seymour/mastering-kafka-streams-and-ksqldb;https://api.github.com/repos/mitch-seymour/mastering-kafka-streams-and-ksqldb;master;18/04/2020 22:37;19/04/2024 21:07;FALSE;
RelativityMC;C2ME-fabric;RelativityMC/C2ME-fabric;https://github.com/RelativityMC/C2ME-fabric;https://api.github.com/repos/RelativityMC/C2ME-fabric;ver/1.20.4;12/02/2021 14:26;22/04/2024 12:20;TRUE;"name: C2ME Build Script

on:
  push: {}
  pull_request: {}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: true

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 17
        java-package: jdk
        
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ./.gradle/loom-cache
        key: ${{ runner.os }}-gradle4-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle4-
        
    - name: Build C2ME
      run: |
        ./gradlew clean build --stacktrace

    - name: upload to modrinth and curseforge
      run: ./gradlew modrinth curseforge
      if: github.ref == 'refs/heads/ver/1.20.4'
      env:
        MODRINTH_TOKEN: ${{ secrets.MODRINTH_UPLOAD_TOKEN }}
        CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_API_TOKEN }}
        GITHUB_EVENT_RAW_PATH: ${{ github.event_path }}
      continue-on-error: true

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: c2me-artifact
        path: 'build/libs/*.jar'
      

---
name: C2ME Test

on:
  push: {}
  pull_request: {}

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        testTask: [runTestC2MEServer]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 17
        java-package: jdk
        
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ./.gradle/loom-cache
        key: ${{ runner.os }}-gradle4-test-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle4-test-
        
    - name: Test C2ME
      run: |
        ./gradlew clean ${{ matrix.testTask }}

---
"
opendatadiscovery;odd-platform;opendatadiscovery/odd-platform;https://github.com/opendatadiscovery/odd-platform;https://api.github.com/repos/opendatadiscovery/odd-platform;main;07/07/2021 22:56;20/04/2024 19:13;TRUE;"name: CVE checks monthly
on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 15 * *' # at 8 AM 15th day of a month

jobs:
  images:
    runs-on: ubuntu-latest
    env:
      REGISTRY: 436866023604.dkr.ecr.eu-central-1.amazonaws.com
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Cache local Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-shared-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build the image without tests
        env:
          GENERATE_SOURCEMAP: false
          CI: false
        run: ./gradlew jibDockerBuild -x test --no-daemon --image opendatadiscovery/${{ github.event.repository.name }} --scan -Pversion=cve
      - uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: ""opendatadiscovery/odd-platform:cve""
          format: ""table""
          exit-code: ""1""

---
name: Main branch Build
on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

concurrency: main_build

jobs:
  images:
    runs-on: ubuntu-latest
    env:
      REGISTRY: 436866023604.dkr.ecr.eu-central-1.amazonaws.com
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: unfor19/install-aws-cli-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1.3.3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Cache local Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-shared-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run tests and build the image
        env:
          GENERATE_SOURCEMAP: false
          CI: false
        run: ./gradlew test jib --no-daemon --image ${{ env.REGISTRY }}/${{ github.event.repository.name }} --scan -Pversion=ci-${GITHUB_SHA::6}
  update_tag:
    needs: ['images']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: opendatadiscovery/saas-iac
          ref: development
          token: ${{ secrets.ODD_GIT_TOKEN }}
      - run: |
          sed -i ""s/tag:.*/tag: ci-${GITHUB_SHA::6}/"" states/main/eu-central-1/development/argocd/odd-platform/demo.yaml
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit --allow-empty -m ""update tag""
          git push
---
name: Release Build
on:
  release:
    types: [published]

  workflow_dispatch:
    inputs:
      rebuild:
        description: 'A tag name for building previously created release'
        required: false
        default: '0.0.0'
      buildOptions:
        description: 'Additional options for Gradle build command'
        required: false
        default: ''

jobs:
  run_playwright_tests:
    uses: ./.github/workflows/run-playwright-tests.yml
  release:
    needs: [run_playwright_tests]
    concurrency: release
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check version
        id: get-version
        run: |
          if [[ ""${{ github.event.action }}"" == ""published"" ]]
            then
              VERSION=""${{ github.event.release.tag_name }}""
            else
              LATEST=`git tag -l --sort=creatordate | tail -1`
              VERSION=`echo ${LATEST} | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g'`-${{ github.sha }}
          fi
          if [[ -n ""${{ github.event.inputs.buildOptions }}"" ]]
            then
              VERSION=""${{ github.event.inputs.buildOptions }}""
          fi
          echo ::set-output name=version::${VERSION}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_GITHUB }}
      - name: Test and build the image
        env:
          GENERATE_SOURCEMAP: false
          CI: false
        run: ./gradlew test jib ${{ github.event.inputs.buildOptions }} --no-daemon --scan --image ghcr.io/opendatadiscovery/odd-platform -Pversion=${{ steps.get-version.outputs.version }} -PcontainerBuildArm=true -PcontainerBuildAmd=true

---
name: Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        with:
          config-name: release-drafter.yaml
          disable-autolabeler: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
name: Playwright Tests
on:
  workflow_call:

jobs:
  lint:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: |
          cd tests
          npm ci
      - name: Run linter
        run: |
          cd tests
          npm run lint:ci

  format-check:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install dependencies
        run: |
          cd tests
          npm ci
      - name: Check formatting
        run: |
          cd tests
          npm run format:check

  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Build docker container
        run: ./gradlew jibDockerBuild -x test -x checkstyleMain -x checkstyleTest --image odd-platform:e2e-latest-build
#      - name: Start containers
#        run: |
#          cd tests
#          npm run odd-up
#      - name: Install dependencies
#        run: |
#          cd tests
#          npm ci
#      - name: Install Playwright Browsers
#        run: |
#          cd tests
#          npx playwright install --with-deps chromium
#      - name: Run Playwright tests
#        run: |
#          cd tests
#          npm run test:ci
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 10

---
name: Run tests
on:
  workflow_dispatch:
  pull_request:
    types: ['opened', 'reopened', 'synchronize']
  push:
    branches:
      - 'debug/**'

permissions:
  checks: write
  pull-requests: write

concurrency:
  group: pr-cg-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run_playwright_tests:
    uses: ./.github/workflows/run-playwright-tests.yml
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache local Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache local npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build and run tests
        env:
          GENERATE_SOURCEMAP: false
          CI: false
        run: ./gradlew odd-platform-api:build ${{ github.event.inputs.buildOptions }} --no-daemon --scan -PbundleUI=false

      - name: Publish test reports
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: 'odd-platform-api/build/test-results/**/*.xml'
          check_name: Test Results
          comment_mode: create new

---
name: SonarCloud Scan [backend]
on:
  push:
    branches:
      - 'main'
  pull_request_target:
    types: ['opened', 'edited', 'reopened', 'synchronize']
    paths:
      - 'odd-platform-api/**'
      - 'build.gradle'

jobs:
  sonar-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: unfor19/install-aws-cli-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-shared-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Node cache
        uses: actions/cache@v3
        with:
          path: odd-platform-ui/.npm
          key: ${{ runner.os }}-shared-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build and analyze pull request target
        if: ${{ github.event_name == 'pull_request_target' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          JAVA_OPTS: ""-Xms2048m -Xmx2048m""
        run: |
          ./gradlew -x compileTestJava :odd-platform-api:sonarqube \
            --info \
            --no-daemon \
            --scan \
            -PbundleUI=false \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=$HEAD_REF \
            -Dsonar.pullrequest.base=$BASE_REF

      - name: Build main branch
        if: ${{ github.event_name == 'push' }}
        env:
          GENERATE_SOURCEMAP: false
          CI: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JAVA_OPTS: ""-Xms2048m -Xmx2048m""
        run: |
          ./gradlew -x compileTestJava :odd-platform-api:sonarqube \
            --info \
            --no-daemon \
            --scan \
            -PbundleUI=false
---
name: SonarCloud Scan [frontend]
on:
  push:
    branches:
      - 'main'
  pull_request_target:
    types: ['opened', 'edited', 'reopened', 'synchronize']
    paths:
      - 'odd-platform-ui/**'
      - 'build.gradle'

jobs:
  images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: unfor19/install-aws-cli-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-shared-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Node cache
        uses: actions/cache@v3
        with:
          path: odd-platform-ui/.npm
          key: ${{ runner.os }}-shared-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build and analyze pull request target
        if: ${{ github.event_name == 'pull_request_target' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          JAVA_OPTS: ""-Xms2048m -Xmx2048m""
        run: |
          ./gradlew :odd-platform-ui:sonarqube \
            --info \
            --no-daemon \
            --scan \
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
            -Dsonar.pullrequest.branch=$HEAD_REF \
            -Dsonar.pullrequest.base=$BASE_REF

      - name: Build main branch
        if: ${{ github.event_name == 'push' }}
        env:
          GENERATE_SOURCEMAP: false
          CI: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          JAVA_OPTS: ""-Xms2048m -Xmx2048m""
        run: |
          ./gradlew :odd-platform-ui:sonarqube \
            --info \
            --no-daemon \
            --scan

---
"
stacksimplify;aws-eks-kubernetes-masterclass;stacksimplify/aws-eks-kubernetes-masterclass;https://github.com/stacksimplify/aws-eks-kubernetes-masterclass;https://api.github.com/repos/stacksimplify/aws-eks-kubernetes-masterclass;master;20/04/2020 13:41;20/04/2024 18:01;FALSE;
wayn111;waynboot-mall;wayn111/waynboot-mall;https://github.com/wayn111/waynboot-mall;https://api.github.com/repos/wayn111/waynboot-mall;master;25/04/2020 10:34;22/04/2024 10:49;FALSE;
canyie;pine;canyie/pine;https://github.com/canyie/pine;https://api.github.com/repos/canyie/pine;master;26/04/2020 09:13;20/04/2024 21:33;FALSE;
mtcarpenter;mall-cloud-alibaba;mtcarpenter/mall-cloud-alibaba;https://github.com/mtcarpenter/mall-cloud-alibaba;https://api.github.com/repos/mtcarpenter/mall-cloud-alibaba;master;27/04/2020 07:28;20/04/2024 16:24;FALSE;
TraceNature;redissyncer-server;TraceNature/redissyncer-server;https://github.com/TraceNature/redissyncer-server;https://api.github.com/repos/TraceNature/redissyncer-server;main;27/04/2020 07:34;20/04/2024 16:22;FALSE;
iqiyi;TaskManager;iqiyi/TaskManager;https://github.com/iqiyi/TaskManager;https://api.github.com/repos/iqiyi/TaskManager;master;27/04/2020 09:08;05/04/2024 08:50;FALSE;
1170762202;WanAndroid;1170762202/WanAndroid;https://github.com/1170762202/WanAndroid;https://api.github.com/repos/1170762202/WanAndroid;master;27/04/2020 10:55;22/04/2024 09:11;FALSE;
algorithmzuo;algorithmbasic2020;algorithmzuo/algorithmbasic2020;https://github.com/algorithmzuo/algorithmbasic2020;https://api.github.com/repos/algorithmzuo/algorithmbasic2020;master;28/04/2020 12:02;19/04/2024 12:22;FALSE;
Xunzhuo;Algorithm-Guide;Xunzhuo/Algorithm-Guide;https://github.com/Xunzhuo/Algorithm-Guide;https://api.github.com/repos/Xunzhuo/Algorithm-Guide;master;29/04/2020 02:04;18/04/2024 17:18;FALSE;
ChickenHook;RestrictionBypass;ChickenHook/RestrictionBypass;https://github.com/ChickenHook/RestrictionBypass;https://api.github.com/repos/ChickenHook/RestrictionBypass;master;01/05/2020 23:16;22/04/2024 08:07;FALSE;
201206030;novel-plus;201206030/novel-plus;https://github.com/201206030/novel-plus;https://api.github.com/repos/201206030/novel-plus;develop_xxy;02/05/2020 09:15;22/04/2024 11:08;FALSE;
datafaker-net;datafaker;datafaker-net/datafaker;https://github.com/datafaker-net/datafaker;https://api.github.com/repos/datafaker-net/datafaker;main;30/12/2021 01:07;22/04/2024 06:57;TRUE;"name: 'Dependency Review'
on: [ pull_request ]

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4

---
name: Publish package to the Maven Central Repository
on:
  push:
    branches: [ main ]
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Configure GPG Key
        run: |
          echo -n ""$GPG_SIGNING_KEY"" | base64 --decode | gpg --import --no-tty --batch --yes
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
      - uses: actions/checkout@v4
        with:
          ref: 'main'
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish package
        run: ./mvnw --batch-mode -Dstyle.color=always deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main, 1.x ]
  pull_request:
    branches: [ main, 1.x ]

env:
  # Quotes are here since Windows has issues with parsing of maven args with dots
  mvn_options: --batch-mode -q ""-Dstyle.color=always"" ""-Dorg.slf4j.simpleLogger.showDateTime=true"" ""-Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss.SSS""
  jdk_for_downstream: 21
  os_for_downstream: ubuntu-latest

jobs:
  build:
    strategy:
      matrix:
        java-version: [ 17, 21, 22 ]
        runs-on: [ ubuntu-latest, macos-latest, windows-latest ]
    name: Jdk ${{ matrix.java-version }}, os ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: ./mvnw $mvn_options install -PnoGpg --file pom.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4.3.0
      - id: version-extract
        if: ${{ matrix.java-version == env.jdk_for_downstream && matrix.runs-on == env.os_for_downstream}}
        run: |
          echo ""release_version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)"" >> $GITHUB_OUTPUT
      - name: 'Download downstream project'
        if: ${{ matrix.java-version == env.jdk_for_downstream && matrix.runs-on == env.os_for_downstream}}
        uses: actions/checkout@v4
        with:
          repository: datafaker-net/datafaker-gen
          fetch-depth: 1
          path: datafaker_gen
      - name: 'Test with downstream project'
        if: ${{ matrix.java-version == env.jdk_for_downstream && matrix.runs-on == env.os_for_downstream}}
        run: cd datafaker_gen && ./mvnw clean install -Ddatafaker.version=${{ steps.version-extract.outputs.release_version }}

---
name: Release non-snapshot package to the Maven Central Repository
on:
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Configure GPG Key
        run: echo -n ""$GPG_SIGNING_KEY"" | base64 --decode | gpg --import --no-tty --batch --yes
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

      - uses: actions/checkout@v4

      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Set projects Maven version to GitHub Action GUI set version
        run: mvn versions:set ""-DnewVersion=${{ github.event.inputs.releaseversion }}""

      - name: Publish package
        run: ./mvnw --batch-mode deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

---
"
google;exposure-notifications-android;google/exposure-notifications-android;https://github.com/google/exposure-notifications-android;https://api.github.com/repos/google/exposure-notifications-android;master;04/05/2020 17:30;06/03/2024 12:54;FALSE;
bernie-g;geckolib;bernie-g/geckolib;https://github.com/bernie-g/geckolib;https://api.github.com/repos/bernie-g/geckolib;main;04/05/2020 18:48;21/04/2024 04:53;FALSE;
ssssssss-team;magic-api;ssssssss-team/magic-api;https://github.com/ssssssss-team/magic-api;https://api.github.com/repos/ssssssss-team/magic-api;master;05/05/2020 04:12;22/04/2024 10:05;FALSE;
davidfantasy;mybatis-plus-generator-ui;davidfantasy/mybatis-plus-generator-ui;https://github.com/davidfantasy/mybatis-plus-generator-ui;https://api.github.com/repos/davidfantasy/mybatis-plus-generator-ui;master;05/05/2020 18:06;22/04/2024 10:08;FALSE;
mywalkb;LSPosed_mod;mywalkb/LSPosed_mod;https://github.com/mywalkb/LSPosed_mod;https://api.github.com/repos/mywalkb/LSPosed_mod;main;28/03/2022 10:05;22/04/2024 13:30;TRUE;"name: Core

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: ""%compiler% -dumpmachine; %compiler% -dumpversion""
      CCACHE_NOHASHDIR: ""true""
      CCACHE_HARDLINK: ""true""
      CCACHE_BASEDIR: ""${{ github.workspace }}""

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: ""recursive""
          fetch-depth: 0

      - name: Write key
        if: ${{ ( github.event_name != 'pull_request' && startsWith(github.ref, 'refs/heads/') ) || github.ref_type == 'tag' }}
        run: |
          if [ ! -z ""${{ secrets.KEY_STORE }}"" ]; then
            echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
            echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
            echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
            echo androidStoreFile='key.jks' >> gradle.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          fi

      - name: Checkout libxposed/api
        uses: actions/checkout@v4
        with:
          repository: libxposed/api
          path: libxposed/api

      - name: Checkout libxposed/service
        uses: actions/checkout@v4
        with:
          repository: libxposed/service
          path: libxposed/service

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ""temurin""
          java-version: ""21""

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G
          key: ${{ runner.os }}
          restore-keys: ${{ runner.os }}
          save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      - name: Build dependencies
        working-directory: libxposed
        run: |
          echo 'org.gradle.caching=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.parallel=true' >> ~/.gradle/gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8 -XX:+UseParallelGC' >> ~/.gradle/gradle.properties
          echo 'android.native.buildOutput=verbose' >> ~/.gradle/gradle.properties
          cd api
          ./gradlew publishToMavenLocal
          cd ../service
          ./gradlew publishToMavenLocal

      - name: Build with Gradle
        run: |
          ./gradlew zipAll

      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          riruReleaseName=`ls magisk-loader/release/LSPosed-v*-riru-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""riruReleaseName=$riruReleaseName"" >> $GITHUB_OUTPUT
          riruDebugName=`ls magisk-loader/release/LSPosed-v*-riru-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""riruDebugName=$riruDebugName"" >> $GITHUB_OUTPUT
          zygiskReleaseName=`ls magisk-loader/release/LSPosed-v*-zygisk-release.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""zygiskReleaseName=$zygiskReleaseName"" >> $GITHUB_OUTPUT
          zygiskDebugName=`ls magisk-loader/release/LSPosed-v*-zygisk-debug.zip | awk -F '(/|.zip)' '{print $3}'` && echo ""zygiskDebugName=$zygiskDebugName"" >> $GITHUB_OUTPUT
          unzip magisk-loader/release/LSPosed-v*-riru-release.zip -d LSPosed-riru-release
          unzip magisk-loader/release/LSPosed-v*-riru-debug.zip -d LSPosed-riru-debug
          unzip magisk-loader/release/LSPosed-v*-zygisk-release.zip -d LSPosed-zygisk-release
          unzip magisk-loader/release/LSPosed-v*-zygisk-debug.zip -d LSPosed-zygisk-debug

      - name: Upload riru release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.riruReleaseName }}
          path: ""./LSPosed-riru-release/*""

      - name: Upload riru debug
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.riruDebugName }}
          path: ""./LSPosed-riru-debug/*""

      - name: Upload zygisk release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskReleaseName }}
          path: ""./LSPosed-zygisk-release/*""

      - name: Upload zygisk debug
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskDebugName }}
          path: ""./LSPosed-zygisk-debug/*""

      - name: Upload XposedService Release jar
        uses: actions/upload-artifact@v4
        with:
          name: xposed_service-release
          path: services/xposed-service/interface/build/intermediates/javac/release/compileReleaseJavaWithJavac/classes/*

      - name: Upload XposedService Debug jar
        uses: actions/upload-artifact@v4
        with:
          name: xposed_service-debug
          path: services/xposed-service/interface/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes/*

---
"
CardboardPowered;cardboard;CardboardPowered/cardboard;https://github.com/CardboardPowered/cardboard;https://api.github.com/repos/CardboardPowered/cardboard;ver/1.19.2;07/05/2020 08:19;21/04/2024 12:45;FALSE;
Randgalt;record-builder;Randgalt/record-builder;https://github.com/Randgalt/record-builder;https://api.github.com/repos/Randgalt/record-builder;master;16/12/2019 20:41;22/04/2024 05:11;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Maven Build - Java 17

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Build with Maven
      run: ./mvnw -B package --file pom.xml

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Maven Build - Java 21

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 21
    - name: Build with Maven
      run: ./mvnw -B package --file pom.xml -Djdk-version=21

---
"
PolyhedralDev;Terra;PolyhedralDev/Terra;https://github.com/PolyhedralDev/Terra;https://api.github.com/repos/PolyhedralDev/Terra;master;08/09/2020 10:38;22/04/2024 11:58;TRUE;"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Build

on: [ pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      - name: Set up JDK 17
        uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - uses: burrunan/gradle-cache-action@03c71a8ba93d670980695505f48f49daf43704a6
        name: Build Terra
        with:
          # Specifies arguments for Gradle execution
          # If arguments is missing or empty, then Gradle is not executed
          arguments: build
          # arguments can be multi-line for better readability
          # arguments: |
          #  --no-paralell
          #  build
          #  -x test
          # Gradle version to use for execution:
          #   wrapper (default), current, rc, nightly, release-nightly, or
          #   versions like 6.6 (see https://services.gradle.org/versions/all)
          gradle-version: wrapper
          # Properties are passed as -Pname=value
          properties: |
            kotlin.js.compiler=ir
            kotlin.parallel.tasks.in.project=true
---
"
paulpacifico;shutter-encoder;paulpacifico/shutter-encoder;https://github.com/paulpacifico/shutter-encoder;https://api.github.com/repos/paulpacifico/shutter-encoder;master;08/05/2020 19:12;22/04/2024 09:38;FALSE;
MultiPaper;MultiPaper;MultiPaper/MultiPaper;https://github.com/MultiPaper/MultiPaper;https://api.github.com/repos/MultiPaper/MultiPaper;main;17/01/2021 05:36;21/04/2024 10:33;TRUE;"name: Generate Jars
on: [ push, pull_request ]
jobs:
  paperclip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        with:
          java-version: '17'
          cache: 'gradle'
          distribution: 'temurin'
      - name: Configure Git User Details
        run: git config --global user.email ""actions@github.com"" && git config --global user.name ""Github Actions""
      - name: Apply Patches
        run: ./gradlew applyPatches --stacktrace
      - name: Build Paperclip jar
        run: ./gradlew shadowjar createReobfPaperclipJar --stacktrace
      - name: Upload Paperclip jar
        uses: actions/upload-artifact@v2
        with:
          name: multipaper.jar
          path: build/libs/multipaper-paperclip-*-reobf.jar
      - name: Upload MultiPaper-Master jar
        uses: actions/upload-artifact@v2
        with:
          name: multipaper-master.jar
          path: MultiPaper-Master/build/libs/multipaper-master*.jar

---
name: Update Upstream

on:
  schedule:
    - cron: '0 15 * * *' # Once a day at 5pm GMT+2
  workflow_dispatch: # on button click

jobs:
  upstream:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        with:
          java-version: '17'
          cache: 'gradle'
          distribution: 'temurin'
      - name: Configure Git User Details
        run: git config --global user.email ""actions@github.com"" && git config --global user.name ""Github Actions""
      - name: Update Upstream Commit Hash
        run: ./gradlew purpurRefLatest --stacktrace
      - name: Apply Patches
        run: ./gradlew applyPatches --stacktrace
      - name: Build Paperclip jar
        run: ./gradlew jar createReobfPaperclipJar --stacktrace
      - name: Rebuild Patches
        run: ./gradlew rebuildPatches --stacktrace
      - name: Upload Paperclip jar
        uses: actions/upload-artifact@v2
        with:
          name: multipaper.jar
          path: build/libs/multipaper-paperclip-*-reobf.jar
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update Upstream
          branch: update-upstream
          delete-branch: true
          title: 'Update Upstream'
          body: ''

---
"
Snailclimb;guide-rpc-framework;Snailclimb/guide-rpc-framework;https://github.com/Snailclimb/guide-rpc-framework;https://api.github.com/repos/Snailclimb/guide-rpc-framework;master;10/05/2020 15:24;21/04/2024 07:37;FALSE;
huaweicloud;Sermant;huaweicloud/Sermant;https://github.com/huaweicloud/Sermant;https://api.github.com/repos/huaweicloud/Sermant;develop;07/09/2021 03:22;22/04/2024 13:42;TRUE;"name: Unit test and code coverage
on: [push, pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java_version: [8]
        os: [ubuntu-latest]
    permissions:
      checks: write
      contents: write
      pull-requests: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'adopt'
          cache: maven
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: download sc
        run: |
          curl -o apache-servicecomb-service-center-2.1.0-linux-amd64.tar.gz -L https://github.com/apache/servicecomb-service-center/releases/download/v2.1.0/apache-servicecomb-service-center-2.1.0-linux-amd64.tar.gz
          tar -zxf apache-servicecomb-service-center-2.1.0-linux-amd64.tar.gz
          sh apache-servicecomb-service-center-2.1.0-linux-amd64/start-service-center.sh
      - name: download zookeeper
        run: |
          curl -o apache-zookeeper-3.6.3-bin.tar.gz -L https://archive.apache.org/dist/zookeeper/zookeeper-3.6.3/apache-zookeeper-3.6.3-bin.tar.gz
          tar -zxf apache-zookeeper-3.6.3-bin.tar.gz
          bash apache-zookeeper-3.6.3-bin/bin/zkServer.sh start apache-zookeeper-3.6.3-bin/conf/zoo_sample.cfg
      - name: download nacos
        run: |
          curl -o nacos-server-2.1.0.tar.gz -L  https://github.com/alibaba/nacos/releases/download/2.1.0/nacos-server-2.1.0.tar.gz
          tar -zxf nacos-server-2.1.0.tar.gz
          bash nacos/bin/startup.sh -m standalone
      - name: Build with Maven
        run: mvn test
      - name: Generate code coverage report
        uses: codecov/codecov-action@v4
        with:
          files: ${{ github.workspace }}/report/target/jacoco/jacoco.xml
          flags: unittests
          fail_ci_if_error: true # optional (default = false)

---
name: Agent-core Integration Test
env:
  sermantVersion: 1.0.0
on:
  push:
  pull_request:
    branches:
      - '*'
    paths:
      - 'sermant-agentcore/**'
      - 'sermant-integration-tests/agentcore-test/**'
      - '.github/workflows/agentcore*.yml'
      - '.github/actions/common/agentcore/action.yml'
      - '.github/actions/scenarios/agentcore/action.yml'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  download-midwares-and-cache:
    name: download midwares and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cache local cse
        uses: actions/cache@v3
        with:
          path: Local-CSE-2.1.3-linux-amd64.zip
          key: ${{ runner.os }}-local-cse
          restore-keys: |
            ${{ runner.os }}-local-cse
      - name: download cse
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh cse
      - name: cache zookeeper
        uses: actions/cache@v3
        with:
          path: apache-zookeeper-3.6.3-bin.tar.gz
          key: ${{ runner.os }}-apache-zookeeper-3.6.3
          restore-keys: |
            ${{ runner.os }}-apache-zookeeper-3.6.3
      - name: download zookeeper
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh zk
      - name: cache nacos server
        uses: actions/cache@v3
        with:
          path: nacos-server-2.1.0.tar.gz
          key: ${{ runner.os }}-nacos-server-2.1.0
          restore-keys: |
            ${{ runner.os }}-nacos-server-2.1.0
      - name: download nacos
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh nacos210
  build-agent-and-cache:
    name: build agent and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: cache agent
        uses: actions/cache@v3
        with:
          path: sermant-agent-*/
          key: ${{ runner.os }}-agent-${{ github.run_id }}
      - name: package agent
        run: |
          sed -i '/sermant-injector/d' pom.xml
          mvn package -DskipTests -Ptest --file pom.xml
      - name: move test plugin
        run: |
          mkdir -p sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/agentcore-test-plugin/plugin
          mkdir -p sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/dynamic-test-first-plugin/plugin
          mkdir -p sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/dynamic-test-second-plugin/plugin
          mkdir -p sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/dynamic-test-third-plugin/plugin
          cp ./sermant-integration-tests/agentcore-test/agentcore-test-plugin/target/agentcore-test-plugin-1.0.0.jar sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/agentcore-test-plugin/plugin/
          cp -r ./sermant-integration-tests/agentcore-test/config sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/agentcore-test-plugin/
          cp ./sermant-integration-tests/agentcore-test/dynamic-test-first-plugin/target/dynamic-test-first-plugin-1.0.0.jar sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/dynamic-test-first-plugin/plugin/
          cp ./sermant-integration-tests/agentcore-test/dynamic-test-second-plugin/target/dynamic-test-second-plugin-1.0.0.jar sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/dynamic-test-second-plugin/plugin/
          cp ./sermant-integration-tests/agentcore-test/dynamic-test-third-plugin/target/dynamic-test-third-plugin-1.0.0.jar sermant-agent-${{ env.sermantVersion }}/agent/pluginPackage/dynamic-test-third-plugin/plugin/
          cp ./sermant-integration-tests/agentcore-test/agentcore-test-application/target/agentcore-test-application-1.0.0-jar-with-dependencies.jar sermant-agent-${{ env.sermantVersion }}/agent/
          sed -i '/plugins:/a \  - agentcore-test-plugin' sermant-agent-${{ env.sermantVersion }}/agent/config/plugins.yaml
  test-for-agentcore-common:
    name: Test for agentcore common
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/agentcore
      - name: start agentcore common test
        uses: ./.github/actions/scenarios/agentcore/common
  test-for-agentcore-dynamic-config:
    name: Test for agentcore dynamic config
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    strategy:
      matrix:
        include:
          - serviceAddress: ""127.0.0.1:8848""
            dynamicConfigType: ""NACOS""
          - serviceAddress: ""127.0.0.1:2181""
            dynamicConfigType: ""ZOOKEEPER""
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/agentcore
      - name: test dynamic config for ${{ matrix.dynamicConfigType }}
        uses: ./.github/actions/scenarios/agentcore/dynamic-config
  test-for-agentcore-dynamic:
    name: Test for agentcore dynamic
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/agentcore
      - name: start dynamic test
        uses: ./.github/actions/scenarios/agentcore/dynamic
  test-for-agentcore-premain-startup:
    name: Test for agentcore premain startup
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/agentcore
      - name: start dynamic test
        uses: ./.github/actions/scenarios/agentcore/premain
  test-for-agentcore-agentmain-startup:
    name: Test for agentcore agentmain startup
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/agentcore
      - name: start dynamic test
        uses: ./.github/actions/scenarios/agentcore/agentmain




---
name: Backend Integration Test
env:
  sermantVersion: 1.0.0
on:
  push:
  pull_request:
    branches:
      - '*'
    paths:
      - 'sermant-agentcore/**'
      - 'sermant-backend/**'
      - '.github/workflows/backend*.yml'
      - '.github/actions/scenarios/backend/memory/action.yml'
      - '.github/actions/scenarios/backend/redis/action.yml'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  download-midwares-and-cache:
    name: download midwares and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: cache middlewares
        uses: actions/cache@v3
        with:
          path: |
            apache-zookeeper-*/
          key: ${{ runner.os }}-middlewares-${{ github.run_id }}
      - name: download middlewares
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh zk
          tar -zxf apache-zookeeper-3.6.3-bin.tar.gz
  build-agent-and-cache:
    name: build agent and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: cache agent
        uses: actions/cache@v3
        with:
          path: sermant-agent-*/
          key: ${{ runner.os }}-agent-${{ github.run_id }}
      - name: package agent
        run: |
          sed -i '/sermant-backend-lite/d' pom.xml
          sed -i '/sermant-integration-tests/d' pom.xml
          sed -i '/sermant-injector/d' pom.xml
          mvn package -DskipTests -Ptest --file pom.xml
  test-for-backend:
    name: Test for backend
    runs-on: ubuntu-latest
    needs: [ build-agent-and-cache, download-midwares-and-cache ]
    steps:
      - uses: actions/checkout@v2
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: start backend use memory test
        uses: ./.github/actions/scenarios/backend/memory
      - name: start backend use redis test
        uses: ./.github/actions/scenarios/backend/redis



---
on:
  push:
    tags:
      - 'v*'

name: Create Release

env:
  tag: ${{ github.ref }}

jobs:
  auto-create-release:
    name: Auto Create Release
    runs-on: windows-latest
    steps:
      - name: save env version
        shell: bash
        run: |
          str=${{env.tag}}
          echo ""version=${str##*v}"" >> $GITHUB_ENV
      - name: Checkout Source
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: Create License Binary Suffix
        run: |
          mvn license:aggregate-add-third-party
      - name: set version
        run: |
          mvn versions:set -DnewVersion='${{ env.version }}'
      - name: Build with Maven
        run: |
          mvn clean package -P agent -P package -DskipTests
          mkdir ${{ github.workspace }}/package
          cp ${{ github.workspace }}/sermant-agent-*.tar.gz ${{ github.workspace }}/package/sermant-${{ env.version }}.tar.gz
          ls ${{ github.workspace }}/package
      - name: Create Release # automatically release new version
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/package/sermant-${{ env.version }}.tar.gz
          asset_name: sermant-${{ env.version }}.tar.gz
          asset_content_type: application/tar
---
name: database-write-prohibition integration test
env:
  sermantVersion: 1.0.0
on:
  push:
  pull_request:
    branches:
      - '*'
    paths:
      - 'sermant-agentcore/**'
      - 'sermant-integration-tests/database-write-prohibition-test/**'
      - 'sermant-plugins/sermant-database-write-prohibition/**'
      - '.github/workflows/database_write_prohibition_integration_test.yml'
      - '.github/actions/common/database-write-prohibition/**'
      - '.github/actions/scenarios/database-write-prohibition/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  download-midwares-and-cache:
    name: download midwares and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cache zookeeper
        uses: actions/cache@v3
        with:
          path: apache-zookeeper-3.6.3-bin.tar.gz
          key: ${{ runner.os }}-apache-zookeeper-3.6.3
          restore-keys: |
            ${{ runner.os }}-apache-zookeeper-3.6.3
      - name: download zookeeper
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh zk
  build-agent-and-cache:
    name: build agent and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: cache agent
        uses: actions/cache@v3
        with:
          path: sermant-agent-*/
          key: ${{ runner.os }}-agent-${{ github.run_id }}
      - name: package agent
        run: |
          sed -i '/sermant-backend/d' pom.xml
          sed -i '/sermant-integration-tests/d' pom.xml
          sed -i '/sermant-injector/d' pom.xml
          mvn package -DskipTests -Ptest --file pom.xml
  test-for-database-write-prohibition-mongodb:
    name: Test for database-write-prohibition mongodb
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    strategy:
      matrix:
        include:
          - mongodbClientVersion: ""3.7.0""
          - mongodbClientVersion: ""3.8.2""
          - mongodbClientVersion: ""3.9.1""
          - mongodbClientVersion: ""3.10.2""
          - mongodbClientVersion: ""3.11.3""
          - mongodbClientVersion: ""3.12.14""
          - mongodbClientVersion: ""4.0.6""
          - mongodbClientVersion: ""4.1.2""
          - mongodbClientVersion: ""4.2.3""
          - mongodbClientVersion: ""4.3.4""
          - mongodbClientVersion: ""4.4.2""
          - mongodbClientVersion: ""4.5.1""
          - mongodbClientVersion: ""4.6.1""
          - mongodbClientVersion: ""4.7.2""
          - mongodbClientVersion: ""4.8.2""
          - mongodbClientVersion: ""4.9.1""
          - mongodbClientVersion: ""4.10.2""
          - mongodbClientVersion: ""4.11.1""
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/database-write-prohibition
      - name: database-write-prohibition-mongodb test for mongodbClientVersion=${{ matrix.mongodbClientVersion }}
        uses: ./.github/actions/scenarios/database-write-prohibition/mongodb
  test-for-database-write-prohibition-mysql:
    name: Test for database-write-prohibition mysql
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    strategy:
      matrix:
        include:
          - mysqlClientVersion: ""2.6.2""
          - mysqlClientVersion: ""2.7.6""
          - mysqlClientVersion: ""2.7.12""
          - mysqlClientVersion: ""3.0.6""
          - mysqlClientVersion: ""3.0.11""
          - mysqlClientVersion: ""3.1.4""
          - mysqlClientVersion: ""3.2.0""
          - mysqlClientVersion: ""3.3.3""
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/database-write-prohibition
      - name: database-write-prohibition-mysql test for mysqlClientVersion=${{ matrix.mysqlClientVersion }}
        uses: ./.github/actions/scenarios/database-write-prohibition/mysql
  test-for-postgresql:
    name: Test for postgresql
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    strategy:
      matrix:
        include:
          - postgresqlVersion: ""9.4-1200-jdbc4""
          - postgresqlVersion: ""9.4-1203-jdbc4""
          - postgresqlVersion: ""9.4-1206-jdbc4""
          - postgresqlVersion: ""9.4-1200-jdbc41""
          - postgresqlVersion: ""9.4-1203-jdbc41""
          - postgresqlVersion: ""9.4-1206-jdbc41""
          - postgresqlVersion: ""9.4.1207""
          - postgresqlVersion: ""9.4.1210""
          - postgresqlVersion: ""9.4.1212""
          - postgresqlVersion: ""42.0.0""
          - postgresqlVersion: ""42.1.0""
          - postgresqlVersion: ""42.1.2""
          - postgresqlVersion: ""42.1.4""
          - postgresqlVersion: ""42.2.0""
          - postgresqlVersion: ""42.2.3""
          - postgresqlVersion: ""42.2.6""
          - postgresqlVersion: ""42.2.9""
          - postgresqlVersion: ""42.2.12""
          - postgresqlVersion: ""42.2.15""
          - postgresqlVersion: ""42.2.18""
          - postgresqlVersion: ""42.2.21""
          - postgresqlVersion: ""42.2.24""
          - postgresqlVersion: ""42.2.27""
          - postgresqlVersion: ""42.2.29""
          - postgresqlVersion: ""42.3.0""
          - postgresqlVersion: ""42.3.3""
          - postgresqlVersion: ""42.3.6""
          - postgresqlVersion: ""42.3.8""
          - postgresqlVersion: ""42.3.10""
          - postgresqlVersion: ""42.4.0""
          - postgresqlVersion: ""42.4.3""
          - postgresqlVersion: ""42.4.5""
          - postgresqlVersion: ""42.5.0""
          - postgresqlVersion: ""42.5.3""
          - postgresqlVersion: ""42.5.6""
          - postgresqlVersion: ""42.6.0""
          - postgresqlVersion: ""42.6.2""
          - postgresqlVersion: ""42.7.0""
          - postgresqlVersion: ""42.7.2""
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
          datasourcePassword=$(openssl rand -base64 16 | tr -dc 'a-zA-Z0-9' | head -c 10)A1a#$
          echo ""datasourcePassword=$datasourcePassword"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/database-write-prohibition
      - name: database-write-prohibition test for postgresqlVersion=${{ matrix.postgresqlVersion }}
        uses: ./.github/actions/scenarios/database-write-prohibition/postgresql/
  test-for-opengauss:
    name: Test for opengauss
    runs-on: ubuntu-latest
    needs: [build-agent-and-cache, download-midwares-and-cache]
    strategy:
      matrix:
        include:
          - opengaussVersion: ""3.0.0""
          - opengaussVersion: ""3.0.5""
          - opengaussVersion: ""3.0.5-og""
          - opengaussVersion: ""3.1.0""
          - opengaussVersion: ""3.1.0-og""
          - opengaussVersion: ""3.1.1""
          - opengaussVersion: ""3.1.1-og""
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
          datasourcePassword=$(openssl rand -base64 16 | tr -dc 'a-zA-Z0-9' | head -c 10)A1a#$
          echo ""datasourcePassword=$datasourcePassword"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/database-write-prohibition
      - name: database-write-prohibition test for opengaussVersion=${{ matrix.opengaussVersion }}
        uses: ./.github/actions/scenarios/database-write-prohibition/opengauss/
---
name: Dubbo Integration Test
env:
  sermantVersion: 1.0.0
on:
  push:
  pull_request:
    branches:
      - '*'
    paths:
      - 'sermant-agentcore/**'
      - 'sermant-integration-tests/**'
      - 'sermant-plugins/sermant-dynamic-config/**'
      - 'sermant-plugins/sermant-flowcontrol/**'
      - 'sermant-plugins/sermant-loadbalancer/**'
      - 'sermant-plugins/sermant-router/**'
      - 'sermant-plugins/sermant-service-registry/**'
      - 'sermant-plugins/sermant-springboot-registry/**'
      - 'sermant-plugins/sermant-monitor/**'
      - 'sermant-plugins/sermant-service-visibility/**'
      - '.github/workflows/dubbo_integration*.yml'
      - '.github/actions/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  download-midwares-and-cache:
    name: download and cache middlewares
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cache middlewares
        uses: actions/cache@v3
        with:
          path: |
            apache-zookeeper-*/
            Local-CSE-2.1.3-linux-amd64.zip
          key: ${{ runner.os }}-middlewares-${{ github.run_id }}
      - name: download middlewares
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh zk
          tar -zxf apache-zookeeper-3.6.3-bin.tar.gz
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh
  build-agent-and-cache:
    name: package and cache agent
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: cache agent
        uses: actions/cache@v3
        with:
          path: sermant-agent-*/
          key: ${{ runner.os }}-agent-${{ github.run_id }}
      - name: package agent
        run: |
          sed -i '/sermant-backend-lite/d' pom.xml
          sed -i '/sermant-integration-tests/d' pom.xml
          sed -i '/sermant-injector/d' pom.xml
          mvn package -DskipTests -Ptest --file pom.xml
  test-for-dubbo:
    name: Test for dubbo
    runs-on: ubuntu-latest
    needs: [download-midwares-and-cache, build-agent-and-cache]
    strategy:
      matrix:
        dubbo-version: ['2-5','2-6','2-7']
        dubbo-versions: ['0','3','6','9','12']
        include:
          - dubbo-version: '2-5'
            dubbo-versions: '10'
          - dubbo-version: '2-7'
            dubbo-versions: '15'
        exclude:
          - dubbo-version: '2-5'
            dubbo-versions: '9'
          - dubbo-version: '2-5'
            dubbo-versions: '12'
          - dubbo-version: '2-7'
            dubbo-versions: '3'
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/dubbo
      - name: (dubbo router) test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableDubboRouter == 'true'
        uses: ./.github/actions/scenarios/dubbo/router
      - name: monitor test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableMonitor == 'true'
        uses: ./.github/actions/scenarios/dubbo/monitor
      - name: visibility test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableVisibility == 'true'
        uses: ./.github/actions/scenarios/dubbo/visibility
      - name: (dubbo common) test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableDubboCommon == 'true'
        uses: ./.github/actions/scenarios/dubbo/dubbo-common
      - name: (dubbo lane) test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableDubboLane == 'true'
        uses: ./.github/actions/scenarios/dubbo/lane
      - name: removal test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableRemoval == 'true'
        uses: ./.github/actions/scenarios/dubbo/removal
  test-for-dubbo3:
    name: Test for dubbo3.x
    runs-on: ubuntu-latest
    needs: [ download-midwares-and-cache, build-agent-and-cache ]
    strategy:
      matrix:
        registry-model: [ 'all','interface','instance' ]
        dubbo-version: [ '3-0','3-1','3-2' ]
        dubbo-versions: [ '0','3','6','9','12' ]
        include:
          - dubbo-version: '3-0'
            dubbo-versions: '15'
            registry-model: 'all'
          - dubbo-version: '3-0'
            dubbo-versions: '15'
            registry-model: 'interface'
          - dubbo-version: '3-0'
            dubbo-versions: '15'
            registry-model: 'instance'
          - dubbo-version: '3-1'
            dubbo-versions: '11'
            registry-model: 'all'
          - dubbo-version: '3-1'
            dubbo-versions: '11'
            registry-model: 'interface'
          - dubbo-version: '3-1'
            dubbo-versions: '11'
            registry-model: 'instance'
          - dubbo-version: '3-2'
            dubbo-versions: '11'
            registry-model: 'all'
          - dubbo-version: '3-2'
            dubbo-versions: '11'
            registry-model: 'interface'
          - dubbo-version: '3-2'
            dubbo-versions: '11'
            registry-model: 'instance'
        exclude:
          - dubbo-version: '3-0'
            dubbo-versions: '0'
            registry-model: 'all'
          - dubbo-version: '3-0'
            dubbo-versions: '0'
            registry-model: 'interface'
          - dubbo-version: '3-0'
            dubbo-versions: '0'
            registry-model: 'instance'
          - dubbo-version: '3-0'
            dubbo-versions: '3'
            registry-model: 'all'
          - dubbo-version: '3-0'
            dubbo-versions: '3'
            registry-model: 'interface'
          - dubbo-version: '3-0'
            dubbo-versions: '3'
            registry-model: 'instance'
          - dubbo-version: '3-1'
            dubbo-versions: '12'
            registry-model: 'all'
          - dubbo-version: '3-1'
            dubbo-versions: '12'
            registry-model: 'interface'
          - dubbo-version: '3-1'
            dubbo-versions: '12'
            registry-model: 'instance'
          - dubbo-version: '3-2'
            dubbo-versions: '12'
            registry-model: 'all'
          - dubbo-version: '3-2'
            dubbo-versions: '12'
            registry-model: 'interface'
          - dubbo-version: '3-2'
            dubbo-versions: '12'
            registry-model: 'instance'
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100
      - name: set java version to environment
        run: |
          echo ""javaVersion=8"" >> $GITHUB_ENV
      - name: common operations
        uses: ./.github/actions/common/dubbo
      - name: (dubbo3.x router) test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableDubboRouter == 'true'
        uses: ./.github/actions/scenarios/dubbo/router-dubbo3
      - name: (dubbo3.x lane) test for ${{ matrix.dubbo-version }}-${{ matrix.dubbo-versions }}
        if: env.enableDubboLane == 'true'
        uses: ./.github/actions/scenarios/dubbo/lane-dubbo3
---
name: CI

on:
  push:
  pull_request:
    branches:
      - '*'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:

  checkstyle:
    name: Checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: download checkstyle
        run: curl -o checkstyle.jar -L https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.41.1/checkstyle-8.41.1-all.jar
      - name: checkstyle
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          java -jar checkstyle.jar -c checkstyle.xml -f xml . | reviewdog -f=checkstyle -name=""Checkstyle Check"" -reporter=github-pr-check -level=error

  build:
    runs-on: windows-latest
    name: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: Create License Binary Suffix
        run: |
          mvn license:aggregate-add-third-party
      - name: Build with Maven
        run: |
          mvn clean package -P agent -P package -DskipTests
          mkdir ${{ github.workspace }}/package
          cp ${{ github.workspace }}/sermant-agent-*.tar ${{ github.workspace }}/package
      - name: upload package
        uses: actions/upload-artifact@v1
        with:
          name: sermant
          path: ${{ github.workspace }}/package

---
name: mq-consume-prohibition integration test
env:
  sermantVersion: 1.0.0
on:
  push:
  pull_request:
    branches:
      - '*'
    paths:
      - 'sermant-agentcore/**'
      - 'sermant-integration-tests/mq-consume-prohibition-test/**'
      - 'sermant-plugins/sermant-mq-consume-prohibition/**'
      - '.github/workflows/mq_consume_prohibition_integration_test.yml'
      - '.github/actions/common/mq-consume-prohibition/**'
      - '.github/actions/scenarios/mq-consume-prohibition/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true
jobs:
  download-midwares-and-cache:
    name: download midwares and cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cache zookeeper
        uses: actions/cache@v3
        with:
          path: apache-zookeeper-3.6.3-bin.tar.gz
          key: ${{ runner.os }}-apache-zookeeper-3.6.3
          restore-keys: |
            ${{ runner.os }}-apache-zookeeper-3.6.3
      - name: download zookeeper
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh zk
      - name: cache rocketmq
        uses: actions/cache@v3
        with:
          path: rocketmq-all-5.1.4-bin-release.zip
          key: ${{ runner.os }}-rocketmq-all-5.1.4-bin-release
          restore-keys: |
            ${{ runner.os }}-rocketmq-all-5.1.4-bin-release
      - name: download rocketmq
        run: |
          export ROOT_PATH=$(pwd)
          bash ./sermant-integration-tests/scripts/tryDownloadMidware.sh rocketmq514
      - name: cache kafka
        uses: actions/cache@v3
        with:
          path: kafka_2.13-2.7.0.tgz
          key: ${{ runner.os }}-kafka_2.13-2.7.0
          restore-keys: |
   "
Card-Forge;forge;Card-Forge/forge;https://github.com/Card-Forge/forge;https://api.github.com/repos/Card-Forge/forge;master;10/04/2022 04:09;22/04/2024 12:14;TRUE;"name: Publish Desktop Forge

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: cardforge-repo
          server-username: ${{ secrets.FTP_USERNAME }}
          server-password: ${{ secrets.FTP_PASSWORD }}
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Install virtual framebuffer (if not available) to allow running GUI on a headless server
        run: command -v Xvfb >/dev/null 2>&1 || { sudo apt update && sudo apt install -y xvfb; }

      - name: Configure Git User
        run: |
          git config user.email ""actions@github.com""
          git config user.name ""GitHub Actions""
      - name: Build/Install/Publish to GitHub Packages Apache Maven
        run: |
          export DISPLAY="":1""
          Xvfb :1 -screen 0 800x600x8 &
          mvn -U -B clean -P windows-linux install release:clean release:prepare release:perform -T 1C -Dcardforge-repo.username=${{ secrets.FTP_USERNAME }} -Dcardforge-repo.password=${{ secrets.FTP_PASSWORD }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

---
name: Publish Android Release

on:
  workflow_dispatch:
      inputs:
        debug_enabled:
          type: boolean
          description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
          required: false
          default: false
          

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'
          server-id: cardforge-repo
          server-username: ${{ secrets.FTP_USERNAME }}
          server-password: ${{ secrets.FTP_PASSWORD }}
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Install old maven (3.6.3)
        run: |
          curl -o apache-maven-3.6.3-bin.tar.gz https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
          tar xf apache-maven-3.6.3-bin.tar.gz
          export PATH=$PWD/apache-maven-3.6.3/bin:$PATH
          export MAVEN_HOME=$PWD/apache-maven-3.6.3
          mvn --version
          
      - name: Install android SDK
        uses: maxim-lobanov/setup-android-tools@v1
        with:
          packages: |
            platforms;android-26
            build-tools;30.0.3

      - name: Install virtual framebuffer (if not available) to allow running GUI on a headless server
        run: |
          command -v Xvfb >/dev/null 2>&1 || { sudo apt update && sudo apt install -y xvfb; }
          export DISPLAY="":1""
          Xvfb :1 -screen 0 800x600x8 &
        
      - name: Extract Android keystore
        run: |
          ls
          cd forge-gui-android
          echo ""${{ secrets.FORGE_KEYSTORE }}"" > forge.keystore.asc
          gpg -d --passphrase ""${{ secrets.FORGE_KEYSTORE_PASSPHRASE }}"" --batch forge.keystore.asc > forge.keystore
          cd -

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Configure Git User
        run: |
          git config user.email ""actions@github.com""
          git config user.name ""GitHub Actions""

      - name: Install Android maven plugin
        run: |
          mkdir  -p ~/.m2/repository/com/simpligility/maven/plugins/android-maven-plugin/4.6.1
          cd ~/.m2/repository/com/simpligility/maven/plugins/android-maven-plugin/4.6.1
          curl -L -o android-maven-plugin-4.6.1.jar https://github.com/Card-Forge/android-maven-plugin/releases/download/4.6.1/android-maven-plugin-4.6.1.jar
          curl -L -o android-maven-plugin-4.6.1.pom https://github.com/Card-Forge/android-maven-plugin/releases/download/4.6.1/android-maven-plugin-4.6.1.pom
          #mvn install:install-file -Dfile=android-maven-plugin-4.6.1.jar -DgroupId=com.simpligility.maven.plugins -DartifactId=android-maven-plugin -Dversion=4.6.1 -Dpackaging=jar
          cd -
          mvn install -Dmaven.test.skip=true
          mvn dependency:tree
          
      - name: Build/Install/Publish to GitHub Packages Apache Maven
        run: |
          export _JAVA_OPTIONS=""-Xmx2g""
          mvn -U -B -P android-release-build,android-release-sign,android-release-upload install -e -Dsign.keystore=forge.keystore -Dsign.alias=Forge -Dsign.storepass=${{ secrets.SIGN_STORE_PASS }} -Dsign.keypass=${{ secrets.SIGN_STORE_PASS }}  -Dcardforge-repo.username=${{ secrets.FTP_USERNAME }} -Dcardforge-repo.password=${{ secrets.FTP_PASSWORD }} -Dandroid.sdk.path=/usr/local/lib/android/sdk -Dandroid.buildToolsVersion=30.0.3 -Dmaven.test.skip=true
        env:
          GITHUB_TOKEN: ${{ github.token }}


---
name: Create Android Snapshot

on:
  workflow_dispatch:
      inputs:
        debug_enabled:
          type: boolean
          description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
          required: false
          default: false
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '00 19 * * *'
          

jobs:
  build:
    if: github.repository_owner == 'Card-Forge'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: 'maven'
          server-id: cardforge-repo
          server-username: ${{ secrets.FTP_USERNAME }}
          server-password: ${{ secrets.FTP_PASSWORD }}
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Install old maven (3.6.3)
        run: |
          curl -o apache-maven-3.6.3-bin.tar.gz https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
          tar xf apache-maven-3.6.3-bin.tar.gz
          export PATH=$PWD/apache-maven-3.6.3/bin:$PATH
          export MAVEN_HOME=$PWD/apache-maven-3.6.3
          mvn --version
          
      - name: Set Up Android tools
        run: |
          JAVA_HOME=${JAVA_HOME_11_X64} ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT ""platform-tools""
          JAVA_HOME=${JAVA_HOME_11_X64} ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install ""platforms;android-26""
          JAVA_HOME=${JAVA_HOME_11_X64} ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install ""build-tools;30.0.3""

      - name: Install virtual framebuffer (if not available) to allow running GUI on a headless server
        run: |
          command -v Xvfb >/dev/null 2>&1 || { sudo apt update && sudo apt install -y xvfb; }
          export DISPLAY="":1""
          Xvfb :1 -screen 0 800x600x8 &
        
      - name: Extract Android keystore
        run: |
          ls
          cd forge-gui-android
          echo ""${{ secrets.FORGE_KEYSTORE }}"" > forge.keystore.asc
          gpg -d --passphrase ""${{ secrets.FORGE_KEYSTORE_PASSPHRASE }}"" --batch forge.keystore.asc > forge.keystore
          cd -

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Configure Git User
        run: |
          git config user.email ""actions@github.com""
          git config user.name ""GitHub Actions""

      - name: Install Android maven plugin
        run: |
          mkdir  -p ~/.m2/repository/com/simpligility/maven/plugins/android-maven-plugin/4.6.1
          cd ~/.m2/repository/com/simpligility/maven/plugins/android-maven-plugin/4.6.1
          curl -L -o android-maven-plugin-4.6.1.jar https://github.com/Card-Forge/android-maven-plugin/releases/download/4.6.1/android-maven-plugin-4.6.1.jar
          curl -L -o android-maven-plugin-4.6.1.pom https://github.com/Card-Forge/android-maven-plugin/releases/download/4.6.1/android-maven-plugin-4.6.1.pom
          #mvn install:install-file -Dfile=android-maven-plugin-4.6.1.jar -DgroupId=com.simpligility.maven.plugins -DartifactId=android-maven-plugin -Dversion=4.6.1 -Dpackaging=jar
          cd -
          mvn install -Dmaven.test.skip=true
          mvn dependency:tree
          
      - name: Build/Install/Publish to GitHub Packages Apache Maven
        run: |
          export _JAVA_OPTIONS=""-Xmx2g""
          d=$(date +%m-%d)
          # Replace date in forge-gui-mobile/src/forge/Forge.java
          sed -i -e ""s/-SNAPSHOT/-SNAPSHOT-${d}/g"" forge-gui-mobile/src/forge/Forge.java
          mvn -U -B -P android-release-build,android-release-sign install -e -Dsign.keystore=forge.keystore -Dsign.alias=Forge -Dsign.storepass=${{ secrets.SIGN_STORE_PASS }} -Dsign.keypass=${{ secrets.SIGN_STORE_PASS }}  -Dcardforge-repo.username=${{ secrets.FTP_USERNAME }} -Dcardforge-repo.password=${{ secrets.FTP_PASSWORD }} -Dandroid.sdk.path=/usr/local/lib/android/sdk -Dandroid.buildToolsVersion=30.0.3 -Dmaven.test.skip=true
          mkdir -p  forge-gui-android/target/upload
          mv forge-gui-android/target/*-signed-aligned.apk forge-gui-android/target/upload/
          mv forge-gui-android/target/assets.zip forge-gui-android/target/upload/
          cd forge-gui-android/target/upload/
          # Get the first APK file in the folder
          ls
          apk_file=$(find . -maxdepth 1 -type f -name '*.apk' -print -quit)
          
          if [ -n ""$apk_file"" ]; then
              version=$(echo ""$apk_file"" | grep -oP 'forge-android-\K\d+\.\d+\.\d+-SNAPSHOT' | sed 's/-signed-aligned.apk//')
              echo ""APK File: $apk_file""
              echo ""Version: $version""
              mv *.apk ""forge-android-$version-$d-signed-aligned.apk""

              echo ""$version-$d"" > version.txt
          else
              echo ""No .apk files found in the specified folder.""
          fi

          cd -
        
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ftp.cardforge.org
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: forge-gui-android/target/upload/
          server-dir: downloads/dailysnapshots/
          state-name: .ftp-deploy-android-sync-state.json

---
name: Create Desktop Snapshot

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 18 * * *'

jobs:
  build:
    if: github.repository_owner == 'Card-Forge'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: cardforge-repo
          server-username: ${{ secrets.FTP_USERNAME }}
          server-password: ${{ secrets.FTP_PASSWORD }}
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Install virtual framebuffer (if not available) to allow running GUI on a headless server
        run: command -v Xvfb >/dev/null 2>&1 || { sudo apt update && sudo apt install -y xvfb; }

      - name: Configure Git User
        run: |
          git config user.email ""actions@github.com""
          git config user.name ""GitHub Actions""
      - name: Build/Install Snapshot
        run: |
          export DISPLAY="":1""
          Xvfb :1 -screen 0 800x600x8 &
          mvn -U -B clean -P windows-linux install -T 1C -Dcardforge-repo.username=${{ secrets.FTP_USERNAME }} -Dcardforge-repo.password=${{ secrets.FTP_PASSWORD }} 
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}

      - name: Rename before upload
        run: |
          mkdir tarball
          # If this works just gotta figure out how to append datetime
          mv /home/runner/.m2/repository/forge/forge-gui-desktop/*/*.bz2 tarball/
          cd tarball
          out=""$(basename -s .tar.bz2 *)""
          d=$(date +%m-%d)
          mv ""${out}.tar.bz2"" ""${out}-${d}.tar.bz2""

      - name: 📂 Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ftp.cardforge.org
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: tarball/
          server-dir: downloads/dailysnapshots/
          exclude: |
            *.jar
            *.pom
            *.repositories
            *.xml
            

          

---
# This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.
#
# You can adjust the behavior by modifying this file.
# For more information, see:
# https://github.com/actions/stale
name: Mark stale issues and pull requests

on:
  schedule:
  - cron: '21 9 * * *'

jobs:
  stale:

    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
    - uses: actions/stale@v5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: ""This issue has not been updated in a while and has now been marked as stale. Stale messages will be auto closed.""
        stale-pr-message: 'This PR has not been updated in a while nad has been marked on stale. Stale PRs will be auto closed'
        close-issue-message: 'This issue was closed because it has been stalled for 5 days with no activity.'
        stale-issue-label: 'no-issue-activity'
        stale-pr-label: 'no-pr-activity'
        exempt-issue-labels: 'keep'
        exempt-pr-labels: 'awaiting-approval,work-in-progress,keep'
        days-before-issue-stale: 30
        days-before-pr-stale: 45
        days-before-issue-close: 5
        days-before-pr-close: 10

---
name: Test build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11' ]
    name: Test with Java ${{ matrix.Java }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: Install virtual framebuffer (if not available) to allow running GUI on a headless server
        run: command -v Xvfb >/dev/null 2>&1 || { sudo apt update && sudo apt install -y xvfb; }

      - name: Run tests in virtual framebuffer
        run: |
          export DISPLAY="":1""
          Xvfb :1 -screen 0 800x600x8 &
          mvn -U -B clean -P windows-linux test

---
name: Maven test for settings

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
        server-id: cardforge-repo
        server-username: ${{ secrets.FTP_USERNAME }}
        server-password: ${{ secrets.FTP_PASSWORD }}
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Check settings after java setup
      run: |
        cat ${{ github.workspace }}/settings.xml
        

    - name: maven-settings-xml-action
      uses: whelk-io/maven-settings-xml-action@v20
      with:
        servers: '[{ ""id"": ""cardforge-repo"", ""username"": ""${{ secrets.FTP_USERNAME }}"", ""password"": ""Fake_password"" }]'
    
    - name: Check settings after xml action
      run: |
        cat ~/.m2/settings.xml
        
    - name: Check settings after xml action
      run: |
        cat ${{ github.workspace }}/.mvn/local-settings.xml
        
    - name: Where are maven settings
      run: |
        mvn -X clean -Dcardforge-repo.username=${{ secrets.FTP_USERNAME }} -Dcardforge-repo.password=${{ secrets.FTP_PASSWORD }} | grep ""settings""

---
"
MarkerHub;vueblog;MarkerHub/vueblog;https://github.com/MarkerHub/vueblog;https://api.github.com/repos/MarkerHub/vueblog;master;14/05/2020 03:53;22/04/2024 09:45;FALSE;
ndroi;easy163;ndroi/easy163;https://github.com/ndroi/easy163;https://api.github.com/repos/ndroi/easy163;master;16/05/2020 15:49;20/04/2024 07:08;FALSE;
cyrildiagne;ar-cptext;cyrildiagne/ar-cptext;https://github.com/cyrildiagne/ar-cptext;https://api.github.com/repos/cyrildiagne/ar-cptext;master;17/05/2020 17:17;31/03/2024 16:23;FALSE;
cylonid;NativeAlphaForAndroid;cylonid/NativeAlphaForAndroid;https://github.com/cylonid/NativeAlphaForAndroid;https://api.github.com/repos/cylonid/NativeAlphaForAndroid;dev;18/05/2020 17:50;16/04/2024 23:32;FALSE;
SonicCloudOrg;sonic-agent;SonicCloudOrg/sonic-agent;https://github.com/SonicCloudOrg/sonic-agent;https://api.github.com/repos/SonicCloudOrg/sonic-agent;main;16/08/2021 03:58;16/04/2024 06:14;TRUE;"name: deploy to Dockerhub

on:
  push:
    tags:
      - ""v*.*.*""

jobs:

  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: ""WyriHaximus/github-action-get-previous-tag@v1""
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: replace version
        run: ver=${{ steps.previoustag.outputs.tag }} && new_ver=${ver:1} && sed -i ""s/SONIC_VERSION/${new_ver}/g"" pom.xml
      - name: login docker hub
        run: echo ""${{ secrets.ACCESS_TOKEN }}"" | docker login -u zhouyixun --password-stdin
      - run: rm -rf plugins/sonic-android-apk.apk
      - name: saa-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-android-apk
          latest: true
          fileName: ""sonic-android-apk.apk""
      - name: saa
        run: mv sonic-android-apk.apk plugins/sonic-android-apk.apk
      - name: sas-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-android-supply
          latest: true
          fileName: ""*_linux_x86_64.tar.gz""
      - name: sas
        run: tar zxvf *_linux_x86_64.tar.gz && rm *_linux_x86_64.tar.gz && mv sas plugins/sonic-android-supply
      - name: sgm-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-go-mitmproxy
          latest: true
          fileName: ""*_linux_x86_64.tar.gz""
      - name: sgm
        run: tar zxvf *_linux_x86_64.tar.gz && rm *_linux_x86_64.tar.gz && mv sonic-go-mitmproxy plugins/sonic-go-mitmproxy
      - name: sib-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-ios-bridge
          latest: true
          fileName: ""*_linux_x86_64.tar.gz""
      - name: sib
        run: tar zxvf *_linux_x86_64.tar.gz && rm *_linux_x86_64.tar.gz && mv sib plugins/sonic-ios-bridge
      - name: deploy
        run: mvn package -Dplatform=linux-x86_64 -Dmaven.test.skip=true
      - name: build image
        run: docker build -t sonicorg/sonic-agent-linux:${{ steps.previoustag.outputs.tag }} -f src/main/docker/Dockerfile .
      - name: push
        run: docker push sonicorg/sonic-agent-linux:${{ steps.previoustag.outputs.tag }}

---
name: maven compile test

on: [ pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Validate and Compile with Maven
        run: mvn validate compile

---
name: release to github

on:
  push:
    tags:
      - ""v*.*.*""

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          draft: false
          generate_release_notes: true

  doc:
    needs: create
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: ""WyriHaximus/github-action-get-previous-tag@v1""
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: replace version
        run: sed -i ""s/SONIC_VERSION/${{ steps.previoustag.outputs.tag }}/g"" src/main/docker/docker-compose*.yml
      - name: Upload yml To Github Release
        uses: xresloader/upload-to-github-release@v1.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: src/main/docker/docker-compose.yml;src/main/docker/docker-compose-zh.yml
          tag_name: ${{ steps.previoustag.outputs.tag }}
          update_latest_release: true
          draft: false

  release:
    needs: create
    strategy:
      matrix:
        platform: [ ""windows-x86"", ""windows-x86_64"", ""macosx-arm64"", ""macosx-x86_64"", ""linux-arm64"", ""linux-x86"", ""linux-x86_64"" ]
        include:
          - platform: linux-x86
            depend: linux_x86
            adb: linux
          - platform: linux-x86_64
            depend: linux_x86_64
            adb: linux
          - platform: linux-arm64
            depend: linux_arm64
            adb: linux
          - platform: macosx-x86_64
            depend: macosx_x86_64
            adb: darwin
          - platform: macosx-arm64
            depend: macosx_arm64
            adb: darwin
          - platform: windows-x86
            depend: windows_x86
            adb: windows
            tail: .exe
          - platform: windows-x86_64
            depend: windows_x86_64
            adb: windows
            tail: .exe
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: ""WyriHaximus/github-action-get-previous-tag@v1""
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: replace version
        run: ver=${{ steps.previoustag.outputs.tag }} && new_ver=${ver:1} && sed -i ""s/SONIC_VERSION/${new_ver}/g"" pom.xml && sed -i ""s/SONIC_VERSION/${{ steps.previoustag.outputs.tag }}/g"" src/main/docker/docker-compose*.yml
      - name: mkdir
        run: mkdir -p sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins
      - name: package
        run: mvn clean package -Dplatform=${{ matrix.platform }} -Dmaven.test.skip=true
      - name: mvJar-linux86
        run: cp -r target/sonic-agent-${{ matrix.platform }}.jar sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/
      - name: copy
        run: cp -r config/ mini/ sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/
      - name: adb-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-adb-binary
          latest: true
          fileName: ""*""
      - name: adb-unzip
        run: unzip platform-tools_r34.0.3-${{matrix.adb}}.zip && mv platform-tools/* sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/
      - name: sas-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-android-supply
          latest: true
          fileName: ""*""
      - name: sas-untar
        run: tar zxvf *_${{matrix.depend}}.tar.gz && rm *_${{matrix.depend}}.tar.gz && mv sas${{matrix.tail}} sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/sonic-android-supply${{matrix.tail}}
      - name: sgm-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-go-mitmproxy
          latest: true
          fileName: ""*""
      - name: sgm-untar
        run: tar zxvf *_${{matrix.depend}}.tar.gz && rm *_${{matrix.depend}}.tar.gz && mv sonic-go-mitmproxy${{matrix.tail}} sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/sonic-go-mitmproxy${{matrix.tail}}
      - name: sib-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-ios-bridge
          latest: true
          fileName: ""*""
      - name: sib-untar
        run: tar zxvf *_${{matrix.depend}}.tar.gz && rm *_${{matrix.depend}}.tar.gz && mv sib${{matrix.tail}} sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/sonic-ios-bridge${{matrix.tail}}
      - name: saa-download
        uses: robinraju/release-downloader@v1.4
        with:
          repository: SonicCloudOrg/sonic-android-apk
          latest: true
          fileName: ""sonic-android-apk.apk""
      - name: saa
        run: cp sonic-android-apk.apk sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/
      - name: sas
        run: cp plugins/sonic-android-scrcpy.jar sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/
      - name: appium1
        run: cp plugins/sonic-appium-uiautomator2-server.apk sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/
      - name: appium2
        run: cp plugins/sonic-appium-uiautomator2-server-test.apk sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/plugins/
      - name: zip
        uses: TheDoctor0/zip-release@0.6.2
        with:
          filename: sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}.zip
          directory: sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}
      - name: Upload Zip To Github Release
        uses: xresloader/upload-to-github-release@v1.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}/sonic-agent-${{ steps.previoustag.outputs.tag }}-${{matrix.depend}}.zip
          tag_name: ${{ steps.previoustag.outputs.tag }}
          update_latest_release: true
          draft: false

---
"
corona-warn-app;cwa-server;corona-warn-app/cwa-server;https://github.com/corona-warn-app/cwa-server;https://api.github.com/repos/corona-warn-app/cwa-server;main;02/05/2020 17:07;22/04/2024 04:40;TRUE;"name: codeql-analysis-workflow

on:
    push:
        branches:
        - main
        - release/**
    pull_request:
        branches:
        - main
        - release/**
    schedule:
    -   cron: 42 5 * * 1

jobs:
    codeql-analysis-job:
        name: CodeQL Analysis
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Initialize CodeQL
            uses: github/codeql-action/init@v1
            with:
                languages: java
                queries: security-extended
        -   name: Set up JDK 17
            uses: actions/setup-java@v3
            with:
                java-version: '17'
                distribution: temurin
                cache: maven
        -   name: Build
            run: mvn -B clean compile -Dorg.slf4j.simpleLogger.defaultLogLevel=warn
        -   name: Perform CodeQL Analysis
            uses: github/codeql-action/analyze@v1
---
name: hadolint-analysis-workflow

on:
    push:
        branches:
        - main
        - release/**
    pull_request:
        branches:
        - main
        - release/**
        paths:
        - '**/Dockerfile'

jobs:
    hadolint-callback:
        name: Lint callback Dockerfile
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Pull HaDoLint image
            run: docker pull hadolint/hadolint
        -   name: Lint callback Dockerfile
            run: docker run --rm --interactive hadolint/hadolint hadolint --ignore DL3059 - < ./services/callback/Dockerfile
    hadolint-distribution:
        name: Lint distribution Dockerfile
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Pull HaDoLint Image
            run: docker pull hadolint/hadolint
        -   name: Lint distribution Dockerfile
            run: docker run --rm --interactive hadolint/hadolint hadolint --ignore DL3059 - < ./services/distribution/Dockerfile
    hadolint-download:
        name: Lint download Dockerfile
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Pull HaDoLint Image
            run: docker pull hadolint/hadolint
        -   name: Lint download Dockerfile
            run: docker run --rm --interactive hadolint/hadolint hadolint --ignore DL3059 - < ./services/download/Dockerfile
    hadolint-submission:
        name: Lint submission Dockerfile
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Pull HaDoLint Image
            run: docker pull hadolint/hadolint
        -   name: Lint submission Dockerfile
            run: docker run --rm --interactive hadolint/hadolint hadolint --ignore DL3059 - < ./services/submission/Dockerfile
    hadolint-upload:
        name: Lint upload Dockerfile
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Pull HaDoLint Image
            run: docker pull hadolint/hadolint
        -   name: Lint upload Dockerfile
            run: docker run --rm --interactive hadolint/hadolint hadolint --ignore DL3059 - < ./services/upload/Dockerfile
---
name: license-analysis-workflow

on:
    push:
        branches:
        - main
        - release/**
    pull_request:
        branches:
        - main
        - release/**

jobs:
    license-analysis-job:
        name: REUSE Compliance Check
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: REUSE Compliance Check
            uses: fsfe/reuse-action@v1.1
---
name: markdown-analysis-workflow

on:
    push:
        branches:
        - main
        - release/**
    pull_request:
        branches:
        - main
        - release/**
        paths:
        - '**/*.md'

jobs:
    markdown-analysis-job:
        runs-on: ubuntu-latest
        name: 'github actions: markdownlint'
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: markdownlint
            uses: nosborn/github-action-markdown-cli@v1.1.1
            with:
                files: .
                config_file: ./codestyle/.markdownlint.yml
        -   name: markdown link check
            uses: gaurav-nelson/github-action-markdown-link-check@v1
            with:
                config-file: ./codestyle/.markdown-link-check.json
---
name: maven-build

on:
    push:
        branches:
        - main
        - release/**
    pull_request:
        branches:
        - main
        - release/**

permissions:
    statuses: write
    checks: write
    pull-requests: write

jobs:
    mvn-verify:
        name: run mvn verify and do SonarCloud scan
        runs-on: ubuntu-latest
        steps:
        -   name: Checkout repository
            uses: actions/checkout@v3
        -   name: Set up JDK 17
            uses: actions/setup-java@v3
            with:
                java-version: '17'
                distribution: temurin
                cache: maven
        -   name: mvn verify
            run: mvn -B -P integration-test verify --fail-fast --file pom.xml -Dorg.slf4j.simpleLogger.defaultLogLevel=warn
        -   name: SonarCloud scan
            run: mvn -B sonar:sonar --fail-never -Dorg.slf4j.simpleLogger.defaultLogLevel=warn
            env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        -   name: Report JUnit results at checks
            uses: dorny/test-reporter@v1
            if: always()
            with:
                name: Maven Tests
                path: '**/surefire-reports/*.xml'
                reporter: java-junit
                fail-on-error: true
                list-suites: 'failed'
                list-tests: 'failed'
        -   name: Report JUnit results at checks as comment
            uses: EnricoMi/publish-unit-test-result-action/composite@v1
            if: always()
            with:
                files: '**/surefire-reports/*.xml'
---
"
dromara;cubic;dromara/cubic;https://github.com/dromara/cubic;https://api.github.com/repos/dromara/cubic;master;20/05/2020 05:14;17/04/2024 17:18;FALSE;
LandGrey;SpringBootVulExploit;LandGrey/SpringBootVulExploit;https://github.com/LandGrey/SpringBootVulExploit;https://api.github.com/repos/LandGrey/SpringBootVulExploit;master;20/05/2020 11:18;19/04/2024 09:30;FALSE;
fuzhengwei;itstack-demo-design;fuzhengwei/itstack-demo-design;https://github.com/fuzhengwei/itstack-demo-design;https://api.github.com/repos/fuzhengwei/itstack-demo-design;master;20/05/2020 15:45;22/04/2024 10:19;FALSE;
KunMinX;Jetpack-MVVM-Scaffold;KunMinX/Jetpack-MVVM-Scaffold;https://github.com/KunMinX/Jetpack-MVVM-Scaffold;https://api.github.com/repos/KunMinX/Jetpack-MVVM-Scaffold;master;21/05/2020 09:44;19/04/2024 06:40;FALSE;
JumpAlang;Jusic-Serve-Houses;JumpAlang/Jusic-Serve-Houses;https://github.com/JumpAlang/Jusic-Serve-Houses;https://api.github.com/repos/JumpAlang/Jusic-Serve-Houses;jusic_serve_houses;22/05/2020 21:09;19/04/2024 17:29;FALSE;
threedr3am;JSP-WebShells;threedr3am/JSP-WebShells;https://github.com/threedr3am/JSP-WebShells;https://api.github.com/repos/threedr3am/JSP-WebShells;master;24/05/2020 19:45;22/04/2024 09:54;FALSE;
yangzongzhuan;RuoYi-Cloud;yangzongzhuan/RuoYi-Cloud;https://github.com/yangzongzhuan/RuoYi-Cloud;https://api.github.com/repos/yangzongzhuan/RuoYi-Cloud;master;25/05/2020 06:04;19/04/2024 17:34;FALSE;
bytedance;BoostMultiDex;bytedance/BoostMultiDex;https://github.com/bytedance/BoostMultiDex;https://api.github.com/repos/bytedance/BoostMultiDex;master;25/05/2020 08:45;16/04/2024 13:11;FALSE;
Auto-Accounting;Qianji_auto;Auto-Accounting/Qianji_auto;https://github.com/Auto-Accounting/Qianji_auto;https://api.github.com/repos/Auto-Accounting/Qianji_auto;dev;21/08/2020 17:33;22/04/2024 12:04;TRUE;"name: Release and Sync APK to Coolapk

on:
  push:
    tags: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: ./

      - name: Setup Java environment
        uses: actions/setup-java@v2
        with:
          java-version: 1.8

      - name: Build APK
        run: ./gradlew assembleRelease

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.release.tag_name }}
          release_name: ${{ github.event.release.tag_name }}
          body: ${{ steps.release_notes.outputs.notes }}

      - name: Generate Release Notes
        id: release_notes
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { data } = await github.repos.compareCommits({
              base: '${{ github.event.release.target_commitish }}',
              head: '${{ github.event.release.tag_name }}'
            });
            let changes = [];
            data.commits.forEach(commit => {
              changes.push(`- ${commit.commit.message} ([${commit.sha.substring(0, 7)}](https://github.com/${{ github.repository }}/commit/${commit.sha}))`);
            });
            return {
              notes: `## What's Changed\n\n${changes.join('\n')}`
            }

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

---
"
newbee-ltd;newbee-mall-api;newbee-ltd/newbee-mall-api;https://github.com/newbee-ltd/newbee-mall-api;https://api.github.com/repos/newbee-ltd/newbee-mall-api;master;25/05/2020 18:01;20/04/2024 06:45;FALSE;
nic-delhi;AarogyaSetu_Android;nic-delhi/AarogyaSetu_Android;https://github.com/nic-delhi/AarogyaSetu_Android;https://api.github.com/repos/nic-delhi/AarogyaSetu_Android;master;26/05/2020 19:36;22/04/2024 13:41;FALSE;
NiceSeason;gulimall-learning;NiceSeason/gulimall-learning;https://github.com/NiceSeason/gulimall-learning;https://api.github.com/repos/NiceSeason/gulimall-learning;master;28/05/2020 04:20;20/04/2024 03:43;FALSE;
201206030;novel-cloud;201206030/novel-cloud;https://github.com/201206030/novel-cloud;https://api.github.com/repos/201206030/novel-cloud;master;28/05/2020 05:51;22/04/2024 12:23;FALSE;
activej;activej;activej/activej;https://github.com/activej/activej;https://api.github.com/repos/activej/activej;master;28/05/2020 16:58;20/04/2024 12:49;FALSE;
googlesamples;mlkit;googlesamples/mlkit;https://github.com/googlesamples/mlkit;https://api.github.com/repos/googlesamples/mlkit;master;28/05/2020 23:40;22/04/2024 08:48;FALSE;
yangchong211;YCAndroidTool;yangchong211/YCAndroidTool;https://github.com/yangchong211/YCAndroidTool;https://api.github.com/repos/yangchong211/YCAndroidTool;master;29/05/2020 03:12;18/04/2024 17:52;FALSE;
opengoofy;hippo4j;opengoofy/hippo4j;https://github.com/opengoofy/hippo4j;https://api.github.com/repos/opengoofy/hippo4j;develop;16/06/2021 04:59;20/04/2024 16:45;TRUE;"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build

on:
  push:
    branches: [ develop ]
    paths:
      - '.github/workflows/ci.yml'
      - '**/pom.xml'
      - '**/src/main/**'
      - '**/src/test/**'
      - '!*.md'
      - '!docs/**'
  pull_request:
    branches: [ develop ]
    paths:
      - '.github/workflows/ci.yml'
      - '**/pom.xml'
      - '**/src/main/**'
      - '**/src/test/**'
      - '!*.md'
      - '!docs/**'
  repository_dispatch:
    types: [rerun-ci]

concurrency:
  group: ${{ github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  unix:
    name: JDK ${{ matrix.java.version }} - on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ macos-latest ]
        java:
          - {
            version: 11
          }
          - {
            version: 17
          }
    steps:
      - uses: actions/checkout@v3
      - name: Build with Maven
        run: echo y | mvn clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dmaven.javadoc.skip=true

  test-coverage:
    if: github.repository == 'opengoofy/hippo4j'
    name: Test coverage report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Maven Repos
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: hippo4j-maven-third-party-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            hippo4j-maven-third-party-
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 8
      - name: Test with Maven
        run: echo y | mvn -T1C clean install -Dskip.gpg=true -Dspotless.apply.skip=true -Dskip.jacoco.plugin=false
      - name: Upload to Codecov
        run: bash <(curl -s https://codecov.io/bash)

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

on:
  push:
    branches:
      - main

jobs:
  contrib-readme-job:
    runs-on: ubuntu-latest
    name: A job to automate contrib in readme
    steps:
      - name: Contribute List
        uses: akhilmhdh/contributors-readme-action@v2.3.6
        with:
          image_size: 50
          columns_per_row: 9
          committer_email: wechat202110@163.com
          committer_username: hippo4jbot[bot]
          commit_message: 'Update the list of contributors'
        env:
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}

---
"
geekxh;hello-algorithm;geekxh/hello-algorithm;https://github.com/geekxh/hello-algorithm;https://api.github.com/repos/geekxh/hello-algorithm;master;29/05/2020 07:47;22/04/2024 08:00;FALSE;
Mocha-L;QuJing;Mocha-L/QuJing;https://github.com/Mocha-L/QuJing;https://api.github.com/repos/Mocha-L/QuJing;master;29/05/2020 10:29;22/04/2024 11:35;FALSE;
instancio;instancio;instancio/instancio;https://github.com/instancio/instancio;https://api.github.com/repos/instancio/instancio;main;03/03/2022 07:42;22/04/2024 06:39;TRUE;"name: 'Build'
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - uses: actions/checkout@v4

      - name: 'Set up JDK 21'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: 'Build project'
        run: mvn -v && mvn -B clean install

      - name: 'Prepare Sonar analysis'
        uses: evaristegalois11/sonar-fork-analysis@v1

---
name: ""Deploy Snapshots""
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: ""Deploy""
    steps:
      - uses: actions/checkout@v4
      - name: ""Set up Maven Central Repository""
        uses: actions/setup-java@v4
        with:
          distribution: ""temurin""
          java-version: 21
          server-id: sonatype-snapshots
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: ""Deploy snapshots""
        run: mvn -Pdeploy-test-dependencies -B deploy --no-transfer-progress
        env:
          MAVEN_USERNAME: ${{ secrets.OSS_SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}
  verify:
    needs: deploy
    strategy:
      matrix:
        java: [ 8, 11, 17, 21 ]
    runs-on: ubuntu-latest
    name: ""Verify snapshots JDK ${{ matrix.java }}""
    steps:
      - uses: actions/checkout@v4
      - name: ""Set up JDK""
        uses: actions/setup-java@v4
        with:
          distribution: ""temurin""
          java-version: ${{ matrix.java }}
      - name: ""Test""
        # use the deployed snapshot of instancio-test-support
        # because it cannot be compiled with Java 8
        run: cd instancio-tests && mvn -B -pl -:instancio-test-support verify

---
name: 'Sonar'
on:
  workflow_run:
    workflows: [ Build ]
    types:
      - completed
jobs:
  sonar:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      actions: read
    steps:
      - name: 'Sonar analysis'
        uses: evaristegalois11/sonar-fork-analysis@v1
        with:
          distribution: temurin
          java-version: 21
          github-token: ${{ secrets.GITHUB_TOKEN }}
          sonar-token: ${{ secrets.SONAR_TOKEN }}
          project-key: instancio_instancio

---
"
PaladinCloud;CE;PaladinCloud/CE;https://github.com/PaladinCloud/CE;https://api.github.com/repos/PaladinCloud/CE;master;16/03/2022 02:42;03/04/2024 22:27;TRUE;"name: Sonarcloud-Build
on:
  push:
    branches: [master, v*, release-v*]
  pull_request:
    branches: [master, v*, release-v*]
jobs:
  sonarcloudBuild:
    name: SonarCloud-Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
      - name: running update
        run: sudo apt update
      - name: Install maven
        run: |
          sudo apt install maven -y
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze pull_request
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
        run: |
          export MAVEN_OPTS=""-Xmx4000m  -XX:+UnlockDiagnosticVMOptions -XX:GCLockerRetryAllocationCount=100""
          export SONAR_SCANNER_OPTS=""-Xmx4000m""
          mvn -B -DskipTests=true -Dmaven.javadoc.skip=true -V verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar  -Dsonar.projectKey=PaladinCloud_CE  -Dsonar.organization=paladincloud -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN  -Dsonar.pullrequest.base=master  -Dsonar.pullrequest.key=${{github.event.number}} -Dsonar.pullrequest.provider=GitHub -Dsonar.pullrequest.github.repository=PaladinCloud/CE 

      - name: Build and analyze push
        if: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
        run: |
          export MAVEN_OPTS=""-Xmx4000m  -XX:+UnlockDiagnosticVMOptions -XX:GCLockerRetryAllocationCount=100""
          export SONAR_SCANNER_OPTS=""-Xmx4000m""
          mvn -B -DskipTests=true -Dmaven.javadoc.skip=true -V verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=PaladinCloud_CE  -Dsonar.organization=paladincloud -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN  
---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master, v* ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master, v* ]
  # schedule:
  #   - cron: '42 20 * * 6'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Java JDK
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - if: matrix.language == 'python' || matrix.language == 'javascript'
      name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - if: matrix.language == 'java'
      name: Build Java
      run: |
        sudo apt install maven -y
        export MAVEN_OPTS=""-Xmx4000m""
        mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines. 
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo ""Run, Build Application using script""
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: CE-Dev-S3

on:
  push:
    branches:
      -  master
      -  release-v*.*.*
  pull_request:
    branches:
      -  master
      -  release-v*.*.*

permissions:
  id-token: write
  contents: read  
  pull-requests: read

# job to tcheck if the branch is a release branch
jobs:     
  check_branch:
    name: Check Branch
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check_branch.outputs.is_release }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check if the branch is a release branch
        id: check_branch
        run: |
          branch_name=""${{ github.ref }}""
          if [[ $branch_name =~ ^refs/heads/release-(.+)$ ]]; then
            echo ""::set-output name=is_release::true""
          else
            echo ""::set-output name=is_release::false""
          fi
      - name: Display is_release
        run: |
          is_release=""${{ steps.check_branch.outputs.is_release }}""
          echo "" It is an release branch: $is_release""
  filter:
    name: filters
    runs-on: ubuntu-latest
    needs:
      - check_branch
    outputs:
      pom: ${{ steps.filter.outputs.pom }}
      commons: ${{ steps.filter.outputs.commons }}
      azure-discovery: ${{ steps.filter.outputs.azure-discovery }}
      pacman-awsrules: ${{ steps.filter.outputs.pacman-awsrules }}
      recommendation-enricher: ${{ steps.filter.outputs.recommendation-enricher }}
      gcp-discovery: ${{ steps.filter.outputs.gcp-discovery }}
      pacman-cloud-discovery: ${{ steps.filter.outputs.pacman-cloud-discovery }}
      pacman-rule-engine: ${{ steps.filter.outputs.pacman-rule-engine }}
      job-scheduler: ${{ steps.filter.outputs.job-scheduler }}
      pacman-cloud-notifications: ${{ steps.filter.outputs.pacman-cloud-notifications }}
      pacman-tenable-enricher: ${{ steps.filter.outputs.pacman-tenable-enricher }}
      pacman-aqua-enricher: ${{ steps.filter.outputs.pacman-aqua-enricher }}
      pacman-data-shipper: ${{ steps.filter.outputs.pacman-data-shipper }}
      pacman-qualys-enricher: ${{ steps.filter.outputs.pacman-qualys-enricher }}
      notification-es-logging-service: ${{ steps.filter.outputs.notification-es-logging-service }}
      notification-invoke-service: ${{ steps.filter.outputs.notification-invoke-service }}
      notification-send-email-service: ${{ steps.filter.outputs.notification-send-email-service }}
      notification-template-formatter-service: ${{ steps.filter.outputs.notification-template-formatter-service }}
      DB_Policy: ${{ steps.filter.outputs.DB_Policy }}
      DB: ${{ steps.filter.outputs.DB }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pom:
              - 'jobs/pom.xml'
            commons:
              - 'commons/**'
            azure-discovery:
              - 'jobs/azure-discovery/**'
            pacman-awsrules:
              - 'jobs/pacman-awsrules/**'
            pacman-qualys-enricher:
              - 'jobs/pacman-qualys-enricher/**' 
            recommendation-enricher:
              - 'jobs/recommendation-enricher/**' 
            gcp-discovery:
              - 'jobs/gcp-discovery/**'
            pacman-cloud-discovery:
              - 'jobs/pacman-cloud-discovery/**' 
            pacman-rule-engine:
              - 'jobs/pacman-rule-engine-2.0/**' 
            job-scheduler:
              - 'jobs/job-scheduler/**'
            pacman-cloud-notifications:     
              - 'jobs/pacman-cloud-notifications/**' 
            pacman-tenable-enricher:
              - 'jobs/pacman-tenable-enricher/**' 
            pacman-aqua-enricher:
              - 'jobs/pacman-aqua-enricher/**' 
            pacman-data-shipper:
              - 'jobs/pacman-data-shipper/**'
            notification-es-logging-service:
              - 'lambda-functions/notification-es-logging-service/**'
            notification-invoke-service:
              - 'lambda-functions/notification-invoke-service/**'
            notification-send-email-service:
              - 'lambda-functions/notification-send-email-service/**'
            notification-template-formatter-service:
              - 'lambda-functions/notification-template-formatter-service/**'
            DB_Policy:
              - 'installer/resources/pacbot_app/files/DB_Policy.sql'
            DB:
              - 'installer/resources/pacbot_app/files/DB.sql'

  extract_version:
    name : extract_version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v')
    outputs:
      version: ${{ steps.extract_version.outputs.version }}   
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Extract Version
        id: extract_version
        run: |
          branch_name=""${{ github.ref }}""
          if [[ $branch_name =~ ^refs/heads/release-(.+)$ ]]; then
            echo ""::set-output name=version::${BASH_REMATCH[1]}""
          else
            echo ""Invalid branch name format""
            exit 1
          fi
      - name: Display Version
        run: |
          version=""${{ steps.extract_version.outputs.version }}""
          echo ""Extracted Version: $version""

  AzureBuild:
    name: Azure-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.azure-discovery == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/azure-discovery/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create'
        uses: actions/upload-artifact@v4
        with:
          name: jobs-azure-artifact
          path: ./dist/jobs

  Push-azure-Dev:
    name: Push azure-discovery to s3 dev
    runs-on: ubuntu-latest
    environment: 'SaaSDEV'
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    needs:
      - AzureBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-azure-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/jobs

  Push-azure-QA:
    name: Push azure-discovery to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - AzureBuild
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Qa account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-azure-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/jobs

  AwsrulesBuild:
    name: Awsrules-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.pacman-awsrules == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/pacman-awsrules/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create' 
        uses: actions/upload-artifact@v4
        with:
          name: jobs-awsrules-artifact
          path: ./dist/jobs

  Push-awsrules-Dev:
    name: Push awsrules to s3 dev
    runs-on: ubuntu-latest
    environment: 'SaaSDEV'
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    needs:
      - AwsrulesBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-awsrules-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/jobs

  Push-awsrules-QA:
    name: Push awsrules to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - AwsrulesBuild
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-awsrules-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/jobs

  QualysBuild:
    name: qualys-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.pacman-qualys-enricher == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/pacman-qualys-enricher/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create' 
        uses: actions/upload-artifact@v4
        with:
          name: jobs-qualys-artifact
          path: ./dist/jobs

  Push-Qualys-Dev:
    name: Push qualys to s3 dev
    runs-on: ubuntu-latest
    environment: 'SaaSDEV'
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    needs:
      - QualysBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-qualys-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/jobs

  Push-Qualys-QA:
    name: Push qualys to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - QualysBuild
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-qualys-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/jobs

  RecommendationBuild:
    name: Recommendation-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.recommendation-enricher == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/recommendation-enricher/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create' 
        uses: actions/upload-artifact@v4
        with:
          name: jobs-recommendation-artifact
          path: ./dist/jobs

  Push-recommendation-Dev:
    name: Push recommendation-enricher to s3 dev
    runs-on: ubuntu-latest
    environment: 'SaaSDEV'
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    needs:
      - RecommendationBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-recommendation-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/jobs

  Push-recommendation-QA:
    name: Push recommendation-enricher to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - RecommendationBuild
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-recommendation-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/jobs

  Cloud-Discovery-Build:
    name: Cloud-Discovery-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.pacman-cloud-discovery == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/pacman-cloud-discovery/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create'
        uses: actions/upload-artifact@v4
        with:
          name: jobs-cloud-artifact
          path: ./dist/jobs

  Push-Cloud-Discovery-Dev:
    name: Push Cloud-discovery to s3 dev
    runs-on: ubuntu-latest
    environment: 'SaaSDEV'
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    needs:
      - Cloud-Discovery-Build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-cloud-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/jobs

  Push-Cloud-Discovery-QA:
    name: Push Cloud-discovery to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - Cloud-Discovery-Build
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-cloud-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/jobs

  RuleEngineBuild:
    name: Rule-engine-2.0-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.pacman-rule-engine == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building awsrules jar
        run: |
          cd jobs/pacman-awsrules/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/pacman-rule-engine-2.0/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create'
        uses: actions/upload-artifact@v4
        with:
          name: jobs-RE2.0-artifact
          path: ./dist/jobs

  Push-RuleEngineBuild-Dev:
    name: Push Rule-engine-2.0 to s3 dev
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    environment: 'SaaSDEV'
    needs:
      - RuleEngineBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-RE2.0-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/jobs

  Push-RuleEngineBuild-QA:
    name: Push Rule-engine-2.0 to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - RuleEngineBuild
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-RE2.0-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/jobs


  SchedulerBuild:
    name: Scheduler-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true'  || needs.filter.outputs.commons == 'true'  || needs.filter.outputs.job-scheduler == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Building Jobs jar
        run: |
          cd jobs/job-scheduler/
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - name: Upload Jobs artifact
        if: github.event_name == 'push' || github.event_name == 'create'
        uses: actions/upload-artifact@v4
        with:
          name: jobs-scheduler-artifact
          path: ./dist/jobs

  Push-SchedulerBuild-Dev:
    name: Push SchedulerBuild to s3 dev
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master'))
    environment: 'SaaSDEV'
    needs:
      - SchedulerBuild
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for Dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_DEV }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-scheduler-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_DEV }}/vlatest/dev/api

  Push-SchedulerBuild-QA:
    name: Push SchedulerBuild to s3 QA
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release-v') 
    environment: 'SaaSQA'
    needs:
      - SchedulerBuild
      - extract_version
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure AWS credentials for QA account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_QA }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Download Jobs artifact
        uses: actions/download-artifact@v4
        with:
          name: jobs-scheduler-artifact
          path: ./dist/jobs
      - name: copy Jobs jars to S3 
        run: |
          aws s3 cp --recursive ./dist/jobs/ s3://${{ secrets.AWS_BUCKET_QA }}/${{ needs.extract_version.outputs.version }}/qa/api

  NotificationBuild:
    name: Notification-Build
    runs-on: ubuntu-latest
    needs:
      - filter
      - check_branch
    if: needs.filter.outputs.pom == 'true' || needs.filter.outputs.pacman-cloud-notifications == 'true' || needs.filter.outputs.pom == 'true' || needs.check_branch.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: running update
        run: sudo apt update
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          checkout-fetch-depth: 0
          java-version: 8
          java-distribution: temurin
          maven-version: 3.6.3
      - name: Building commons jar
        run: |
          cd commons
          mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      - nam"
coderbruis;JavaSourceCodeLearning;coderbruis/JavaSourceCodeLearning;https://github.com/coderbruis/JavaSourceCodeLearning;https://api.github.com/repos/coderbruis/JavaSourceCodeLearning;master;02/06/2020 15:34;22/04/2024 09:14;FALSE;
LSPosed;LSPatch;LSPosed/LSPatch;https://github.com/LSPosed/LSPatch;https://api.github.com/repos/LSPosed/LSPatch;master;01/03/2021 20:38;22/04/2024 12:08;TRUE;"name: Crowdin Action

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
    - manager/src/main/res/values/strings.xml

jobs:
  synchronize-with-crowdin:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: crowdin action
      uses: crowdin/github-action@master
      with:
        upload_translations: false
        download_translations: false
        upload_sources: true
        config: 'crowdin.yml'
        crowdin_branch_name: master
      env:
        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
        CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}

---
name: Android CI

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    env:
      CCACHE_COMPILERCHECK: '%compiler% -dumpmachine; %compiler% -dumpversion'
      CCACHE_NOHASHDIR: 'true'
      CCACHE_HARDLINK: 'true'
      CCACHE_BASEDIR: '${{ github.workspace }}'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        fetch-depth: 0

    - name: Write key
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
      run: |
        if [ ! -z ""${{ secrets.KEY_STORE }}"" ]; then
          echo androidStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
          echo androidKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
          echo androidKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
          echo androidStoreFile='key.jks' >> gradle.properties
          echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
        fi

    - name: Checkout libxposed/api
      uses: actions/checkout@v3
      with:
        repository: libxposed/api
        path: libxposed/api

    - name: Checkout libxposed/service
      uses: actions/checkout@v3
      with:
        repository: libxposed/service
        path: libxposed/service

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true

    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 2G
        key: ${{ runner.os }}
        restore-keys: ${{ runner.os }}
        save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

    - name: Build dependencies
      working-directory: libxposed
      run: |
        cd api
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        ./gradlew :api:publishApiPublicationToMavenLocal
        cd ..
        cd service
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        ./gradlew :interface:publishInterfacePublicationToMavenLocal

    - name: Build with Gradle
      run: |
        echo 'org.gradle.parallel=true' >> gradle.properties
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        echo 'android.native.buildOutput=verbose' >> gradle.properties
        ./gradlew buildAll

    - name: Upload Debug artifact
      uses: actions/upload-artifact@v3
      with:
        name: lspatch-debug
        path: out/debug/*

    - name: Upload Release artifact
      uses: actions/upload-artifact@v3
      with:
        name: lspatch-release
        path: out/release/*

    - name: Upload mappings
      uses: actions/upload-artifact@v3
      with:
        name: mappings
        path: |
          patch-loader/build/outputs/mapping
          manager/build/outputs/mapping

    - name: Upload symbols
      uses: actions/upload-artifact@v3
      with:
        name: symbols
        path: |
          patch-loader/build/symbols

    - name: Post to channel
      if: ${{ github.event_name != 'pull_request' && success() && github.ref == 'refs/heads/master' }}
      env:
        CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
        DISCUSSION_ID: ${{ secrets.DISCUSSION_ID }}
        TOPIC_ID: ${{ secrets.TOPIC_ID }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        COMMIT_URL: ${{ github.event.head_commit.url }}
      run: |
        if [ ! -z ""${{ secrets.BOT_TOKEN }}"" ]; then
          export jarRelease=$(find out/release -name ""*.jar"")
          export managerRelease=$(find out/release -name ""*.apk"")
          export jarDebug=$(find out/debug -name ""*.jar"")
          export managerDebug=$(find out/debug -name ""*.apk"")
          ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ[""COMMIT_MESSAGE""]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ[""COMMIT_URL""])))'`
          curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FjarRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FmanagerRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FjarDebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FmanagerDebug%22%2C%22caption%22:${ESCAPED}%7D%5D"" -F jarRelease=""@$jarRelease"" -F managerRelease=""@$managerRelease"" -F jarDebug=""@$jarDebug"" -F managerDebug=""@$managerDebug""
          # curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${DISCUSSION_ID}&message_thread_id=${TOPIC_ID}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FjarRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FmanagerRelease%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FjarDebug%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FmanagerDebug%22%2C%22caption%22:${ESCAPED}%7D%5D"" -F jarRelease=""@$jarRelease"" -F managerRelease=""@$managerRelease"" -F jarDebug=""@$jarDebug"" -F managerDebug=""@$managerDebug""
        fi

---
"
cinit;QAuxiliary;cinit/QAuxiliary;https://github.com/cinit/QAuxiliary;https://api.github.com/repos/cinit/QAuxiliary;main;29/01/2022 07:12;21/04/2024 14:34;TRUE;"name: Check Issues

on:
  issues:
    types: [opened]
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - if: contains(github.event.issue.body, '最新版' ) 
        id: close-latest-version
        name: Close Issue(template)
        uses: peter-evans/close-issue@v3
        with:
          comment: 我不知道什么是最新版捏，具体版本号pls

---
name: 'Commit Message Check'
on: 
  pull_request:
jobs:
  check-commit-message:
    name: Check Commit Message
    runs-on: ubuntu-latest 
    steps:
        - name: Check Commit Message [skip CI]
          env: 
            COMMIT_FILTER: ""[skip ci]""
          if: ""contains(github.event.head_commit.message, '[skip ci]')""
          run: | 
            echo ""no 'skip ci' in commit message""
            exit 2

        - uses: actions-ecosystem/action-regex-match@v2
          id: regex-match
          with:
            text: ${{ github.event.head_commit.message }}
            regex: '[^\x00-\x7F]+'

        - name: Check Commit Message [Non-ASCII]
          if: ${{ steps.regex-match.outputs.match != '' }}
          run: | 
            echo ""No Non-ASCII msg in commit message""
            exit 2


---
name: Clear cache

on:
  workflow_dispatch:

permissions:
  actions: write

jobs:
  clear-ccache:
    runs-on: ubuntu-latest
    steps:
      - name: Clear cache
        uses: actions/github-script@v7
        with:
          script: |
            console.log(""About to clear"")
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              console.log(cache)
              github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
            console.log(""Clear completed"")

---
name: Pull Request Check

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '!.github/workflows/**'

jobs:
  build:
    name: Build CI (Pull Request)
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: ""%compiler% -dumpmachine; %compiler% -dumpversion""
      CCACHE_NOHASHDIR: ""true""
      CCACHE_HARDLINK: ""true""
      CCACHE_BASEDIR: ""${{ github.workspace }}""

    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle
      - name: Install ccache
        run: |
          sudo apt install -y ccache
          ccache -o max_size=1G
          ccache -o hash_dir=false
          ccache -o hard_link=true
          ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'
          ccache -zp
      - name: Cache Native Build
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
            app/build/.lto-cache
          key: native-cache-${{ github.sha }}
          restore-keys: native-cache-

      - name: Setup cmake
        run: |
          echo ""ANDROID_HOME=${ANDROID_HOME}""
          echo ""ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}""
          mkdir -p ""$ANDROID_HOME/licenses/""
          echo > ""$ANDROID_HOME/licenses/android-sdk-license""
          echo -n 24333f8a63b6825ea9c5514f83c2829b004d1fee > ""$ANDROID_HOME/licenses/android-sdk-license""
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install ""cmake;3.22.1"" --sdk_root=${ANDROID_SDK_ROOT}
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.3.1

      - name: Build with Gradle
        run: |
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties
          ./gradlew :app:packageDebug
          ccache -s

---
name: main

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'

jobs:
  build:
    name: Build CI (Push)
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: ""%compiler% -dumpmachine; %compiler% -dumpversion""
      CCACHE_NOHASHDIR: ""true""
      CCACHE_HARDLINK: ""true""
      CCACHE_BASEDIR: ""${{ github.workspace }}""
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }} && success() && github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Setup cmake
        run: |
          echo ""ANDROID_HOME=${ANDROID_HOME}""
          echo ""ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}""
          mkdir -p ""$ANDROID_HOME/licenses/""
          echo > ""$ANDROID_HOME/licenses/android-sdk-license""
          echo -n 24333f8a63b6825ea9c5514f83c2829b004d1fee > ""$ANDROID_HOME/licenses/android-sdk-license""
          ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --install ""cmake;3.22.1"" --sdk_root=${ANDROID_SDK_ROOT}
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
      - name: Install ccache
        run: |
          sudo apt install -y ccache
          ccache -o max_size=1G
          ccache -o hash_dir=false
          ccache -o hard_link=true
          ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'
          ccache -zp
      - name: Cache Native Build
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.cache/ccache
            ~/.ccache
            app/build/.lto-cache
          key: native-cache-${{ github.sha }}
          restore-keys: native-cache-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3.3.1

      - name: Build with Gradle
        run: |
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties
          echo 'buildCache { local { removeUnusedEntriesAfterDays = 1 } }' >> settings.gradle.kts
          echo ${{ secrets.SIGN_KEYSTORE_BASE64 }} | base64 -d > keystore.jks
          ./gradlew :app:synthesizeDistReleaseApksCI :app:extractReleaseNativeDebugMetadata
          ccache -s
          echo ""APK_FILE_ARM32=$(find app/build/outputs/ci -name '*arm32.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_ARM64=$(find app/build/outputs/ci -name '*arm64.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_ARMALL=$(find app/build/outputs/ci -name '*armAll.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_UNIVERSAL=$(find app/build/outputs/ci -name '*universal.apk')"" >> $GITHUB_ENV
          echo ""SYMBOL_FILE=app/build/intermediates/native_debug_metadata/release/extractReleaseNativeDebugMetadata/out"" >> $GITHUB_ENV
        env:
          KEYSTORE_PATH: ""../keystore.jks""
          KEYSTORE_PASSWORD: ${{ secrets.SIGN_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.SIGN_ALIAS }}
          KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}

      - name: Show Artifacts SHA256
        run: |
          echo ""### Build Success :rocket:"" >> $GITHUB_STEP_SUMMARY
          echo ""|ABI|SHA256|"" >> $GITHUB_STEP_SUMMARY
          echo ""|:--------:|:----------|"" >> $GITHUB_STEP_SUMMARY
          arm32=($(sha256sum ${{ env.APK_FILE_ARM32 }}))
          echo ""|arm32|$arm32"" >> $GITHUB_STEP_SUMMARY
          arm64=($(sha256sum ${{ env.APK_FILE_ARM64 }}))
          echo ""|arm64|$arm64"" >> $GITHUB_STEP_SUMMARY
          armAll=($(sha256sum ${{ env.APK_FILE_ARMALL }}))
          echo ""|armAll|$armAll"" >> $GITHUB_STEP_SUMMARY
          universal=($(sha256sum ${{ env.APK_FILE_UNIVERSAL }}))
          echo ""|universal|$universal"" >> $GITHUB_STEP_SUMMARY

      - name: Upload Artifacts(arm32)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK_FILE_ARM32 }}
          name: QAuxiliary-release-${{ github.event.head_commit.id }}-arm32
      - name: Upload Artifacts(arm64)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK_FILE_ARM64 }}
          name: QAuxiliary-release-${{ github.event.head_commit.id }}-arm64
      - name: Upload Artifacts(armAll)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK_FILE_ARMALL }}
          name: QAuxiliary-release-${{ github.event.head_commit.id }}-armAll
      - name: Upload Artifacts(universal)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.APK_FILE_UNIVERSAL }}
          name: QAuxiliary-release-${{ github.event.head_commit.id }}-universal
      - name: Upload Artifacts(symbol)
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.SYMBOL_FILE }}
          name: QAuxiliary-release-${{ github.event.head_commit.id }}-symbol

  upload-telegram:
    name: Upload Release
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
      - telegram-bot-api
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Release
        env:
          COMMIT_MESSAGE: |+
            New push to GitHub\!
            ```
            ${{ github.event.head_commit.message }}
            ```by `${{ github.event.head_commit.author.name }}`
            See commit detail [here](${{ github.event.head_commit.url }})
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          ESCAPED=`python3 -c 'import json,os,urllib.parse; msg = json.dumps(os.environ[""COMMIT_MESSAGE""]); print(urllib.parse.quote(msg if len(msg) <= 1024 else json.dumps(os.environ[""COMMIT_URL""])))'`
          export arm32=$(find artifacts -name ""*arm32.apk"")
          export arm64=$(find artifacts -name ""*arm64.apk"")
          export armAll=$(find artifacts -name ""*armAll.apk"")
          export universal=$(find artifacts -name ""*universal.apk"")
          export SYMBOL_ZIP_NAME=$(echo $universal | sed 's/universal.apk/symbol.zip/')
          find artifacts -name ""*.so.dbg"" -print | zip ""$SYMBOL_ZIP_NAME"" -@
          chmod +x telegram-bot-api-binary
          ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
          curl -v ""http://127.0.0.1:8081/bot${{ secrets.TELEGRAM_TOKEN  }}/sendMediaGroup?chat_id=-1001732413298&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Farm64%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Farm32%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FarmAll%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Funiversal%22%7D%2C%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2Fsymbol%22%2C%22parse_mode%22%3A%22MarkdownV2%22%2C%22caption%22:${ESCAPED}%7D%5D"" \
           -F arm32=""@$arm32"" \
           -F arm64=""@$arm64"" \
           -F armAll=""@$armAll"" \
           -F universal=""@$universal"" \
           -F symbol=""@$SYMBOL_ZIP_NAME""
          pkill telegram-bot

  upload-taichi:
    name: Upload TaiChi
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Release
        run: |
          curl ""https://gist.githubusercontent.com/qwq233/2a903f28a38d48d57731a1e4d6358948/raw/80e515d659a6f3c4737a1674f50fae5087e1f83c/taichi.py"" -o taichi.py
          sudo apt install -y python3-pip
          pip3 install requests
          echo ${{ secrets.TC_UPLOAD_USER_TOKEN }} | base64 -d > taichi.json
          export release=$(find $OUTPUT -name ""*armAll.apk"")
          python3 taichi.py $release

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v4.0.2
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary

---
"
KunMinX;UnPeek-LiveData;KunMinX/UnPeek-LiveData;https://github.com/KunMinX/UnPeek-LiveData;https://api.github.com/repos/KunMinX/UnPeek-LiveData;master;04/06/2020 11:31;22/04/2024 05:12;FALSE;
apache;flink-kubernetes-operator;apache/flink-kubernetes-operator;https://github.com/apache/flink-kubernetes-operator;https://api.github.com/repos/apache/flink-kubernetes-operator;main;10/02/2022 06:00;16/04/2024 12:55;TRUE;"################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################


# We need to specify repo related information here since Apache INFRA doesn't differentiate
# between several workflows with the same names while preparing a report for GHA usage
# https://infra-reports.apache.org/#ghactions
name: Flink Kubernetes Operator CI
on:
  push:
  pull_request:
jobs:
  test_ci:
    runs-on: ubuntu-latest
    name: test_ci
    strategy:
      matrix:
        java-version: [ 11, 17, 21 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build with Maven
        run: |
          set -o pipefail; mvn clean install javadoc:javadoc -Pgenerate-docs | tee ./mvn.log; set +o pipefail
          if [[ $(cat ./mvn.log | grep -E -v '(flink-runtime-.*.jar, flink-kubernetes-operator-.*.jar)|(flink-kubernetes-operator-.*.jar, flink-runtime-.*.jar) define 3 overlapping classes' | grep -E -v '(flink-runtime-.*.jar, flink-autoscaler-.*.jar)|(flink-autoscaler-.*.jar, flink-runtime-.*.jar) define 1 overlapping classes' | grep -c ""overlapping classes"" -) -gt 0 ]];then
            echo ""Found overlapping classes: ""
            cat ./mvn.log | grep ""overlapping classes""
            exit 1
          fi
          if [[ $(git diff HEAD | wc -l) -gt 0 ]];then
            echo ""Please generate the java doc via 'mvn clean install -DskipTests -Pgenerate-docs' again""
            exit 1
          fi
      - name: Validate helm chart linting
        run: |
          helm lint helm/flink-kubernetes-operator
      - name: Tests in flink-kubernetes-operator
        run: |
          cd flink-kubernetes-operator
          mvn verify -Dit.skip=false
          cd ..
      - name: Tests in flink-kubernetes-webhook
        run: |
          cd flink-kubernetes-webhook
          mvn verify -Dit.skip=false
          cd ..
      - name: Tests in flink-autoscaler-plugin-jdbc
        run: |
          cd flink-autoscaler-plugin-jdbc
          mvn verify -Dit.skip=false
          cd ..
  e2e_ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [""v1_18"",""v1_17"",""v1_16"",""v1_15""]
        namespace: [""default"",""flink""]
        mode: [""native"", ""standalone""]
        java-version: [ 11, 17, 21 ]
        test:
          - test_application_kubernetes_ha.sh
          - test_application_operations.sh
          - test_dynamic_config.sh
          - test_sessionjob_kubernetes_ha.sh
          - test_sessionjob_operations.sh
          - test_multi_sessionjob.sh
          - test_autoscaler.sh
          - test_flink_operator_ha.sh
        include:
          - namespace: flink
            extraArgs: '--create-namespace --set ""watchNamespaces={default,flink}""'
          - version: v1_18
            image: flink:1.18
          - version: v1_17
            image: flink:1.17
          - version: v1_16
            image: flink:1.16
          - version: v1_15
            image: flink:1.15
        exclude:
          - namespace: default
            test: test_multi_sessionjob.sh
          - namespace: default
            test: test_autoscaler.sh
          - namespace: default
            test: test_dynamic_config.sh
          - mode: standalone
            test: test_autoscaler.sh
          - mode: standalone
            test: test_dynamic_config.sh
          - version: v1_15
            test: test_autoscaler.sh
          - version: v1_15
            test: test_dynamic_config.sh
          - version: v1_15
            test: test_flink_operator_ha.sh
          - version: v1_16
            test: test_autoscaler.sh
          - version: v1_16
            test: test_dynamic_config.sh
          - version: v1_16
            test: test_flink_operator_ha.sh
          - version: v1_17
            test: test_dynamic_config.sh
          - version: v1_17
            test: test_flink_operator_ha.sh
          - version: v1_15
            java-version: 17
          - version: v1_16
            java-version: 17
          - version: v1_17
            java-version: 17
          - version: v1_15
            java-version: 21
          - version: v1_16
            java-version: 21
          - version: v1_17
            java-version: 21
    name: e2e_ci
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Start minikube
        run: |
          source e2e-tests/utils.sh
          start_minikube
      - name: Install cert-manager
        run: |
          kubectl get pods -A
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
          kubectl -n cert-manager wait --all=true --for=condition=Available --timeout=300s deploy
      - name: Build image
        run: |
          export SHELL=/bin/bash
          export DOCKER_BUILDKIT=1
          eval $(minikube -p minikube docker-env)
          docker build --progress=plain --no-cache -f ./Dockerfile -t flink-kubernetes-operator:ci-latest --progress plain .
          docker images
      - name: Start the operator
        run: |
          if [[ ""${{ matrix.test }}"" == ""test_flink_operator_ha.sh"" ]]; then
            sed -i ""s/# kubernetes.operator.leader-election.enabled: false/kubernetes.operator.leader-election.enabled: true/"" helm/flink-kubernetes-operator/conf/flink-conf.yaml
            sed -i ""s/# kubernetes.operator.leader-election.lease-name: flink-operator-lease/kubernetes.operator.leader-election.lease-name: flink-operator-lease/"" helm/flink-kubernetes-operator/conf/flink-conf.yaml
            sed -i ""s/replicas: 1/replicas: 2/"" helm/flink-kubernetes-operator/values.yaml
          fi 
          helm --debug install flink-kubernetes-operator -n ${{ matrix.namespace }} helm/flink-kubernetes-operator --set image.repository=flink-kubernetes-operator --set image.tag=ci-latest ${{ matrix.extraArgs }}
          kubectl wait --for=condition=Available --timeout=120s -n ${{ matrix.namespace }} deploy/flink-kubernetes-operator
          kubectl get pods -n ${{ matrix.namespace }}
      - name: Run Flink e2e tests
        run: |
          sed -i ""s/image: flink:.*/image: ${{ matrix.image }}/"" e2e-tests/data/*.yaml
          sed -i ""s/flinkVersion: .*/flinkVersion: ${{ matrix.version }}/"" e2e-tests/data/*.yaml
          sed -i ""s/mode: .*/mode: ${{ matrix.mode }}/"" e2e-tests/data/*.yaml
          git diff HEAD
          echo ""Running e2e-tests/$test""
          bash e2e-tests/${{ matrix.test }} || exit 1
          git reset --hard
      - name: Stop the operator
        run: |
          helm uninstall -n ${{ matrix.namespace }} flink-kubernetes-operator
      - name: Stop minikube
        run: |
          source e2e-tests/utils.sh
          stop_minikube

---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: ""Build Docker Image""
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release-*'
    tags:
      - 'release-*-rc*'
  pull_request:
    branches:
      - main
      - 'release-*'
jobs:
  build_image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha,prefix=,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker images (supported platforms)
        uses: docker/bake-action@v1.7.0
        with:
          files: |
            .github/workflows/docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: bake-platform
          push: ${{ github.event_name != 'pull_request' }}

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Build documentation""
on:
  schedule:
    # At the end of every day
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  build-documentation:
    if: github.repository == 'apache/flink-kubernetes-operator'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        branch:
          - main
          - release-1.7
          - release-1.8
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ matrix.branch }}
      - name: Set branch environment variable
        run: |
          git branch --show-current
          currentBranch=$(git branch --show-current)
          echo ""flink_branch=${currentBranch}""
          echo ""flink_branch=${currentBranch}"" >> ${GITHUB_ENV}
          if [ ""${currentBranch}"" = ""main"" ]; then
            echo ""flink_alias=release-1.9"" >> ${GITHUB_ENV}
          elif [ ""${currentBranch}"" = ""release-1.8"" ]; then
            echo ""flink_alias=stable"" >> ${GITHUB_ENV}
          else
            echo ""flink_alias=${currentBranch}"" >> ${GITHUB_ENV}
          fi
      - name: Build documentation
        run: |
          docker run  --rm --volume ""$PWD:/root/flink-kubernetes-operator"" chesnay/flink-ci:java_8_11 bash -c ""cd /root/flink-kubernetes-operator && ./.github/workflows/docs.sh""
      - name: Upload documentation
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: --archive --compress
          path: docs/target/
          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-kubernetes-operator-docs-${{ env.flink_branch }}/
          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}
          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}
          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}
          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}
      - name: Upload documentation alias
        if: env.flink_alias != ''
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: --archive --compress
          path: docs/target/
          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-kubernetes-operator-docs-${{ env.flink_alias }}/
          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}
          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}
          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}
          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}

---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: Publish Snapshot

on:
  schedule:
    # At the end of every day
    - cron: '0 0 * * *'
  workflow_dispatch:
jobs:
  publish-snapshot:
    if: github.repository == 'apache/flink-kubernetes-operator'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: snapshot-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            snapshot-maven-
      - name: Publish snapshot
        env:
          ASF_USERNAME: ${{ secrets.NEXUS_USER }}
          ASF_PASSWORD: ${{ secrets.NEXUS_PW }}
        run: |
          tmp_settings=""tmp-settings.xml""
          echo ""<settings><servers><server>"" > $tmp_settings
          echo ""<id>apache.snapshots.https</id><username>$ASF_USERNAME</username>"" >> $tmp_settings
          echo ""<password>$ASF_PASSWORD</password>"" >> $tmp_settings
          echo ""</server></servers></settings>"" >> $tmp_settings
          
          mvn --settings $tmp_settings clean deploy -Dgpg.skip -Drat.skip -DskipTests -Papache-release
          
          rm $tmp_settings

---
"
apache;flink-statefun;apache/flink-statefun;https://github.com/apache/flink-statefun;https://api.github.com/repos/apache/flink-statefun;master;03/12/2019 14:24;20/04/2024 16:11;TRUE;"name: Doc Check

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Build and Check Documentation
        run: ./tools/ci/docs.sh
---
name: Java 8 Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build
        run: mvn clean install -Prun-e2e-tests

---
"
Project-Books;book-project;Project-Books/book-project;https://github.com/Project-Books/book-project;https://api.github.com/repos/Project-Books/book-project;main;06/05/2020 12:32;16/04/2024 19:02;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: backend-build

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**/*.java'
      - 'backend/**/pom.xml'
      - 'backend/**/*.sql'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**/*.java'
      - 'backend/**/pom.xml'
      - 'backend/**/*.sql'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -f backend/pom.xml -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=Project-Books_book-project

---
name: Check broken Markdown links

# runs every monday at 9 am
on:
  schedule:
    - cron: ""0 9 * * 1""
   
jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: gaurav-nelson/github-action-markdown-link-check@v1

---
name: Frontend Lint
on:
  push:
    paths:
      - 'frontend/**/*.jsx?'
      - 'frontend/**/*.tsx?'
      - 'frontend/**/*.html'
      - 'frontend/**/*.json'
      - 'frontend/**/*.css'
  pull_request:
    paths:
      - 'frontend/**/*.jsx?'
      - 'frontend/**/*.tsx?'
      - 'frontend/**/*.html'
      - 'frontend/**/*.json'
      - 'frontend/**/*.css'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - name: Checkout Source Files
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
          cache-dependency-path: frontend

      - name: Lint Source Files
        working-directory: frontend
        run: |
          rm -rf node_modules
          yarn install --frozen-lockfile
          yarn lint --max-warnings 0 .
          yarn tsc
---
on:
  push:
    branches:
      - main
    paths:
      - '**/*.sh'
  pull_request:
    paths:
     - '**/*.sh'
     
name: 'shellcheck'

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      

---
"
TheEpicBlock;PolyMc;TheEpicBlock/PolyMc;https://github.com/TheEpicBlock/PolyMc;https://api.github.com/repos/TheEpicBlock/PolyMc;master;25/05/2020 09:20;19/04/2024 22:10;TRUE;"name: build

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'README.md'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/loom-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Ensure gradlew is executable
        run: chmod +x ./gradlew

      - name: Validate the gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build
        run: ./gradlew build
---
name: Deploy docs

on:
  push:
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
    branches:
      - master
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mkdocs-material
      - run: pip install ""mkpatcher==1.0.2""
      - run: pip install ""mkdocs-redirects>=1.0""
      - run: pip install mkdocs-git-revision-date-localized-plugin
      - run: mkdocs gh-deploy --force
---
name: release

on:
  release:
    types:
      - published

jobs:
  github-release:
    runs-on: ubuntu-latest
    steps:
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/loom-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Ensure gradlew is executable
        run: chmod +x gradlew


      - name: Run datagen
        run: ./gradlew runDatagen

      - name: Build mod
        run: ./gradlew build

      - name: Upload GitHub release
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'build/libs/*.jar;!build/libs/*-sources.jar;!build/libs/*-dev.jar'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to Maven
        run: ./gradlew publish -PtebUsername=githubci -PtebPassword=${{ secrets.MAVEN_TOKEN }}
---
"
rom1v;sndcpy;rom1v/sndcpy;https://github.com/rom1v/sndcpy;https://api.github.com/repos/rom1v/sndcpy;master;09/06/2020 21:36;22/04/2024 07:16;FALSE;
pop4959;Chunky;pop4959/Chunky;https://github.com/pop4959/Chunky;https://api.github.com/repos/pop4959/Chunky;master;14/07/2020 01:03;21/04/2024 21:19;TRUE;"name: Build Chunky
on: [ push, pull_request ]
jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v2
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'
      - name: Build
        run: ./gradlew build
      - name: Upload Bukkit
        uses: actions/upload-artifact@v4
        with:
          name: Bukkit
          path: ""bukkit/build/libs/Chunky-*.jar""
      - name: Upload Fabric
        uses: actions/upload-artifact@v4
        with:
          name: Fabric
          path: ""fabric/build/libs/Chunky-*.jar""
      - name: Upload Forge
        uses: actions/upload-artifact@v4
        with:
          name: Forge
          path: ""forge/build/libs/Chunky-*.jar""
      - name: Upload NeoForge
        uses: actions/upload-artifact@v4
        with:
          name: NeoForge
          path: ""neoforge/build/libs/Chunky-*.jar""
      - name: Upload Sponge
        uses: actions/upload-artifact@v4
        with:
          name: Sponge
          path: ""sponge/build/libs/Chunky-*.jar""

---
name: Deploy Javadoc to Pages

on:
  push:
    branches: [""javadoc""]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: ""pages""
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: './docs/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

---
"
fizzgate;fizz-gateway-node;fizzgate/fizz-gateway-node;https://github.com/fizzgate/fizz-gateway-node;https://api.github.com/repos/fizzgate/fizz-gateway-node;master;31/08/2020 11:03;22/04/2024 07:57;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '15 13 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
# 

name: Java CI with Maven

on:
  push:
    branches: [ master,develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master,develop ]
    paths-ignore: 
      - README.md
      - .gitignore

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Cache Maven Repos
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build Modules
      run: mvn -B clean package install --file pom.xml
    - name: Build Bootstrap
      run: mvn -B clean package install --file fizz-bootstrap/pom.xml
    - uses: bhowell2/github-substring-action@v1.0.0
      if: startsWith(github.ref, 'refs/tags/')
      id: releaseVersion
      with:
        fail_if_not_found: false
        default_return_value: ${{ github.ref }}
        value: ${{ github.ref }}
        index_of_str: ""refs/tags/v""
    - name: Packing
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir fizz-gateway-community
        cp ./fizz-bootstrap/target/fizz-bootstrap-*.jar ./fizz-gateway-community/fizz-gateway-community.jar
        cp ./fizz-bootstrap/target/classes/application.yml ./fizz-gateway-community/application.yml
        cp ./fizz-bootstrap/target/classes/bootstrap.yml ./fizz-gateway-community/bootstrap.yml
        cp ./fizz-bootstrap/target/classes/log4j2-spring.xml ./fizz-gateway-community/log4j2-spring.xml
        cp ./fizz-bootstrap/sh/boot.sh ./fizz-gateway-community/boot.sh
        cp ./fizz-bootstrap/sh/boot.cmd ./fizz-gateway-community/boot.cmd
        zip -r ./fizz-gateway-community-${{ steps.releaseVersion.outputs.substring }}.zip ./fizz-gateway-community/*
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: true
        files: ./fizz-gateway-community-${{ steps.releaseVersion.outputs.substring }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up QEMU
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push to DockerHub
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        context: .
        push: true
        tags: fizzgate/fizz-gateway-community:${{ steps.releaseVersion.outputs.substring }}
    - name: Publish to Apache Maven Central
      if: startsWith(github.ref, 'refs/tags/')
      uses: samuelmeuli/action-maven-publish@v1
      with:
        maven_profiles: release
        server_id: sonatype-release
        gpg_private_key: ${{ secrets.GPG_SECRET }}
        gpg_passphrase: ${{ secrets.GPG_PASSPHASE }}
        nexus_username: ${{ secrets.OSSRH_USER }}
        nexus_password: ${{ secrets.OSSRH_PASSWORD }}

---
"
parzulpan;livebox;parzulpan/livebox;https://github.com/parzulpan/livebox;https://api.github.com/repos/parzulpan/livebox;master;15/06/2020 14:05;11/04/2024 09:53;FALSE;
moneytoo;Player;moneytoo/Player;https://github.com/moneytoo/Player;https://api.github.com/repos/moneytoo/Player;master;09/11/2020 21:05;22/04/2024 09:51;TRUE;"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

---
"
fengdongdongwsn;PdfTool;fengdongdongwsn/PdfTool;https://github.com/fengdongdongwsn/PdfTool;https://api.github.com/repos/fengdongdongwsn/PdfTool;master;15/06/2020 16:04;20/04/2024 09:04;FALSE;
rbmonster;learning-note;rbmonster/learning-note;https://github.com/rbmonster/learning-note;https://api.github.com/repos/rbmonster/learning-note;master;15/06/2020 18:47;20/04/2024 19:12;FALSE;
CN-GuoZiyang;My-RPC-Framework;CN-GuoZiyang/My-RPC-Framework;https://github.com/CN-GuoZiyang/My-RPC-Framework;https://api.github.com/repos/CN-GuoZiyang/My-RPC-Framework;master;16/06/2020 09:25;22/04/2024 10:14;FALSE;
awslabs;aws-saas-boost;awslabs/aws-saas-boost;https://github.com/awslabs/aws-saas-boost;https://api.github.com/repos/awslabs/aws-saas-boost;main;13/04/2021 00:38;19/04/2024 11:25;TRUE;"name: PR Build Validation
on:
  pull_request
jobs:
  Build-Java:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR
        uses: actions/checkout@v2

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # We use Corretto Java 11 for Lambda: https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html
      # Currently amazon-corretto Java is not supported for GitHub actions on Ubuntu-latest. By default we're using Adopt JDK11
      #   https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
      # We may want to either switch to using an AL2 container (to give us corretto) or contribute a new JDK to the GitHub runners
      #   There is an open issue (as of 2021/06/30) requesting Corretto support: https://github.com/actions/setup-java/issues/68
      # - name: Set up JDK 11
      #   uses: actions/setup-java@v2
      #   with:
      #     java-version: '11'
      #     distribution: 'adopt'

      - name: Maven Compile, Test, Install
        run: mvn install -Dcheckstyle.skip -Dspotbugs.skip

      - name: Spotbugs Check
        run: mvn spotbugs:check

      - name: Code Style Check
        run: mvn checkstyle:check

  Build-WebClient:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # CI=false is required because GitHub hosted runners set CI=true, which causes Warnings to be treated as Errors when doing yarn build
      # this is a workaround to allow the build to succeed until we can get around to fixing the warnings generated
      # https://docs.github.com/en/actions/reference/environment-variables#default-environment-variables
      # TODO remove CI=false
      - name: Build WebClient
        run: |
          cd ${{ github.workspace }}/client/web
          yarn
          CI=false yarn build
---
"
fupinglee;ShiroScan;fupinglee/ShiroScan;https://github.com/fupinglee/ShiroScan;https://api.github.com/repos/fupinglee/ShiroScan;master;17/06/2020 06:34;19/04/2024 12:24;FALSE;
981011512;--;981011512/--;https://github.com/981011512/--;https://api.github.com/repos/981011512/--;master;19/06/2020 00:47;22/04/2024 10:48;FALSE;
pingfangushi;screw;pingfangushi/screw;https://github.com/pingfangushi/screw;https://api.github.com/repos/pingfangushi/screw;master;21/06/2020 13:37;22/04/2024 03:37;FALSE;
feihong-cs;Java-Rce-Echo;feihong-cs/Java-Rce-Echo;https://github.com/feihong-cs/Java-Rce-Echo;https://api.github.com/repos/feihong-cs/Java-Rce-Echo;master;21/06/2020 17:23;18/04/2024 05:14;FALSE;
apache;skywalking-java;apache/skywalking-java;https://github.com/apache/skywalking-java;https://api.github.com/repos/apache/skywalking-java;main;26/08/2021 15:08;17/04/2024 11:02;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  pull_request:
  schedule:
    - cron: '0 18 * * *'  # TimeZone: UTC 0

concurrency:
  group: ci-it-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  license:
    name: Check License
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Check License Header
        uses: apache/skywalking-eyes@9bd5feb86b5817aa6072b008f9866a2c3bbc8587
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Java ${{ matrix.java-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 60
    needs: [ license ]
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu, macos, windows ]
        java-version: [ 17 ]
        include:
          - os: ubuntu
            java-version: 21
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-ci-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-ci-
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}
      - name: Check Javaagent Plugin List
        run: tools/plugin/check-javaagent-plugin-list.sh
      - name: Install and Test
        run: ./mvnw -q --batch-mode clean verify install javadoc:javadoc

  ci:
    name: CI
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - run: echo 'Success'

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""CodeQL""

on:
  push:
    branches: [ 'main' ]
    paths:
      - '**/*.java'
  pull_request:
    branches: [ 'main' ]
    paths:
      - '**/*.java'
  schedule:
    - cron: '28 3 * * *'

concurrency:
  group: codeql-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    if: (github.event_name == 'schedule' && github.repository == 'apache/skywalking') || (github.event_name != 'schedule')
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      matrix:
        language: [ 'java' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 17

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}

    - run: ./mvnw -q -Dmaven.test.skip=true clean install || ./mvnw -q -Dmaven.test.skip=true clean install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Dead Link Checker

on:
  pull_request:

concurrency:
  group: dlc-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  CheckDeadLinks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - run: sudo npm install -g markdown-link-check@3.10.3
      - run: |
          for file in $(find . -name ""*.md""); do
            markdown-link-check -c .dlc.json -q ""$file""
          done

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: E2E

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  E2E:
    name: Basic function + ${{ matrix.case.name }} transport(Java8)
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - name: gRPC
            path: test/e2e/case/grpc/e2e.yaml
          - name: Kafka
            path: test/e2e/case/kafka/e2e.yaml
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
      - name: Build SkyWalking agent docker image
        run: make build docker.java8
      - name: Build consumer & provider images
        shell: bash
        run: |
          echo ""::group::Install SNAPSHOT apm-application-toolkit""
          ./mvnw -B -Dmaven.test.skip -N install
          ./mvnw -B -pl :apm-test-tools -Dmaven.test.skip -am install
          ./mvnw -B -f apm-application-toolkit -Dmaven.test.skip -am install
          echo ""::endgroup::""
          echo ""::group::""
          SW_VERSION=$(./mvnw -q -DforceStdout -N org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version)
          ./mvnw -B package -f ./test/e2e/base/pom.xml -Dsw.version=${SW_VERSION}
          echo ""::endgroup::""
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Run E2E Tests
        uses: apache/skywalking-infra-e2e@c1558dba921a36320f9fdc3d774b66592243589d
        with:
          e2e-file: ${{ matrix.case.path }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-jdk11-3-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build
        with:
          base_image_java: eclipse-temurin:11-jdk

  test:
    needs: [ build ]
    name: ${{ matrix.case }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - jdk11-forkjoinpool-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11
      - name: Run Plugin Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-jdk17-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build
        with:
          base_image_java: eclipse-temurin:17-jdk
          base_image_tomcat: tomcat:8.5-jdk17-openjdk

  test:
    needs: [ build ]
    name: ${{ matrix.case }}-jdk17
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - jdk17-with-gson-scenario
          - resttemplate-6.x-scenario
          - jersey-3.x-scenario
          - jetty-thread-pool-scenario
          - jetty-11.x-thread-pool-scenario
          - grizzly-2.3.x-4.x-scenario
          - grizzly-2.3.x-4.x-workthreadpool-scenario
          - jetty-11.x-scenario
          - jetty-10.x-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-jdk17-1-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build
        with:
          base_image_java: eclipse-temurin:17-jdk
          base_image_tomcat: tomcat:10.1-jdk17-temurin

  test:
    needs: [ build ]
    name: ${{ matrix.case }}-jdk17
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - spring-6.x-scenario
          - resteasy-6.x-scenario
          - gateway-4.x-scenario
          - httpexchange-scenario
          - activemq-artemis-2.x-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Run Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-jdk21-1-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build
        with:
          base_image_java: eclipse-temurin:21-jdk
          base_image_tomcat: tomcat:10.1-jdk21-temurin

  test:
    needs: [ build ]
    name: ${{ matrix.case }}-jdk21
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - spring-6.x-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Run Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-0-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build

  test:
    needs: [ build ]
    name: ${{ matrix.case }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - activemq-scenario
          - apm-toolkit-trace-scenario
          - apm-toolkit-tracer-scenario
          - armeria-0.96minus-scenario
          - armeria-0.96plus-scenario
          - avro-scenario
          - asynchttpclient-scenario
          - canal-scenario
          - cassandra-java-driver-3.x-scenario
          - customize-scenario
          - correlation-autotag-scenario
          - dubbo-2.5.x-scenario
          - dubbo-2.7.x-scenario
          - dubbo-3.x-scenario
          - ehcache-2.x-scenario
          - elasticsearch-5.x-scenario
          - elasticsearch-rest-high-level-6.x-scenario
          - elasticsearch-transport-6.x-scenario
          - elasticsearch-7.x-scenario
          - exception-checker-spring-scenario
          - exception-checker-tomcat-scenario
          - feign-scenario
          - finagle-17.10.x-scenario
          - finagle-6.44.x-scenario
          - gateway-2.1.x-scenario
          - gateway-2.0.x-scenario
          - grpc-scenario
          - gson-scenario
          - guava-cache-scenario
          - elasticjob-3.x-scenario
          - springmvc-reactive-scenario
          - springmvc-reactive-devtools-scenario
          - fastjson-scenario
          - jackson-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 8
      - name: Run Plugin Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-1-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build

  test:
    needs: [ build ]
    name: ${{ matrix.case }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - h2-scenario
          - httpasyncclient-scenario
          - httpclient-3.x-scenario
          - httpclient-4.3.x-scenario
          - httpclient-5.x-scenario
          - hutool-http-5.x-scenario
          - hystrix-scenario
          - sentinel-scenario
          - influxdb-scenario
          - jdk-http-scenario
          - jdk-threading-scenario
          - jedis-2.x-scenario
          - jedis-3.1.x-plus-scenario
          - jedis-4.x-scenario
          - jedis-3.3.x-plus-scenario
          - jedis-2.x-3.x-cluster-scenario
          - jetty-scenario
          - kafka-scenario
          - kotlin-coroutine-scenario
          - lettuce-scenario
          - mongodb-3.x-scenario
          - mongodb-4.x-scenario
          - netty-socketio-scenario
          - postgresql-above9.4.1207-scenario
          - mssql-jtds-scenario
          - mssql-jdbc-scenario
          - mybatis-3.x-scenario
          - resteasy-4.x-scenario
          - netty-http-4.1.x-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 8
      - name: Run Plugin Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-2-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build

  test:
    needs: [ build ]
    name: ${{ matrix.case }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - okhttp-scenario
          - play-scenario
          - postgresql-scenario
          - pulsar-scenario
          - rabbitmq-scenario
          - redisson-scenario
          - resttemplate-4.x-scenario
          - servicecomb-1.x-scenario
          - servicecomb-2.x-scenario
          - shardingsphere-3.x-scenario
          - shardingsphere-4.0.x-scenario
          - shardingsphere-4.x-scenario
          - shardingsphere-5.0.0-scenario
          - sofarpc-scenario
          - solrj-7.x-scenario
          - spring-3.0.x-scenario
          - spring-cloud-feign-1.1.x-scenario
          - spring-cloud-feign-1.2.x-scenario
          - spring-cloud-feign-2.x-scenario
          - spring-tx-scenario
          - struts2.3-scenario
          - struts2.5-scenario
          - cxf-scenario
          - okhttp2-scenario
          - rocketmq-scenario
          - jersey-2.0.x-2.25.x-scenario
          - jersey-2.26.x-2.39.x-scenario
          - websphere-liberty-23.x-scenario
          - nacos-client-2.x-scenario
          - rocketmq-5-grpc-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 8
      - name: Run Plugin Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-3-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build

  test:
    needs: [ build ]
    name: ${{ matrix.case }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - aerospike-scenario
          - mysql-scenario
          - undertow-scenario
          - webflux-scenario
          - zookeeper-scenario
          - spring-3.1.x-scenario
          - spring-4.1.x-scenario
          - spring-4.3.x-scenario
          - spring-async-scenario
          - vertx-core-4.x-scenario
          - vertx-eventbus-3.x-scenario
          - vertx-web-3.54minus-scenario
          - vertx-web-3.6plus-scenario
          - mariadb-scenario
          - micronaut-http-scenario
          - nats-2.14.x-2.15.x-scenario
          - quasar-scenario
          - baidu-brpc-scenario
          - baidu-brpc-3.x-scenario
          - retransform-class-scenario
          - retransform-class-tomcat-scenario
          - graphql-8.x-scenario
          - graphql-9.x-scenario
          - graphql-16plus-scenario
          - graphql-12.x-15.x-scenario
          - hbase-scenario
          - spring-kafka-1.3.x-scenario
          - spring-kafka-2.2.x-scenario
          - spring-kafka-2.3.x-scenario
          - spring-scheduled-scenario
          - elasticjob-2.x-scenario
          - quartz-scheduler-2.x-scenario
          - xxl-job-2.2.0-scenario
          - xxl-job-2.3.x-scenario
          - thrift-scenario
          - dbcp-2.x-scenario
          - jsonrpc4j-1.x-scenario
          - gateway-3.x-scenario
          - gateway-3.x-filter-context-scenario
          - neo4j-4.x-scenario
          - oracle-scenario
          - druid-1.x-scenario
          - hikaricp-scenario
          - clickhouse-0.3.1-scenario
          - clickhouse-0.3.2.x-scenario
          - kylin-jdbc-2.6.x-3.x-4.x-scenario
          - undertow-worker-thread-pool-scenario
          - tomcat-thread-pool-scenario
          - guava-eventbus-scenario
          - shenyu-2.4.x-scenario
          - jdk-threadpool-scenario
          - jdk-forkjoinpool-scenario
          - shenyu-2.4.x-dubbo-scenario
          - grpc-generic-call-scenario
          - shenyu-2.4.x-grpc-scenario
          - shenyu-2.4.x-sofarpc-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 8
      - name: Install Oracle Libs
        if: matrix.case == 'oracle-scenario'
        run: |
          mkdir -p skywalking-agent/plugins
          curl -O https://skyapm.github.io/ci-assist/jars/ojdbc14-10.2.0.4.0.jar
          curl -L -o ./skywalking-agent/plugins/apm-oracle-10.x-plugin-2.3.1.jar https://github.com/SkyAPM/java-plugin-extensions/releases/download/2.3.1/apm-oracle-10.x-plugin-2.3.1.jar
          ./mvnw -q --batch-mode install:install-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar
      - name: Run Plugin Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  group: plugins-tomcat10-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build
        uses: ./.github/actions/build
        with:
          base_image_tomcat: tomcat:10.0.22-jdk8

  test:
    needs: [ build ]
    name: ${{ matrix.case }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    strategy:
      matrix:
        case:
          - tomcat-10x-scenario
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 8
      - name: Run Plugin Test
        uses: ./.github/actions/run
        with:
          test_case: ${{ matrix.case }}

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Test

on:
  pull_request:
    paths:
      - '.github/workflows/plugins-*.yaml'
      - 'apm-application-toolkit/**'
      - 'apm-commons/**'
      - 'apm-protocol/**'
      - 'apm-sniffer/**'
      - 'test/plugin/**'
      - '**/pom.xml'
      - '!**.md'

concurrency:
  gro"
chengxy-nds;Springboot-Notebook;chengxy-nds/Springboot-Notebook;https://github.com/chengxy-nds/Springboot-Notebook;https://api.github.com/repos/chengxy-nds/Springboot-Notebook;master;29/06/2020 04:34;22/04/2024 09:01;FALSE;
exadel-inc;CompreFace;exadel-inc/CompreFace;https://github.com/exadel-inc/CompreFace;https://api.github.com/repos/exadel-inc/CompreFace;master;06/07/2020 10:29;22/04/2024 12:50;TRUE;"name: (AWS) Create CompreFace image for new release

on: 
  workflow_dispatch:
    inputs:
      release:
        description: release zip (e.g., https://github.com/exadel-inc/CompreFace/releases/download/v1.0.0/CompreFace_1.0.0.zip)
        required: true
      version:
        description: version (e.g., 1.0.0)
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_KEY_ACCESS }}
        aws-region: us-east-1
    - name: Create Security Group
      run: |
        export SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name MySecurityGroup --description ""My security group"" --query 'GroupId' --output text)
        aws ec2 wait security-group-exists --group-ids ${SECURITY_GROUP_ID}
        aws ec2 authorize-security-group-ingress --group-id ${SECURITY_GROUP_ID} --protocol tcp --port 22 --cidr 0.0.0.0/0
        echo ""SECURITY_GROUP_ID=$SECURITY_GROUP_ID"" >> $GITHUB_ENV
    - name: Run Instance
      run: |
        echo ${SECURITY_GROUP_ID}
        export INSTANCE_ID=$(aws ec2 run-instances --image-id ami-04e612d1108883950 --count 1 --instance-type t2.medium --key-name IharB --security-group-ids ${SECURITY_GROUP_ID} --subnet-id subnet-080dc6a6ed9580c77 --query 'Instances[0].InstanceId' --output text)
        aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
        echo ""INSTANCE_ID=$INSTANCE_ID"" >> $GITHUB_ENV
        sleep 10
    - name: Install Release
      env:
         RELEASE: ${{ github.event.inputs.release }}
         SSH_KEY: ${{secrets.SSH_KEY}}
      run: |
        echo ""$SSH_KEY"" > private_key && chmod 600 private_key
        export INSTANCE_IP_ADDRESS_EXTERNAL=$(aws ec2 describe-instances --instance-id ${INSTANCE_ID} --query 'Reservations[].Instances[].NetworkInterfaces[].Association.PublicIp' --output text)
        echo $INSTANCE_IP_ADDRESS_EXTERNAL
        ssh -i private_key -oStrictHostKeyChecking=no ec2-user@$INSTANCE_IP_ADDRESS_EXTERNAL ""wget -q -O tmp.zip '$RELEASE' && unzip -o tmp.zip && rm tmp.zip && docker-compose stop && docker-compose rm --force && docker image prune -a --force && docker-compose up -d && rm /home/ec2-user/.ssh/authorized_keys && sudo rm /root/.ssh/authorized_keys""
    - name: Stop Instance
      run: |
        aws ec2 stop-instances --instance-ids $INSTANCE_ID
        aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID
    - name: Create Image
      env:
         VERSION: ${{ github.event.inputs.version }}
      run: |
        export IMAGE_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name ""CompreFace_${VERSION}"" --description ""CompreFace Base Image"" --query 'ImageId' --output text)
        echo  ""CompreFace Base Image id of version ${VERSION} : ${IMAGE_ID}""
        aws ec2 wait image-available --image-ids ${IMAGE_ID}
    - name: Delete resources
      run: |
        aws ec2 terminate-instances --instance-ids $INSTANCE_ID
        aws ec2 wait instance-terminated --instance-ids $INSTANCE_ID
        aws ec2 delete-security-group --group-name MySecurityGroup

---
---
name: (AWS) Сompreface packer image
on: 
  workflow_dispatch:
jobs:
  packer:
    runs-on: ubuntu-latest
    name: packer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_KEY_ACCESS }}
          aws-region: us-east-1

      - name: Initialize Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: init

      - name: Validate Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: aws-compreface.pkr.hcl

      - name: Build Artifact
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: ""-color=true -on-error=abort""
          target: aws-compreface.pkr.hcl
        env:
          PACKER_LOG: 1

---
---
name: (Azure) Сompreface AIB image
on: 
  workflow_dispatch:
    inputs:
      version:
        description: Version (e.g., 1.0.0)
        required: true
env:
  RESOURCE_GROUP_NAME: compreFaceGallery-RG
  MANAGED_IDENTITY: compreFace-MI
  GALLERY_NAME: compreFaceGallery
  IMAGE_NAME: compreFace
  VERSION: ${{ github.event.inputs.version }}
jobs:
  build-image:
    runs-on: ubuntu-latest    
    steps:

    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}

    - name: Build custom VM image
      id: imageBuilder      
      uses: azure/build-vm-image@v0
      with:        
        resource-group-name: ""${{ env.RESOURCE_GROUP_NAME }}""
        managed-identity: ""${{ env.MANAGED_IDENTITY }}""
        location: 'eastus'
        source-os-type: 'linux'
        source-image-type: 'PlatformImage'     
        source-image: Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:latest
        vm-size: 'Standard_B2s'
        dist-type: 'SharedImageGallery'
        dist-resource-id: ""/subscriptions/${{secrets.AZURE_SUBSCRIPTION_ID}}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}/providers/Microsoft.Compute/galleries/${{ env.GALLERY_NAME }}/images/${{ env.IMAGE_NAME }}/versions/${{ env.VERSION }}""
        dist-location: 'eastus'
        customizer-script: |
          apt update
          apt upgrade -y
          apt install -y docker.io unzip
          docker version
          curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose version
          chmod 666 /var/run/docker.sock
          wget -q -O tmp.zip ""https://github.com/exadel-inc/CompreFace/releases/download/v${{ env.VERSION }}/CompreFace_${{ env.VERSION }}.zip"" && unzip tmp.zip && rm tmp.zip
          sed -i ""s|8000:|80:|g"" docker-compose.yml
          docker-compose pull --quiet
          docker-compose up -d

---
name: Build and Deploy CompreFace on push

on: 
  push:
    branches:
      - master
      - '1.2.x'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # Map steps outputs to a job outputs.
    # We need to share it between build and deploy jobs.
    outputs:
      registry_path: ${{ steps.registry_path.outputs.registry_path }}
      tag: ${{ steps.tag_vars.outputs.tag }}
      tag_latest: ${{ steps.tag_vars.outputs.tag_latest }}
      env_name: ${{ steps.env_var.outputs.env_name }}

    steps:
    - name: Checkout Repo 
      uses: actions/checkout@v3

    - name: Set registry path output
      id: registry_path
      run: echo ""registry_path=${{ env.REGISTRY }}/exadel-inc/compreface/"" >> $GITHUB_OUTPUT

    - name: Set tags from git output
      id: tag_vars
      run: |
        echo ""tag=${{ github.ref_name }}-$(git rev-parse HEAD | cut -c 1-7 | tr -d '\n')"" >> $GITHUB_OUTPUT
        echo ""tag_latest=${{ github.ref_name }}-latest"" >> $GITHUB_OUTPUT

    - name: Set environment output from git
      id: env_var
      run: |
        if [ ""${{ github.ref_name }}"" = ""master"" ]; then
          echo ""env_name=dev"" >> $GITHUB_OUTPUT
        elif [ ""${{ github.ref_name }}"" = ""1.2.x"" ]; then
          echo ""env_name=stage"" >> $GITHUB_OUTPUT
        else
          echo ""env_name=Features"" >> $GITHUB_OUTPUT
        fi         

    - name: Check outputs
      run: |
        echo ""Branch     : ${{ github.ref_name }}""
        echo ""Tags       : ${{ steps.tag_vars.outputs.tag }}, ${{ steps.tag_vars.outputs.tag_latest }}""
        echo ""Environment: ${{ steps.env_var.outputs.env_name }}""

    - name: Build images
      env:
        TAG: ${{ steps.tag_vars.outputs.tag }}
        TAG_LATEST: ${{ steps.tag_vars.outputs.tag_latest }}
        REGISTRY_PATH: ${{ steps.registry_path.outputs.registry_path }}
      working-directory: ./dev
      # use docker-compose build for 1.29.2
      #     docker compose build for 2.15.0 (with buildkit enabled by default)
      run: |
        docker compose version
        sed -i ""s|registry=|registry=${REGISTRY_PATH}|g"" .env
        sed -i ""s/latest/${TAG}/g"" .env
        docker compose build
        sed -i ""s/${TAG}/${TAG_LATEST}/g"" .env
        docker compose build
        docker images

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push images to the Container registry
      env:
        TAG: ${{ steps.tag_vars.outputs.tag }}
        TAG_LATEST: ${{ steps.tag_vars.outputs.tag_latest }}
      working-directory: ./dev
      run: |
        docker-compose push
        sed -i ""s/${TAG_LATEST}/${TAG}/g"" .env
        docker-compose push

  deploy:
    needs: build
    # It's not possible to use natively env (e.g. env.ENV_NAME) variable on the runs-on job field (yet?)
    # for deploy to different environments depending on branch https://github.com/actions/runner/issues/480
    # That's why we use output from the previous build job
    # Note: we are using self-hosted runner here 
    runs-on: [""${{needs.build.outputs.env_name}}""]

    steps:
    - name: Checkout Repo 
      uses: actions/checkout@v3

    - name: Deploy 
      working-directory: ./dev
      env:
        TAG_LATEST: ${{ needs.build.outputs.tag_latest }}
        REGISTRY_PATH: ${{ needs.build.outputs.registry_path }}
      run: |
        sed -i ""s|registry=|registry=${REGISTRY_PATH}|g"" .env
        sed -i ""s/latest/${TAG_LATEST}/g"" .env
        sed -i ""s/uwsgi_processes=2/uwsgi_processes=1/g"" .env
        sudo docker-compose stop
        sudo docker system prune -a -f
        sudo docker-compose pull
        HOSTNAME=$HOSTNAME sudo docker-compose -f docker-compose.yml -f docker-compose.env.yml up -d

---
name: Deploy to QA or Demo environment manually

on: 
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Choose environment to deploy'
        required: true
        default: 'qa'
        options:
        - qa
        - demo

env:
  REGISTRY_PATH: ghcr.io/exadel-inc/compreface/

jobs:
  deploy:
    runs-on: ${{ github.event.inputs.environment }}

    steps:
    
    - name: Set environment output from git
      id: tag_var
      run: |
        if [ ""${{ github.event.inputs.environment }}"" = ""qa"" ]; then
          echo ""TAG_LATEST=master-latest"" >> $GITHUB_ENV
        else
          echo ""TAG_LATEST=1.2.x-latest"" >> $GITHUB_ENV
        fi   
    
    - name: Checkout Repo 
      uses: actions/checkout@v3

    - name: Deploy 
      working-directory: ./dev
      run: |
        sed -i ""s|registry=|registry=${{ env.REGISTRY_PATH }}|g"" .env
        sed -i ""s/latest/${{ env.TAG_LATEST }}/g"" .env
        sed -i ""s/uwsgi_processes=2/uwsgi_processes=1/g"" .env
        sudo docker-compose stop
        sudo docker system prune -a -f
        sudo docker-compose pull
        HOSTNAME=$HOSTNAME sudo docker-compose -f docker-compose.yml -f docker-compose.env.yml up -d

---
name: (Release) Build and Push Single image to Production

on: 
  workflow_dispatch:
    inputs:
      version:
        description: Version (e.g., 1.0.0)
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
     - name: Check Out Repo 
       uses: actions/checkout@v2

     - name: Login to Docker Hub
       uses: docker/login-action@v1
       with:
         username: ${{ secrets.DOCKER_HUB_LOGIN }}
         password: ${{ secrets.DOCKER_HUB_PWD }}

     - name: Build facenet images
       env:
         VERSION: ${{ github.event.inputs.version }}
         APPERY_API_KEY: ${{ secrets.APPERY_API_KEY }}
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}                  --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:latest ./../..
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}                  --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:${VERSION} ./../..
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}-facenet          --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:${VERSION}-facenet ./../..
         docker images
     - name: Push facenet images to Docker Hub
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker push --all-tags exadel/compreface

     - name: clean docker
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker system prune --force

     - name: Build insightface cpu images
       env:
         VERSION: ${{ github.event.inputs.version }}
         APPERY_API_KEY: ${{ secrets.APPERY_API_KEY }}
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}-mobilenet        --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:${VERSION}-mobilenet ./../..
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}-arcface-r100     --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:${VERSION}-arcface-r100 ./../..
         docker images
     - name: Push insightface cpu  images to Docker Hub
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker push --all-tags exadel/compreface

     - name: clean docker
         working-directory: ./custom-builds/Single-Docker-File/
         run: |
           docker system prune --force

     - name: Build insightface gpu images
       env:
         VERSION: ${{ github.event.inputs.version }}
         APPERY_API_KEY: ${{ secrets.APPERY_API_KEY }}
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}-mobilenet-gpu    --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:${VERSION}-mobilenet-gpu ./../..
         docker build -f Dockerfile --build-arg BASE_IMAGE=exadel/compreface-core:${VERSION}-arcface-r100-gpu --build-arg VERSION=${VERSION} --build-arg APPERY_API_KEY=${APPERY_API_KEY} -t exadel/compreface:${VERSION}-arcface-r100-gpu ./../..
         docker images
     - name: Push insightface gpu images to Docker Hub
       working-directory: ./custom-builds/Single-Docker-File/
       run: |
         docker push --all-tags exadel/compreface


---
name: (Release) Build and Push Custom builds

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version (e.g., 1.0.0)
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
     - name: Check Out Repo
       uses: actions/checkout@v2
     - name: Build images
       env:
         VERSION: ${{ github.event.inputs.version }}
         APPERY_API_KEY: ${{ secrets.APPERY_API_KEY }}
         DOCKER_REGISTRY: exadel/
       working-directory: ./embedding-calculator/
       run: |
         make build-images
         docker images
     - name: Login to Docker Hub
       uses: docker/login-action@v1
       with:
         username: ${{ secrets.DOCKER_HUB_LOGIN }}
         password: ${{ secrets.DOCKER_HUB_PWD }}
     - name: Push images to Docker Hub
       env:
         DOCKER_REGISTRY: exadel/
       working-directory: ./embedding-calculator/
       run: |
         docker push --all-tags ${DOCKER_REGISTRY}compreface-core-base
         docker push --all-tags ${DOCKER_REGISTRY}compreface-core
         


---
name: (Release) Build and Push Default CompreFace version

on:
  workflow_dispatch:
    inputs:
      version:
        description: Version (e.g., 1.0.0)
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Build images
        env:
          VERSION: ${{ github.event.inputs.version }}
          APPERY_API_KEY: ${{ secrets.APPERY_API_KEY }}
        working-directory: ./dev/
        run: |
          sed -i 's/registry=/registry=exadel\//g' .env
          docker-compose build --build-arg APPERY_API_KEY=${APPERY_API_KEY}
          sed -i 's/latest/${VERSION}/g' .env
          docker-compose build --build-arg APPERY_API_KEY=${APPERY_API_KEY}
          docker images
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PWD }}
      - name: Push images to Docker Hub
        working-directory: ./dev/
        env:
          VERSION: ${{ github.event.inputs.version }}
        run: |
          docker-compose push
          sed -i 's/${VERSION}/latest/g' .env
          docker-compose push
---
name: Statistics to s3 master

on: workflow_dispatch
#  schedule: 
#    # runs once a every day
#    - cron: ""00 8 * * *""
    
jobs:
  traffic:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # Download from S3
    - uses: prewk/s3-cp-action@master
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE: 's3://repository-traffic-compreface' 
        DEST: 'traffic'
    
    - name: Repository Traffic 
      uses: sangonzal/repository-traffic-action@v0.1.4
      env:
        TRAFFIC_ACTION_TOKEN: ${{ secrets.TRAFFIC_ACTION_TOKEN }} 
     
     # Upload to S33
    - name: S3 Sync
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: 'traffic'

---
name: ""CLA Assistant""
on:
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened,closed,synchronize]

jobs:
  CLAssistant:
    runs-on: ubuntu-latest
    steps:
      - name: ""CLA Assistant""
        if: (github.event.comment.body == 'recheckcla' || github.event.comment.body == 'I have read the CLA Document and I hereby sign the CLA') || github.event_name == 'pull_request_target'
        # Alpha Release
        uses: cla-assistant/github-action@v2.0.1-alpha
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PERSONAL_ACCESS_TOKEN : ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          path-to-signatures: 'signatures/cla.json'
          path-to-cla-document: 'https://github.com/exadel-inc/CompreFace/blob/master/CLA.md'
          branch: 'CLA-signatures'
          allowlist: bot*
---
name: Load Tests K6

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Select the environment under tests'
        required: true
        default: 'dev'
        options:
        - dev
        - qa
        - demo
        - stage
      vus:
        type: string
        description: 'Virtual users count'
        default: '1'
      iterations:
        type: string
        description: 'Number of iterations'
        default: '1'
      duration:
        type: string
        description: 'Time of test execution, [s,m]'
        default: '2m'

jobs:
  pre_run:
    runs-on: ${{ github.event.inputs.environment }}
    outputs:
      tests_hostname: ${{ steps.tests_hostname.outputs.tests_hostname }}
    steps:
    - name: Get under tests environment hostname
      id: tests_hostname
      run: echo ""tests_hostname=$HOSTNAME"" >> $GITHUB_OUTPUT

  run_tests:
    needs: pre_run
    runs-on: devops
    steps:
    - name: Checkout Repo 
      uses: actions/checkout@v3

    - name: Run Grafana
      working-directory: ./load-tests/grafana
      run: sudo docker-compose up -d

    - name: K6 tests build and run
      working-directory: ./load-tests/docker
      env:
        TESTS_HOSTNAME: ${{ needs.pre_run.outputs.tests_hostname }}
        VUS: ${{ github.event.inputs.vus }}
        ITERATIONS: ${{ github.event.inputs.iterations }}
        DURATION: ${{ github.event.inputs.duration }}
      run: |
        sudo docker build -t k6tests .
        sudo docker run --rm \
        -e VUS=""${VUS}"" \
        -e ITERATIONS=""${ITERATIONS}"" \
        -e DURATION=""${DURATION}"" \
        -e HOSTNAME=""https://${TESTS_HOSTNAME}"" \
        -e INFLUXDB_HOSTNAME=""http://$(hostname):8086"" \
        -e DB_CONNECTION_STRING=""user=postgres password=postgres port=6432 dbname=frs host=${TESTS_HOSTNAME} sslmode=disable"" \
        k6tests

---
# This workflow will run a Unit tests on project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Unit tests on Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  tests:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Unit tests with Maven
      working-directory: ./java
      run: mvn clean test


---
name: Unit tests on Node.js 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.10]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - name: Install dependencies
        working-directory: ./ui
        run: npm install
      - name: Run tests
        working-directory: ./ui
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

---
name: Unit tests on Python test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      working-directory: ./embedding-calculator/
      run: |
        sudo apt-get update && sudo apt-get install -y libjpeg-dev libpng-dev \
          libtiff-dev libavformat-dev libpq-dev libfreeimage3
        python -m pip install --upgrade pip
        python -m pip --no-cache-dir install -r requirements.txt
        python -m src.services.facescan.plugins.setup
    - name: Test with pytest
      working-directory: ./embedding-calculator/
      run: |
       pip install pytest
       pip install pytest-cov
       python -m pytest -m ""not performance"" ./src

---
"
openlookeng;hetu-core;openlookeng/hetu-core;https://github.com/openlookeng/hetu-core;https://api.github.com/repos/openlookeng/hetu-core;master;30/06/2020 09:14;22/04/2024 05:36;FALSE;
fushengqian;fuint;fushengqian/fuint;https://github.com/fushengqian/fuint;https://api.github.com/repos/fushengqian/fuint;master;30/06/2020 10:03;22/04/2024 02:52;FALSE;
GrimAnticheat;Grim;GrimAnticheat/Grim;https://github.com/GrimAnticheat/Grim;https://api.github.com/repos/GrimAnticheat/Grim;2.0;22/02/2021 03:03;21/04/2024 10:34;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '30 15 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 https://git.io/JvXDl

      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  [push, workflow_dispatch]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        path: /home/runner/work/Grim/Grim/build/libs/**.jar

---
"
PorkStudios;FarPlaneTwo;PorkStudios/FarPlaneTwo;https://github.com/PorkStudios/FarPlaneTwo;https://api.github.com/repos/PorkStudios/FarPlaneTwo;master;06/07/2020 17:48;20/04/2024 03:05;FALSE;
NekoX-Dev;NekoX;NekoX-Dev/NekoX;https://github.com/NekoX-Dev/NekoX;https://api.github.com/repos/NekoX-Dev/NekoX;main;02/04/2020 16:13;21/04/2024 08:46;TRUE;"name: Debug build

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/debug.yml'
  pull_request:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      artifacts:
        description: 'y, if need artifacts'
        required: false

jobs:
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install yasm -y
          ./run init libs libvpx
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET=""${{ matrix.flavor }}""
          ./run libs native
  v2ray:
    name: Native Build (V2ray)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status v2ray > v2ray_status
      - name: V2ray Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/libv2ray.aar
          key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Install Golang
        uses: actions/setup-go@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          go-version: 1.16
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run libs v2ray
  shadowsocks:
    name: Native Build (Shadowsocks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status
      - name: Shadowsocks Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ss-rust-release.aar
          key: ${{ hashFiles('shadowsocks_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Install Rust
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run init action shadowsocks
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run libs shadowsocks
  shadowsocksr:
    name: Native Build (ShadowsocksR)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status 'ssr-libev/*' > shadowsocksr_status
      - name: ShadowsocksR Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ssr-libev-release.aar
          key: ${{ hashFiles('shadowsocksr_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run libs ssr
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
      - v2ray
      - shadowsocks
      - shadowsocksr
    strategy:
      matrix:
        flavor:
          - MiniRelease
          - MiniReleaseNoGcm
          - FullRelease
          - FullReleaseNoGcm
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
      - name: Install NDK
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
          git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status
          git submodule status 'ssr-libev/*' > shadowsocksr_status
          git submodule status v2ray > v2ray_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Native Cache (x86)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86
      - name: Native Cache (x86_64)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86_64
      - name: V2ray Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/libv2ray.aar
          key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
      - name: Shadowsocks Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ss-rust-release.aar
          key: ${{ hashFiles('shadowsocks_status') }}
      - name: ShadowsocksR Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ssr-libev-release.aar
          key: ${{ hashFiles('shadowsocksr_status') }}
      - name: Configure Gradle
        run: |
          sed -i -e ""s/16384/6144/g"" gradle.properties
          echo ""sdk.dir=${ANDROID_HOME}"" >> local.properties
#          echo ""ndk.dir=${ANDROID_HOME}/ndk-bundle"" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Debug Build
        run: |
          export LOCAL_PROPERTIES=""${{ secrets.LOCAL_PROPERTIES }}""
          export DEBUG_BUILD=true
          ./gradlew TMessagesProj:assemble${{ matrix.flavor }}

          echo ""APK_FILE=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_ARMV7=$(find TMessagesProj/build/outputs/apk -name '*armeabi*.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_X86=$(find TMessagesProj/build/outputs/apk -name '*x86-*.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_X64=$(find TMessagesProj/build/outputs/apk -name '*x86_64*.apk')"" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (arm64-v8a)
        with:
          name: NekoX-${{ matrix.flavor }}-arm64-v8a
          path: ${{ env.APK_FILE }}
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (armeabi-v7a)
        with:
          name: NekoX-${{ matrix.flavor }}-armeabi-v7a
          path: ${{ env.APK_FILE_ARMV7 }}
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (x86_64)
        with:
          name: NekoX-${{ matrix.flavor }}-x86_64
          path: ${{ env.APK_FILE_X64 }}
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (x86)
        with:
          name: NekoX-${{ matrix.flavor }}-x86
          path: ${{ env.APK_FILE_X86 }}

  build-dev:
    name: Gradle Build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && success() }}
    needs:
      - native
      - v2ray
      - telegram-bot-api
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
      - name: Install NDK
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
          git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status
          git submodule status 'ssr-libev/*' > shadowsocksr_status
          git submodule status v2ray > v2ray_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Native Cache (x86)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86
      - name: Native Cache (x86_64)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86_64
      - name: V2ray Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/libv2ray.aar
          key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
      - name: Build Cache
        uses: actions/cache@v3
        with:
          path: |
            TMessagesProj/build
            TMessagesProj/.cxx
            ss-rust/build
            ssr-rust/build
            openpgp-api/build
          key: build-cache
      - name: Configure Gradle
        run: |
          sed -i -e ""s/16384/6144/g"" gradle.properties
          echo ""sdk.dir=${ANDROID_HOME}"" >> local.properties
#          echo ""ndk.dir=${ANDROID_HOME}/ndk-bundle"" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: CI Build
        run: |
          export LOCAL_PROPERTIES=""${{ secrets.LOCAL_PROPERTIES }}""
          export DEBUG_BUILD=true
          export NATIVE_TARGET=universal
          ./gradlew TMessagesProj:assembleMiniRelease

          APK=$(find TMessagesProj/build/outputs/apk/mini/release -name 'NekoX*.apk')
          echo ""APK=$APK"" >> $GITHUB_ENV
          VERSION_CODE=$(grep -E ""def verCode = ([0-9]+)"" TMessagesProj/build.gradle | sed ""s/def verCode = //"")
          VERSION_NAME=$(grep -E ""def verName = "" TMessagesProj/build.gradle | sed ""s/def verName = //"" | sed ""s/\""//g"")
          echo ""VERSION_CODE=$VERSION_CODE"" >> $GITHUB_ENV
          echo ""VERSION_NAME=VERSION_NAME"" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ci-apk
          path: ${{ env.APK }}
  upload:
    name: Upload Apks to Telegram
    runs-on: ubuntu-latest
    needs:
      - build-dev
      - telegram-bot-api
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ci-apk
          path: apks
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Install Python Environment
        run: |
          sudo apt install python3 python3-pip -y
          pip3 install requests
      - name: Prepare Upload
        run: |
          chmod +x telegram-bot-api-binary
          function start() {
            ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 -p 38118 --local 2>&1 > /dev/null &
            sleep 5
          }
          start
          curl http://127.0.0.1:38118/ || start
          curl http://127.0.0.1:38118/ || start
          curl http://127.0.0.1:38118/ || start
          curl http://127.0.0.1:38118/ || start
      - name: Upload
        run: |
          curl https://raw.githubusercontent.com/NekoX-Dev/NekoX/dev/.github/scripts/upload.py -o upload.py
          
          export BOT_TOKEN=""${{ secrets.HELPER_BOT_TOKEN }}""
          export BOT_TARGET=""${{ secrets.HELPER_BOT_TARGET }}""
          export COMMIT_MESSAGE=""${{ github.event.head_commit.message }}""

          python3 upload.py ci

          pkill telegram-bot

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v2
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary

---
name: Release Build
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: true
      play:
        description: 'Play: If want ignore'
        required: false
      upload:
        description: 'Upload: If want ignore'
        required: false
      publish:
        description: 'Publish: If want ignore'
        required: false
jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: ""Check access""
        uses: ""lannonbr/repo-permission-check-action@2.0.0""
        with:
          permission: ""write""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install yasm -y
          ./run init libs libvpx
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET=""${{ matrix.flavor }}""
          ./run libs native
  v2ray:
    name: Native Build (V2ray)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status v2ray > v2ray_status
      - name: V2ray Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/libv2ray.aar
          key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Install Golang
        uses: actions/setup-go@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          go-version: 1.16
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run libs v2ray
  shadowsocks:
    name: Native Build (Shadowsocks)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status
      - name: Shadowsocks Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ss-rust-release.aar
          key: ${{ hashFiles('shadowsocks_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Install Rust
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run init action shadowsocks
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run libs shadowsocks
  shadowsocksr:
    name: Native Build (ShadowsocksR)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status 'ssr-libev/*' > shadowsocksr_status
      - name: ShadowsocksR Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ssr-libev-release.aar
          key: ${{ hashFiles('shadowsocksr_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run libs ssr
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
      - v2ray
      - shadowsocks
      - shadowsocksr
    strategy:
      matrix:
        flavor:
          - FullRelease
          - FullReleaseNoGcm
          - MiniRelease
          - MiniReleaseNoGcm
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
      - name: Install NDK
        run: |
          echo ""y"" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
          git submodule status ss-rust/src/main/rust/shadowsocks-rust > shadowsocks_status
          git submodule status 'ssr-libev/*' > shadowsocksr_status
          git submodule status v2ray > v2ray_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Native Cache (x86)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86
      - name: Native Cache (x86_64)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86_64
      - name: V2ray Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/libv2ray.aar
          key: ${{ hashFiles('bin/libs/v2ray/*', 'v2ray_status') }}
      - name: Shadowsocks Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ss-rust-release.aar
          key: ${{ hashFiles('shadowsocks_status') }}
      - name: ShadowsocksR Cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/libs/ssr-libev-release.aar
          key: ${{ hashFiles('shadowsocksr_status') }}
      - name: Fix Gradle Memoery
        run: |
          sed -i -e ""s/16384/6144/g"" gradle.properties
#          echo ""ndk.dir=${ANDROID_HOME}/ndk-bundle"" > local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Release Build
        run: |
          export LOCAL_PROPERTIES=""${{ secrets.LOCAL_PROPERTIES }}""
          ./gradlew TMessagesProj:assemble${{ matrix.flavor }}

          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo ""APK"
Haleydu;Cimoc;Haleydu/Cimoc;https://github.com/Haleydu/Cimoc;https://api.github.com/repos/Haleydu/Cimoc;release-tci;09/07/2020 05:09;22/04/2024 11:11;FALSE;
braisdom;ObjectiveSql;braisdom/ObjectiveSql;https://github.com/braisdom/ObjectiveSql;https://api.github.com/repos/braisdom/ObjectiveSql;master;09/07/2020 07:19;13/04/2024 07:12;FALSE;
woodpecker-framework;ysoserial-for-woodpecker;woodpecker-framework/ysoserial-for-woodpecker;https://github.com/woodpecker-framework/ysoserial-for-woodpecker;https://api.github.com/repos/woodpecker-framework/ysoserial-for-woodpecker;master;09/07/2020 20:47;22/04/2024 09:45;FALSE;
kingyuluk;FlappyBird;kingyuluk/FlappyBird;https://github.com/kingyuluk/FlappyBird;https://api.github.com/repos/kingyuluk/FlappyBird;master;09/07/2020 23:19;16/04/2024 13:22;FALSE;
Sketchware-Pro;Sketchware-Pro;Sketchware-Pro/Sketchware-Pro;https://github.com/Sketchware-Pro/Sketchware-Pro;https://api.github.com/repos/Sketchware-Pro/Sketchware-Pro;main;30/03/2021 16:40;22/04/2024 03:16;TRUE;"name: 'Delete old workflow runs'
on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of retains days.'
        required: true
        default: '20'

      minimum_runs:
        description: 'The minimum runs to keep for each workflow.'
        required: true
        default: '6'

jobs:
  deleteWorkflowRuns:
    name: Delete old workflow run(s)
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2.0.3
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: ${{ github.event.inputs.days }}
          keep_minimum_runs: ${{ github.event.inputs.minimum_runs }}

---
# SPDX-License-Identifier: GPL-3.0-only
# Original at https://github.com/tyron12233/CodeAssist/blob/main/.github/workflows/build-apk.yml
# Changes: Minor adjustments, removal of Cancel previous runs step, but every change can be found with a simple diff.

name: Android CI

on:
  push:
    paths:
      - '.github/workflows/android.yml'
      - 'app/**'
      - 'build-logic/**'
      - 'kotlinc/**'
      - 'gradle/**'
      - 'build.gradle'
      - 'gradle.properties'
      - 'gradlew'
      - 'gradlew.bat'
      - 'public-stable-ids.txt'
      - 'settings.gradle'
  pull_request:
    paths:
      - '.github/workflows/android.yml'
      - 'app/**'
      - 'build-logic/**'
      - 'kotlinc/**'
      - 'gradle/**'
      - 'build.gradle'
      - 'gradle.properties'
      - 'gradlew'
      - 'gradlew.bat'
      - 'public-stable-ids.txt'
      - 'settings.gradle'
  workflow_dispatch:

jobs:
  buildMinApi26:
    name: Build minApi26 debug APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Set environmental variables
        shell: bash
        env:
          JSON_CONTENT: ${{ secrets.GOOGLE_SERVICES_JSON }}
        if: ${{ env.JSON_CONTENT != '' }}
        run: |
          printf 'GOOGLE_SERVICES_JSON<<EOF\n%s\nEOF\n' ""$JSON_CONTENT"" >> $GITHUB_ENV

      - name: Build debug APK
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleMinApi26Debug
        env:
          CRASH_REPORT_WEBHOOK_URL: ${{ secrets.CRASH_REPORT_WEBHOOK_URL }}

      - name: Upload debug APK
        uses: actions/upload-artifact@v3
        with:
          name: apk-minApi26-debug
          path: app/build/outputs/apk/minApi26/debug

  buildMinApi21:
    name: Build minApi21 debug APK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Set environmental variables
        shell: bash
        env:
          JSON_CONTENT: ${{ secrets.GOOGLE_SERVICES_JSON }}
        if: ${{ env.JSON_CONTENT != '' }}
        run: |
          printf 'GOOGLE_SERVICES_JSON<<EOF\n%s\nEOF\n' ""$JSON_CONTENT"" >> $GITHUB_ENV

      - name: Build debug APK
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleMinApi21Debug
        env:
          CRASH_REPORT_WEBHOOK_URL: ${{ secrets.CRASH_REPORT_WEBHOOK_URL }}

      - name: Upload debug APK
        uses: actions/upload-artifact@v3
        with:
          name: apk-minApi21-debug
          path: app/build/outputs/apk/minApi21/debug

---
"
hardcore-sushi;DroidFS;hardcore-sushi/DroidFS;https://github.com/hardcore-sushi/DroidFS;https://api.github.com/repos/hardcore-sushi/DroidFS;master;12/07/2020 16:43;20/04/2024 10:20;FALSE;
CappielloAntonio;tempo;CappielloAntonio/tempo;https://github.com/CappielloAntonio/tempo;https://api.github.com/repos/CappielloAntonio/tempo;main;25/07/2021 10:20;21/04/2024 14:52;TRUE;"name: Github Release Workflow

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - uses: actions/checkout@v3

      - name: Cache Gradle and wrapper
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo ""BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION"" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      - name: Build APK
        id: build
        run: bash ./gradlew assembleTempoRelease

      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/tempo/release
          signingKeyBase64: ${{ secrets.KEYSTORE_BASE64 }}
          alias: ${{ secrets.KEY_ALIAS_GITHUB }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD_GITHUB }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      - name: Make artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-release-signed
          path: ${{steps.sign_apk.outputs.signedReleaseFile}}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release v${{ github.ref }}
          body: '> Changelog coming soon'
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{steps.sign_apk.outputs.signedReleaseFile}}
          asset_name: app-tempo-release.apk
          asset_content_type: application/zip

---
"
openboard-team;openboard;openboard-team/openboard;https://github.com/openboard-team/openboard;https://api.github.com/repos/openboard-team/openboard;master;31/12/2019 18:17;22/04/2024 02:31;TRUE;"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v2.2.0
        with:
          name: APK
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Upload lint report
        uses: actions/upload-artifact@v2.2.0
        with:
          name: Lint report
          path: app/build/reports/lint-results-debug.html

---
"
pmiaowu;BurpShiroPassiveScan;pmiaowu/BurpShiroPassiveScan;https://github.com/pmiaowu/BurpShiroPassiveScan;https://api.github.com/repos/pmiaowu/BurpShiroPassiveScan;master;15/07/2020 09:12;21/04/2024 09:52;FALSE;
huage2580;leeks;huage2580/leeks;https://github.com/huage2580/leeks;https://api.github.com/repos/huage2580/leeks;master;15/07/2020 12:03;14/04/2024 08:21;FALSE;
oracle;tribuo;oracle/tribuo;https://github.com/oracle/tribuo;https://api.github.com/repos/oracle/tribuo;main;16/06/2020 11:59;20/04/2024 16:27;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Tribuo CI (macOS aarch64, Java SE 17, 21, 22)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-14
    strategy:
      matrix:
        # test against supported LTS versions and latest
        java: [ 17, 21, 22 ]
    name: macOS Java SE ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Oracle Java SE
        uses: oracle-actions/setup-java@main
        with:
          website: oracle.com
          release: ${{ matrix.java }}
      - name: Build with Maven
        run: mvn -B package --file pom.xml -Parm

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Tribuo CI (macOS x86_64, Java SE 17, 21, 22)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-13
    strategy:
      matrix:
        # test against supported LTS versions and latest
        java: [ 17, 21, 22 ]
    name: macOS Java SE ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Oracle Java SE
        uses: oracle-actions/setup-java@v1
        with:
          website: oracle.com
          release: ${{ matrix.java }}
      - name: Build with Maven
        run: mvn -B package --file pom.xml

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Tribuo CI (Ubuntu x86_64, Java SE 17, 21, 22)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # test against supported LTS versions and latest
        java: [ 17, 21, 22 ]
    name: Ubuntu Java SE ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Oracle Java SE
        uses: oracle-actions/setup-java@v1
        with:
          website: oracle.com
          release: ${{ matrix.java }}
      - name: Build with Maven
        run: mvn -B package --file pom.xml

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Tribuo CI (Windows x86_64, Java SE 17, 21, 22)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        # test against supported LTS versions and latest
        java: [ 17, 21, 22 ]
    name: Windows Java SE ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Oracle Java SE
        uses: oracle-actions/setup-java@v1
        with:
          website: oracle.com
          release: ${{ matrix.java }}
      - name: Build with Maven
        run: mvn -B package --file pom.xml

---
"
Naccl;NBlog;Naccl/NBlog;https://github.com/Naccl/NBlog;https://api.github.com/repos/Naccl/NBlog;master;18/07/2020 14:33;22/04/2024 10:11;FALSE;
yangzongzhuan;RuoYi-Vue-fast;yangzongzhuan/RuoYi-Vue-fast;https://github.com/yangzongzhuan/RuoYi-Vue-fast;https://api.github.com/repos/yangzongzhuan/RuoYi-Vue-fast;master;19/07/2020 03:54;20/04/2024 09:10;FALSE;
preslavmihaylov;booknotes;preslavmihaylov/booknotes;https://github.com/preslavmihaylov/booknotes;https://api.github.com/repos/preslavmihaylov/booknotes;master;19/07/2020 20:16;22/04/2024 03:41;FALSE;
phith0n;JavaThings;phith0n/JavaThings;https://github.com/phith0n/JavaThings;https://api.github.com/repos/phith0n/JavaThings;master;20/07/2020 17:36;22/04/2024 08:29;FALSE;
IrisShaders;Iris;IrisShaders/Iris;https://github.com/IrisShaders/Iris;https://api.github.com/repos/IrisShaders/Iris;refractor;22/10/2020 22:21;21/04/2024 14:07;TRUE;"name: build-release

on:
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache Brachyura directory
        uses: actions/cache@v2
        with:
          path: |
            .brachyura
            ~/.brachyura
          key: ${{ runner.os }}-brachyura-${{ hashFiles('**/Buildscript.java') }}
          restore-keys: ${{ runner.os }}-brachyura

      - name: Build with Brachyura
        run: java -Diris.release=true -jar brachyura-bootstrap-0.jar build

      - name: Upload artifacts to Modrinth and GitHub
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: YL57xq9U
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          modrinth-featured: false

          github-token: ${{ secrets.GITHUB_TOKEN }}

          files: build/libs/!(*-@(dev|sources|all)).jar

          version-type: release

          loaders: fabric quilt

          dependencies: sodium

          version-resolver: latest # Defaults to selecting the latest compatible version of Minecraft, using the tag from the fabric.mod.json

---
# This workflow will build a Java project with Brachyra
# For more information see: docs/development/brachyura.md

name: Java CI with Gradle

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false

      - name: Run build with Gradle Wrapper
        run: ./gradlew build

      - name: Upload built JAR (Fabric)
        uses: actions/upload-artifact@v3
        with:
          name: iris-artifacts
          path: build/libs

---
"
lyrric;seckill;lyrric/seckill;https://github.com/lyrric/seckill;https://api.github.com/repos/lyrric/seckill;master;23/07/2020 08:09;18/04/2024 23:01;FALSE;
KhunHtetzNaing;ADB-OTG;KhunHtetzNaing/ADB-OTG;https://github.com/KhunHtetzNaing/ADB-OTG;https://api.github.com/repos/KhunHtetzNaing/ADB-OTG;master;26/07/2020 12:37;21/04/2024 15:00;FALSE;
mouzt;mzt-biz-log;mouzt/mzt-biz-log;https://github.com/mouzt/mzt-biz-log;https://api.github.com/repos/mouzt/mzt-biz-log;master;26/07/2020 16:24;22/04/2024 09:26;FALSE;
peng-zhihui;DeepVision;peng-zhihui/DeepVision;https://github.com/peng-zhihui/DeepVision;https://api.github.com/repos/peng-zhihui/DeepVision;master;27/07/2020 13:10;21/04/2024 04:47;FALSE;
CodeIntelligenceTesting;jazzer;CodeIntelligenceTesting/jazzer;https://github.com/CodeIntelligenceTesting/jazzer;https://api.github.com/repos/CodeIntelligenceTesting/jazzer;main;28/01/2021 20:08;19/04/2024 05:42;TRUE;"name: Check formatting

# Controls when the action will run.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:

  workflow_dispatch:

jobs:
  check_formatting:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Run format.sh and print changes
        env:
          CI: 1
        run: |
          ./format.sh
          git diff

      - name: Check for changes
        run: ""[ $(git status --porcelain | wc -l) -eq 0 ]""

---
name: Datadog Event

on:
  release:
    types: [published]

jobs:
  send-release-event:
    runs-on: ubuntu-latest
    steps:
      - name: Send Release Event
        run: |
          curl -sX POST ""https://api.datadoghq.eu/api/v1/events"" \
            -H ""Accept: application/json"" \
            -H ""Content-Type: application/json"" \
            -H ""DD-API-KEY: ${{ secrets.DATADOG_API_KEY }}"" \
            --data-raw '{
              ""title"": ""Jazzer has been released"",
              ""text"": ""%%% \nJazzer has been released with version **${{ github.event.release.tag_name }}**\n %%%"",
              ""tags"": [
                ""repo:${{ github.repository }}"",
                ""project:Jazzer"",
                ""version:${{ github.event.release.tag_name }}""
              ]
            }'

---
name: Pre-Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: linux
          - os: macos-11
            name: macos
          - os: windows-2019
            name: windows

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8

      - name: Append build settings to .bazelrc
        shell: bash
        run: |
          TAG=${{ github.ref_name }}
          echo ""build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}"" >> .bazelrc
          echo ""build --config=ci"" >> .bazelrc
          echo ""build --//deploy:jazzer_version=${TAG#v}"" >> .bazelrc
          echo ""build:linux --config=toolchain"" >> .bazelrc
          echo ""build:linux --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux"" >> .bazelrc

      - name: Build
        shell: bash
        # Double forward slashes are converted to single ones by Git Bash on Windows, so we use working directory
        # relative labels instead.
        run: |
          bazelisk build ${{env.BUILD_BUDDY_CONFIG}} deploy:jazzer :jazzer_release
          cp -L $(bazel cquery --output=files deploy:jazzer) jazzer-${{ matrix.name }}.jar
          cp -L $(bazel cquery --output=files :jazzer_release) jazzer-${{ matrix.name }}.tar.gz

      - name: Upload jazzer.jar
        uses: actions/upload-artifact@v3
        with:
          name: jazzer_tmp
          path: jazzer-${{ matrix.name }}.jar
          if-no-files-found: error

      - name: Upload release archive
        uses: actions/upload-artifact@v3
        with:
          name: jazzer_releases
          path: jazzer-${{ matrix.name }}.tar.gz
          if-no-files-found: error

  merge_jars:
    runs-on: ubuntu-latest
    needs: build_release

    steps:
      - uses: actions/checkout@v3

      - name: Download individual jars
        uses: actions/download-artifact@v3
        with:
          name: jazzer_tmp
          path: _tmp/

      - name: Merge jars
        run: |
          bazel run @rules_jvm_external//private/tools/java/com/github/bazelbuild/rules_jvm_external/jar:MergeJars -- \
            --output ""$(pwd)""/_tmp/jazzer.jar \
            $(find ""$(pwd)/_tmp/"" -name '*.jar' -printf ""--sources %h/%f "")

      - name: Upload merged jar
        uses: actions/upload-artifact@v3
        with:
          name: jazzer
          path: _tmp/jazzer.jar
          if-no-files-found: error

  maven_predeploy:
    # TODO: Our hermetic toolchain doesn't support ubuntu-latest yet and fails with:
    # external/llvm_toolchain_llvm/bin/clang: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory
    runs-on: ubuntu-20.04
    needs: merge_jars

    environment:
      name: Deploy

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8

      - name: Append build settings to .bazelrc
        shell: bash
        run: |
          TAG=${{ github.ref_name }}
          echo ""build --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_API_KEY }}"" >> .bazelrc
          echo ""build --config=ci"" >> .bazelrc
          echo ""build --//deploy:jazzer_version=${TAG#v}"" >> .bazelrc
          echo ""build:linux --config=toolchain"" >> .bazelrc
          echo ""build:linux --extra_toolchains=@llvm_toolchain//:cc-toolchain-x86_64-linux"" >> .bazelrc

      - name: Download merged jar
        uses: actions/download-artifact@v3
        with:
          name: jazzer
          path: _tmp/

      - name: Run Deployment
        env:
          RELEASE_SIGNING_KEY_ID: ${{ secrets.RELEASE_SIGNING_KEY_ID }}
          RELEASE_SIGNING_KEY_PRIVATE: ${{ secrets.RELEASE_SIGNING_KEY_PRIVATE }}
          MAVEN_USER: ${{ secrets.MAVEN_USER }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: JAZZER_JAR_PATH=""$(pwd)/_tmp/jazzer.jar"" bazel run deploy

  create_release:
    needs: build_release
    runs-on: ubuntu-latest

    permissions:
      contents: write # for creating releases

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Download individual tar.gzs
        uses: actions/download-artifact@v3
        with:
          name: jazzer_releases
          path: _releases/

      - name: create release
        uses: softprops/action-gh-release@c9b46fe7aad9f02afd89b12450b780f52dacfb2d
        with:
          generate_release_notes: true
          draft: true
          files: |
            _releases/jazzer-linux.tar.gz
            _releases/jazzer-macos.tar.gz
            _releases/jazzer-windows.tar.gz

---
name: Release

on:
  workflow_dispatch:
  release:
    types: [released]

jobs:
  docker_push:
    runs-on: ubuntu-latest

    environment:
      name: Deploy

    steps:
      - uses: actions/checkout@v3

      - name: Docker login
        run: echo ""${{ secrets.DOCKER_TOKEN }}"" | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Push docker containers
        run: docker/push_all.sh

  generate_docs:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Build documentation
        run: |
          bazel build //deploy:jazzer-docs //deploy:jazzer-api-docs //deploy:jazzer-junit-docs
          cp $(bazel cquery --output=files //deploy:jazzer-docs) ./jazzer-docs.jar
          cp $(bazel cquery --output=files //deploy:jazzer-api-docs) ./jazzer-api-docs.jar
          cp $(bazel cquery --output=files //deploy:jazzer-junit-docs) ./jazzer-junit-docs.jar

      - name: Upload jars
        uses: actions/upload-artifact@v3
        with:
          name: jazzer_docs_jars
          path: |
            jazzer-docs.jar
            jazzer-api-docs.jar
            jazzer-junit-docs.jar
          if-no-files-found: error

  update_docs:
    runs-on: ubuntu-latest
    needs: generate_docs

    environment:
      name: Deploy

    steps:
      - name: checkout docs
        uses: actions/checkout@v3
        with:
          repository: 'CodeIntelligenceTesting/jazzer-docs'
          ssh-key: ""${{ secrets.JAZZER_DOCS_SSH_KEY_PRIVATE }}""

      - name: Download jar
        uses: actions/download-artifact@v3
        with:
          name: jazzer_docs_jars
          path: .

      - name: Setup git
        run: |
          git config user.email ""info@code-intelligence.com""
          git config user.name ""Jazzer release pipeline""

      - name: Extract API docs jar
        run: |
          git rm -rf jazzer-api
          mkdir jazzer-api
          unzip jazzer-api-docs.jar -d jazzer-api
          git add jazzer-api
          # Do not fail if no changes to commit
          # https://stackoverflow.com/questions/8123674/how-to-git-commit-nothing-without-an-error
          git diff-index --quiet HEAD || git commit -m ""Automated update: jazzer-api docs""

      - name: Extract Jazzer docs jar
        run: |
          git rm -rf jazzer
          mkdir jazzer
          unzip jazzer-docs.jar -d jazzer
          git add jazzer
          git diff-index --quiet HEAD || git commit -m ""Automated update: jazzer docs""

      - name: Extract JUnit docs jar
        run: |
          git rm -rf jazzer-junit
          mkdir jazzer-junit
          unzip jazzer-junit-docs.jar -d jazzer-junit
          git add jazzer-junit
          git diff-index --quiet HEAD || git commit -m ""Automated update: jazzer-junit docs""

      - name: Push changes
        run: |
          git push

---
name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  merge_group:

  workflow_dispatch:

jobs:

  test_junit_springboot:
    name: Spring Boot
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17
      - name: Run Spring Boot example
        # The Spring Boot example project is built with Maven. The shell script builds the project
        # against the local version of Jazzer and runs its unit and fuzz tests.
        # Spring version 6 requires JDK 17.
        run: |
          cd examples/junit-spring-web
          ./build-and-run-tests.sh
        shell: bash

  build_and_test:
    runs-on: ${{ matrix.os }}
    name: Build & Test
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-12, windows-2019]
        jdk: [8, 21]
        include:
          - jdk: 21
            # Workaround for https://github.com/bazelbuild/bazel/issues/14502
            extra_bazel_args: ""--jvmopt=-Djava.security.manager=allow""
          - os: ubuntu-20.04
            arch: ""linux""
            bazel_args: ""//launcher/android:jazzer_android //tests/benchmarks""
          - os: macos-12
            arch: ""macos-x86_64""
            bazel_args: ""--xcode_version_config=//.github:host_xcodes //launcher/android:jazzer_android""
          - os: windows-2019
            arch: ""windows""

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: ${{ matrix.jdk }}

      # The java binary has the necessary entitlements to allow tests to pass, but that requires
      # user interaction (clicking through Gatekeeper warnings) that we can't simulate in CI.
      - name: Remove codesign signature on java binary
        if: contains(matrix.os, 'mac')
        run: codesign --remove-signature ""$JAVA_HOME""/bin/java

      - name: Set Build Buddy config
        run: .github/scripts/echoBuildBuddyConfig.sh ${{ secrets.BUILDBUDDY_API_KEY }} >> $GITHUB_ENV
        shell: bash

      - name: Build & Test
        run: bazelisk test ${{env.BUILD_BUDDY_CONFIG}} --java_runtime_version=local_jdk_${{ matrix.jdk }} ${{ matrix.bazel_args }} ${{ matrix.extra_bazel_args }} --build_tag_filters=""-no-${{ matrix.arch }}-jdk${{ matrix.jdk }},-no-jdk${{ matrix.jdk }}"" --test_tag_filters=""-no-${{ matrix.arch }}-jdk${{ matrix.jdk }},-no-jdk${{ matrix.jdk }}"" //...

      - name: Copy Bazel log
        if: always()
        shell: bash
        run: cp ""$(readlink bazel-out)""/../../../java.log* .

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: testlogs-${{ matrix.arch }}-${{ matrix.jdk }}
          # https://github.com/actions/upload-artifact/issues/92#issuecomment-711107236
          path: |
            bazel-testlogs*/**/test.log
            java.log*

---
"
w296488320;XposedAppium;w296488320/XposedAppium;https://github.com/w296488320/XposedAppium;https://api.github.com/repos/w296488320/XposedAppium;master;28/07/2020 07:48;22/04/2024 03:22;FALSE;
yuliskov;SmartTube;yuliskov/SmartTube;https://github.com/yuliskov/SmartTube;https://api.github.com/repos/yuliskov/SmartTube;master;28/07/2020 14:53;22/04/2024 12:48;FALSE;
fuzhengwei;interview;fuzhengwei/interview;https://github.com/fuzhengwei/interview;https://api.github.com/repos/fuzhengwei/interview;master;28/07/2020 16:19;21/04/2024 17:36;FALSE;
LoveMyOrange;ActivitiSourceCode;LoveMyOrange/ActivitiSourceCode;https://github.com/LoveMyOrange/ActivitiSourceCode;https://api.github.com/repos/LoveMyOrange/ActivitiSourceCode;master;29/07/2020 05:30;11/04/2024 11:58;FALSE;
AndroidIDEOfficial;AndroidIDE;AndroidIDEOfficial/AndroidIDE;https://github.com/AndroidIDEOfficial/AndroidIDE;https://api.github.com/repos/AndroidIDEOfficial/AndroidIDE;dev;20/07/2021 15:31;22/04/2024 13:06;TRUE;"name: Build and test

on:
  push:
    branches: [ ""dev"", ""main"", ""release/**"" ]
    paths-ignore:
      - '**.md'
      - 'fastlane/**'
      - '.github/workflows/crowdin_contributors.yml'
  pull_request:
    branches: [ ""dev"" ]
    paths-ignore:
      - '**.md'
      - 'fastlane/**'
      - '.github/workflows/crowdin_contributors.yml'
  workflow_dispatch: { }

env:
  # Misc
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Signing info
  IDE_SIGNING_ALIAS: ${{ secrets.IDE_SIGNING_ALIAS }}
  IDE_SIGNING_AUTH_PASS: ${{ secrets.IDE_SIGNING_AUTH_PASS }}
  IDE_SIGNING_AUTH_USER: ${{ secrets.IDE_SIGNING_AUTH_USER }}
  IDE_SIGNING_KEY_PASS: ${{ secrets.IDE_SIGNING_KEY_PASS }}
  IDE_SIGNING_STORE_PASS: ${{ secrets.IDE_SIGNING_STORE_PASS }}
  IDE_SIGNING_URL: ${{ secrets.IDE_SIGNING_URL }}
  IDE_SIGNING_KEY_BIN: ${{ secrets.IDE_SIGNING_KEY_BIN }}

  # Publishing credentials
  ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
  ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
  ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}

  # Build configuration
  BUILD_JAVA_VERSION: '17'
  BUILD_JAVA_DIST: 'temurin'
  BUILD_IS_RELEASE: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release/**' }}
  ReleaseAndroidIDE: ${{ github.ref == 'refs/heads/main' }}

jobs:
  build_apk:
    strategy:
      matrix:
        build_type: ['debug', 'release']
    name: Build APK
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
      - name: Change Gradle wrapper permissions
        run: chmod +x ./gradlew
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Assemble ${{ matrix.build_type }} APK
        run: |
          build_type=${{ matrix.build_type }}
          ./gradlew :app:assemble${build_type^}
      - name: Copy ${{ matrix.build_type }} APK
        run: |
          cp app/build/outputs/apk/${{ matrix.build_type }}/app-*.apk ./
      - name: Upload arm64-v8a ${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-arm64-v8a-${{ matrix.build_type }}
          path: app-arm64-v8a-${{ matrix.build_type }}.apk
      - name: Upload armeabi-v7a ${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-armeabi-v7a-${{ matrix.build_type }}
          path: app-armeabi-v7a-${{ matrix.build_type }}.apk
      - name: Upload x86_64 ${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-x86_64-${{ matrix.build_type }}
          path: app-x86_64-${{ matrix.build_type }}.apk
      - name: Upload ${{ matrix.build_type }} mappings
        if: ${{ matrix.build_type == 'release' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-mappings
          path: '**/build/outputs/mapping'

  run_unit_tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
      - name: Change Gradle wrapper permissions
        run: chmod +x ./gradlew
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run unit tests
        run: ./gradlew runTestsInCI --continue
        env:
          ANDROIDIDE_TEST: true
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-unit-tests
          path: '**/build/reports/tests/'

  run_tooling_api_tests:
    name: Build and test Tooling API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
      - name: Change Gradle wrapper permissions
        run: chmod +x ./gradlew
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run tooling API tests
        run: ./gradlew :subprojects:tooling-api-impl:build --continue
        env:
          ANDROIDIDE_TEST: true
          TEST_TOOLING_API_IMPL: true
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-tooling-api-tests
          path: '**/build/reports/tests/'

  run_connected_checks:
    name: Run connected checks
    runs-on: macos-latest
    if: false
    strategy:
      matrix:
        api-level: [ 26, 32 ]
        target: [ default ]
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
      - name: Change Gradle wrapper permissions
        run: chmod +x ./gradlew
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run connected checks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedCheck
      - name: Upload test reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results-android-tests-${{ matrix.api-level }}-${{ matrix.target }}
          path: '**/build/reports/androidTests/'

  publish:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [ build_apk, run_unit_tests, run_tooling_api_tests ]
    if: |
      always()
      && github.ref == 'refs/heads/main'
      && github.event_name != 'pull_request'
      && needs.build_apk.result == 'success'
      && needs.run_unit_tests.result == 'success'
      && needs.run_tooling_api_tests.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
      - name: Download arm64-v8a APK
        uses: actions/download-artifact@v4
        with:
          name: apk-arm64-v8a-release
      - name: Download x86_64 APK
        uses: actions/download-artifact@v4
        with:
          name: apk-x86_64-release
      - name: Download armeabi-v7a APK
        uses: actions/download-artifact@v4
        with:
          name: apk-armeabi-v7a-release
      - name: Change Gradle wrapper permissions
        run: chmod +x ./gradlew
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Generate checksums
        run: |
          mkdir -p build
          
          md5sum *.apk > build/CHECKSUMS-md5.txt
          sha256sum *.apk > build/CHECKSUMS-sha256.txt
          sha512sum *.apk > build/CHECKSUMS-sha512.txt
          
          find build -type f -name ""CHECKSUMS*.txt"" -exec echo {} \; -exec cat {} \; -exec echo """" \;
      - name: Publish release
        run: ./gradlew nyxMake nyxMark nyxPublish publish release --stacktrace
      - name: Archive Nyx state file
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: .nyx-state-${{ github.job }}.json
          path: build/nyx-state.json

  publish_snapshots:
    name: Publish package snapshots
    runs-on: ubuntu-latest
    needs: [ build_apk ]
    if: ${{ always() && github.ref != 'refs/heads/main' && github.event_name != 'pull_request' && needs.build_apk.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.BUILD_JAVA_VERSION }}
          distribution: ${{ env.BUILD_JAVA_DIST }}
      - name: Change Gradle wrapper permissions
        run: chmod +x ./gradlew
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Publish snapshots
        run: ./gradlew publishAllPublicationsToMavenCentralRepository --stacktrace

---
name: Crowdin Contributors Action

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch: {}

env:
  CONTRIBUTORS_JSON_FILENAME: crowdin-contributors

jobs:
  crowdin-contributors:
    runs-on: ubuntu-latest
    if: github.repository == 'AndroidIDEOfficial/AndroidIDE'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Generate Crowdin Contributors table
      id: generate_table
      uses: andrii-bodnar/action-crowdin-contributors@v2.0.0
      continue-on-error: false
      with:
        contributors_per_line: 8
        max_contributors: 32
        image_size: 64
        min_words_contributed: 100
        files: CROWDIN_CONTRIBUTORS.md
        crowdin_project_link: ""https://crowdin.com/project/androidide""
      env:
        CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
        CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

    - name: Write JSON report
      uses: ""DamianReeves/write-file-action@master""
      with:
        path: ${{ env.CONTRIBUTORS_JSON_FILENAME }}_staging.json
        write-mode: overwrite
        contents: ${{ steps.generate_table.outputs.json_report }}

    - name: Pretty-print JSON report
      run: |
        sudo apt-get install jq
        cat ${{ env.CONTRIBUTORS_JSON_FILENAME }}_staging.json | jq '.' > ${{ env.CONTRIBUTORS_JSON_FILENAME }}.json
        rm ${{ env.CONTRIBUTORS_JSON_FILENAME }}_staging.json

    - name: Upload JSON report
      uses: actions/upload-artifact@v4
      with:
        name: crowdin-contributors-json
        path: ${{ env.CONTRIBUTORS_JSON_FILENAME }}.json

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        title: Update Crowdin Contributors table
        body: By [action-crowdin-contributors](https://github.com/andrii-bodnar/action-crowdin-contributors) GitHub action
        commit-message: ""chore: update crowdin contributors table""
        committer: Crowdin Bot <support+bot@crowdin.com>
        branch: crowdin-contributors/patch

---
name: Delete old workflow runs
on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days.'
        required: true
        default: 30
      minimum_runs:
        description: 'The minimum runs to keep for each workflow.'
        required: true
        default: 6

jobs:
  del_runs:
    runs-on: ubuntu-latest
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: ${{ github.event.inputs.days }}
          keep_minimum_runs: ${{ github.event.inputs.minimum_runs }}
---
"
ZongXR;SuperMarket;ZongXR/SuperMarket;https://github.com/ZongXR/SuperMarket;https://api.github.com/repos/ZongXR/SuperMarket;master;01/08/2020 16:48;21/04/2024 19:56;FALSE;
birdLark;LarkMidTable;birdLark/LarkMidTable;https://github.com/birdLark/LarkMidTable;https://api.github.com/repos/birdLark/LarkMidTable;dev;02/08/2020 04:14;21/04/2024 07:05;FALSE;
he2121;MyRPCFromZero;he2121/MyRPCFromZero;https://github.com/he2121/MyRPCFromZero;https://api.github.com/repos/he2121/MyRPCFromZero;master;05/08/2020 06:20;22/04/2024 11:02;FALSE;
jmix-framework;jmix;jmix-framework/jmix;https://github.com/jmix-framework/jmix;https://api.github.com/repos/jmix-framework/jmix;master;05/08/2020 14:29;22/04/2024 11:27;FALSE;
bytedance;AlphaPlayer;bytedance/AlphaPlayer;https://github.com/bytedance/AlphaPlayer;https://api.github.com/repos/bytedance/AlphaPlayer;master;06/08/2020 11:39;19/04/2024 09:52;FALSE;
jdah;microcraft;jdah/microcraft;https://github.com/jdah/microcraft;https://api.github.com/repos/jdah/microcraft;master;09/08/2020 23:49;20/04/2024 19:09;FALSE;
OiPunk;OnlineTaxi;OiPunk/OnlineTaxi;https://github.com/OiPunk/OnlineTaxi;https://api.github.com/repos/OiPunk/OnlineTaxi;master;12/08/2020 08:28;15/04/2024 10:00;FALSE;
crmeb;crmeb_java;crmeb/crmeb_java;https://github.com/crmeb/crmeb_java;https://api.github.com/repos/crmeb/crmeb_java;master;12/08/2020 12:36;21/04/2024 19:56;FALSE;
jbangdev;jbang;jbangdev/jbang;https://github.com/jbangdev/jbang;https://api.github.com/repos/jbangdev/jbang;main;24/12/2019 23:52;22/04/2024 03:36;TRUE;"name: ci-build
on:
  push:
    branches:
      - main
    tags-ignore:
      - '*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  updatewebsite:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 2
      - name: Verify Changed files in docs
        uses: tj-actions/verify-changed-files@fda469d6b456070da68fa3fdbc07a513d858b200 # v8.8
        id: verify-changed-files
        with:
          files: |
             docs
      - name: update website
        if: ${{ github.ref == 'refs/heads/main' && steps.verify-changed-files.outputs.files_changed == 'true'}} 
        uses: benc-uk/workflow-dispatch@25b02cc069be46d637e8fe2f1e8484008e9e9609 # v1
        with:
          workflow: github-pages
          repo: jbangdev/jbang.dev
          token: ${{ secrets.BREW_GITHUB_TOKEN }}
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    name: build-and-testing
    steps:
      - name: Rate limit info
        run: 'curl -H ""Accept: application/vnd.github+json"" https://api.github.com/rate_limit'
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@a283f9441d2d96eb62436dc46d7014f5d357ac22 # v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          limit-access-to-actor: true
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      - uses: gradle/wrapper-validation-action@56b90f209b02bf6d1deae490e9ef18b21a389cd4 # v1
      - name: install-java8
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: build-gradle
        run: ./gradlew --no-daemon clean build installDist publish --build-cache --scan -s
      - name: integration-test-non-windows
        if: runner.os != 'Windows'
        run: |
          export PATH=`pwd`/build/install/jbang/bin:$PATH
          cd itests
          ./test_suite.sh
          ./itests.sh
      - name: add-to-path
        run: echo ""../build/install/jbang/bin"" >> $env:GITHUB_PATH
      - name: integration-test-windows
        if: runner.os == 'Windows'
        working-directory: itests
        run: |
          echo ""::add-matcher::.github/karatewindows-matcher.json"" 
          .\itests.cmd
          echo ""::remove-matcher owner=karate-windows::""
      - name: codecoverage-report
        run: |
          ./gradlew --no-daemon jacocoTestReport
      - name: Upload Test Report
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        if: always() # always run even if the previous step fails
        with:
          name: junit-test-results
          path: '**/build/test-results/test/TEST-*.xml'
          retention-days: 1
      - uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b # v2
        with:
          #files: ./coverage1.xml,./coverage2.xml # optional
          flags: ${{ runner.os }} # optional
          name: ${{ runner.os }}-tests # optional
          verbose: true # optional (default = false)
      - name: build-choco-package
        if: runner.os == 'Windows'
        uses: actions/setup-dotnet@608ee757cfcce72c2e91e99aca128e0cae67de87 # v1
        with:
          dotnet-version: '2.2.204' # SDK Version to use.
      - name: build-choco
        if: runner.os == 'Windows'
        run: |
          powershell
          choco pack build/choco/jbang.nuspec
      - name: Archive build results
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        if: always()
        with:
          name: ${{ runner.os }}-build-${{ github.sha }}
          path: build
      - name: Upload jbang.zip
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        if: always() && runner.os != 'Windows'
        with:
          name: jbang-${{ github.sha }}
          path: build/install/jbang

  testing:
    needs: build
    strategy:
      ## disable fail-fast so on variance failing don't fail the rest
      #fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [8,11,17,19]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
        with:
          name: ${{ runner.os }}-build-${{ github.sha }}
          path: build
      - name: smoke-test
        run: |
          java -version
          chmod +x ./build/install/jbang/bin/jbang
          ./build/install/jbang/bin/jbang init --template=cli helloworld.java
          ./build/install/jbang/bin/jbang --verbose helloworld.java
          rm helloworld.java
      - name: smoke-quarkus-test
        run: |
          java -version
          chmod +x ./build/install/jbang/bin/jbang
          ./build/install/jbang/bin/jbang init --template=qcli qcli.java
          ./build/install/jbang/bin/jbang --fresh --verbose qcli.java
          rm qcli.java
      - name: smoke-quarkus-diff-version-test
        run: |
          java -version
          chmod +x ./build/install/jbang/bin/jbang
          ./build/install/jbang/bin/jbang init --template=qcli qcli.java
          ./build/install/jbang/bin/jbang --fresh --verbose --java 17 qcli.java
          rm qcli.java
      - name: integration-test-non-windows
        ## karate can't run on java 17 or higher due to missing nashorn
        if: runner.os != 'Windows' && matrix.java < 17
        run: |
          export PATH=`pwd`/build/install/jbang/bin:$PATH
          cd build/itests
          chmod +x ./test_suite.sh
          chmod +x ./itests.sh
          ./test_suite.sh
          ./itests.sh
      - name: add-to-path
        run: echo ""../build/install/jbang/bin"" >> $env:GITHUB_PATH
      - name: integration-test-windows
        if: runner.os == 'Windows' && matrix.java < 17
        working-directory: itests
        run: |
          echo ""::add-matcher::.github/karatewindows-matcher.json"" 
          .\itests.cmd
          echo ""::remove-matcher owner=karate-windows::""

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '19 18 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@4355270be187e1b672a7a1c7c7bae5afdc1ab94a # v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@4355270be187e1b672a7a1c7c7bae5afdc1ab94a # v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@4355270be187e1b672a7a1c7c7bae5afdc1ab94a # v3

---
name: install-tests
on:
   workflow_dispatch:

jobs:
  macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
    - name: Remove Java
      run: |
        sudo rm -rf /Library/Java/*
        sudo rm -rf /Users/runner/hostedtoolcache/Java*
    - name: check jbang does not exist
      run: |
        if command -v jbang; then
          echo ""jbang already exists!""
          exit 1
        fi
    - name: install jbang
      run: |
        curl -Ls https://sh.jbang.dev | bash -s - app setup
        source ~/.zshrc
        if ! command -v jbang; then
          echo ""jbang not found after install!""
          exit 1
        fi
    - name: run jbang no java
      run: |
        source ~/.zshrc
        jbang init -t cli testcli.java
        ./testcli.java
    - name: run jbang java 17
      run: |
        jbang init -t cli testcli.java
        jbang --java 17 testcli.java

---
on:
  release:
    types:
      - published

name: release-3rdparty
jobs:   
  build:
    runs-on: ubuntu-latest
    name: build-and-testing
    env:
      JRELEASER_SDKMAN_CONSUMER_KEY: ${{ secrets.SDKMAN_CONSUMER_KEY }}
      JRELEASER_SDKMAN_CONSUMER_TOKEN: ${{ secrets.SDKMAN_CONSUMER_TOKEN }}
      JRELEASER_TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
      JRELEASER_TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
      JRELEASER_TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      JRELEASER_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      JRELEASER_GITHUB_TOKEN: ${{ secrets.BREW_GITHUB_TOKEN }}
      JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
      JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
      JRELEASER_NEXUS2_USERNAME: ${{ secrets.OSSRH_USERNAME}}
      JRELEASER_NEXUS2_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      JRELEASER_VERSION: 1.9.0
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0
      - name: install-java11
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: build-gradle
        run: ./gradlew --no-daemon clean build -x test --build-cache --scan -s
      - name: version extract
        id: version
        run: |
          RELEASE_VERSION=`cat build/tmp/version.txt`
          echo ""::set-output name=RELEASE_VERSION::$RELEASE_VERSION""
      - name: jreleaser publish
        continue-on-error: true
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_PROJECT_VERSION: ${{steps.version.outputs.RELEASE_VERSION}}
        with:
          version: ${{ env.JRELEASER_VERSION }}
          arguments: publish
          setup-java: false
      - name: JReleaser publish output
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: jreleaser-publish
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
      - name: spec
        continue-on-error: true
        env:
          BREW_GITHUB_TOKEN: ${{ secrets.BREW_GITHUB_TOKEN }}
          BREW_USER: ${{ secrets.BREW_USER }}
        run: ./misc/updatespec.sh
      - name: jreleaser announce
        continue-on-error: true
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_PROJECT_VERSION: ${{steps.version.outputs.RELEASE_VERSION}}
        with:
          version: ${{ env.JRELEASER_VERSION }}
          arguments: announce
          setup-java: false
      - name: JReleaser announce output
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: jreleaser-announce
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
      - name: upload-choco
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: build-choco
          path: build/choco
  choco:
    needs: build
    runs-on: windows-latest
    name: publish-choco
    continue-on-error: true
    steps:
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
        with:
          name: build-choco
          path: build/choco
      - uses: actions/setup-dotnet@608ee757cfcce72c2e91e99aca128e0cae67de87 # v1
        with:
          dotnet-version: '2.2.204' # SDK Version to use.
      - name: choco-build
        run: |
          powershell
          choco pack build/choco/jbang.nuspec
      - name: github-nuget
        continue-on-error: true
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          powershell
          dotnet nuget source add -username maxandersen --password $GITHUB_TOKEN --store-password-in-clear-text --name github ""https://nuget.pkg.github.com/maxandersen/index.json""
          dotnet nuget push $(ls *.nupkg | % {$_.FullName}) --source github
      - name: choco-publish
        continue-on-error: true
        run: |
          powershell
          choco apikey -k ${{ secrets.CHOCO_API_KEY }} -source https://push.chocolatey.org/
          choco push $(ls *.nupkg | % {$_.FullName}) -s https://push.chocolatey.org/

---
## have to upload via this seperate workflow
## to avoid limitations of PR's from forked
## repos which wont have write access by default.
 
name: report
on:
  workflow_run:
    workflows: [ci-build]
    types: [completed]
    
permissions:
  checks: write

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:
      - name: Download Test Report
        uses: dawidd6/action-download-artifact@268677152d06ba59fcec7a7f0b5d961b6ccd7e1e # v2
        with:
          name: junit-test-results
          workflow: ${{ github.event.workflow.id }}
          run_id: ${{ github.event.workflow_run.id }}
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@150e2f992e4fad1379da2056d1d1c279f520e058 # v3
        with:
          commit: ${{github.event.workflow_run.head_sha}}
          report_paths: '**/build/test-results/test/TEST-*.xml'
---
on:
  push:
    tags:
      - 'v*'

name: tag-and-release
jobs:
  build:
    runs-on: ubuntu-latest
    name: build-and-testing
    env:
      JRELEASER_SDKMAN_CONSUMER_KEY: ${{ secrets.SDKMAN_CONSUMER_KEY }}
      JRELEASER_SDKMAN_CONSUMER_TOKEN: ${{ secrets.SDKMAN_CONSUMER_TOKEN }}
      JRELEASER_TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
      JRELEASER_TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
      JRELEASER_TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      JRELEASER_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
      JRELEASER_GITHUB_TOKEN: ${{ secrets.BREW_GITHUB_TOKEN }}
      JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
      JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
      JRELEASER_NEXUS2_USERNAME: ${{ secrets.OSSRH_USERNAME}}
      JRELEASER_NEXUS2_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      JRELEASER_VERSION: 1.5.1
    steps:
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          fetch-depth: 0
      - name: install-java11
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: build-gradle
        run: ./gradlew --no-daemon clean build installDist publish --build-cache --scan -s
      - name: integration-test
        run: |
          export PATH=`pwd`/build/install/jbang/bin:$PATH
          pastdir=`pwd`
          cd itests
          ./test_suite.sh
          ./itests.sh
          cd $pastdir
      - name: version extract
        id: version
        run: |
          RELEASE_VERSION=`cat build/tmp/version.txt`
          echo ""::set-output name=RELEASE_VERSION::$RELEASE_VERSION""
      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env: 
          JRELEASER_PROJECT_VERSION: ${{steps.version.outputs.RELEASE_VERSION}}
        with:
          version: ${{ env.JRELEASER_VERSION }}
          arguments: release
          setup-java: false
      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

---
"
Y4er;WebLogic-Shiro-shell;Y4er/WebLogic-Shiro-shell;https://github.com/Y4er/WebLogic-Shiro-shell;https://api.github.com/repos/Y4er/WebLogic-Shiro-shell;master;19/08/2020 05:34;12/04/2024 04:12;FALSE;
TrianguloY;UrlChecker;TrianguloY/UrlChecker;https://github.com/TrianguloY/UrlChecker;https://api.github.com/repos/TrianguloY/UrlChecker;master;28/09/2020 20:08;21/04/2024 00:31;TRUE;"# This action builds the alpha version as apk on a password protected zip,
# and uploads it to the alpha release.
# Adapted from https://github.com/amirisback/automated-build-android-app-with-github-action
name: Build alpha apk

on:
  # Triggers the workflow on push events for the master branch
  # push:
  #   branches:
  #     - master

  # Run this workflow manually from the Actions tab
  workflow_dispatch:

# parameters
env:
  VARIANT: alpha
  TAG: alpha
  ZIP: app-alpha.zip

permissions:
  contents: write # need to update tag and release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repository files
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set gradlew as executable
        # for some reason the gradle-build-action doesn't do this automatically
        run: chmod +x ./gradlew

      - name: Build & assemble with gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: >
            build
            assemble${{ env.VARIANT }}

      - name: Zip ${{ env.VARIANT }} apk as ${{ env.ZIP }}
        # just remove the password here if you want to build the apk yourself instead of sponsoring me and getting it as a benefit :(
        run: zip -j -P ${{ secrets.ALPHA_PASS }} ${{ env.ZIP }} app/build/outputs/apk/${{ env.VARIANT }}/app-${{ env.VARIANT }}.apk

      - name: Update ${{ env.TAG }} tag to current commit
        # equivalent to EndBug/latest-tag@latest but simpler
        run: |
          git tag --force ${{ env.TAG }}
          git push --force origin tag ${{ env.TAG }}

      - name: Upload ${{ env.ZIP }} to ${{ env.TAG }} release
        # equivalent to softprops/action-gh-release@v1 but using official cli
        run: |
          gh release upload ${{ env.TAG }} ${{ env.ZIP }} --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
# This action updates assets files
name: Assets updater

on:
  # weekly
  schedule:
    - cron: '0 0 * * SUN'

  # manually
  workflow_dispatch:

permissions:
  contents: write # need to update branches
  pull-requests: write # need to create PRs
  repository-projects: read  # to edit PRs (see https://github.com/cli/cli/issues/6274)


jobs:
  update:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:

          # ClearURL database
          - fileName: ""data.minify.json""
            fileFolder: ""./app/src/main/assets/""
            fileUrl: ""https://rules2.clearurls.xyz/data.minify.json""
            hashUrl: ""https://rules2.clearurls.xyz/rules.minify.hash""

        # - fileName: ""...""
        #   fileFolder: ""...""
        #   fileUrl: ""...""
        #   hashUrl: ""...""

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # need to fetch other branches

      - name: Git config
        run: |
          git config user.name 'github-actions'
          git config user.email 'github-actions@github.com'

      - name: Run script
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          
          # inputs
          FILE_NAME=""${{ matrix.fileName }}""
          FILE_FOLDER=""${{ matrix.fileFolder }}""
          FILE_URL=""${{ matrix.fileUrl }}""
          HASH_URL=""${{ matrix.hashUrl }}""
          
          # dynamic inputs
          BRANCH=""actions/assets/$FILE_NAME""
          FILE_PATH=""$FILE_FOLDER$FILE_NAME""
          
          # checkout branch (create if doesn't exist)
          git checkout ""$BRANCH"" || git checkout -b ""$BRANCH""
          
          # get current hash
          OLD_HASH=$(sha256sum ""$FILE_PATH"" | cut -d' ' -f1)
          echo ""Current hash: $OLD_HASH""
          
          # get remote hash
          REMOTE_HASH=$(curl ""$HASH_URL"")
          echo ""Remote hash: $REMOTE_HASH""
          
          # compare hashes
          if [ ""$REMOTE_HASH"" = ""$OLD_HASH"" ]; then
              echo ""Up-to date""
              exit 0
          fi
          
          # download new file
          curl ""$FILE_URL"" -o ""$FILE_PATH""
          
          # get new hash
          NEW_HASH=$(sha256sum ""$FILE_PATH"" | cut -d' ' -f1)
          echo ""New hash: $NEW_HASH""
          
          # check downloaded hash
          if [ ""$REMOTE_HASH"" != ""$NEW_HASH"" ]; then
              echo ""[ERROR] Downloaded file hash doesn't match, aborted.""
              exit 1
          fi
          
          # create and push commit with the new file
          # at this point we know the new file is different from the last because hashes are different (old==remote!=new)
          git add ""$FILE_PATH""
          git commit -m ""
          [action] Updated $FILE_NAME
          
          Url: $FILE_URL
          Hash url: $HASH_URL
          
          Old hash: $OLD_HASH
          New hash: $NEW_HASH""
          git push --set-upstream origin ""$BRANCH""
          
          # prepare pr
          TITLE=""updated $FILE_NAME""
          
          # create details diff
          if [[ $FILE_NAME == *.json ]]; then
            echo ""Including formatted json diff""
          
            # download jd
            wget --no-clobber -O /tmp/jd https://github.com/josephburnett/jd/releases/latest/download/jd-amd64-linux
            chmod +x /tmp/jd
          
            # create diff
            DIFF=""---
          Formatted diff:
          \`\`\`diff
          $(git difftool --no-prompt --extcmd=""/tmp/jd"" master:$FILEPATH $FILEPATH)
          \`\`\`""
          fi
          
          BODY=""File $FILE_PATH was updated
          $DIFF
          ---
          This is an automatic PR run from a [github action](../actions/workflows/assets-updater.yml)""
          
          if [ ""$(gh pr list --head ""$BRANCH"" --json number --jq length)"" = ""0"" ]; then
            echo ""Creating PR...""
            gh pr create --label 'action' --title ""updated $FILE_NAME"" --body ""$BODY""
          else
            echo ""Updating PR""
            gh pr edit --title ""updated $FILE_NAME"" --body ""$BODY""
          fi

---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""master"" ]
  schedule:
    - cron: '33 9 * * 6'

# Cancel running actions if new commits are added
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v4

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@v4
        timeout-minutes: 5
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""master"" ]
  schedule:
    - cron: '37 3 * * 6'

# Cancel running actions if new commits are added
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # use java 17, CodeQL is not properly detecting the version
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.
          config-file: ./.github/codeql-config.yml

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality


      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo ""Run, Build Application using script""
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

---
# This action will send a comment to the pr for download the built apk.
# Needs to be as a separate action, artifacts are not available on the action used to upload them
name: Comment Artifact URL on PR

on:
  workflow_run:
    workflows:
      - ""Validate gradle build test""
    types:
      - ""completed""

permissions:
  actions: read # need to read the artifacts url
  pull-requests: write # need to write the comment

jobs:
  comment-on-pr:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:

      - name: Post url to artifact
        env:
          GITHUB_TOKEN: ${{ github.token }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          CURRENT_JOB_ID: ${{ github.run_id }}
          PREVIOUS_JOB_ID: ${{ github.event.workflow_run.id }}
          PREVIOUS_SUITE_ID: ${{ github.event.workflow_run.check_suite_id }}
        run: |

          # get artifacts
          read PR_NUMBER ARTIFACT_ID EXPIRES_AT <<< $(gh api ""/repos/$OWNER/$REPO/actions/runs/$PREVIOUS_JOB_ID/artifacts"" --jq '""\(.artifacts[0].name) \(.artifacts[1].id) \(.artifacts[1].expires_at)""')
          if [ ""$ARTIFACT_ID"" == ""null"" ]; then
            echo ""No artifacts, (probably) not a PR, exiting""
            exit
          fi
          echo ""PR NUMBER: $PR_NUMBER""
          echo ""ARTIFACT ID: $ARTIFACT_ID""
          echo ""EXPIRES_AT: $EXPIRES_AT""

          # post link comment
          gh api ""/repos/$OWNER/$REPO/issues/$PR_NUMBER/comments"" -F body=@- <<EOF
          This PR builds correctly, here is the generated apk.
          This unsigned version can be installed alongside the original app and should only be used for testing the changes, not for daily usage.
          
          | [Download testing apk](https://github.com/$OWNER/$REPO/suites/$PREVIOUS_SUITE_ID/artifacts/$ARTIFACT_ID) |
          | - |
          
          
          You must be logged in for the link to work.
          The link will expire at $EXPIRES_AT.
          
          <hr>
          
          <sub>This is an automatic comment created by a [Github Action](https://github.com/$OWNER/$REPO/actions/runs/$CURRENT_JOB_ID)</sub>
          EOF
---
# Made with love
#
# This workflow uses actions that are not certified by GitHub.
#
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# see https://github.com/actions/labeler
# for more informations
#
# For most projects, this workflow file will not need changing; you simply need:
# 1 - commit this file to your repository into the '.github/workflows' folder.
# 2 - commit the 'labeler.yml' configuration file into the '.github' folder.
#
# You probably want to add, replace or delete labels,
# remember to check this configuration file.
#

name: ""Pull Request Labeler""
on:
- pull_request_target

jobs:
  triage:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/labeler@v5
      with:
    # Check if you have enabled tokens for your repository
        repo-token: ""${{ secrets.GITHUB_TOKEN }}""
    # This removes the label if the change(s) are undone in the PR
        sync-labels: true
        

---
name: Update dynamic files

# When pushing to the master branch
on:
  push:
    branches:
      - master

# Cancel running actions if new commits are added
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# parameters
env:
  TAG: latest
  SHIELDS: shields.json

permissions:
  contents: write # need to update tag and release

# Workflow in ubuntu
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Get the repository files
        uses: actions/checkout@v4

      - name: Create ${{ env.SHIELDS }} file
        run: |
          cat <<EOF | tee ${{ env.SHIELDS }}
          {
            ""version"": ""v$(sed -ne ""s/ *versionName \+['\""]\([^'\""]*\)['\""]/\1/p"" app/build.gradle)""
          }
          EOF

      - name: Update ${{ env.TAG }} tag to current commit
        # equivalent to EndBug/latest-tag@latest but simpler
        run: |
          git tag --force ${{ env.TAG }}
          git push --force origin tag ${{ env.TAG }}

      - name: Upload ${{ env.SHIELDS }} to ${{ env.TAG }} release
        # equivalent to softprops/action-gh-release@v1 but using official cli
        run: |
          gh release upload ${{ env.TAG }} ${{ env.SHIELDS }} --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
# This actions validates the gradle files and runs a build test to ensure the app is not corrupted
# if succeeded and the source is a pull request, builds an evaluation apk
name: Validate gradle build test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# Cancel running actions if new commits are added
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

# parameters
env:
  VARIANT: evaluation
  NAME: URLCheck_evaluation.apk

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Change wrapper permissions
        # for some reason the gradle-build-action doesn't do this automatically
        run: chmod +x ./gradlew

      - name: Build & test with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: >
            build
            test

      # the following steps will only run for PRs

      - name: Generate apk
        if: ${{ github.event_name == 'pull_request' }}
        uses: gradle/gradle-build-action@v3
        with:
          arguments: >
            assemble${{ env.VARIANT }}

      - name: Upload apk as artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          path: ./app/build/outputs/apk/${{ env.VARIANT }}/app-${{ env.VARIANT }}.apk
          name: ${{ env.NAME }}
          retention-days: 14

      - name: Upload PR id as artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          path: /dev/null
          name: ${{ github.event.number }}
          retention-days: 1

---
name: Validate Triple-T store files
# use it on your own project: https://github.com/TrianguloY/action-validate-Triple-T

on:
  # run this workflow on master branch push
  push:
    branches:
      - master
  # run this workflow on master pull requests
  pull_request:
    branches:
      - master

# Cancel running actions if new commits are added
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validation:
    runs-on: ubuntu-latest
    steps:
      - name: Download project files
        uses: actions/checkout@v4

      - name: Validate Triple-T files
        uses: TrianguloY/action-validate-Triple-T@v1
        with:
          ignore: 'Changelog too large'

---
"
x-ream;sqli;x-ream/sqli;https://github.com/x-ream/sqli;https://api.github.com/repos/x-ream/sqli;master;19/08/2020 16:02;17/04/2024 12:30;FALSE;
cassandre-tech;cassandre-trading-bot;cassandre-tech/cassandre-trading-bot;https://github.com/cassandre-tech/cassandre-trading-bot;https://api.github.com/repos/cassandre-tech/cassandre-trading-bot;development;07/02/2020 00:11;20/04/2024 11:45;TRUE;"name: Branch push or pull request

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ================================================================================================================
      - name: JDK 17 Setup
        uses: actions/setup-java@v4.1.0
        with:
          distribution: 'temurin'
          java-version: '17'

      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v4

      # ================================================================================================================
      - name: Build, run tests and deploy locally
        id: maven
        run: |
          mvn install -Dgpg.skip
          echo ""::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)""

      # ================================================================================================================
      - name: Upload codacy coverage results
        continue-on-error: true
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report \
          --project-token ${{ secrets.CODACY_API_TOKEN }} \
          --language Java \
          --coverage-reports spring-boot-starter/autoconfigure/target/site/jacoco/jacoco.xml \
          --coverage-reports spring-boot-starter-test/autoconfigure/target/site/jacoco/jacoco.xml \
          --coverage-reports spring-boot-starter-api/spring-boot-starter-api-graphql/autoconfigure/target/site/jacoco/jacoco.xml

      # ================================================================================================================
      - name: Test Cassandre trading bot maven archetype - basic strategy
        run: |
          mvn -B archetype:generate \
            -DarchetypeGroupId=tech.cassandre.trading.bot \
            -DarchetypeArtifactId=cassandre-trading-bot-spring-boot-starter-basic-archetype \
            -DarchetypeVersion=${{ steps.maven.outputs.version }} \
            -DgroupId=com.example \
            -DartifactId=archetype-test-basic \
            -Dversion=1.0-SNAPSHOT \
            -Dpackage=com.example
          mvn -f archetype-test-basic/pom.xml test

      # ================================================================================================================
      # Testing that the graphql starter is working correctly.
      - name: Start a postgres server and restore a database from production
        run: |
          docker pull library/postgres:13-alpine
          docker run -d \
                  --name postgres \
                  -p 5432:5432 \
                  -e POSTGRES_DB=cassandre_trading_bot \
                  -e POSTGRES_USER=cassandre_trading_bot \
                  -e POSTGRES_PASSWORD=cassandre_trading_bot_password \
                  -v $(pwd)/util/test/api/graphql/dump_cassandre_trading_bot.sql:/docker-entrypoint-initdb.d/dump_cassandre_trading_bot.sql \
                  library/postgres:13-alpine

      - name: Creating a trading bot and configure it for the postgres database
        run: |
          mvn -B archetype:generate \
            -DarchetypeGroupId=tech.cassandre.trading.bot \
            -DarchetypeArtifactId=cassandre-trading-bot-spring-boot-starter-basic-archetype \
            -DarchetypeVersion=${{ steps.maven.outputs.version }} \
            -DgroupId=com.example \
            -DartifactId=archetype-test-api-graphql \
            -Dversion=1.0-SNAPSHOT \
            -Dpackage=com.example
          sed 's/<dependencies>/<dependencies>\r\n<!--Postgresql driver -->\r\n<dependency>\r\n<groupId>org.postgresql<\/groupId>\r\n<artifactId>postgresql<\/artifactId>\r\n<version>42.2.24<\/version>\r\n<\/dependency>\r\n<!-- Postgresql driver -->/g' archetype-test-api-graphql/pom.xml > archetype-test-api-graphql.xml
          cat archetype-test-api-graphql.xml > archetype-test-api-graphql/pom.xml
          cp util/test/api/graphql/application.properties archetype-test-api-graphql/src/main/resources/
          cp util/test/api/graphql/user-trade.tsv archetype-test-api-graphql/src/main/resources/
          mvn -f archetype-test-api-graphql/pom.xml spring-boot:run &
          sleep 60

      - name: Runs graphQL tests.
        run: |
          cd util/test/api/graphql
          npm install --save-dev jest isomorphic-fetch
          npm run test
---
name: Publish snapshot and website

on:
  push:
    branches:
      - ""development""

permissions:
  id-token: ""write""
  contents: ""write""
  packages: ""write""
  pull-requests: ""read""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ================================================================================================================
      - name: JDK 17 Setup
        uses: actions/setup-java@v4.1.0
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v4

      # ================================================================================================================
      - name: GPG Setup
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo ""$GPG_PRIVATE_KEY"" > private.asc
          gpg --import --batch private.asc

      # ================================================================================================================
      - name: Build, package and deploy to Maven central
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ossrh credentials.
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          # GPG.
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn deploy -B -Dgpg.passphrase=${GPG_PASSPHRASE}

      # ================================================================================================================
      - name: Retrieve the latest release published on Github
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        id: getLatestRelease
        with:
          repository: ${{ github.repository }}

      # ================================================================================================================
      - name: Install Go to generate the graphQL documentation with gqldoc
        uses: actions/setup-go@v5
        with:
          go-version: '^1.17.3'

      # ================================================================================================================
      - name: Add the GraphQL schema and its documentation to the website
        run: |
          cp spring-boot-starter-api/spring-boot-starter-api-graphql/autoconfigure/src/main/resources/schema/*.graphqls docs/docs/.vuepress/public/api/graphql/definition
          go install github.com/Code-Hex/gqldoc/cmd/gqldoc@v0.0.6
          gqldoc -s ""docs/docs/.vuepress/public/api/graphql/definition/*.graphqls"" -o ./docs/docs/tutorial/graphql-api-documentation
          gqldoc -s ""docs/docs/.vuepress/public/api/graphql/definition/*.graphqls"" -o ./docs/docs/fr/tutorial/graphql-api-documentation

      # ================================================================================================================
        #- name: Install vuepress, set release number, and build the website
          #  run: |
          #  find . -type f -name ""*.md"" -exec sed -i 's/CASSANDRE_LATEST_RELEASE/${{ steps.getLatestRelease.outputs.release }}/g' {} \;
          #  yarn --cwd docs add -D vuepress@next
          #  yarn --cwd docs install
        # yarn --cwd docs docs:build docs

      # ================================================================================================================
        #- name: Deploy the website to github pages
        #  uses: JamesIves/github-pages-deploy-action@v4.4.3
          # with:
          #   branch: gh-pages
          #  folder: docs/docs/.vuepress/dist
          #  commit-message: ""Website deployment""
        #  clean: true

---
name: Release creation

on:
  push:
    tags:
      - '*'

permissions:
  id-token: ""write""
  contents: ""write""
  packages: ""write""
  pull-requests: ""read""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ================================================================================================================
      - name: JDK 17 Setup
        uses: actions/setup-java@v4.1.0
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # ================================================================================================================
      - name: Retrieve the sources
        uses: actions/checkout@v4

      # ================================================================================================================
      - name: GPG Setup
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo ""$GPG_PRIVATE_KEY"" > private.asc
          gpg --import --batch private.asc

      # ================================================================================================================
      - name: Build, package and deploy to Maven central
        id: maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ossrh credentials.
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          # GPG.
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mvn deploy -DskipTests=true -B -Dgpg.passphrase=${GPG_PASSPHRASE}
          echo ""::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)""

      # ================================================================================================================
      - name: Create the release in GitHub
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: ${{ steps.maven.outputs.version }}
          draft: false
          prerelease: false

      # ================================================================================================================
      - name: Publish the announce on Twitter
        continue-on-error: true
        uses: ethomson/send-tweet-action@v1
        env:
          TWITTER_CONSUMER_API_KEY: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
          TWITTER_CONSUMER_API_SECRET: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        with:
          status: ""Cassandre trading bot ${{ steps.maven.outputs.version }} released - More information here: https://github.com/cassandre-tech/cassandre-trading-bot/releases/tag/${{ steps.maven.outputs.version }}""
          consumer-key: ${{ secrets.TWITTER_CONSUMER_API_KEY }}
          consumer-secret: ${{ secrets.TWITTER_CONSUMER_API_SECRET }}
          access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}

---
"
CaffeineMC;lithium-fabric;CaffeineMC/lithium-fabric;https://github.com/CaffeineMC/lithium-fabric;https://api.github.com/repos/CaffeineMC/lithium-fabric;develop;30/11/2019 03:41;20/04/2024 20:43;TRUE;"name: gradle-ci

on: [ push ]

jobs:
  build:
      runs-on: ubuntu-latest

      steps:
          -   uses: actions/checkout@v2
          -   name: Set up JDK 21
              uses: actions/setup-java@v2
              with:
                  distribution: 'adopt'
                  java-version: 21
          -   name: Grant execute permission for gradlew
              run: chmod +x gradlew
          -   name: Build with Gradle
              run: ./gradlew build

          -   name: run test server
              timeout-minutes: 5
              run: ./gradlew runAutoTestServer

          -   name: Upload build artifacts
              uses: actions/upload-artifact@v1
              with:
                  name: build-artifacts
                  path: build/libs
---
name: release-artifacts

on:
  release:
     types:
       - published

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 21
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Upload assets to CurseForge
        run: ./gradlew build
        env:
          BUILD_RELEASE: ${{ github.event.prerelease == false }}
      - name: Upload assets to GitHub
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'build/libs/*.jar;!build/libs/*-dev.jar;LICENSE'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

---
name: gradle-ci

on: [ pull_request ]

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            -   uses: actions/checkout@v2
            -   name: Set up JDK 17
                uses: actions/setup-java@v2
                with:
                    distribution: 'adopt'
                    java-version: 17
            -   name: Grant execute permission for gradlew
                run: chmod +x gradlew
            -   name: Build with Gradle
                run: ./gradlew build

            -   name: run test server
                timeout-minutes: 5
                run: ./gradlew runAutoTestServer
---
"
anirudhmalik;xhunter;anirudhmalik/xhunter;https://github.com/anirudhmalik/xhunter;https://api.github.com/repos/anirudhmalik/xhunter;master;26/08/2020 08:42;22/04/2024 12:50;FALSE;
Nalen98;AngryGhidra;Nalen98/AngryGhidra;https://github.com/Nalen98/AngryGhidra;https://api.github.com/repos/Nalen98/AngryGhidra;master;26/08/2020 14:39;16/04/2024 02:05;FALSE;
Maskhe;FastjsonScan;Maskhe/FastjsonScan;https://github.com/Maskhe/FastjsonScan;https://api.github.com/repos/Maskhe/FastjsonScan;master;31/08/2020 05:07;22/04/2024 11:29;FALSE;
stargate;stargate;stargate/stargate;https://github.com/stargate/stargate;https://api.github.com/repos/stargate/stargate;main;18/08/2020 21:51;22/04/2024 09:18;TRUE;"# @author Ivan Senic
name: Stargate APIs V2

# runs on
# * pushes and pull requests on the ""main"" (Stargate v2)
# * manual trigger
on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]
  workflow_dispatch:

# cancel same workflows in progress for pull request branches
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# Jobs structure:
#
# 1. Builds the coordinator without tests in order to get snapshot jar versions
# 2. Then 4 jobs in parallel
#  a) Build and test the sgv2-docsapi
#  b) Build coordinator docker images (x3)
# 3. Runs INT tests for [sgv2-docsapi] (x4 in parallel, C*3, C*4, dse)
# 4. Clean-up - deletes created docker image artifacts
jobs:

  # runs mvnw install for building the coordinator jars
  # caches the stargate-lib folder (needed for the docker images)
  # cached .m2/repository in order to pass SG snapshots to other jobs
  build-coordinator:
    name: Coordinator build
    runs-on: ubuntu-latest

    # max run time 10 minutes
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      # ensure snapshots from this build are used in next jobs
      - name: Cache Snapshots
        uses: actions/cache@v4
        id: cache-coordinator-snapshots
        env:
          cache-name: cache-coordinator-snapshots
        with:
          path: ~/.m2/repository
          key: snapshots-${{ github.sha }}
          restore-keys: |
            snapshots-

      - name: Cache Libs
        if: steps.cache-coordinator-snapshots.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        id: cache-coordinator-libs
        env:
          cache-name: cache-coordinator-libs
        with:
          path: ./coordinator/stargate-lib
          key: stargate-lib-${{ github.sha }}

      - name: Build
        if: steps.cache-coordinator-snapshots.outputs.cache-hit != 'true'
        run: |
          cd coordinator/
          MAVEN_OPTS=""-Xmx4g"" ./mvnw -B -ntp install -P dse -DskipTests

  resolve-coordinator-docker:
    name: Resolve coordinator docker SHA
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.resolve.outputs.sha }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: resolve
        name: Resolve SHA
        run: |
          SHA=$(git log -n 1 --pretty=format:""%h"" -- coordinator/)
          echo ""Resolved commit SHA for coordinator docker image to $SHA""
          echo ""sha=${SHA}"" >> $GITHUB_OUTPUT

  # Builds C*3, C*4 and DSE coordinator images using matrix
  # Exports image to a file and then uploads it using action artifacts
  build-coordinator-docker:
    name: Docker image
    needs: [build-coordinator, resolve-coordinator-docker]
    runs-on: ubuntu-latest

    # max run time 10 minutes
    timeout-minutes: 10

    # image name needed only
    strategy:
      matrix:
        image: [ coordinator-4_0 , coordinator-3_11, coordinator-dse-68 ]

    steps:
      - uses: actions/checkout@v4

      - name: Cache docker image
        id: cache-docker-image
        uses: actions/cache@v4
        with:
          path: ${{ matrix.image }}-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
          key: docker-${{ matrix.image }}-${{ needs.resolve-coordinator-docker.outputs.sha }}

      - name: Restore Libs
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        id: cache-coordinator-libs
        env:
          cache-name: cache-coordinator-libs
        with:
          path: ./coordinator/stargate-lib
          key: stargate-lib-${{ github.sha }}

      - name: Set up QEMU
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      # same as in build_docker_images.sh
      # just builds a single image
      - name: Build Docker Image
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        run: |
          cd coordinator/
          LIBDIR=./tmp-${RANDOM}
          mkdir ${LIBDIR}
          cp ./stargate-lib/*.jar $LIBDIR
          cp ./stargate-lib/logback.xml $LIBDIR
          rm ${LIBDIR}/persistence*.jar
          docker buildx build --target ${{ matrix.image }} --build-arg LIBDIR=""$LIBDIR"" -t stargateio/${{ matrix.image }}:${{ needs.resolve-coordinator-docker.outputs.sha }} --load .

      # this will export a file in form image-commitsha.tar
      - name: Export Docker Image
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        run: |
          docker save --output ${{ matrix.image }}-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar stargateio/${{ matrix.image }}:${{ needs.resolve-coordinator-docker.outputs.sha }}

  # runs unit tests for the sgv2-docsapi
  build:
    name: Unit tests
    needs: build-coordinator
    runs-on: ubuntu-latest

    # max run time 15 minutes
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Restore Snapshots
        uses: actions/cache@v4
        id: restore-coordinator-snapshots
        env:
          cache-name: cache-coordinator-snapshots
        with:
          path: ~/.m2/repository
          key: snapshots-${{ github.sha }}

      - name: Build & Test Stargate v2 Quarkus-based APIs
        run: |
          cd apis/
          ./mvnw -B -ntp clean test

  # runs int tests for the sgv2-docsapi
  # supports downloading and importing the built docker image
  int-tests:
    name: Integration tests
    needs: [ resolve-coordinator-docker, build-coordinator-docker, build ]
    runs-on: ubuntu-latest

    # max run time 45 minutes
    timeout-minutes: 45

    strategy:

      # let all tests run, can find multiple failures in different apis
      fail-fast: false

      # props:
      # name - human-readable name
      # profile - what profile should be activated when running int tests
      # image-artifact (optional) - name of the artifact containing the image file
      # image-file - file name of the image to import (must be in the artifact)
      # image - final image name to use when running int tests (-Dtesting.containers.stargate-image)
      matrix:
        project: [ sgv2-docsapi, sgv2-graphqlapi, sgv2-restapi ]
        name: [ cassandra-40, cassandra-311, dse-68 ]
        include:
          - name: cassandra-40
            profile: cassandra-40
            repository-login: false
            image-cache-key: docker-coordinator-4_0-${{ needs.resolve-coordinator-docker.outputs.sha }}
            image-file: coordinator-4_0-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
            image: stargateio/coordinator-4_0:${{ needs.resolve-coordinator-docker.outputs.sha }}

          - name: cassandra-311
            profile: cassandra-311
            repository-login: false
            image-artifact: img-coordinator-3_11-${{ github.sha }}
            image-cache-key: docker-coordinator-3_11-${{ needs.resolve-coordinator-docker.outputs.sha }}
            image-file: coordinator-3_11-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
            image: stargateio/coordinator-3_11:${{ needs.resolve-coordinator-docker.outputs.sha }}

          - name: dse-68
            profile: dse-68
            repository-login: false
            image-cache-key: docker-coordinator-dse-68-${{ needs.resolve-coordinator-docker.outputs.sha }}
            image-file: coordinator-dse-68-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
            image: stargateio/coordinator-dse-68:${{ needs.resolve-coordinator-docker.outputs.sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore docker image
        uses: actions/cache@v4
        with:
          path: ${{ matrix.image-file }}
          key: ${{ matrix.image-cache-key }}

      # loads the image from the .tar
      - name: Load image
        run: docker load --input ${{ matrix.image-file }}

      - name: Restore Snapshots
        uses: actions/cache@v4
        id: restore-coordinator-snapshots
        env:
          cache-name: cache-coordinator-snapshots
        with:
          path: ~/.m2/repository
          key: snapshots-${{ github.sha }}

      # run finally the int tests
      # runs dedicated project with -pl, but also picks depending projects with -am
      # container test for all apis
      - name: Integration Test
        env:
          CONTAINER_TEST: true
        run: |
          cd apis/
          ./mvnw -B -ntp verify -DskipUnitTests -pl ${{ matrix.project }} -am -P ${{ matrix.profile }} -Dquarkus.container-image.build=$CONTAINER_TEST -Dtesting.containers.stargate-image=${{ matrix.image }}


---
# @author Jeff Carpenter
name: Stargate APIs V2.1

# runs on
# * pushes and pull requests on the ""v2.1""
# * manual trigger
on:
  push:
    branches: [ ""v2.1"" ]
  pull_request:
    branches: [ ""v2.1"" ]
  workflow_dispatch:

# cancel same workflows in progress for pull request branches
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/v2.1' }}

# Jobs structure:
#
# 1. Builds the coordinator without tests in order to get snapshot jar versions
# 2. Then 4 jobs in parallel
#  a) Build and test the sgv2-docsapi
#  b) Build coordinator docker images (x3)
# 3. Runs INT tests for [sgv2-docsapi] (x4 in parallel, C*3, C*4, dse)
# 4. Clean-up - deletes created docker image artifacts
jobs:

  # runs mvnw install for building the coordinator jars
  # caches the stargate-lib folder (needed for the docker images)
  # cached .m2/repository in order to pass SG snapshots to other jobs
  build-coordinator:
    name: Coordinator build
    runs-on: ubuntu-latest

    # max run time 10 minutes
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      # ensure snapshots from this build are used in next jobs
      - name: Cache Snapshots
        uses: actions/cache@v4
        id: cache-coordinator-snapshots
        env:
          cache-name: cache-coordinator-snapshots
        with:
          path: ~/.m2/repository
          key: snapshots-${{ github.sha }}
          restore-keys: |
            snapshots-

      - name: Cache Libs
        if: steps.cache-coordinator-snapshots.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        id: cache-coordinator-libs
        env:
          cache-name: cache-coordinator-libs
        with:
          path: ./coordinator/stargate-lib
          key: stargate-lib-${{ github.sha }}

      - name: Build
        if: steps.cache-coordinator-snapshots.outputs.cache-hit != 'true'
        run: |
          cd coordinator/
          MAVEN_OPTS=""-Xmx4g"" ./mvnw -B -ntp install -P dse -DskipTests

  resolve-coordinator-docker:
    name: Resolve coordinator docker SHA
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.resolve.outputs.sha }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: resolve
        name: Resolve SHA
        run: |
          SHA=$(git log -n 1 --pretty=format:""%h"" -- coordinator/)
          echo ""Resolved commit SHA for coordinator docker image to $SHA""
          echo ""sha=${SHA}"" >> $GITHUB_OUTPUT

  # Builds C*4 and DSE coordinator images using matrix
  # Exports image to a file and then uploads it using action artifacts
  build-coordinator-docker:
    name: Docker image
    needs: [build-coordinator, resolve-coordinator-docker]
    runs-on: ubuntu-latest

    # max run time 10 minutes
    timeout-minutes: 10

    # image name needed only
    strategy:
      matrix:
        image: [ coordinator-4_0, coordinator-dse-68 ]

    steps:
      - uses: actions/checkout@v4

      - name: Cache docker image
        id: cache-docker-image
        uses: actions/cache@v4
        with:
          path: ${{ matrix.image }}-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
          key: docker-${{ matrix.image }}-${{ needs.resolve-coordinator-docker.outputs.sha }}

      - name: Restore Libs
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        id: cache-coordinator-libs
        env:
          cache-name: cache-coordinator-libs
        with:
          path: ./coordinator/stargate-lib
          key: stargate-lib-${{ github.sha }}

      - name: Set up QEMU
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      # same as in build_docker_images.sh
      # just builds a single image
      - name: Build Docker Image
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        run: |
          cd coordinator/
          LIBDIR=./tmp-${RANDOM}
          mkdir ${LIBDIR}
          cp ./stargate-lib/*.jar $LIBDIR
          cp ./stargate-lib/logback.xml $LIBDIR
          rm ${LIBDIR}/persistence*.jar
          docker buildx build --target ${{ matrix.image }} --build-arg LIBDIR=""$LIBDIR"" -t stargateio/${{ matrix.image }}:${{ needs.resolve-coordinator-docker.outputs.sha }} --load .

      # this will export a file in form image-commitsha.tar
      - name: Export Docker Image
        if: steps.cache-docker-image.outputs.cache-hit != 'true'
        run: |
          docker save --output ${{ matrix.image }}-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar stargateio/${{ matrix.image }}:${{ needs.resolve-coordinator-docker.outputs.sha }}

  # runs unit tests for the sgv2-docsapi
  build:
    name: Unit tests
    needs: build-coordinator
    runs-on: ubuntu-latest

    # max run time 15 minutes
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Restore Snapshots
        uses: actions/cache@v4
        id: restore-coordinator-snapshots
        env:
          cache-name: cache-coordinator-snapshots
        with:
          path: ~/.m2/repository
          key: snapshots-${{ github.sha }}

      - name: Build & Test Stargate v2 Quarkus-based APIs
        run: |
          cd apis/
          ./mvnw -B -ntp clean test

  # runs int tests for the sgv2-docsapi
  # supports downloading and importing the built docker image
  int-tests:
    name: Integration tests
    needs: [ resolve-coordinator-docker, build-coordinator-docker, build ]
    runs-on: ubuntu-latest

    # max run time 45 minutes
    timeout-minutes: 45

    strategy:

      # let all tests run, can find multiple failures in different apis
      fail-fast: false

      # props:
      # name - human-readable name
      # profile - what profile should be activated when running int tests
      # image-artifact (optional) - name of the artifact containing the image file
      # image-file - file name of the image to import (must be in the artifact)
      # image - final image name to use when running int tests (-Dtesting.containers.stargate-image)
      matrix:
        project: [ sgv2-docsapi, sgv2-graphqlapi, sgv2-restapi ]
        name: [ cassandra-40, dse-68 ]
        include:
          - name: cassandra-40
            profile: cassandra-40
            repository-login: false
            image-cache-key: docker-coordinator-4_0-${{ needs.resolve-coordinator-docker.outputs.sha }}
            image-file: coordinator-4_0-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
            image: stargateio/coordinator-4_0:${{ needs.resolve-coordinator-docker.outputs.sha }}

          - name: dse-68
            profile: dse-68
            repository-login: false
            image-cache-key: docker-coordinator-dse-68-${{ needs.resolve-coordinator-docker.outputs.sha }}
            image-file: coordinator-dse-68-${{ needs.resolve-coordinator-docker.outputs.sha }}.tar
            image: stargateio/coordinator-dse-68:${{ needs.resolve-coordinator-docker.outputs.sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Maven
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Restore docker image
        uses: actions/cache@v4
        with:
          path: ${{ matrix.image-file }}
          key: ${{ matrix.image-cache-key }}

      # loads the image from the .tar
      - name: Load image
        run: docker load --input ${{ matrix.image-file }}

      - name: Restore Snapshots
        uses: actions/cache@v4
        id: restore-coordinator-snapshots
        env:
          cache-name: cache-coordinator-snapshots
        with:
          path: ~/.m2/repository
          key: snapshots-${{ github.sha }}

      # run finally the int tests
      # runs dedicated project with -pl, but also picks depending projects with -am
      # container test for all apis
      - name: Integration Test
        env:
          CONTAINER_TEST: true
        run: |
          cd apis/
          ./mvnw -B -ntp verify -DskipUnitTests -pl ${{ matrix.project }} -am -P ${{ matrix.profile }} -Dquarkus.container-image.build=$CONTAINER_TEST -Dtesting.containers.stargate-image=${{ matrix.image }}


---
# Source: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#force-deleting-cache-entries
name: cleanup caches by a branch
on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Cleanup
        run: |
          gh extension install actions/gh-actions-cache
          
          REPO=${{ github.repository }}
          BRANCH=${{ github.ref }}

          echo ""Fetching list of cache key""
          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )

          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          echo ""Deleting caches...""
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
          done
          echo ""Done""
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
name: Coordinator Tests v2.1

# run on:
# - push on our branches (only code paths)
# - pull request (only code paths)
# - manual trigger

# paths filter:
# - any pom change
# - any change in the src/ in sub-modules
# - any maven related change (executables/wrapper)
# - the workflow itself
on:

  push:
    branches: [ ""v2.1"" ]
    paths:
      - 'coordinator/**pom.xml'
      - 'coordinator/**/src/**'
      - 'coordinator/**mvn**'
      - '.github/workflows/coordinator-test.yml'

  pull_request:
    branches: [ ""v2.1"" ]
    paths:
      - 'coordinator/**pom.xml'
      - 'coordinator/**/src/**'
      - 'coordinator/**mvn**'
      - '.github/workflows/coordinator-test.yml'

  workflow_dispatch:

# cancel same workflows in progress for pull request branches
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/v1' }}

# global env vars, available in all jobs and steps
env:
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  MAVEN_OPTS: '-Xmx4g'

jobs:

  unit-test:
    name: Coordinator unit tests
    runs-on: ubuntu-latest

    # max run time 45 minutes
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: actions/setup-java@v4
        name: Setup Java JDK
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'maven'

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      #  all unit tests should run without storage
      - name: Install CCM
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install ccm
          ccm list

      - name: Run unit tests
        run: |
          cd coordinator/
          ./mvnw -B -ntp clean test -P dse

  integration-test:
    name: Integration tests
    runs-on: ubuntu-latest

    # max run time 120 minutes
    timeout-minutes: 120

    strategy:
      # Defaults to ""true"" but let's let all runs finish
      # (see https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs)
      fail-fast: false
      matrix:
        backend: [ cassandra-40, cassandra-311, dse-68 ]
        include:
          - backend: cassandra-40
            build-profile:
            test-profile: -P it-cassandra-4.0

          - backend: cassandra-311
            build-profile:
            test-profile: -P it-cassandra-3.11

          - backend: dse-68
            build-profile: -P dse
            test-profile: -P dse -P it-dse-6.8

    steps:

      # Kill unused mono process that uses port 8084 starting on Ubuntu 20.04 GitHub runner
      # This is brute force but other attempts did not work
      #   see: https://github.com/actions/runner-images/issues/2821
      #   this doesn't seem to stop the process:
      #     sudo systemctl stop mono-xsp4.service || true
      #   neither does uninstalling mono:
      #     sudo apt-get purge --auto-remove ubuntu-mono mono-runtime
      - name: Disable Mono
        run: |
          sudo killall mono
          sudo lsof -iTCP -n -P | sort -k1

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: actions/setup-java@v4
        name: Setup Java JDK
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'maven'

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      - name: Install CCM
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install ccm
          ccm list

      - name: Run Integration Tests
        run: |
          cd coordinator/
          ./mvnw -B -ntp ${{ matrix.build-profile }} clean install -DskipTests
          ./mvnw -B -ntp -pl testing ${{ matrix.test-profile }} clean verify -DskipUnitTests

---
name: Coordinator Tests

# run on:
# - push on our branches (only code paths)
# - pull request (only code paths)
# - manual trigger

# paths filter:
# - any pom change
# - any change in the src/ in sub-modules
# - any maven related change (executables/wrapper)
# - the workflow itself
on:

  push:
    branches: [ ""main"", ""v1"" ]
    paths:
      - 'coordinator/**pom.xml'
      - 'coordinator/**/src/**'
      - 'coordinator/**mvn**'
      - '.github/workflows/coordinator-test.yml'

  pull_request:
    branches: [ ""main"", ""v1"" ]
    paths:
      - 'coordinator/**pom.xml'
      - 'coordinator/**/src/**'
      - 'coordinator/**mvn**'
      - '.github/workflows/coordinator-test.yml'

  workflow_dispatch:

# cancel same workflows in progress for pull request branches
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/v1' }}

# global env vars, available in all jobs and steps
env:
  ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  MAVEN_OPTS: '-Xmx4g'

jobs:

  unit-test:
    name: Coordinator unit tests
    runs-on: ubuntu-latest

    # max run time 45 minutes
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: actions/setup-java@v4
        name: Setup Java JDK
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'maven'

      - name: Setup Maven
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>artifactory-snapshots</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
              </server>
              <server>
                <id>artifactory-releases</id>
                <username>${ARTIFACTORY_USERNAME}</username>
                <password>${ARTIFACTORY_PASSWORD}</password>
             </server>
           </servers>
          </settings>
          EOF

      #  all unit tests should run without storage
      - name: Install CCM
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install ccm
          ccm list

      - name: Run unit tests
        run: |
          cd coordinator/
          ./mvnw -B -ntp clean test -P dse

  integration-test:
    name: Integration tests
    runs-on: ubuntu-latest

    # max run time 120 minutes
    timeout-minutes: 120

    strategy:
      # Defaults to ""true"" but let's let all runs finish
      # (see https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs)
      fail-fast: false
      matrix:
        backend: [ cassandra-40, cassandra-311, dse-68 ]
        include:
          - backend: cassandra-40
            build-profile:
            test-profile: -P it-cassandra-4.0

          - backend: cassandra-311
            build-profile:
            test-profile: -P it-cassandra-3.11

          - backend: dse-68
            build-profile: -P dse
            test-profile: -P dse -P it-dse-6.8

    steps:

      # Kill unused mono process that uses port 8084 starting on Ubuntu 20.04 GitHub runner
      # This is brute force but other attempts did not work
      #   see: https://github.com/actions/runner-images/issues/2821
      #   this doesn't seem to stop the process:
      #     sudo systemctl stop mono-xsp4.service || true
      #   neither does uninstalling mono:
      #     sudo apt-get purge --auto-remove ubuntu-mono mono-runtime
      - name: Disable"
MountCloud;BehinderClientSource;MountCloud/BehinderClientSource;https://github.com/MountCloud/BehinderClientSource;https://api.github.com/repos/MountCloud/BehinderClientSource;master;02/09/2020 18:39;18/04/2024 05:41;FALSE;
didi;KnowStreaming;didi/KnowStreaming;https://github.com/didi/KnowStreaming;https://api.github.com/repos/didi/KnowStreaming;master;19/03/2020 06:13;22/04/2024 09:01;TRUE;"name: KnowStreaming Build

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ ""*"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.22.12'

    - name: Build With Maven
      run: mvn -Prelease-package -Dmaven.test.skip=true clean install -U

    - name: Get KnowStreaming Version
      if: ${{ success() }}
      run: |
        version=`mvn -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q`
        echo ""VERSION=${version}"" >> $GITHUB_ENV

    - name: Upload Binary Package
      if: ${{ success() }}
      uses: actions/upload-artifact@v3
      with:
        name: KnowStreaming-${{ env.VERSION }}.tar.gz
        path: km-dist/target/KnowStreaming-${{ env.VERSION }}.tar.gz

---
"
ModelioOpenSource;Modelio;ModelioOpenSource/Modelio;https://github.com/ModelioOpenSource/Modelio;https://api.github.com/repos/ModelioOpenSource/Modelio;master;03/09/2020 11:57;19/04/2024 19:55;FALSE;
MuntashirAkon;AppManager;MuntashirAkon/AppManager;https://github.com/MuntashirAkon/AppManager;https://api.github.com/repos/MuntashirAkon/AppManager;master;30/05/2020 06:08;22/04/2024 13:29;TRUE;"name: ""CodeQL""

on:
  push:
    branches: [ ""master"", ""AppManager-*"" ]
  pull_request:
    branches: [ ""master"" ]
  schedule:
    - cron: '43 14 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: ""/language:${{matrix.language}}""

---
name: Debug Build

on:
  push:
    branches:
      - 'master'
      - 'AppManager-*'
    paths-ignore:
      - 'fastlane/**'
      - 'scripts/**'
      - '*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'fastlane/**'
      - 'scripts/**'
      - '*.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Get app version
        run: echo ""APP_VERSION=v$(cat ./app/build.gradle | grep -m1 versionName | awk -F \"" '{print $2}')"" >> $GITHUB_ENV
      - name: Get app name
        run: echo ""APP_NAME=AppManager_${{ env.APP_VERSION }}-DEBUG#${{ github.run_number }}"" >> $GITHUB_ENV
      - name: Inject run number
        run: sed -i -e 's|versionName ""\([0-9\.]\+\)""|versionName ""\1-${{ github.run_number }}""|' ./app/build.gradle
      - name: Build with Gradle
        run: ./gradlew packageDebugUniversalApk
      - name: Rename the APK file
        run: mv ./app/build/outputs/apk_from_bundle/debug/app-debug-universal.apk ./${{ env.APP_NAME }}.apk
      - name: Store generated APK file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}
          path: ./${{ env.APP_NAME }}.apk
      - name: Upload APK to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          document: ./${{ env.APP_NAME }}.apk
          format: markdown
          message: |
            *AM Debug ${{ env.APP_VERSION }} Run#${{ github.run_number }}*

            ${{ github.event.head_commit.message }}
        continue-on-error: true

---
name: Lint

on:
  push:
    branches:
      - 'master'
      - 'AppManager-*'
    paths-ignore:
      - 'fastlane/**'
      - 'scripts/**'
      - '*.md'
  pull_request:
    branches:
      - 'master'
      - 'AppManager-*'
    paths-ignore:
      - 'fastlane/**'
      - 'scripts/**'
      - '*.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run lint
        run: ./gradlew lint
      - name: Upload lint results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          path: ./app/build/reports/lint-results-debug.html

---
name: Tests

on:
  push:
    branches:
      - 'master'
      - 'AppManager-*'
    paths-ignore:
      - 'fastlane/**'
      - 'scripts/**'
      - '*.md'
  pull_request:
    branches:
      - 'master'
      - 'AppManager-*'
    paths-ignore:
      - 'fastlane/**'
      - 'scripts/**'
      - '*.md'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        run: ./gradlew test
      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: unitTestResults
          path: ./app/build/reports/tests/testDebugUnitTest/

---
"
GeyserMC;Floodgate;GeyserMC/Floodgate;https://github.com/GeyserMC/Floodgate;https://api.github.com/repos/GeyserMC/Floodgate;master;29/11/2019 16:01;22/04/2024 10:20;TRUE;"name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          cache-read-only: ${{ github.ref_name != 'master' && github.ref_name != 'development' }}

      - name: Publish to Maven Repository
        if: ${{ github.repository == 'GeyserMC/Floodgate' }}
        uses: gradle/gradle-build-action@v2
        env:
          ORG_GRADLE_PROJECT_geysermcUsername: ${{ vars.DEPLOY_USER }}
          ORG_GRADLE_PROJECT_geysermcPassword: ${{ secrets.DEPLOY_PASS }}
        with:
          arguments: publish
          cache-read-only: ${{ github.ref_name != 'master' && github.ref_name != 'development' }}

      - name: Publish to Downloads API
        if: ${{ github.ref_name == 'master' && github.repository == 'GeyserMC/Floodgate' }}
        shell: bash
        env:
          DOWNLOADS_USERNAME: ${{ vars.DOWNLOADS_USERNAME }}
          DOWNLOADS_PRIVATE_KEY: ${{ secrets.DOWNLOADS_PRIVATE_KEY }}
          DOWNLOADS_SERVER_IP: ${{ secrets.DOWNLOADS_SERVER_IP }}
        run: |
          # Save the private key to a file
          echo ""$DOWNLOADS_PRIVATE_KEY"" > id_ecdsa
          chmod 600 id_ecdsa
          
          # Set the project
          project=floodgate

          # Get the version from gradle.properties
          version=$(cat gradle.properties | grep -o ""version=[0-9\\.]*"" | cut -d""="" -f2)
          
          # Create the build folder
          ssh -o StrictHostKeyChecking=no -i id_ecdsa $DOWNLOADS_USERNAME@$DOWNLOADS_SERVER_IP mkdir -p ""~/uploads/$project/$GITHUB_RUN_NUMBER/""

          # Copy over artifacts
          rsync -P -e ""ssh -o StrictHostKeyChecking=no -i id_ecdsa"" **/build/libs/floodgate-*.jar $DOWNLOADS_USERNAME@$DOWNLOADS_SERVER_IP:~/uploads/$project/$GITHUB_RUN_NUMBER/

          # Remove un-needed artifacts
          ssh -o StrictHostKeyChecking=no -i id_ecdsa $DOWNLOADS_USERNAME@$DOWNLOADS_SERVER_IP rm ./uploads/$project/$GITHUB_RUN_NUMBER/floodgate-api.jar ./uploads/$project/$GITHUB_RUN_NUMBER/floodgate-core.jar

          # Push the metadata
          echo ""{\""project\"": \""$project\"", \""version\"": \""$version\"", \""id\"": $GITHUB_RUN_NUMBER, \""commit\"": \""$GITHUB_SHA\""}"" > metadata.json
          rsync -P -e ""ssh -o StrictHostKeyChecking=no -i id_ecdsa"" metadata.json $DOWNLOADS_USERNAME@$DOWNLOADS_SERVER_IP:~/uploads/$project/$GITHUB_RUN_NUMBER/

      - name: Notify Discord
        if: ${{ (success() || failure()) && github.repository == 'GeyserMC/Floodgate' }}
        uses: Tim203/actions-git-discord-webhook@main
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}

---
name: Build Pull Request

on: [ pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Build
        run: ./gradlew build

      - name: Archive artifacts (Floodgate Bungee)
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: Floodgate Bungee
          path: bungee/build/libs/floodgate-bungee.jar

      - name: Archive artifacts (Floodgate Spigot)
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: Floodgate Spigot
          path: spigot/build/libs/floodgate-spigot.jar

      - name: Archive artifacts (Floodgate Velocity)
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: Floodgate Velocity
          path: velocity/build/libs/floodgate-velocity.jar

---
"
erupts;erupt;erupts/erupt;https://github.com/erupts/erupt;https://api.github.com/repos/erupts/erupt;master;15/09/2020 15:30;22/04/2024 09:30;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '31 14 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml

---
"
WeBankFinTech;DataSphereStudio;WeBankFinTech/DataSphereStudio;https://github.com/WeBankFinTech/DataSphereStudio;https://api.github.com/repos/WeBankFinTech/DataSphereStudio;master;24/11/2019 14:27;19/04/2024 08:18;TRUE;"#
# Copyright 2019 WeBank.
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: DataSphereStudio CI Actions

on:
  push:
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.17.3]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build backend by maven
        run: |
          mvn -N install
          mvn clean package
      - name: Build frontend by node.js
        run: |
          cd web
          npm install lerna@4.0.0 -g
          lerna bootstrap
          npm run build

---
#
# Copyright 2019 WeBank.
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: DataSphereStudio License check

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: mvn -N install
        run:
          mvn -N install
      - name: License check with Maven
        run: |
          rat_file=`mvn apache-rat:check  | { grep -oe ""\\S\\+/rat.txt"" || true; }`
          echo ""rat_file=$rat_file""
          if [[ -n ""$rat_file"" ]];then  echo ""check error!"" && cat $rat_file && exit 123;else echo ""check success!"" ;fi
      - name: Upload the report
        uses: actions/upload-artifact@v2
        with:
          name: license-check-report
          path: ""**/target/rat.txt""

---
name: Link checker

on:
  pull_request:
  push:
  schedule:
    - cron: ""0 5 * * *""

jobs:
  CheckDeadLinks:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          folder-path: '../'
          config-file: '.github/workflows/dlc.json'
---
"
provectus;kafka-ui;provectus/kafka-ui;https://github.com/provectus/kafka-ui;https://api.github.com/repos/provectus/kafka-ui;master;26/11/2019 16:55;22/04/2024 13:43;TRUE;"name: ""Infra: Release: AWS Marketplace Publisher""
on:
  workflow_dispatch:
    inputs:
      KafkaUIInfraBranch:
        description: 'Branch name of Kafka-UI-Infra repo, build commands will be executed from this branch'
        required: true
        default: 'master'
      KafkaUIReleaseVersion:
        description: 'Version of KafkaUI'
        required: true
        default: '0.3.2'
      PublishOnMarketplace:
        description: 'If set to true, the request to update AWS Server product version will be raised'
        required: true
        default: false
        type: boolean

jobs:
  build-ami:
    name: Build AMI
    runs-on: ubuntu-latest
    steps:
      - name: Clone infra repo
        run: |
          echo ""Cloning repo...""
          git clone https://infra-tech:${{ secrets.INFRA_USER_ACCESS_TOKEN }}@github.com/provectus/kafka-ui-infra.git --branch ${{ github.event.inputs.KafkaUIInfraBranch }}
          echo ""Cd to packer DIR...""
          cd kafka-ui-infra/ami
          echo ""WORK_DIR=$(pwd)"" >> $GITHUB_ENV
          echo ""Packer will be triggered in this dir $WORK_DIR""

      - name: Configure AWS credentials for Kafka-UI account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_AMI_PUBLISH_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_AMI_PUBLISH_KEY_SECRET }}
          aws-region: us-east-1

      # validate templates
      - name: Validate Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: kafka-ui-infra/ami/kafka-ui.pkr.hcl

      # build artifact
      - name: Build Artifact
        uses: hashicorp/packer-github-actions@master
        with:
          command: build
          arguments: ""-color=false -on-error=abort -var=kafka_ui_release_version=${{ github.event.inputs.KafkaUIReleaseVersion }}""
          target: kafka-ui.pkr.hcl
          working_directory: ${{ env.WORK_DIR }}
        env:
          PACKER_LOG: 1

      # add fresh AMI to AWS Marketplace
      - name: Publish Artifact at Marketplace
        if: ${{ github.event.inputs.PublishOnMarketplace == 'true' }}
        env:
          PRODUCT_ID: ${{ secrets.AWS_SERVER_PRODUCT_ID }}
          RELEASE_VERSION: ""${{ github.event.inputs.KafkaUIReleaseVersion }}""
          RELEASE_NOTES: ""https://github.com/provectus/kafka-ui/releases/tag/v${{ github.event.inputs.KafkaUIReleaseVersion }}""
          MP_ROLE_ARN: ${{ secrets.AWS_MARKETPLACE_AMI_ACCESS_ROLE }} # https://docs.aws.amazon.com/marketplace/latest/userguide/ami-single-ami-products.html#single-ami-marketplace-ami-access
          AMI_OS_VERSION: ""amzn2-ami-kernel-5.10-hvm-*-x86_64-gp2""
        run: |
          set -x
          pwd
          ls -la kafka-ui-infra/ami
          echo $WORK_DIR/manifest.json
          export AMI_ID=$(jq -r '.builds[-1].artifact_id' kafka-ui-infra/ami/manifest.json | cut -d "":"" -f2)
          /bin/bash kafka-ui-infra/aws-marketplace/prepare_changeset.sh > changeset.json
          aws marketplace-catalog start-change-set \
            --catalog ""AWSMarketplace"" \
            --change-set ""$(cat changeset.json)""

---
name: ""Backend: PR/master build & test""
on:
  push:
    branches:
      - master
  pull_request_target:
    types: [""opened"", ""edited"", ""reopened"", ""synchronize""]
    paths:
      - ""kafka-ui-api/**""
      - ""pom.xml""
permissions:
  checks: write
  pull-requests: write
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze pull request target
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.event.pull_request.head.sha }}
          ./mvnw -B -V -ntp verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=com.provectus:kafka-ui_backend \
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} \
          -Dsonar.pullrequest.branch=$HEAD_REF \
          -Dsonar.pullrequest.base=$BASE_REF
      - name: Build and analyze push master
        if: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=$GITHUB_SHA
          ./mvnw -B -V -ntp verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=com.provectus:kafka-ui_backend

---
name: ""Infra: PR block merge""
on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
jobs:
  block_merge:
    runs-on: ubuntu-latest
    steps:
      - uses: mheap/github-action-required-labels@v5
        with:
          mode: exactly
          count: 0
          labels: ""status/blocked, status/needs-attention, status/on-hold, status/pending, status/triage, status/pending-backend, status/pending-frontend, status/pending-QA""

---
name: ""Infra: Feature Testing: Init env""
on:
  workflow_dispatch:

  pull_request:
    types: ['labeled']
jobs:
  build:
    if: ${{ github.event.label.name == 'status/feature_testing' || github.event.label.name == 'status/feature_testing_public' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: get branch name
        id: extract_branch
        run: |
          tag='pr${{ github.event.pull_request.number }}'
          echo ""tag=${tag}"" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Build
        id: build
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=$GITHUB_SHA
          ./mvnw -B -V -ntp clean package -Pprod -DskipTests
          export VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo ""version=${VERSION}"" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configure AWS credentials for Kafka-UI account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push
        id: docker_build_and_push
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: kafka-ui-api
          push: true
          tags: 297478128798.dkr.ecr.eu-central-1.amazonaws.com/kafka-ui:${{ steps.extract_branch.outputs.tag }}
          build-args: |
            JAR_FILE=kafka-ui-api-${{ steps.build.outputs.version }}.jar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
    outputs:
      tag: ${{ steps.extract_branch.outputs.tag }}
  make-branch-env:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: clone
        run: |
          git clone https://infra-tech:${{ secrets.INFRA_USER_ACCESS_TOKEN }}@github.com/provectus/kafka-ui-infra.git --branch envs
      - name: create deployment
        run: |
          cd kafka-ui-infra/aws-infrastructure4eks/argocd/scripts
          echo ""Branch:${{ needs.build.outputs.tag }}""
          ./kafka-ui-deployment-from-branch.sh ${{ needs.build.outputs.tag }} ${{ github.event.label.name }} ${{ secrets.FEATURE_TESTING_UI_PASSWORD }}
          git config --global user.email ""infra-tech@provectus.com""
          git config --global user.name ""infra-tech""
          git add ../kafka-ui-from-branch/
          git commit -m ""added env:${{ needs.build.outputs.deploy }}"" && git push || true

      - name: update status check for private deployment
        if: ${{ github.event.label.name == 'status/feature_testing' }}
        uses: Sibz/github-status-action@v1.1.6
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: ""Click Details button to open custom deployment page""
          state: ""success""
          sha: ${{ github.event.pull_request.head.sha  || github.sha }}
          target_url: ""http://${{ needs.build.outputs.tag }}.internal.kafka-ui.provectus.io""

      - name: update status check for public deployment
        if: ${{ github.event.label.name == 'status/feature_testing_public' }}
        uses: Sibz/github-status-action@v1.1.6
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: ""Click Details button to open custom deployment page""
          state: ""success""
          sha: ${{ github.event.pull_request.head.sha  || github.sha }}
          target_url: ""http://${{ needs.build.outputs.tag }}.internal.kafka-ui.provectus.io""

---
name: ""Infra: Feature Testing: Destroy env""
on:
  workflow_dispatch:
  pull_request:
    types: ['unlabeled', 'closed']
jobs:
  remove:
    runs-on: ubuntu-latest
    if: ${{ (github.event.label.name == 'status/feature_testing' || github.event.label.name == 'status/feature_testing_public') || (github.event.action == 'closed' && (contains(github.event.pull_request.labels.*.name, 'status/feature_testing') || contains(github.event.pull_request.labels.*.name, 'status/feature_testing_public'))) }}
    steps:
      - uses: actions/checkout@v3
      - name: clone
        run: |
          git clone https://infra-tech:${{ secrets.INFRA_USER_ACCESS_TOKEN }}@github.com/provectus/kafka-ui-infra.git --branch envs
      - name: remove env
        run: |
          cd kafka-ui-infra/aws-infrastructure4eks/argocd/scripts
          ./delete-env.sh pr${{ github.event.pull_request.number }} || true
          git config --global user.email ""infra-tech@provectus.com""
          git config --global user.name ""infra-tech""
          git add ../kafka-ui-from-branch/
          git commit -m ""removed env:${{ needs.build.outputs.deploy }}"" && git push || true

---
name: ""Infra: Image Testing: Deploy""
on:
  workflow_dispatch:
  pull_request:
    types: ['labeled']
jobs:
  build:
    if: ${{ github.event.label.name == 'status/image_testing' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: get branch name
        id: extract_branch
        run: |
          tag='${{ github.event.pull_request.number }}'
          echo ""tag=${tag}"" >> $GITHUB_OUTPUT
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Build
        id: build
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=$GITHUB_SHA
          ./mvnw -B -V -ntp clean package -Pprod -DskipTests
          export VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo ""version=${VERSION}"" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configure AWS credentials for Kafka-UI account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: 'public'
      - name: Build and push
        id: docker_build_and_push
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: kafka-ui-api
          push: true
          tags: public.ecr.aws/provectus/kafka-ui-custom-build:${{ steps.extract_branch.outputs.tag }}
          build-args: |
            JAR_FILE=kafka-ui-api-${{ steps.build.outputs.version }}.jar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: make comment with private deployment link
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Image published at public.ecr.aws/provectus/kafka-ui-custom-build:${{ steps.extract_branch.outputs.tag }}
    outputs:
      tag: ${{ steps.extract_branch.outputs.tag }}

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
    paths:
    - 'kafka-ui-contract/**'
    - 'kafka-ui-react-app/**'
    - 'kafka-ui-api/**'
    - 'kafka-ui-serde-api/**'
  schedule:
    - cron: '39 15 * * 6'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: CVE checks docker master
on:
  workflow_dispatch:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 8 15 * *'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'

      - name: Build project
        id: build
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=$GITHUB_SHA
          ./mvnw -B -V -ntp clean package -DskipTests
          export VERSION=$(./mvnw -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo ""version=${VERSION}"" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build docker image
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: kafka-ui-api
          platforms: linux/amd64
          push: false
          load: true
          tags: |
            provectuslabs/kafka-ui:${{ steps.build.outputs.version }}
          build-args: |
            JAR_FILE=kafka-ui-api-${{ steps.build.outputs.version }}.jar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Run CVE checks
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: ""provectuslabs/kafka-ui:${{ steps.build.outputs.version }}""
          format: ""table""
          exit-code: ""1""

---
name: ""Infra: Image Testing: Delete""
on:
  workflow_dispatch:
  pull_request:
    types: ['unlabeled', 'closed']
jobs:
  remove:
    if: ${{ github.event.label.name == 'status/image_testing' || ( github.event.action == 'closed' && (contains(github.event.pull_request.labels, 'status/image_testing'))) }}
    runs-on: ubuntu-latest
    steps:
      - name: get branch name
        id: extract_branch
        run: |
          echo
          tag='${{ github.event.pull_request.number }}'
          echo ""tag=${tag}"" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials for Kafka-UI account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: 'public'
      - name: Remove from ECR
        id: remove_from_ecr
        run: |
          aws ecr-public batch-delete-image \
                --repository-name kafka-ui-custom-build \
                --image-ids imageTag=${{ steps.extract_branch.outputs.tag }} \
                --region us-east-1

---
name: ""Infra: Docs: URL linter""
on:
  pull_request:
    types:
      - opened
      - labeled
      - reopened
      - synchronize
    paths:
      - 'documentation/**'
      - '**.md'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check URLs in files
        uses: urlstechie/urlchecker-action@0.0.34
        with:
          exclude_patterns: localhost,127.0.,192.168.
          exclude_urls: https://api.server,https://graph.microsoft.com/User.Read,https://dev-a63ggcut.auth0.com/,http://main-schema-registry:8081,http://schema-registry:8081,http://another-yet-schema-registry:8081,http://another-schema-registry:8081
          print_all: false
          file_types: .md

---
name: ""E2E: Automation suite""
on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Select test suite to run'
        default: 'regression'
        required: true
        type: choice
        options:
          - regression
          - sanity
          - smoke
      qase_token:
        description: 'Set Qase token to enable integration'
        required: false
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Set up environment
        id: set_env_values
        run: |
          cat ""./kafka-ui-e2e-checks/.env.ci"" >> ""./kafka-ui-e2e-checks/.env""
      - name: Pull with Docker
        id: pull_chrome
        run: |
          docker pull selenoid/vnc_chrome:103.0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        id: build_app
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.sha }}
          ./mvnw -B -V -ntp clean install -Pprod -Dmaven.test.skip=true ${{ github.event.inputs.extraMavenOptions }}
      - name: Compose with Docker
        id: compose_app
        # use the following command until #819 will be fixed
        run: |
          docker-compose -f kafka-ui-e2e-checks/docker/selenoid-git.yaml up -d
          docker-compose -f ./documentation/compose/e2e-tests.yaml up -d
      - name: Run test suite
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.sha }}
          ./mvnw -B -V -ntp -DQASEIO_API_TOKEN=${{ github.event.inputs.qase_token }} -Dsurefire.suiteXmlFiles='src/test/resources/${{ github.event.inputs.test_suite }}.xml' -Dsuite=${{ github.event.inputs.test_suite }} -f 'kafka-ui-e2e-checks' test -Pprod
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: ./kafka-ui-e2e-checks/allure-results
          gh_pages: allure-results
          allure_report: allure-report
          subfolder: allure-results
          report_url: ""http://kafkaui-allure-reports.s3-website.eu-central-1.amazonaws.com""
      - uses: jakejarvis/s3-sync-action@master
        if: always()
        env:
          AWS_S3_BUCKET: 'kafkaui-allure-reports'
          AWS_REGION: 'eu-central-1'
          SOURCE_DIR: 'allure-history/allure-results'
      - name: Deploy report to Amazon S3
        if: always()
        uses: Sibz/github-status-action@v1.1.6
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: ""Click Details button to open Allure report""
          state: ""success""
          sha: ${{ github.sha }}
          target_url: http://kafkaui-allure-reports.s3-website.eu-central-1.amazonaws.com/${{ github.run_number }}
      - name: Dump Docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2.2.1

---
name: ""E2E: PR healthcheck""
on:
  pull_request_target:
    types: [ ""opened"", ""edited"", ""reopened"", ""synchronize"" ]
    paths:
      - ""kafka-ui-api/**""
      - ""kafka-ui-contract/**""
      - ""kafka-ui-react-app/**""
      - ""kafka-ui-e2e-checks/**""
      - ""pom.xml""
permissions:
  statuses: write
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.S3_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Set up environment
        id: set_env_values
        run: |
          cat ""./kafka-ui-e2e-checks/.env.ci"" >> ""./kafka-ui-e2e-checks/.env""
      - name: Pull with Docker
        id: pull_chrome
        run: |
          docker pull selenoid/vnc_chrome:103.0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        id: build_app
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.event.pull_request.head.sha }}
          ./mvnw -B -V -ntp clean install -Pprod -Dmaven.test.skip=true ${{ github.event.inputs.extraMavenOptions }}
      - name: Compose with Docker
        id: compose_app
        # use the following command until #819 will be fixed
        run: |
          docker-compose -f kafka-ui-e2e-checks/docker/selenoid-git.yaml up -d
          docker-compose -f ./documentation/compose/e2e-tests.yaml up -d && until [ ""$(docker exec  kafka-ui wget --spider  --server-response  http://localhost:8080/actuator/health 2>&1 |  grep -c 'HTTP/1.1 200 OK')"" == ""1"" ]; do echo ""Waiting for kafka-ui ..."" && sleep 1; done
      - name: Run test suite
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.event.pull_request.head.sha }}
          ./mvnw -B -V -ntp -Dsurefire.suiteXmlFiles='src/test/resources/smoke.xml' -f 'kafka-ui-e2e-checks' test -Pprod
      - name: Generate allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: ./kafka-ui-e2e-checks/allure-results
          gh_pages: allure-results
          allure_report: allure-report
          subfolder: allure-results
          report_url: ""http://kafkaui-allure-reports.s3-website.eu-central-1.amazonaws.com""
      - uses: jakejarvis/s3-sync-action@master
        if: always()
        env:
          AWS_S3_BUCKET: 'kafkaui-allure-reports'
          AWS_REGION: 'eu-central-1'
          SOURCE_DIR: 'allure-history/allure-results'
      - name: Deploy report to Amazon S3
        if: always()
        uses: Sibz/github-status-action@v1.1.6
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: ""Click Details button to open Allure report""
          state: ""success""
          sha: ${{ github.event.pull_request.head.sha  || github.sha }}
          target_url: http://kafkaui-allure-reports.s3-website.eu-central-1.amazonaws.com/${{ github.run_number }}
      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2.2.1

---
name: ""E2E: Manual suite""
on:
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Select test suite to run'
        default: 'manual'
        required: true
        type: choice
        options:
          - manual
          - qase
      qase_token:
        description: 'Set Qase token to enable integration'
        required: true
        type: string

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
      - name: Set up environment
        id: set_env_values
        run: |
          cat ""./kafka-ui-e2e-checks/.env.ci"" >> ""./kafka-ui-e2e-checks/.env""
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        id: build_app
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.sha }}
          ./mvnw -B -V -ntp clean install -Pprod -Dmaven.test.skip=true ${{ github.event.inputs.extraMavenOptions }}
      - name: Run test suite
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.sha }}
          ./mvnw -B -V -ntp -DQASEIO_API_TOKEN=${{ github.event.inputs.qase_token }} -Dsurefire.suiteXmlFiles='src/test/resources/${{ github.event.inputs.test_suite }}.xml' -Dsuite=${{ github.event.inputs.test_suite }} -f 'kafka-ui-e2e-checks' test -Pprod

---
name: ""E2E: Weekly suite""
on:
  schedule:
    - cron: '0 1 * * 1'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.sha }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Set up environment
        id: set_env_values
        run: |
          cat ""./kafka-ui-e2e-checks/.env.ci"" >> ""./kafka-ui-e2e-checks/.env""
      - name: Pull with Docker
        id: pull_chrome
        run: |
          docker pull selenoid/vnc_chrome:103.0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        id: build_app
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.sha }}
          ./mvnw -B -V -ntp clean install -Pprod -Dmaven.test.skip=true ${{ github.event.inputs.extraMavenOptions }}
      - name: Compose with Docker
        id: compose_app
        # use the following command until #819 will be fixed
        run: |
          docker-compose -f kafka-ui-e2e-checks/docker/selenoid-git.yaml up -d
          docker-compose -f ./documentation/compose/e2e-tests.yaml up -d
      - name: Run test suite
        run: |
          ./mvnw -B -ntp versions:set -DnewVersion=${{ github.sha }}
          ./mvnw -B -V -ntp -DQASEIO_API_TOKEN=${{ secrets.QASEIO_API_TOKEN }} -Dsurefire.suiteXmlFiles='src/test/resources/sanity.xml' -Dsuite=weekly -f 'kafka-ui-e2e-checks' test -Pprod
      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: ./kafka-ui-e2e-checks/allure-results
          gh_pages: allure-results
          allure_report: allure-report
          subfolder: allure-results
          report_url: ""http://kafkaui-allure-reports.s3-website.eu-central-1.amazonaws.com""
      - uses: jakejarvis/s3-sync-action@master
        if: always()
        env:
          AWS_S3_BUCKET: 'kafkaui-allure-reports'
          AWS_REGION: 'eu-central-1'
          SOURCE_DIR: 'allure-history/allure-results'
      - name: Deploy report to Amazon S3
        if: always()
        uses: Sibz/github-status-action@v1.1.6
        with:
          authToken: ${{secrets.GITHUB_TOKEN}}
          context: ""Click Details button to open Allure report""
          state: ""success""
          sha: ${{ github.sha }}
          target_url: http://kafkaui-allure-reports.s3-website.eu-central-1.amazonaws.com/${{ github.run_number }}
      - name: Dump Docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2.2.1

---
name: ""Frontend: PR/master build & test""
on:
  push:
    branches:
      - master
  pull_request_target:
    types: [""opened"", ""edited"", ""reopened"", ""synchronize""]
    paths:
      - ""kafka-ui-contract/**""
      - ""kafka-ui-react-app/**""
permissions:
  checks: write
  pull-requests: write
jobs:
  build-and-test:
    env:
      CI: true
      NODE_ENV: dev
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8.6.12
      - name: Install node
        uses: actions/setup-node@v3.8.1
        with:
          node-version: ""18.17.1""
          cache: ""pnpm""
          cache-dependency-path: ""./kafka-ui-react-app/pnpm-lock.yaml""
      - name: Install Node dependencies
        run: |
          cd kafka-ui-react-app/
          pnpm install --frozen-lockfile
      - name: Generate sources
      "
c0ny1;java-memshell-scanner;c0ny1/java-memshell-scanner;https://github.com/c0ny1/java-memshell-scanner;https://api.github.com/repos/c0ny1/java-memshell-scanner;master;08/09/2020 11:09;21/04/2024 15:28;FALSE;
rewanthtammana;Damn-Vulnerable-Bank;rewanthtammana/Damn-Vulnerable-Bank;https://github.com/rewanthtammana/Damn-Vulnerable-Bank;https://api.github.com/repos/rewanthtammana/Damn-Vulnerable-Bank;master;12/09/2020 13:55;11/04/2024 20:28;FALSE;
ScriptKid-Beta;Unexpected_information;ScriptKid-Beta/Unexpected_information;https://github.com/ScriptKid-Beta/Unexpected_information;https://api.github.com/repos/ScriptKid-Beta/Unexpected_information;master;12/09/2020 14:24;20/04/2024 15:30;FALSE;
hiparker;opsli-boot;hiparker/opsli-boot;https://github.com/hiparker/opsli-boot;https://api.github.com/repos/hiparker/opsli-boot;master;13/09/2020 04:20;22/04/2024 04:58;FALSE;
qa-guru;allure-notifications;qa-guru/allure-notifications;https://github.com/qa-guru/allure-notifications;https://api.github.com/repos/qa-guru/allure-notifications;master;26/11/2019 23:24;19/04/2024 11:25;TRUE;"name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 17, 21, 22]
      fail-fast: false

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'gradle'

    - name: Build
      run: ./gradlew build

---
name: Publish release of new version manually

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name of release  (ie bug fixes)'
        required: true
      tag_name:
        description: 'Name of tag  (ie testing)'
        required: true

jobs:
  build:
    name: Publish release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout changes
        uses: actions/checkout@v4

      - name: Set up JDK 1.8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 8

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Get release version
        run: echo ""version=$(./gradlew properties -q | grep 'version:' | awk '{print $2}')"" >> $GITHUB_ENV

      - name: Print product version
        run: echo $version

      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'allure-notifications-${{env.version}}.jar'
          path: build/libs/*.jar

      - name: Create Changelog
        id: changelog
        uses: scottbrenner/generate-changelog-action@master
        env:
          REPO: ${{ github.repository }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name }}
          release_name: ${{ github.event.inputs.release_name }}
          body:  ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Attach jar to release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/allure-notifications-${{env.version}}.jar
          asset_name: 'allure-notifications-${{env.version}}.jar'
          asset_content_type: application/java-archive

      - name: Publish Release
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}

      - name: Send notification via telegram/slack
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          args: |
            *allure-notifications-${{env.version}} is now available for downloading at the link* https://github.com/${{ github.repository }}/releases/latest/download/allure-notifications-${{env.version}}.jar
            *See Changelog here*:
            https://github.com/${{ github.repository }}/releases/latest/
          format: markdown

---
"
MalitsPlus;ShizuruNotes;MalitsPlus/ShizuruNotes;https://github.com/MalitsPlus/ShizuruNotes;https://api.github.com/repos/MalitsPlus/ShizuruNotes;master;10/12/2019 12:36;22/04/2024 10:19;TRUE;"name: Build Release App

on:
  push:
    paths:
      - release_log.json
  workflow_dispatch:

jobs:
  build-release-apk:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Decode Contents
        env:
          KEY_STORE_CONTENTS: ${{ secrets.KEY_STORE_CONTENTS }}
          GOOGLE_SERVICES_CONTENTS: ${{ secrets.GOOGLE_SERVICES_CONTENTS }}
        run: |
          if [ ! -d cicaches ]; then
            mkdir cicaches
          fi
          echo $KEY_STORE_CONTENTS | base64 -di > cicaches/androidstudio-keystore.jks
          echo $GOOGLE_SERVICES_CONTENTS | base64 -di > app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build release apk
        env:
          SIGNING_STORE_FILE: ${{ secrets.SIGNING_STORE_FILE }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: |
          if [ ! -f local.properties ]; then
            touch local.properties
          fi
          SIGNING_STORE_FILE=${GITHUB_WORKSPACE}/${SIGNING_STORE_FILE}
          ./gradlew :app:assembleRelease

      - name: Rename apk
        run: mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/shizurunotes-release.apk

      - name: Generate release log
        run: |
          RELEASE_APK_VERSION=`python release.py`
          echo ""RELEASE_APK_VERSION=$RELEASE_APK_VERSION"" >> $GITHUB_ENV

      - name: Create a release
        uses: softprops/action-gh-release@v1
        with:
          body_path: releaselog_cache.txt
          files: app/build/outputs/apk/release/shizurunotes-release.apk
          tag_name: v${{ env.RELEASE_APK_VERSION }}
          name: ShizuruNotes v${{ env.RELEASE_APK_VERSION }}

      - name: Bump version
        run: |
          git config user.name github-actions
          git config user.email anonymous@e.mail
          git add .
          git commit -m ""chore: bump to v${{ env.RELEASE_APK_VERSION }}""
          git push

      # - name: Upload Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: shizurunotes.apk
      #     path: |
      #       app/build/outputs/apk/release/shizurunotes-release.apk

---
"
iTXTech;mirai-console-loader;iTXTech/mirai-console-loader;https://github.com/iTXTech/mirai-console-loader;https://api.github.com/repos/iTXTech/mirai-console-loader;master;16/09/2020 05:03;22/04/2024 08:23;FALSE;
dromara;TLog;dromara/TLog;https://github.com/dromara/TLog;https://api.github.com/repos/dromara/TLog;master;16/09/2020 09:58;14/04/2024 04:04;FALSE;
FIRST-Tech-Challenge;FtcRobotController;FIRST-Tech-Challenge/FtcRobotController;https://github.com/FIRST-Tech-Challenge/FtcRobotController;https://api.github.com/repos/FIRST-Tech-Challenge/FtcRobotController;master;18/09/2020 02:24;20/04/2024 05:18;FALSE;
NeoApplications;Neo-Launcher;NeoApplications/Neo-Launcher;https://github.com/NeoApplications/Neo-Launcher;https://api.github.com/repos/NeoApplications/Neo-Launcher;main;30/06/2020 03:32;22/04/2024 01:41;TRUE;"name: Neo Launcher CI
on:
  push:
    branches: [ A-13 ]
  pull_request:
    branches: [ A-13 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile with Gradle
        run: ./gradlew assembleAospOmega

      - name: Save name of our Artifact
        id: set-result-artifact
        run: |
          ARTIFACT_PATHNAME_APK=$(ls build/outputs/apk/aospOmega/debug/*.apk | head -n 1)
          ARTIFACT_NAME_APK=$(basename $ARTIFACT_PATHNAME_APK)
          echo ""ARTIFACT_NAME_APK is "" ${ARTIFACT_NAME_APK}
          echo ""ARTIFACT_PATHNAME_APK=${ARTIFACT_PATHNAME_APK}"" >> $GITHUB_ENV
          echo ""ARTIFACT_NAME_APK=${ARTIFACT_NAME_APK}"" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME_APK }}
          path: ${{ env.ARTIFACT_PATHNAME_APK }}
---
"
casid;jte;casid/jte;https://github.com/casid/jte;https://api.github.com/repos/casid/jte;main;17/04/2020 21:29;22/04/2024 07:45;TRUE;"name: Test native builds

# No need to run when only the docs are changing. There is
# a workflow to validate the docs.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java_version: [17]
        os: [windows-2022, macOS-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: ${{ matrix.java_version }}
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'

      # Adapted from https://github.com/actions/cache/blob/v3/examples.md#java---gradle
      - name: Cache local Gradle
        id: gradleCache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-graalvm-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-graalvm-

      - name: Make Maven Wrapper executable
        if: contains(matrix.os, 'win') == false
        run: chmod +x ./mvnw
      - name: Build with Maven
        run: ./mvnw install --file pom.xml -DskipTests=true
      - name: Build Gradle Plugin
        run: cd jte-gradle-plugin && ./gradlew publishToMavenLocal
      - name: Test Gradle Plugin Generate with conventions
        run: cd test/jte-runtime-cp-test-gradle-convention && ./gradlew check nativeTest
      - name: Stop Gradle Daemon
        if: ${{ always() }}
        run: cd test/jte-runtime-cp-test-gradle-convention && ./gradlew --stop

      # This prevents local published artifacts from be added to GH Actions cache
      - name: Clean local artifacts
        if: contains(matrix.os, 'win') == false
        run: rm -rvf ~/.m2/repository/gg/jte

      # `rm` syntax for Windows is different. Needs to use `-Force` since `-f`
      # is ambiguous (possible matches include: -Filter -Force).
      - name: ""[Windows]: Clean local artifacts""
        if: contains(matrix.os, 'win')
        run: rm -r -Force ~/.m2/repository/gg/jte
---
name: Validate Gradle Wrapper

# No need to run when only the docs are changing. There is
# a workflow to validate the docs.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
  push:
    branches:
      - main

jobs:
  validation:
    name: ""Validation""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v3

---
name: Test all JDKs on all OSes

# No need to run when only the docs are changing. There is
# a workflow to validate the docs.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java_version: [17]
        os: [windows-2022, macOS-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'temurin'
          cache: 'maven'

      # Adapted from https://github.com/actions/cache/blob/v3/examples.md#java---gradle
      - name: Cache local Gradle
        id: gradleCache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Maven Wrapper executable
        if: contains(matrix.os, 'win') == false
        run: chmod +x ./mvnw
      - name: Build with Maven
        run: ./mvnw install --file pom.xml
      - name: Build Gradle Plugin
        run: cd jte-gradle-plugin && ./gradlew publishToMavenLocal
      - name: Run all the Gradle Plugin tests
        id: gradlePluginTests
        run: cd test/gradle-test-wrapper && ./gradlew --info check
      - name: Stop Gradle Daemon
        if: ${{ always() }}
        run: cd test/gradle-test-wrapper && ./gradlew --stop
      - name: Store Gradle plugin test reports
        if: failure() && steps.gradlePluginTests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: failing-test-report
          path: test/gradle-test-wrapper/build/reports/tests/test/**/*

      # This prevents local published artifacts from be added to GH Actions cache
      - name: Clean local artifacts
        if: contains(matrix.os, 'win') == false
        run: rm -rvf ~/.m2/repository/gg/jte

      # `rm` syntax for Windows is different. Needs to use `-Force` since `-f`
      # is ambiguous (possible matches include: -Filter -Force).
      - name: ""[Windows]: Clean local artifacts""
        if: contains(matrix.os, 'win')
        run: rm -r -Force ~/.m2/repository/gg/jte


  coverage:
    # Do not run coverage for forks since they cannot upload
    # the results to codecov. For reference, see:
    # https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution#example-only-run-job-for-specific-repository
    if: github.repository == 'casid/jte'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
      - name: Make Maven Wrapper executable
        if: contains(matrix.os, 'win') == false
        run: chmod +x ./mvnw
      - name: Build with Maven
        run: ./mvnw verify --file pom.xml -Pcoverage
      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: ./test/jte-test-report/target/site/jacoco-aggregate/jacoco.xml
          fail_ci_if_error: true

---
name: Publish Docs

on:
  # Runs whenever there is a release/tag creation
  release:
    types: [ ""published"" ]
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  # Checkout the project's code
  contents: read
  # Allow to deploy to gh-pages
  pages: write
  # To verify the deployment originates from an appropriate source
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: ""pages""
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all history for all branches and tags
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo ""cache_id=$(date --utc '+%V')"" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - name: Setup MkDocs
        run: .github/scripts/setup-docs-dependencies.sh
      - name: Create new docs version
        # `_site` is the default path expected by `actions/upload-pages-artifact` to
        # find the static assets.
        run: mkdocs build --site-dir _site
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

---
name: Validate docs

# Only run workflow if the docs are changing.
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
on:
  pull_request:
    paths:
      - 'mkdocs.yml'
      - 'docs/**'
  push:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # all history for all branches and tags
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo ""cache_id=$(date --utc '+%V')"" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - name: Setup MkDocs
        run: .github/scripts/setup-docs-dependencies.sh
      - name: Build docs
        # https://www.mkdocs.org/user-guide/cli/#mkdocs-build
        # --strict cause MkDocs to abort the build on any warnings.
        # For example, broken internal links. More about validation
        # here: https://www.mkdocs.org/user-guide/configuration/#validation.
        run: mkdocs build --strict

---
name: ""Validate External Links""

on: [push, pull_request]

jobs:
  validate-external-links:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1
        with:
          args: '**/*.java **/*.md **/*.xml **/*.html **/*.yml
            --verbose --no-progress
            --exclude localhost
            --exclude ""github\.com/casid/jte/blob""
            --exclude ""@template""
            --exclude test.com
            --exclude maven.apache.org
            --exclude w3.org'
          jobSummary: true
          format: markdown
          fail: true

---
"
freemansoft;jacob-project;freemansoft/jacob-project;https://github.com/freemansoft/jacob-project;https://api.github.com/repos/freemansoft/jacob-project;main;25/09/2020 03:52;15/04/2024 09:11;FALSE;
IzzelAliz;Arclight;IzzelAliz/Arclight;https://github.com/IzzelAliz/Arclight;https://api.github.com/repos/IzzelAliz/Arclight;Whisper;09/05/2020 11:57;22/04/2024 02:04;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build

on:
  push:
    branches:
      - '**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
    - name: Cache Gradle User Files
      uses: actions/cache@v1
      with:
        path: ~/.gradle
        key: ${{ runner.os }}-gradle-user-home
    - name: Cache Gradle Files
      uses: actions/cache@v1
      with:
        path: ./.gradle
        key: ${{ runner.os }}-gradle-file
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build
      env:
        ARCLIGHT_FILES_TOKEN: ${{ secrets.ARCLIGHT_FILES_TOKEN }}
      run: |
        ./gradlew cleanBuild build collect uploadFiles --no-daemon --stacktrace
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Arclight 
        path: ./build/libs/*.jar


---
# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Pull Request Check

on:
  pull_request:
    branches:
      - '**'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'
    - name: Cache Gradle User Files
      uses: actions/cache@v1
      with:
        path: ~/.gradle
        key: ${{ runner.os }}-gradle-user-home
    - name: Cache Gradle Files
      uses: actions/cache@v1
      with:
        path: ./.gradle
        key: ${{ runner.os }}-gradle-file
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build
      run: |
        ./gradlew cleanBuild build collect --no-daemon --stacktrace
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Arclight 
        path: ./build/libs/*.jar


---
"
slowscript;warpinator-android;slowscript/warpinator-android;https://github.com/slowscript/warpinator-android;https://api.github.com/repos/slowscript/warpinator-android;master;25/09/2020 21:12;19/04/2024 13:45;FALSE;
kongzue;DialogX;kongzue/DialogX;https://github.com/kongzue/DialogX;https://api.github.com/repos/kongzue/DialogX;master;26/09/2020 09:51;22/04/2024 03:51;FALSE;
jetlinks;jetlinks-community;jetlinks/jetlinks-community;https://github.com/jetlinks/jetlinks-community;https://api.github.com/repos/jetlinks/jetlinks-community;master;02/01/2020 08:27;22/04/2024 08:47;TRUE;"name: Auto Deploy Docker

on: 
  push:
    branches: [ ""master"",""2.0"" ]
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Maven Repository
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
    - name: Build with Maven
      run: ./mvnw clean install -Dmaven.build.timestamp=""$(date ""+%Y-%m-%d %H:%M:%S"")"" -Dmaven.test.skip=true -Pbuild && cd jetlinks-standalone && docker build -t registry.cn-shenzhen.aliyuncs.com/jetlinks/jetlinks-community:$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) .
    - name: Login Docker Repo
      run: echo ""${{ secrets.ALIYUN_DOCKER_REPO_PWD }}"" | docker login registry.cn-shenzhen.aliyuncs.com -u ${{ secrets.ALIYUN_DOCKER_REPO_USERNAME }} --password-stdin
    - name: Push Docker
      run: docker push registry.cn-shenzhen.aliyuncs.com/jetlinks/jetlinks-community:$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Maven Repository
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: jetlinks-community-maven-repository
    - name: Build with Maven
      run: ./mvnw package -Dmaven.test.skip=true -Pbuild

---
"
sukritishah15;DS-Algo-Point;sukritishah15/DS-Algo-Point;https://github.com/sukritishah15/DS-Algo-Point;https://api.github.com/repos/sukritishah15/DS-Algo-Point;master;28/09/2020 16:09;20/04/2024 19:50;FALSE;
neo4j;graph-data-science;neo4j/graph-data-science;https://github.com/neo4j/graph-data-science;https://api.github.com/repos/neo4j/graph-data-science;master;05/11/2019 10:05;22/04/2024 07:47;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on: [push, pull_request]

permissions:
  contents: read
  issues: read
  pull-requests: read
  statuses: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run cipr task
        run: ./gradlew cipr --continue

---
"
dragonwell-project;dragonwell11;dragonwell-project/dragonwell11;https://github.com/dragonwell-project/dragonwell11;https://api.github.com/repos/dragonwell-project/dragonwell11;master;12/12/2019 07:46;17/04/2024 08:06;TRUE;"#
# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Build (cross-compile)'

on:
  workflow_call:
    inputs:
      gcc-major-version:
        required: true
        type: string
      extra-conf-options:
        required: false
        type: string
      configure-arguments:
        required: false
        type: string
      make-arguments:
        required: false
        type: string

jobs:
  build-cross-compile:
    name: build
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        target-cpu:
          - aarch64
          - arm
          - s390x
          - ppc64le
        include:
          - target-cpu: aarch64
            gnu-arch: aarch64
            debian-arch: arm64
            debian-repository: https://httpredir.debian.org/debian/
            debian-version: bullseye
          - target-cpu: arm
            gnu-arch: arm
            debian-arch: armhf
            debian-repository: https://httpredir.debian.org/debian/
            debian-version: bullseye
            gnu-abi: eabihf
          - target-cpu: s390x
            gnu-arch: s390x
            debian-arch: s390x
            debian-repository: https://httpredir.debian.org/debian/
            debian-version: bullseye
          - target-cpu: ppc64le
            gnu-arch: powerpc64le
            debian-arch: ppc64el
            debian-repository: https://httpredir.debian.org/debian/
            debian-version: bullseye

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v4

      - name: 'Get the BootJDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: linux-x64

        # Use linux-x64 JDK bundle as build JDK
      - name: 'Get build JDK'
        id: buildjdk
        uses: ./.github/actions/get-bundles
        with:
          platform: linux-x64

        # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.
      - name: 'Install toolchain and dependencies'
        run: |
          # Install dependencies using apt-get
          sudo apt-get update
          sudo apt-get install --only-upgrade apt
          sudo apt-get install \
              gcc-${{ inputs.gcc-major-version }} \
              g++-${{ inputs.gcc-major-version }} \
              gcc-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}} \
              g++-${{ inputs.gcc-major-version }}-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}} \
              libxrandr-dev libxtst-dev libcups2-dev libasound2-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}

      - name: 'Check cache for sysroot'
        id: get-cached-sysroot
        uses: actions/cache@v3
        with:
          path: sysroot
          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('./.github/workflows/build-cross-compile.yml') }}

      - name: 'Install sysroot dependencies'
        run: sudo apt-get install debootstrap qemu-user-static
        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'

      - name: 'Create sysroot'
        run: >
          sudo debootstrap
          --arch=${{ matrix.debian-arch }}
          --verbose
          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype-dev,libpng-dev
          --resolve-deps
          --variant=minbase
          ${{ matrix.debian-version }}
          sysroot
          ${{ matrix.debian-repository }}
        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'

      - name: 'Prepare sysroot'
        run: |
          # Prepare sysroot and remove unused files to minimize cache
          sudo chroot sysroot symlinks -cr .
          sudo chown ${USER} -R sysroot
          rm -rf sysroot/{dev,proc,run,sys,var}
          rm -rf sysroot/usr/{sbin,bin,share}
          rm -rf sysroot/usr/lib/{apt,gcc,udev,systemd}
          rm -rf sysroot/usr/libexec/gcc
        if: steps.get-cached-sysroot.outputs.cache-hit != 'true'

      - name: 'Configure'
        run: >
          bash configure
          --with-conf-name=linux-${{ matrix.target-cpu }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-zlib=system
          --enable-debug
          --disable-precompiled-headers
          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}
          --with-sysroot=sysroot
          --with-build-jdk=${{ steps.buildjdk.outputs.jdk-path }}
          CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}-gcc-${{ inputs.gcc-major-version }}
          CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-abi}}-g++-${{ inputs.gcc-major-version }}
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo ""Dumping config.log:"" &&
          cat config.log &&
          exit 1)

      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: 'hotspot ${{ inputs.make-arguments }}'
          platform: linux-${{ matrix.target-cpu }}

---
#
# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Build (linux)'

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      extra-conf-options:
        required: false
        type: string
      make-target:
        required: false
        type: string
        default: 'product-bundles test-bundles'
      debug-levels:
        required: false
        type: string
        default: '[ ""debug"", ""release"" ]'
      gcc-major-version:
        required: true
        type: string
      gcc-package-suffix:
        required: false
        type: string
        default: ''
      apt-architecture:
        required: false
        type: string
      apt-extra-packages:
        required: false
        type: string
      configure-arguments:
        required: false
        type: string
      make-arguments:
        required: false
        type: string
      runs-on:
        required: true
        type: string

jobs:
  build-linux:
    name: build
    runs-on: ${{fromJson(inputs.runs-on)}}
    #runs-on: 'ubuntu-20.04'

    strategy:
      fail-fast: false
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}
        include:
          - debug-level: debug
            flags: --with-debug-level=fastdebug
            suffix: -debug

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v4

      - name: 'Get boot JDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: ${{ inputs.platform }}

      - name: 'Get JTReg'
        id: jtreg
        uses: ./.github/actions/get-jtreg

      - name: 'Set architecture'
        id: arch
        run: |
          # Set a proper suffix for packages if using a different architecture
          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
            echo 'suffix=:${{ inputs.apt-architecture }}' >> $GITHUB_OUTPUT
          fi

      # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.
      - name: 'Install toolchain and dependencies'
        run: |
          # Install dependencies using apt-get
          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
            sudo dpkg --add-architecture ${{ inputs.apt-architecture }}
          fi
          sudo apt-get update -y
          sudo apt-get install -y --only-upgrade apt
          if [[ '${{ inputs.platform }}' == 'linux-aarch64' ]]; then
            extra_packages='libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev libfontconfig1-dev maven tar zip unzip'
          else
            extra_packages=
          fi
          sudo apt-get install -y gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }} $extra_packages
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}

      - name: 'Configure'
        run: >
          bash configure
          --with-conf-name=${{ inputs.platform }}
          ${{ matrix.flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-version-build=0
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-jtreg=${{ steps.jtreg.outputs.path }}
          --enable-jtreg-failure-handler
          --with-zlib=system
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo ""Dumping config.log:"" &&
          cat config.log &&
          exit 1)

      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Build serverless-adapter'
        id: build-serverless-adapter
        uses: ./.github/actions/build-serverless-adapter
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

---
#
# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Build (macos)'

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      extra-conf-options:
        required: false
        type: string
      make-target:
        required: false
        type: string
        default: 'product-bundles test-bundles'
      debug-levels:
        required: false
        type: string
        default: '[ ""debug"", ""release"" ]'
      xcode-toolset-version:
        required: true
        type: string
      configure-arguments:
        required: false
        type: string
      make-arguments:
        required: false
        type: string

jobs:
  build-macos:
    name: build
    runs-on: macos-11

    strategy:
      fail-fast: false
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}
        include:
          - debug-level: debug
            flags: --with-debug-level=fastdebug
            suffix: -debug

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v4

      - name: 'Get the BootJDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: macos-x64

      - name: 'Get JTReg'
        id: jtreg
        uses: ./.github/actions/get-jtreg

      - name: 'Install toolchain and dependencies'
        run: |
          # Run Homebrew installation and xcode-select
          brew install make
          sudo xcode-select --switch /Applications/Xcode_${{ inputs.xcode-toolset-version }}.app/Contents/Developer
          # This will make GNU make available as 'make' and not only as 'gmake'
          echo '/usr/local/opt/make/libexec/gnubin' >> $GITHUB_PATH

      - name: 'Configure'
        run: >
          bash configure
          --with-conf-name=${{ inputs.platform }}
          ${{ matrix.flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-jtreg=${{ steps.jtreg.outputs.path }}
          --enable-jtreg-failure-handler
          --with-zlib=system
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo ""Dumping config.log:"" &&
          cat config.log &&
          exit 1)

      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

---
#
# Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation. Alibaba designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#

name: 'Build (riscv)'

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      extra-conf-options:
        required: false
        type: string
      make-target:
        required: false
        type: string
        default: 'product-bundles test-bundles'
      debug-levels:
        required: false
        type: string
        default: '[ ""release"" ]'
      gcc-major-version:
        required: false
        type: string
      gcc-package-suffix:
        required: false
        type: string
        default: ''
      apt-architecture:
        required: false
        type: string
      apt-extra-packages:
        required: false
        type: string
      configure-arguments:
        required: false
        type: string
      make-arguments:
        required: false
        type: string

jobs:
  build-linux:
    name: build
    runs-on: [self-hosted , X64]
    container:
      image: docker.io/alibabadragonwelljdk/centos7_gcc7_build_image:latest

    strategy:
      fail-fast: false
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v2

      - name: 'Configure'
        run: >
          LD_LIBRARY_PATH=/opt/riscv_toolchain_linux/lib64
          PATH=/opt/riscv_toolchain_linux/bin:/usr/local/gcc/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          bash configure
          --verbose
          --with-vendor-name=Alibaba
          --with-vendor-url=http://www.alibabagroup.com
          --with-vendor-bug-url='mailto:dragonwell_use@googlegroups.com'
          --with-vendor-vm-bug-url='mailto:dragonwell_use@googlegroups.com'
          --without-version-opt
          --without-version-pre
          --with-version-build=9
          --with-version-patch=14
          --with-boot-jdk=/usr/lib/jvm/jdk-10
          --with-native-debug-symbols=external
          --with-jvm-variants=server
          --disable-warnings-as-errors
          --openjdk-target=riscv64-unknown-linux-gnu
          --with-sysroot=/opt/fedora28_riscv_root
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo ""Dumping config.log:"" &&
          cat config.log &&
          exit 1)

      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

---
#
# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Build (windows)'

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      extra-conf-options:
        required: false
        type: string
      make-target:
        required: false
        type: string
        default: 'product-bundles test-bundles'
      debug-levels:
        required: false
        type: string
        default: '[ ""debug"", ""release"" ]'
      msvc-toolset-version:
        required: true
        type: string
      msvc-toolset-architecture:
        required: true
        type: string
      configure-arguments:
        required: false
        type: string
      make-arguments:
        required: false
        type: string

env:
  # These are needed to make the MSYS2 bash work properly
  MSYS2_PATH_TYPE: minimal
  CHERE_INVOKING: 1

jobs:
  build-windows:
    name: build
    runs-on: windows-2019
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}
        include:
          - debug-level: debug
            flags: --with-debug-level=fastdebug
            suffix: -debug

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v4

      - name: 'Get MSYS2'
        uses: ./.github/actions/get-msys2

      - name: 'Get the BootJDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: windows-x64

      - name: 'Get JTReg'
        id: jtreg
        uses: ./.github/actions/get-jtreg

      - name: 'Check toolchain installed'
        id: toolchain-check
        run: |
          set +e
          '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/vc/auxiliary/build/vcvars64.bat' -vcvars_ver=${{ inputs.msvc-toolset-version }}
          if [ $? -eq 0 ]; then
            echo ""Toolchain is already installed""
            echo ""toolchain-installed=true"" >> $GITHUB_OUTPUT
          else
            echo ""Toolchain is not yet installed""
            echo ""toolchain-installed=false"" >> $GITHUB_OUTPUT
          fi

      - name: 'Install toolchain and dependencies'
        run: |
          # Run Visual Studio Installer
          '/c/Program Files (x86)/Microsoft Visual Studio/Installer/vs_installer.exe' \
            modify --quiet --installPath 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise' \
            --add Microsoft.VisualStudio.Component.VC.${{ inputs.msvc-toolset-version }}.${{ inputs.msvc-toolset-architecture }}
        if: steps.toolchain-check.outputs.toolchain-installed != 'true'

      - name: 'Configure'
        run: >
          bash configure
          --with-conf-name=${{ inputs.platform }}
          ${{ matrix.flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-jtreg=${{ steps.jtreg.outputs.path }}
          --enable-jtreg-failure-handler
          --with-msvc-toolset-version=${{ inputs.msvc-toolset-version }}
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo ""Dumping config.log:"" &&
          cat config.log &&
          exit 1)
        env:
          # We need a minimal PATH on Windows
          # Set PATH to """", so just GITHUB_PATH is included
          PATH: ''
        shell: env /usr/bin/bash --login -eo pipefail {0}

      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

---
#
# Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation. Alibaba designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#

name: Prerequisites

on:
  workflow_call:
    inputs:
      platforms:
        required: true
        type: string
    outputs:
      should_run:
        value: ${{ jobs.prerequisites.outputs.should_run }}
      bundle_id:
        value: ${{ jobs.prerequisites.outputs.bundle_id }}
      jdk_version:
        value: ${{ jobs.prerequisites.outputs.jdk_version }}
      platform_linux_x64:
        value: ${{ jobs.prerequisites.outputs.platform_linux_x64 }}
      platform_linux_aarch64:
        value: ${{ jobs.prerequisites.outputs.platform_linux_aarch64 }}
      platform_windows_x64:
        value: ${{ jobs.prerequisites.outputs.platform_windows_x64 }}
      platform_riscv64:
        value: ${{ jobs.prerequisites.outputs.platform_riscv64 }}
      dependencies:
        value: ${{ jobs.prerequisites.outputs.dependencies }}

jobs:
  check_commit:
    name: 'Check Commit Message'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: dragonwell-releng/check_commit_action@master
    if: github.event_name == 'pull_request'

  prerequisites:
    name: 'Prerequisites'
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_submit.outputs.should_run }}
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      jdk_version: ${{ steps.check_jdk_versions.outputs.jdk_version }}
      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}
      platform_linux_aarch64: ${{ steps.check_platforms.outputs.platform_linux_aarch64 }}
      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}
      platform_riscv64: ${{ steps.check_platforms.outputs.platform_riscv64 }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}

    steps:
      - name: 'Check if submit tests should actually run depending on secrets and manual triggering'
        id: check_submit
        run: echo ""::set-output name=should_run::${{ inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/')) }}""

      - name: 'Check which platforms should be included'
        id: check_platforms
        run: |
          echo ""::set-output name=platform_linux_x64::${{ contains(inputs.platforms, 'linux x64') || (inputs.platforms == '') }}""
          echo ""::set-output name=platform_linux_aarch64::${{ contains(inputs.platforms, 'linux aarch64') || (inputs.platforms == '') }}""
          echo ""::set-output name=platform_windows_x64::${{ contains(inputs.platforms, 'windows x64') || (inputs.platforms == '') }}""
          echo ""::set-output name=platform_riscv64::${{ contains(inputs.platforms, 'riscv64') || (inputs.platforms == '') }}""
        if: steps.check_submit.outputs.should_run != false

      - name: 'Determine unique bundle identifier'
        id: check_bundle_id
        run: echo ""::set-output name=bundle_id::${GITHUB_ACTOR}_${GITHUB_SHA:0:8}""
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Checkout the source'
        uses: actions/checkout@v3
        with:
          path: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Determine versions and locations to be used for dependencies'
        id: check_deps
        run: ""echo ::set-output name=dependencies::`cat make/autoconf/version-numbers make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\""//g' -e 's/\\(.*\\)=\\(.*\\)/\""\\1\"": \""\\2\"",/g' -e '$s/,\\s\\{0,\\}$/\\}/'`""
        working-directory: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Print extracted dependencies to the log'
        run: ""echo '${{ steps.check_deps.outputs.dependencies }}'""
        if: steps.check_submit.outputs.should_run != 'false'

      - name: 'Determine full JDK versions'
        id: check_jdk_versions
        shell: bash
        run: |
          FEATURE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_FEATURE }}
          INTERIM=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_INTERIM }}
          UPDATE=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_UPDATE }}
          PATCH=${{ fromJson(steps.check_deps.outputs.dependencies).DEFAULT_VERSION_PATCH }}
          if [ ""x${PATCH}"" != ""x0"" ]; then
             V=${FEATURE}.${INTERIM}.${UPDATE}.${PATCH}
          elif [ ""x${UPDATE}"" != ""x0"" ]; then
             V=${FEATURE}.${INTERIM}.${UPDATE}
          elif [ ""x${INTERIM}"" != ""x0"" ]; then
             V={FEATURE}.${INTERIM}
          else
             V=${FEATURE}
          fi
          echo ""::set-output name=jdk_version::${V}""
        if: steps.check_submit.outputs.should_run != 'false'

---
#
# Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation. Alibaba designates this
# particular file as subject to the ""Classpath"" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#

name: 'Dragonwell GHA Sanity Checks'

on:
  pull_request:
    branches:
      - master
  push:
    branches-ignore:
      - pr/*
      - dragonwell_extended-*
      - dragonwell_standard-*
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platform(s) to execute on (comma separated, e.g. ""linux-x64, macos, aarch64"")'
        required: true
        #default: 'linux-x64, linux-cross-compile, windows-x64'
        #default: 'linux-x64, linux-aarch64'
        default: 'linux aarch64'
      configure-arguments:
        description: 'Additional configure arguments'
        required: false
      make-arguments:
        description: 'Additional make arguments'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  ###
  ### Determine platforms to include
  ###

  prerequisites:
    name: Prerequisites
    uses: ./.github/workflows/check_pr.yml
    with:
      platforms: 'linux x64, linux aarch64, windows x64, riscv64'

  ###
  ### Build jobs
  ###

  build-linux-x64:
    name: linux-x64
    needs: prerequisites
    uses: ./.github/workflows/build-linux.yml
    with:
      platform: linux-x64
      gcc-major-version: '10'
      configure-arguments: ${{ github.event.inputs.configure-arguments }}
      make-arguments: ${{ github.event.inputs.make-arguments }}
      extra-conf-options: --with-default-make-target=""product-bundles test-bundles"" --with-jvm"
apache;inlong;apache/inlong;https://github.com/apache/inlong;https://api.github.com/repos/apache/inlong;master;03/01/2020 08:13;22/04/2024 12:41;TRUE;"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Build

on:
  push:
    paths:
      - '.github/workflows/ci_build.yml'
      - '**/pom.xml'
      - 'inlong-agent/**'
      - 'inlong-audit/**'
      - 'inlong-common/**'
      - 'inlong-dashboard/**'
      - 'inlong-dataproxy/**'
      - 'inlong-distribution/**'
      - 'inlong-manager/**'
      - 'inlong-sdk/**'
      - 'inlong-sort/**'
      - 'inlong-sort-standalone/**'
      - 'inlong-tubemq/**'
      - '!**.md'

  pull_request:
    paths:
      - '.github/workflows/ci_build.yml'
      - '**/pom.xml'
      - 'inlong-agent/**'
      - 'inlong-audit/**'
      - 'inlong-common/**'
      - 'inlong-dashboard/**'
      - 'inlong-dataproxy/**'
      - 'inlong-distribution/**'
      - 'inlong-manager/**'
      - 'inlong-sdk/**'
      - 'inlong-sort/**'
      - 'inlong-sort-standalone/**'
      - 'inlong-tubemq/**'
      - '!**.md'

jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Release space size
      - name: Remove unnecessary packages
        run: |
          echo ""=== Before pruning ===""
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          echo ""=== After pruning ===""
          df -h

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: adopt

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/inlong
            !~/.m2/repository/com/github/eirslett
          key: ${{ runner.os }}-inlong-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-inlong-build

      - name: Build with Maven
        run: |
          mvn --batch-mode --update-snapshots -e -V clean install -DskipTests -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Daether.connector.http.reuseConnections=false -Daether.connector.requestTimeout=60000
        env:
          CI: false

      - name: Get InLong version
        if: ${{ success() }}
        run: |
          version=`mvn -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -q`
          echo ""VERSION=${version}"" >> $GITHUB_ENV

      - name: Upload binary package
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: apache-inlong-${{ env.VERSION }}-bin.tar.gz
          path: ./inlong-distribution/target/apache-inlong-${{ env.VERSION }}-bin.tar.gz

      - name: Upload sort connectors package for flink v1.13
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: apache-inlong-${{ env.VERSION }}-sort-connectors-flink-v1.13.tar.gz
          path: ./inlong-distribution/target/apache-inlong-${{ env.VERSION }}-sort-connectors-flink-v1.13.tar.gz

      - name: Upload sort connectors package for flink v1.15
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: apache-inlong-${{ env.VERSION }}-sort-connectors-flink-v1.15.tar.gz
          path: ./inlong-distribution/target/apache-inlong-${{ env.VERSION }}-sort-connectors-flink-v1.15.tar.gz

      - name: Upload sort connectors package for flink v1.18
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: apache-inlong-${{ env.VERSION }}-sort-connectors-flink-v1.18.tar.gz
          path: ./inlong-distribution/target/apache-inlong-${{ env.VERSION }}-sort-connectors-flink-v1.18.tar.gz

      - name: Clean up build packages
        run: mvn clean

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Helm Charts Lint and Test

on:
  push:
    paths:
      - '.github/workflows/ci_chart_test.yml'
      - '.github/ct.yml'
      - '.github/kind.yml'
      - 'docker/kubernetes/**'
      - '!docker/kubernetes/NOTES.txt'
      - '!**.md'

  pull_request:
    paths:
      - '.github/workflows/ci_chart_test.yml'
      - '.github/ct.yml'
      - '.github/kind.yml'
      - 'docker/kubernetes/**'
      - '!docker/kubernetes/NOTES.txt'
      - '!**.md'

env:
  CT_CONFIG_PATH: '.github/ct.yml'
  KIND_CONFIG_PATH: '.github/kind.yml'

jobs:
  chart-test:
    name: Lint and test charts
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        kubernetes-version:
          - 'kindest/node:v1.21.10'
          - 'kindest/node:v1.23.4'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.5.0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: ./.github/actions/chart-testing-action

      - name: List changed charts
        id: list-changed
        run: |
          changed=$(ct list-changed --config ${{ env.CT_CONFIG_PATH }} --target-branch ${{ github.event.repository.default_branch }})
          if [[ -n ""$changed"" ]]; then
            echo ""changed=true"" >> $GITHUB_OUTPUT
            echo ""Changed charts: $changed""
          else
            echo ""Charts are not changed, they will not be linted, validated, installed and tested.""
          fi

      # NOTE: If the charts have not changed, they will not be linted, validated, installed and tested.
      - name: Lint and validate charts
        run: ct lint --config ${{ env.CT_CONFIG_PATH }}

      - name: Create Kind cluster
        if: ${{ steps.list-changed.outputs.changed == 'true' }}
        uses: ./.github/actions/kind-action
        with:
          config: ${{ env.KIND_CONFIG_PATH }}
          node_image: ${{ matrix.kubernetes-version }}

      - name: Install and test charts
        if: ${{ success() && steps.list-changed.outputs.changed == 'true' }}
        run: ct install --config ${{ env.CT_CONFIG_PATH }}

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Code Format Check

on: [ push, pull_request ]

jobs:
  build:
    name: Code Format Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: adopt

      - name: Spotless Check
        run: mvn spotless:check
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Check License Header

on: [ push, pull_request ]

jobs:
  check-license:
    name: Check license header
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check license header
        uses: apache/skywalking-eyes@v0.3.0
        with:
          log: info
          config: .licenserc.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Check Pull Request Title

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - edited
      - synchronize

jobs:
  check:
    name: Check pull request title
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # The correct title should start with [WIP] or [INLONG-xxx],
      # where xxx is the issue number, e.g. [INLONG-123].
      - name: Check title
        if: ${{ github.event_name == 'pull_request_target' }}
        run: |
          if [[ ! ""$PR_TITLE"" =~ ^\[(WIP|INLONG-[0-9]+)\]\[[a-zA-Z]+\].*$ ]]; then
            echo ""This pull request title is not valid.""
            echo ""Title Example: [INLONG-XYZ][Component] Title of the pull request""
            echo ""XYZ should be replaced by the actual GitHub Issue number, e.g. [INLONG-123]""
            echo ""Component should be replaced by the InLong component name, e.g. [INLONG-123][Manager]""
          
            # add a job summary
            echo ""## This pull request title is not valid! :bug:"" >> $GITHUB_STEP_SUMMARY
            echo ""Title Example: \`[INLONG-XYZ][Component] Title of the pull request\`"" >> $GITHUB_STEP_SUMMARY
            echo ""> - **XYZ** should be replaced by the actual [GitHub Issue](https://github.com/apache/inlong/issues) number, e.g. \`[INLONG-123]\`"" >> $GITHUB_STEP_SUMMARY
            echo ""> - **Component** should be replaced by the InLong component name, e.g. \`[INLONG-123][Manager]\`"" >> $GITHUB_STEP_SUMMARY

            exit 1
          fi
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Docker Build and Push

on:
  push:
    paths:
      - '.github/workflows/ci_docker.yml'
      - '**/pom.xml'
      - 'inlong-agent/**'
      - 'inlong-audit/**'
      - 'inlong-common/**'
      - 'inlong-dashboard/**'
      - 'inlong-dataproxy/**'
      - 'inlong-distribution/**'
      - 'inlong-manager/**'
      - 'inlong-sdk/**'
      - 'inlong-sort/**'
      - 'inlong-sort-standalone/**'
      - 'inlong-tubemq/**'
      - '!**.md'

  pull_request:
    paths:
      - '.github/workflows/ci_docker.yml'
      - '**/Dockerfile'
      - 'inlong-agent/agent-docker/**'
      - 'inlong-audit/audit-docker/**'
      - 'inlong-dataproxy/dataproxy-docker/**'
      - 'inlong-manager/manager-docker/**'
      - 'inlong-tubemq/tubemq-docker/**'
      - '!**.md'

jobs:
  docker:
    name: Docker build and push
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Release space size
      - name: Remove unnecessary packages
        run: |
          echo ""=== Before pruning ===""
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          echo ""=== After pruning ===""
          df -h

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: adopt

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.7

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/inlong
          key: ${{ runner.os }}-inlong-docker-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-inlong-docker

      - name: Build Docker images
        run: mvn --batch-mode --update-snapshots -e -V clean package -DskipTests -Pdocker
        env:
          CI: false

      - name: Match branch
        id: match
        if: |
          success()
          && github.event_name == 'push'
          && github.repository_owner == 'apache'
        run: |
          if [[ ${{ github.ref_name }} == ${{ github.event.repository.default_branch }} ]]; then
            echo ""match_master=true"" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref_name }} =~ ^branch-[0-9]+\.[0-9]+$ ]]; then
            echo ""match_release=true"" >> $GITHUB_OUTPUT
          fi

      # Publish x86 Docker images when the changes are being pushed to the master branch or a release branch like 'branch-1.4'.
      - name: Push x86 Docker images to Docker Hub
        if: |
          steps.match.outputs.match_master == 'true'
          || steps.match.outputs.match_release == 'true'
        working-directory: docker
        run: |
          bash +x publish-by-arch.sh --tag --publish
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_ORG: inlong

      # Publish aarch64 Docker images when the changes are being pushed to a release branch like 'branch-1.4'.
      - name: Push aarch64 Docker images to Docker Hub
        if: ${{ steps.match.outputs.match_release == 'true' }}
        working-directory: docker
        run: |
          bash +x build-docker-images.sh --buildx aarch64
          bash +x publish-by-arch.sh --tag --arch aarch64 --publish
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_ORG: inlong

      # Push manifest after publishing aarch64 Docker images.
      - name: Push manifest to Docker Hub
        if: ${{ steps.match.outputs.match_release == 'true' }}
        working-directory: docker
        run: |
          bash +x publish-by-arch.sh --manifest
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Clean up build packages
        run: mvn clean
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Greeting

on:
  pull_request_target:
    types:
      - opened
  issues:
    types:
      - opened

jobs:
  greeting:
    name: Greeting
    runs-on: ubuntu-22.04
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Interact with newcomers
        uses: actions/first-interaction@v1
        continue-on-error: true
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pr-message: |
            Hello @${{ github.actor }}, thank you for submitting a PR to InLong 💖 We will respond as soon as possible ⏳
            This seems to be your first PR 🌠 Please be sure to follow our [Contribution Guidelines](https://inlong.apache.org/community/how-to-contribute).
            If you have any questions in the meantime, you can also ask us on the [InLong Discussions](https://github.com/apache/inlong/discussions) 🔍
          issue-message: |
            Hello @${{ github.actor }}, thank you for opening your first issue in InLong 🧡 We will respond as soon as possible ⏳
            If this is a bug report, please provide screenshots or error logs for us to reproduce your issue, so we can do our best to fix it.
            If you have any questions in the meantime, you can also ask us on the [InLong Discussions](https://github.com/apache/inlong/discussions) 🔍

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Pull Request Labeler

on: pull_request_target

jobs:
  label:
    name: Label
    runs-on: ubuntu-22.04
    steps:
      - name: Label the PR
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml
          sync-labels: true

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Mark Stale Issues and PRs

on:
  schedule:
    - cron: '30 1 * * *'

jobs:
  stale:
    name: Stale
    runs-on: ubuntu-22.04
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Mark issues and PRs
        uses: actions/stale@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: 'This issue is stale because it has been open for 60 days with no activity.'
          stale-pr-message: 'This PR is stale because it has been open for 60 days with no activity.'
          days-before-issue-stale: 60       # the idle number of days before marking the issues as stale
          days-before-pr-stale: 60          # the idle number of days before marking the pull requests as stale
          days-before-issue-close: -1       # the issues will never be closed automatically
          days-before-pr-close: -1          # the pull requests will never be closed automatically
          operations-per-run: 500           # max number of operations per run
          exempt-issue-labels: 'WIP'        # labels on issues exempted from stale
          exempt-pr-labels: 'WIP'           # labels on PRs exempted from stale
          stale-issue-label: 'stage/stale'        # label to apply on staled issues
          stale-pr-label: 'stage/stale'           # label to apply on staled PRs

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: InLong Unit Test

on:
  push:
    paths:
      - '.github/workflows/ci_ut.yml'
      - '**/pom.xml'
      - 'inlong-agent/**'
      - 'inlong-audit/**'
      - 'inlong-common/**'
      - 'inlong-dashboard/**'
      - 'inlong-dataproxy/**'
      - 'inlong-distribution/**'
      - 'inlong-manager/**'
      - 'inlong-sdk/**'
      - 'inlong-sort/**'
      - 'inlong-sort-standalone/**'
      - 'inlong-tubemq/**'
      - '!**.md'

  pull_request:
    paths:
      - '.github/workflows/ci_ut.yml'
      - '**/pom.xml'
      - 'inlong-agent/**'
      - 'inlong-audit/**'
      - 'inlong-common/**'
      - 'inlong-dashboard/**'
      - 'inlong-dataproxy/**'
      - 'inlong-distribution/**'
      - 'inlong-manager/**'
      - 'inlong-sdk/**'
      - 'inlong-sort/**'
      - 'inlong-sort-standalone/**'
      - 'inlong-tubemq/**'
      - '!**.md'

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: adopt

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            !~/.m2/repository/org/apache/inlong
          key: ${{ runner.os }}-inlong-ut-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-inlong-ut

      - name: Set up swapfile path
        run: |
          sudo sysctl -w vm.max_map_count=262144
          sudo sysctl -w fs.file-max=65536
          sudo fallocate -l 5G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile

      - name: Remove unnecessary packages
        run: |
          echo ""=== Before pruning ===""
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          echo
          echo ""=== After pruning ===""
          df -h

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots -e -V clean install -DskipTests -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Daether.connector.http.reuseConnections=false -Daether.connector.requestTimeout=60000
        env:
          CI: false

      - name: Unit test with Maven
        run: mvn --batch-mode --update-snapshots -e -V test -pl !:sort-end-to-end-tests-v1.15,!:sort-end-to-end-tests-v1.13
        env:
          CI: false

      - name: Upload unit test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports
          path: ./**/target/surefire-reports/
          if-no-files-found: ignore

      - name: Upload integration test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failsafe-reports
          path: ./**/target/failsafe-reports/
          if-no-files-found: ignore

      - name: Clean up build packages
        run: mvn clean

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name:
  InLong Unit Test For Flink 1.13

on:
  push:
    paths:
      - '.github/workflows/ci_ut_flink13.yml'
      - 'inlong-sort/**'
      - '!**.md'

  pull_request:
    paths:
      - '.github/workflows/ci_ut_flink13.yml'
      - 'inlong-sort/**'
      - '!**.md'

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Release space size
      - name: Remove unnecessary packages
        run: |
          echo ""=== Before pruning ===""
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          echo ""=== After pruning ===""
          df -h

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: adopt

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/inlong
          key: ${{ runner.os }}-inlong-flink13-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-inlong-flink13

      - name: Build for Flink 1.13 with Maven
        run: mvn --update-snapshots -e -V clean install -U -pl :sort-core,:sort-end-to-end-tests-v1.13 -am -Pv1.13 -DskipTests -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Daether.connector.http.reuseConnections=false -Daether.connector.requestTimeout=60000
        env:
          CI: false

      - name: Unit test for Flink 1.13 with Maven
        run: mvn --update-snapshots -e -V verify -pl :sort-core,:sort-end-to-end-tests-v1.13 -am -Pv1.13
        env:
          CI: false

      - name: Upload unit test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports
          path: ./**/target/surefire-reports/
          if-no-files-found: ignore

      - name: Upload integration test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: failsafe-reports
          path: ./**/target/failsafe-reports/
          if-no-files-found: ignore

      - name: Clean up build packages
        run: mvn clean
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name:
  InLong Unit Test For Flink 1.15

on:
  push:
    paths:
      - '.github/workflows/ci_ut_flink15.yml'
      - 'inlong-sort/**'
      - '!**.md'

  pull_request:
    paths:
      - '.github/workflows/ci_ut_flink15.yml'
      - 'inlong-sort/**'
      - '!**.md'

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Release space size
      - name: Remove unnecessary packages
        run: |
          echo ""=== Before pruning ===""
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          echo ""=== After pruning ===""
          df -h

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: adopt

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/inlong
          key: ${{ runner.os }}-inlong-flink15-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-inlong-flink15

      - name: Build for Flink 1.15 with Maven
        run: mvn --update-snapshots -e -V clean install -U -pl :sort-core,:sort-end-to-end-tests-v1.15 -am -Pv1.15 -DskipTests -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Daether.connector.http.reuseConnections=false -Daether.connector.requestTimeout=60000
        env:
          CI: false

      - name: Unit test for Flink 1.15 with Maven
        run: mvn --update-snapshots -e -V verify -pl :sort-core,:sort-end-to-end-tests-v1.15 -am -Pv1.15
        env:
          CI: false

      - name: Upload unit test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports
          path: ./**/target/surefire-reports/
          if-no-files-found: ignore

      - name: Upload integration test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
       "
momosecurity;momo-code-sec-inspector-java;momosecurity/momo-code-sec-inspector-java;https://github.com/momosecurity/momo-code-sec-inspector-java;https://api.github.com/repos/momosecurity/momo-code-sec-inspector-java;2018.3;09/10/2020 09:51;22/04/2024 09:01;FALSE;
abhpd;hacktoberfest2021;abhpd/hacktoberfest2021;https://github.com/abhpd/hacktoberfest2021;https://api.github.com/repos/abhpd/hacktoberfest2021;main;09/10/2020 10:07;15/04/2024 22:03;FALSE;
BlueMap-Minecraft;BlueMap;BlueMap-Minecraft/BlueMap;https://github.com/BlueMap-Minecraft/BlueMap;https://api.github.com/repos/BlueMap-Minecraft/BlueMap;master;02/11/2019 17:25;20/04/2024 17:51;TRUE;"name: Build

on:
  push:
    branches:
      - ""*""
    tags:
      - ""*""
  pull_request:
    branches:
      - ""*""
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0 # needed for versioning
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: |
            16
            17
          cache: 'gradle'
      - name: Build with Gradle
        run: ./gradlew clean spotlessCheck test build
      - uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: build/release/*

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: build/release
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          # Always tagged as the pushed branch (ex. master)
          # For releases: latest, full version and major version (ex. latest, v3.3 and v3)
          tags: |
            type=raw,value={{branch}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=raw,value={{tag}},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=match,pattern=v\d+,group=0,enable=${{ startsWith(github.ref, 'refs/tags/') }}
          flavor: |
            latest=false
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

---
name: Publish

on:
  workflow_dispatch:
  push:
    tags:
      - ""**""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0 # needed for versioning
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: |
            16
            17
          cache: 'gradle'
      - name: Build with Gradle
        run: ./gradlew clean :BlueMapCore:publish :BlueMapCommon:publish
        env:
          BLUECOLORED_USERNAME: ${{ secrets.BLUECOLORED_USERNAME }}
          BLUECOLORED_PASSWORD: ${{ secrets.BLUECOLORED_PASSWORD }}

---
name: Check translations

on:
  push:
    paths:
      - ""BlueMapCommon/webapp/public/lang/**""
      - "".github/translation-checker/**""

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install deps
        working-directory: .github/translation-checker
        run: npm ci
      - name: Run Translation Checker
        working-directory: .github/translation-checker
        run: npm start

---
"
qinming99;dst-admin;qinming99/dst-admin;https://github.com/qinming99/dst-admin;https://api.github.com/repos/qinming99/dst-admin;master;09/10/2020 16:58;22/04/2024 10:29;FALSE;
baomidou;generator;baomidou/generator;https://github.com/baomidou/generator;https://api.github.com/repos/baomidou/generator;develop;14/10/2020 16:42;17/04/2024 09:53;FALSE;
zhp8341;flink-streaming-platform-web;zhp8341/flink-streaming-platform-web;https://github.com/zhp8341/flink-streaming-platform-web;https://api.github.com/repos/zhp8341/flink-streaming-platform-web;master;15/10/2020 16:26;10/04/2024 13:34;FALSE;
Tencent;TencentKona-8;Tencent/TencentKona-8;https://github.com/Tencent/TencentKona-8;https://api.github.com/repos/Tencent/TencentKona-8;master;01/11/2019 06:02;18/04/2024 10:34;TRUE;"name: Pre-submit tests

on:
  push:
    branches-ignore:
      - master
      - pr/*
  workflow_dispatch:
    inputs:
      platforms:
        description: ""Platform(s) to execute on""
        required: true
        default: ""Linux additional (hotspot only), Linux x64, Linux x86, Windows x64, Windows x86, macOS x64""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prerequisites:
    name: Prerequisites
    runs-on: ""ubuntu-20.04""
    outputs:
      should_run: ${{ steps.check_submit.outputs.should_run }}
      bundle_id: ${{ steps.check_bundle_id.outputs.bundle_id }}
      platform_linux_additional: ${{ steps.check_platforms.outputs.platform_linux_additional }}
      platform_linux_x64: ${{ steps.check_platforms.outputs.platform_linux_x64 }}
      platform_linux_x86: ${{ steps.check_platforms.outputs.platform_linux_x86 }}
      platform_windows_x64: ${{ steps.check_platforms.outputs.platform_windows_x64 }}
      platform_windows_x86: ${{ steps.check_platforms.outputs.platform_windows_x86 }}
      platform_macos_x64: ${{ steps.check_platforms.outputs.platform_macos_x64 }}
      dependencies: ${{ steps.check_deps.outputs.dependencies }}

    steps:
      - name: Check if submit tests should actually run depending on secrets and manual triggering
        id: check_submit
        run: echo ""should_run=${{ github.event.inputs.platforms != '' || (!secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/')) }}"" >> $GITHUB_OUTPUT

      - name: Check which platforms should be included
        id: check_platforms
        run: |
          echo ""platform_linux_additional=${{ contains(github.event.inputs.platforms, 'linux additional (hotspot only)') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux additional (hotspot only)'))) }}"" >> $GITHUB_OUTPUT
          echo ""platform_linux_x64=${{ contains(github.event.inputs.platforms, 'linux x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x64'))) }}"" >> $GITHUB_OUTPUT
          echo ""platform_linux_x86=${{ contains(github.event.inputs.platforms, 'linux x86') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux x86'))) }}"" >> $GITHUB_OUTPUT
          echo ""platform_windows_x64=${{ contains(github.event.inputs.platforms, 'windows x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x64'))) }}"" >> $GITHUB_OUTPUT
          echo ""platform_windows_x86=${{ contains(github.event.inputs.platforms, 'windows x86') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'windows x86'))) }}"" >> $GITHUB_OUTPUT
          echo ""platform_macos_x64=${{ contains(github.event.inputs.platforms, 'macos x64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'macos x64'))) }}"" >> $GITHUB_OUTPUT
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine unique bundle identifier
        id: check_bundle_id
        run: echo ""bundle_id=${GITHUB_ACTOR}_${GITHUB_SHA:0:8}"" >> $GITHUB_OUTPUT
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Checkout the source
        uses: actions/checkout@v3
        with:
          path: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine versions and locations to be used for dependencies
        id: check_deps
        run: ""echo dependencies=`cat common/autoconf/version-numbers make/conf/test-dependencies | sed -e '1i {' -e 's/#.*//g' -e 's/\""//g' -e 's/\\(.*\\)=\\(.*\\)/\""\\1\"": \""\\2\"",/g' -e '$s/,\\s\\{0,\\}$/\\}/'` >> $GITHUB_OUTPUT""
        working-directory: jdk
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Print extracted dependencies to the log
        run: ""echo '${{ steps.check_deps.outputs.dependencies }}'""
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg ref to checkout
        run: ""echo JTREG_REF=jtreg${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}-${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }} >> $GITHUB_ENV""
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg version to build
        run: echo ""BUILD_VERSION=${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_VERSION }}"" >> $GITHUB_ENV
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Determine the jtreg build number to build
        run: echo ""BUILD_NUMBER=${{ fromJson(steps.check_deps.outputs.dependencies).JTREG_BUILD }}"" >> $GITHUB_ENV
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Check if a jtreg image is present in the cache
        id: jtreg
        uses: actions/cache@v3
        with:
          path: ~/jtreg/
          key: jtreg-${{ env.JTREG_REF }}-v1
        if: steps.check_submit.outputs.should_run != 'false'

      - name: Checkout the jtreg source
        uses: actions/checkout@v3
        with:
          repository: ""openjdk/jtreg""
          ref: ${{ env.JTREG_REF }}
          path: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Build jtreg
        run: bash make/build-all.sh ${JAVA_HOME_8_X64}
        working-directory: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Move jtreg image to destination folder
        run: mv build/images/jtreg ~/
        working-directory: jtreg
        if: steps.check_submit.outputs.should_run != 'false' && steps.jtreg.outputs.cache-hit != 'true'

      - name: Store jtreg for use by later steps
        uses: actions/upload-artifact@v3
        with:
          name: transient_jtreg_${{ steps.check_bundle_id.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.check_submit.outputs.should_run != 'false'

  linux_x64_build:
    name: Linux x64
    runs-on: ""ubuntu-20.04""
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x64 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    env:
      JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}""

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3
        with:
          path: jdk

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Fix jtreg permissions
        run: chmod -R a+rx ${HOME}/jtreg/

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk gcc-9 g++-9 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9

      - name: Configure
        run: >
          bash configure
          --with-conf-name=linux-x64
          ${{ matrix.flags }}
          --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-build-number=b00
          --with-jtreg=${HOME}/jtreg
          --with-zlib=bundled
        working-directory: jdk

      - name: Build
        run: make CONF_NAME=linux-x64 LOG_LEVEL=debug images
        working-directory: jdk

      - name: Pack artifacts
        run: |
          tar -czf jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}.tar.gz -C jdk/build/linux-x64/images j2sdk-image

      - name: Persist test bundles
        uses: actions/upload-artifact@v3
        with:
          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}.tar.gz

  linux_x64_test:
    name: Linux x64
    runs-on: ""ubuntu-20.04""
    needs:
      - prerequisites
      - linux_x64_build

    strategy:
      fail-fast: false
      matrix:
        test:
          - jdk/tier1
          - langtools/tier1
          - hotspot/tier1
        include:
          - test: jdk/tier1
            suites: jdk_tier1
          - test: langtools/tier1
            suites: langtools_tier1
          - test: hotspot/tier1
            suites: hotspot_tier1

    env:
      JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}""
      BOOT_JDK: ""/usr/lib/jvm/java-8-openjdk-amd64""

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Restore build artifacts
        id: build_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x64${{ matrix.artifact }}
        continue-on-error: true

      - name: Restore build artifacts (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jdk-linux-x64${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x64${{ matrix.artifact }}
        if: steps.build_restore.outcome == 'failure'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk

      - name: Unpack jdk
        run: |
          mkdir -p ""${HOME}/jdk-linux-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}""
          tar -xzf ""${HOME}/jdk-linux-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}.tar.gz"" -C ""${HOME}/jdk-linux-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}""

      - name: Run tests
        run: >
          chmod +x ""${HOME}/jtreg/bin/jtreg"" &&
          mkdir test-results &&
          cd test &&
          PRODUCT_HOME=""${HOME}/jdk-linux-x64${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin${{ matrix.artifact }}/j2sdk-image""
          JT_HOME=""${HOME}/jtreg""
          ALT_OUTPUTDIR=""${GITHUB_WORKSPACE}/test-results""
          JAVA_ARGS=""-Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=latest""
          JTREG_TIMEOUT_FACTOR=""4""
          make
          ""${{ matrix.suites }}""

      - name: Check that all tests executed successfully
        if: always()
        run: >
          if cat test-results/testoutput/*/exitcode.txt | grep -q -v '^0$'
          || ! cat test-results/testoutput/*/Stats.txt | grep -q 'fail=0' ; then
            cat test-results/testoutput/*/JTreport/text/{newfailures,other_errors}.txt ;
            exit 1 ;
          fi

      - name: Create suitable test log artifact name
        if: always()
        run: echo ""logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`"" >> $GITHUB_ENV

      - name: Package test results
        if: always()
        working-directory: test-results
        run: >
          zip -r9
          ""$HOME/linux-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip""
          .
          -x ""*ARCHIVE_BUNDLE.zip""
        continue-on-error: true

      - name: Persist test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: ~/linux-x64${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip
        continue-on-error: true

  linux_additional_build:
    name: Linux additional
    runs-on: ""ubuntu-20.04""
    needs:
      - prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_additional != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - hs x64 build only
          - hs x64 zero build only
          - hs x86 minimal build only
          - hs x86 client build only
          - hs aarch64 build only
          - hs arm build only
          - hs s390x build only
          - hs ppc64le build only
        include:
          - flavor: hs x64 build only
            flags: --enable-debug --disable-precompiled-headers
          - flavor: hs x64 zero build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
          - flavor: hs x86 minimal build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=minimal1 --with-target-bits=32
            multilib: true
          - flavor: hs x86 client build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=client --with-target-bits=32
            multilib: true
          - flavor: hs aarch64 build only
            flags: --enable-debug --disable-precompiled-headers
            debian-arch: arm64
            gnu-arch: aarch64
          - flavor: hs arm build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
            debian-arch: armhf
            gnu-arch: arm
            gnu-flavor: eabihf
          - flavor: hs s390x build only
            flags: --enable-debug --disable-precompiled-headers --with-jvm-variants=zero
            debian-arch: s390x
            gnu-arch: s390x
          - flavor: hs ppc64le build only
            flags: --enable-debug --disable-precompiled-headers
            debian-arch: ppc64el
            gnu-arch: powerpc64le

    env:
      JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}""
      BOOT_JDK: ""/usr/lib/jvm/java-8-openjdk-amd64""

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3
        with:
          path: jdk

      - name: Update apt
        run: sudo apt-get update

      - name: Install native host dependencies
        run: |
          sudo apt-get install openjdk-8-jdk gcc-9 g++-9 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9
        if: matrix.debian-arch == ''

      - name: Install multilib dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install --only-upgrade apt
          sudo apt-get install openjdk-8-jdk gcc-9-multilib g++-9-multilib libfreetype6-dev:i386 libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libcups2-dev:i386 libasound2-dev:i386
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9
        if: matrix.multilib != ''

      - name: Install cross-compilation host dependencies
        run: sudo apt-get install openjdk-8-jdk gcc-9-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}} g++-9-${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}
        if: matrix.debian-arch != ''

      - name: Cache sysroot
        id: cache-sysroot
        uses: actions/cache@v3
        with:
          path: ~/sysroot-${{ matrix.debian-arch }}/
          key: sysroot-${{ matrix.debian-arch }}-${{ hashFiles('jdk/.github/workflows/submit.yml') }}
        if: matrix.debian-arch != ''

      - name: Install sysroot host dependencies
        run: sudo apt-get install debootstrap qemu-user-static
        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'

      - name: Create sysroot
        run: >
          sudo qemu-debootstrap
          --arch=${{ matrix.debian-arch }}
          --verbose
          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev
          --resolve-deps
          buster
          ~/sysroot-${{ matrix.debian-arch }}
          http://httpredir.debian.org/debian/
        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'

      - name: Prepare sysroot for caching
        run: |
          sudo chroot ~/sysroot-${{ matrix.debian-arch }} symlinks -cr .
          sudo chown ${USER} -R ~/sysroot-${{ matrix.debian-arch }}
          rm -rf ~/sysroot-${{ matrix.debian-arch }}/{dev,proc,run,sys}
        if: matrix.debian-arch != '' && steps.cache-sysroot.outputs.cache-hit != 'true'

      - name: Configure cross compiler
        run: |
          echo ""CC=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-gcc-9"" >> $GITHUB_ENV
          echo ""CXX=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}-g++-9"" >> $GITHUB_ENV
        if: matrix.debian-arch != ''

      - name: Configure cross specific flags
        run: >
          echo ""cross_flags=
          --openjdk-target=${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}
          --with-sysroot=${HOME}/sysroot-${{ matrix.debian-arch }}/
          --with-cups=${HOME}/sysroot-${{ matrix.debian-arch }}/usr
          --with-freetype-lib=${HOME}/sysroot-${{ matrix.debian-arch }}/usr/lib/${{ matrix.gnu-arch }}-linux-gnu${{ matrix.gnu-flavor}}
          --with-freetype-include=${HOME}/sysroot-${{ matrix.debian-arch }}/usr/include/freetype2
          --with-alsa=${HOME}/sysroot-${{ matrix.debian-arch }}/usr
          --with-fontconfig=${HOME}/sysroot-${{ matrix.debian-arch }}/usr
          "" >> $GITHUB_ENV
          && echo ""cross_conf_env=
          CFLAGS=--sysroot=${HOME}/sysroot-${{ matrix.debian-arch }}
          CXXFLAGS=--sysroot=${HOME}/sysroot-${{ matrix.debian-arch }}
          LDFLAGS=--sysroot=${HOME}/sysroot-${{ matrix.debian-arch }}
          "" >> $GITHUB_ENV
        if: matrix.debian-arch != ''

      - name: Configure
        run: >
          ${{ env.cross_conf_env }}
          bash configure
          --with-conf-name=linux-${{ matrix.gnu-arch }}-hotspot
          ${{ matrix.flags }}
          ${{ env.cross_flags }}
          --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-build-number=b00
          --with-boot-jdk=${BOOT_JDK}
          --disable-headful
          --with-zlib=bundled
        working-directory: jdk

      - name: Build
        run: make CONF_NAME=linux-${{ matrix.gnu-arch }}-hotspot hotspot
        working-directory: jdk

  linux_x86_build:
    name: Linux x86
    runs-on: ""ubuntu-20.04""
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_x86 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    # Reduced 32-bit build uses the same boot JDK as 64-bit build
    env:
      JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}""
      BOOT_JDK: ""/usr/lib/jvm/java-8-openjdk-amd64""

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3
        with:
          path: jdk

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Fix jtreg permissions
        run: chmod -R a+rx ${HOME}/jtreg/

      # Roll in the multilib environment and its dependencies.
      # Some multilib libraries do not have proper inter-dependencies, so we have to
      # install their dependencies manually. Additionally, upgrading apt solves
      # the libc6 installation bugs until base image catches up, see JDK-8260460.
      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install --only-upgrade apt
          sudo apt-get install openjdk-8-jdk gcc-9-multilib g++-9-multilib libfreetype6-dev:i386 libxrandr-dev:i386 libxtst-dev:i386 libtiff-dev:i386 libcupsimage2-dev:i386 libcups2-dev:i386 libasound2-dev:i386
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 --slave /usr/bin/g++ g++ /usr/bin/g++-9

      - name: Configure
        run: >
          bash configure
          --with-conf-name=linux-x86
          --with-target-bits=32
          ${{ matrix.flags }}
          --with-user-release-suffix=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-build-number=b00
          --with-boot-jdk=${BOOT_JDK}
          --with-jtreg=${HOME}/jtreg
          --with-zlib=bundled
        working-directory: jdk

      - name: Build
        run: make CONF_NAME=linux-x86 images
        working-directory: jdk

      - name: Pack artifacts
        run: |
          tar -czf jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}.tar.gz -C jdk/build/linux-x86/images j2sdk-image

      - name: Persist test bundles
        uses: actions/upload-artifact@v3
        with:
          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: |
            jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}.tar.gz

  linux_x86_test:
    name: Linux x86
    runs-on: ""ubuntu-20.04""
    needs:
      - prerequisites
      - linux_x86_build

    strategy:
      fail-fast: false
      matrix:
        test:
          - jdk/tier1
          - langtools/tier1
          - hotspot/tier1
        include:
          - test: jdk/tier1
            suites: jdk_tier1
          - test: langtools/tier1
            suites: langtools_tier1
          - test: hotspot/tier1
            suites: hotspot_tier1

    # Reduced 32-bit build uses the same boot JDK as 64-bit build
    env:
      JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}""
      BOOT_JDK: ""/usr/lib/jvm/java-8-openjdk-amd64""

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Restore build artifacts
        id: build_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x86${{ matrix.artifact }}
        continue-on-error: true

      - name: Restore build artifacts (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jdk-linux-x86${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jdk-linux-x86${{ matrix.artifact }}
        if: steps.build_restore.outcome == 'failure'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jdk gcc-9-multilib g++-9-multilib

      - name: Unpack jdk
        run: |
          mkdir -p ""${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}""
          tar -xzf ""${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}.tar.gz"" -C ""${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}""

      - name: Build multilib docker image
        if: matrix.test == 'hotspot/tier1'
        run: >
          printf '%s\n%s\n'
          'FROM ubuntu:latest'
          'RUN dpkg --add-architecture i386 && apt-get update && apt-get -y install libc6:i386'
          | docker build -t 'ubuntu-multilib:latest' -

      - name: Run tests
        run: >
          chmod +x ""${HOME}/jtreg/bin/jtreg"" &&
          mkdir test-results &&
          cd test &&
          PRODUCT_HOME=""${HOME}/jdk-linux-x86${{ matrix.artifact }}/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x86_bin${{ matrix.artifact }}/j2sdk-image""
          JT_HOME=""${HOME}/jtreg""
          ALT_OUTPUTDIR=""${GITHUB_WORKSPACE}/test-results""
          JAVA_ARGS=""-Djdk.test.docker.image.name=ubuntu-multilib -Djdk.test.docker.image.version=latest""
          JTREG_TIMEOUT_FACTOR=""4""
          make
          ""${{ matrix.suites }}""

      - name: Check that all tests executed successfully
        if: always()
        run: >
          if cat test-results/testoutput/*/exitcode.txt | grep -q -v '^0$'
          || ! cat test-results/testoutput/*/Stats.txt | grep -q 'fail=0' ; then
            cat test-results/testoutput/*/JTreport/text/{newfailures,other_errors}.txt ;
            exit 1 ;
          fi

      - name: Create suitable test log artifact name
        if: always()
        run: echo ""logsuffix=`echo ${{ matrix.test }} | sed -e 's!/!_!'g -e 's! !_!'g`"" >> $GITHUB_ENV

      - name: Package test results
        if: always()
        working-directory: test-results
        run: >
          zip -r9
          ""$HOME/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip""
          .
          -x ""*ARCHIVE_BUNDLE.zip""
        continue-on-error: true

      - name: Persist test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: ~/linux-x86${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip
        continue-on-error: true

  windows_x64_build:
    name: Windows x64
    runs-on: ""windows-2019""
    needs: prerequisites
    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_windows_x64 != 'false'

    strategy:
      fail-fast: false
      matrix:
        flavor:
          - build release
          - build debug
        include:
          - flavor: build debug
            flags: --enable-debug
            artifact: -debug

    env:
      JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MAJOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MINOR_VERSION }}.${{ fromJson(needs.prerequisites.outputs.dependencies).JDK_MICRO_VERSION }}""
      BOOT_JDK_VERSION: ""${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}""
      BOOT_JDK_FILENAME: ""${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_FILENAME }}""
      BOOT_JDK_URL: ""${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_URL }}""
      BOOT_JDK_SHA256: ""${{ fromJson(needs.prerequisites.outputs.dependencies).WINDOWS_X64_BOOT_JDK_SHA256 }}""
      VS2017_FILENAME: ""${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_FILENAME }}""
      VS2017_URL: ""${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_URL }}""
      VS2017_SHA256: ""${{ fromJson(needs.prerequisites.outputs.dependencies).VS2017_SHA256 }}""

    steps:
      - name: Restore cygwin installer from cache
        id: cygwin-installer
        uses: actions/cache@v3
        with:
          path: ~/cygwin/setup-x86_64.exe
          key: cygwin-installer

      - name: Download cygwin installer
        run: |
          New-Item -Force -ItemType directory -Path ""$HOME\cygwin""
          & curl -L ""https://www.cygwin.com/setup-x86_64.exe"" -o ""$HOME/cygwin/setup-x86_64.exe""
        if: steps.cygwin-installer.outputs.cache-hit != 'true'

      - name: Restore cygwin packages from cache
        id: cygwin
        uses: actions/cache@v3
        with:
          path: ~/cygwin/packages
          key: cygwin-packages-${{ runner.os }}-v1

      - name: Install cygwin
        run: |
          Start-Process -FilePath ""$HOME\cygwin\setup-x86_64.exe"" -ArgumentList ""--quiet-mode --packages autoconf,make,zip,unzip --root $HOME\cygwin\cygwin64 --local-package-dir $HOME\cygwin\packages --site http://mirrors.kernel.org/sourceware/cygwin --no-desktop --no-shortcuts --no-startmenu --no-admin"" -Wait -NoNewWindow

      - name: Checkout the source
        uses: actions/checkout@v3
        with:
          path: jdk

      - name: Checkout the FreeType source
        uses: actions/checkout@v3
        with:
          repository: ""freetype/freetype""
          ref: VER-2-8-1
          path: freetype

      - name: Restore boot JDK from cache
        id: bootjdk
        uses: actions/cache@v3
        with:
          path: ~/bootjdk/${{ env.BOOT_JDK_VERSION }}
          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1

      - name: Download boot JDK
        run: |
          mkdir -p ""$HOME\bootjdk\$env:BOOT_JDK_VERSION""
          & curl -L ""$env:BOOT_JDK_URL"" -o ""$HOME/bootjdk/$env:BOOT_JDK_FILENAME""
          $FileHash = Get-FileHash -Algorithm SHA256 ""$HOME/bootjdk/$env:BOOT_JDK_FILENAME""
          $FileHash.Hash -eq $env:BOOT_JDK_SHA256
          & unzip ""$HOME/bootjdk/$env:BOOT_JDK_FILENAME"" -d ""$HOME/bootjdk/$env:BOOT_JDK_VERSION""
          Get-ChildItem ""$HOME\bootjdk\$env:BOOT_JDK_VERSION\*\*"" | Move-Item -Destination ""$HOME\bootjdk\$env:BOOT_JDK_VERSION""
        if: steps.bootjdk.outputs.cache-hit != 'true'

      - name: Restore Visual Studio 2017 from cache
        id: vs2017
        uses: actions/cache@v3
        with:
          path: ~/${{ env.VS2017_FILENAME }}
          key: vs2017

      - name: Restore jtreg artifact
        id: jtreg_restore
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        continue-on-error: true

      - name: Restore jtreg artifact (retry)
        uses: actions/download-artifact@v3
        with:
          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}
          path: ~/jtreg/
        if: steps.jtreg_restore.outcome == 'failure'

      - name: Uninstall WinSDKs
        run: >
          Start-Process -FilePath 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe' -Wait -NoNewWindow -ArgumentList
          'modify --installPath ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise""
          --remove Microsoft.VisualStudio.Component.Windows10SDK.18362
          --remove Microsoft.VisualStu"
qtc-de;remote-method-guesser;qtc-de/remote-method-guesser;https://github.com/qtc-de/remote-method-guesser;https://api.github.com/repos/qtc-de/remote-method-guesser;master;04/11/2019 12:37;20/04/2024 11:34;TRUE;"name: example server

on:

  push:
    branches:
      - master
      - develop
    paths:
      - 'docker/example-server/resources/server/**'
      - '.github/workflows/example-server.yml'

  pull_request:
    branches:
      - master
      - develop
    paths:
      - 'docker/example-server/resources/server/**'
      - '.github/workflows/example-server.yml'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: ${{ github.event.repository.name }}
      uses: actions/checkout@v4

    - name: Set up JDK 1.8
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 8
        cache: maven
        cache-dependency-path: docker/example-server/resources/server/pom.xml

    - name: Build with Maven
      run: cd docker/example-server/resources/server && mvn -B package --file pom.xml

---
name: maven CI

on:

  push:
    branches:
      - master
      - develop
      - 'feat/**'
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/maven-ci.yml'

  pull_request:
    branches:
      - master
      - develop
      - 'feat/**'
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/workflows/maven-ci.yml'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - name: ${{ github.event.repository.name }}
      uses: actions/checkout@v4

    - name: Set up JDK 1.8
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 8
        cache: maven
        cache-dependency-path: pom.xml

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Archive generated JAR file
      uses: actions/upload-artifact@v4
      with:
        name: rmg-compiled-jars
        path: target/*.jar

---
name: publish docker

on:
  push:
    tags: [ v* ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: qtc-de/remote-method-guesser/rmg

jobs:
  build-and-push-image:

    runs-on: ubuntu-latest

    steps:
      - name: ${{ github.event.repository.name }}
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

---
name: publish maven

on:
  release:
    types:
      - created

jobs:
  publish:

    runs-on: ubuntu-latest

    steps:
      - name: ${{ github.event.repository.name }}
        uses: actions/checkout@v4

      - name: Set up Maven Central Repository
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: SIGN_KEY_PASS

      - name: Publish package
        run: mvn --batch-mode clean deploy -Ppublish
        env:
          SIGN_KEY_PASS: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

---
name: spring server

on:

  push:
    branches:
      - master
      - develop
    paths:
      - 'docker/spring-remoting/resources/server/**'
      - '.github/workflows/spring-server.yml'

  pull_request:
    branches:
      - master
      - develop
    paths:
      - 'docker/spring-remoting/resources/server/**'
      - '.github/workflows/spring-server.yml'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: ${{ github.event.repository.name }}
      uses: actions/checkout@v4

    - name: Set up JDK 1.8
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 8
        cache: maven
        cache-dependency-path: docker/spring-remoting/resources/server/pom.xml

    - name: Build with Maven
      run: cd docker/spring-remoting/resources/server/ && mvn -B package --file pom.xml

---
name: ssrf server

on:

  push:
    branches:
      - master
      - develop
    paths:
      - 'docker/ssrf-server/resources/server/**'
      - '.github/workflows/ssrf-server.yml'

  pull_request:
    branches:
      - master
      - develop
    paths:
      - 'docker/ssrf-server/resources/server/**'
      - '.github/workflows/ssrf-server.yml'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: ${{ github.event.repository.name }}
      uses: actions/checkout@v4

    - name: Set up JDK 1.8
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 8
        cache: maven
        cache-dependency-path: docker/ssrf-server/resources/server/pom.xml

    - name: Build with Maven
      run: cd docker/ssrf-server/resources/server && mvn -B package --file pom.xml

---
"
CoderLeixiaoshuai;java-eight-part;CoderLeixiaoshuai/java-eight-part;https://github.com/CoderLeixiaoshuai/java-eight-part;https://api.github.com/repos/CoderLeixiaoshuai/java-eight-part;master;16/10/2020 18:27;22/04/2024 13:26;FALSE;
zhanghai;AndroidFastScroll;zhanghai/AndroidFastScroll;https://github.com/zhanghai/AndroidFastScroll;https://api.github.com/repos/zhanghai/AndroidFastScroll;master;06/11/2019 01:45;21/04/2024 23:52;TRUE;"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
    - name: Build with Gradle
      run: ./gradlew assembleDebug lintVitalRelease

---
"
CatimaLoyalty;Android;CatimaLoyalty/Android;https://github.com/CatimaLoyalty/Android;https://api.github.com/repos/CatimaLoyalty/Android;main;22/11/2019 11:15;21/04/2024 23:07;TRUE;"name: Android CI
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - staging
      - trying
  pull_request:
    branches:
      - main
permissions:
  actions: none
  checks: none
  contents: read
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: none
  repository-projects: none
  security-events: none
  statuses: none
env:
  JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.3
    - name: Fail on bad translations
      run: if grep -ri ""&lt;xliff"" app/src/main/res/values*/strings.xml; then echo ""Invalidly escaped translations found""; exit 1; fi
    - uses: gradle/actions/wrapper-validation@v3
    - name: set up OpenJDK 17
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk-headless
        sudo update-alternatives --auto java
    - name: Build
      run: ./gradlew assembleRelease
    - name: Check lint
      run: ./gradlew lintRelease
    - name: Run unit tests
      run: timeout 5m ./gradlew testReleaseUnitTest || { ./gradlew --stop && timeout 5m ./gradlew testReleaseUnitTest; }
    - name: SpotBugs
      run: ./gradlew spotbugsRelease
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4.3.2
      with:
        name: test-results
        path: app/build/reports

---
name: Convert CHANGELOG to Fastlane
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'
permissions:
  actions: none
  checks: none
  contents: write
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  convert_changelog_to_fastlane:
    runs-on: ubuntu-latest
    name: Convert CHANGELOG to Fastlane
    steps:
    - name: Checkout repo
      id: checkout
      uses: actions/checkout@v4.1.3
    - name: Setup Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.x'
    - name: Run converter script
      run: python .scripts/changelog_to_fastlane.py
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.4
      with:
        title: ""Update Fastlane changelogs""
        commit-message: ""Update Fastlane changelogs""
        branch-suffix: timestamp

---
name: Write contributors to file
on:
  workflow_dispatch:
  schedule:
    - cron: '3 4 * * 0'
permissions:
  actions: none
  checks: none
  contents: write
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  contributors_to_file:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: Write contributors to file
    steps:
    - name: Checkout repo
      id: checkout
      uses: actions/checkout@v4.1.3
    - name: Update contributors
      id: update_contributors
      uses: TheLastProject/contributors-to-file-action@v3.2.0
      with:
        file_in_repo: app/src/main/res/raw/contributors.txt
        min_commit_count: 5
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.4
      with:
        title: ""Update contributors""
        commit-message: ""Update contributors""
        branch-suffix: timestamp

---
name: Generate feature graphic
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'fastlane/**/title.txt'
permissions:
  actions: none
  checks: none
  contents: write
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  generate-feature-graphic:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.3
    - name: Install requirements
      run: |
        sudo apt-get update
        sudo apt-get install optipng mat2
        # Install 200 weight versions of relevant Noto (to use for languages not supported by Lexend Deca)
        sudo apt-get install fonts-noto-extra fonts-noto-cjk-extra
        # Custom fonts
        mkdir ""$HOME/.fonts""
        find .scripts/generate_feature_graphic/fonts -name '*.ttf' -exec cp {} ""$HOME/.fonts"" \;
        fc-cache
    - name: Generate featureGraphic.png for each language
      run: .scripts/generate_feature_graphic/generate_feature_graphic.sh
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.4
      with:
        title: ""Update feature graphic""
        commit-message: ""Update feature graphic""
        branch-suffix: timestamp

---
name: Gradle update
on:
  workflow_dispatch:
  schedule:
    - cron: '3 6 * * *'
permissions:
  actions: none
  checks: none
  contents: write
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  gradle-update:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.3
    - uses: obfusk/gradle-update-action@v2.0.0
      id: gradle-update
    - uses: gradle/actions/wrapper-validation@v3
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.4
      with:
        title: ""Update Gradle to ${{ steps.gradle-update.outputs.version }}""
        commit-message: ""Update Gradle to ${{ steps.gradle-update.outputs.version }}""
        branch-suffix: timestamp

---
name: Update locales
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - app/src/main/res/values-*/strings.xml
      - app/src/main/res/values/settings.xml
permissions:
  actions: none
  checks: none
  contents: write
  deployments: none
  discussions: none
  id-token: none
  issues: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none
jobs:
  update-locales:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.3
    - name: Add new locales
      run: .scripts/new-locales.py
    - name: Update locales
      run: .scripts/locales.py
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6.0.4
      with:
        title: ""Update locales""
        commit-message: ""Update locales""
        branch-suffix: timestamp

---
"
getActivity;EasyHttp;getActivity/EasyHttp;https://github.com/getActivity/EasyHttp;https://api.github.com/repos/getActivity/EasyHttp;master;24/11/2019 16:30;22/04/2024 13:20;TRUE;"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

---
"
OpenLineage;OpenLineage;OpenLineage/OpenLineage;https://github.com/OpenLineage/OpenLineage;https://api.github.com/repos/OpenLineage/OpenLineage;main;24/10/2020 23:45;22/04/2024 08:46;FALSE;
JavaCourse00;JavaCourseCodes;JavaCourse00/JavaCourseCodes;https://github.com/JavaCourse00/JavaCourseCodes;https://api.github.com/repos/JavaCourse00/JavaCourseCodes;main;28/10/2020 08:31;19/04/2024 13:37;FALSE;
didi;super-jacoco;didi/super-jacoco;https://github.com/didi/super-jacoco;https://api.github.com/repos/didi/super-jacoco;master;30/10/2020 06:43;18/04/2024 14:54;FALSE;
amggg;YXing;amggg/YXing;https://github.com/amggg/YXing;https://api.github.com/repos/amggg/YXing;master;31/10/2020 11:19;19/04/2024 06:43;FALSE;
eclipse;openvsx;eclipse/openvsx;https://github.com/eclipse/openvsx;https://api.github.com/repos/eclipse/openvsx;master;09/12/2019 20:53;22/04/2024 13:19;TRUE;"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  SERVER_TAG: ghcr.io/eclipse/openvsx-server
  WEBUI_TAG: ghcr.io/eclipse/openvsx-webui

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 18.x
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Install Yarn
      run: |
        corepack enable
        corepack prepare yarn@stable --activate
    - uses: actions/checkout@v2
    - name: Set Image Version
      run: echo ""IMAGE_VERSION=${GITHUB_SHA:0:7}"" >> $GITHUB_ENV
    - name: Build CLI
      run: yarn --cwd cli
    - name: Build Web UI Image
      run: docker build -t $WEBUI_TAG:$IMAGE_VERSION webui
    - name: Run Server Tests
      run: server/gradlew --no-daemon -p server check
    - name: Build Server Image
      run: docker build -t $SERVER_TAG:$IMAGE_VERSION server
    - name: Push Docker Images
      run: |
        echo ${{ secrets.BOT_ACCESS_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        docker push $SERVER_TAG:$IMAGE_VERSION
        docker push $WEBUI_TAG:$IMAGE_VERSION
      if: github.repository == 'eclipse/openvsx' && github.ref == 'refs/heads/master'
    - name: Save PR number to file
      if: github.event_name == 'pull_request'
      run: echo ${{ github.event.number }} > PR_NUMBER.txt
    - name: Archive PR number
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: PR_NUMBER
        path: PR_NUMBER.txt

---
name: Release

on:
  release:
    types: [published]

env:
  SERVER_TAG: ghcr.io/eclipse/openvsx-server
  WEBUI_TAG: ghcr.io/eclipse/openvsx-webui

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set Image Version
      run: echo ""IMAGE_VERSION=${{ github.event.release.tag_name }}"" >> $GITHUB_ENV
    - name: Build Web UI Image
      run: docker build -t $WEBUI_TAG:$IMAGE_VERSION webui
    - name: Build Server Image
      run: docker build -t $SERVER_TAG:$IMAGE_VERSION server
    - name: Push Docker Images
      run: |
        echo ${{ secrets.BOT_ACCESS_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        docker push $SERVER_TAG:$IMAGE_VERSION
        docker push $WEBUI_TAG:$IMAGE_VERSION

---
name: Sonar
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
jobs:
  sonar:
    name: Sonar
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
    - name: Download PR number artifact
      if: github.event.workflow_run.event == 'pull_request'
      uses: dawidd6/action-download-artifact@v2
      with:
        workflow: CI
        run_id: ${{ github.event.workflow_run.id }}
        name: PR_NUMBER
    - name: Read PR_NUMBER.txt
      if: github.event.workflow_run.event == 'pull_request'
      id: pr_number
      uses: juliangruber/read-file-action@v1
      with:
        path: ./PR_NUMBER.txt
    - name: Request GitHub API for PR data
      if: github.event.workflow_run.event == 'pull_request'
      uses: octokit/request-action@v2.x
      id: get_pr_data
      with:
        route: GET /repos/{full_name}/pulls/{number}
        number: ${{ steps.pr_number.outputs.content }}
        full_name: ${{ github.event.repository.full_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/checkout@v3
      with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0
    - name: Checkout base branch
      if: github.event.workflow_run.event == 'pull_request'
      env:
        HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
      run: |
        git remote add upstream ${{ github.event.repository.clone_url }}
        git fetch upstream
        git checkout -B ${{ fromJson(steps.get_pr_data.outputs.data).base.ref }} upstream/${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}
        git checkout $HEAD_BRANCH
        git clean -ffdx && git reset --hard HEAD
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Generate JaCoCo test report
      run: server/gradlew --no-daemon -p server jacocoTestReport
    - name: Make server libraries directory
      run: mkdir server/libraries
    - name: Copy server libraries
      run: find ~/.gradle/caches -type f -name '*.jar' -exec cp {} server/libraries \;
    - name: SonarCloud Scan on PR
      if: github.event.workflow_run.event == 'pull_request'
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.scm.revision=${{ github.event.workflow_run.head_sha }}
          -Dsonar.pullrequest.key=${{ fromJson(steps.get_pr_data.outputs.data).number }}
          -Dsonar.pullrequest.branch=${{ fromJson(steps.get_pr_data.outputs.data).head.ref }}
          -Dsonar.pullrequest.base=${{ fromJson(steps.get_pr_data.outputs.data).base.ref }}
    - name: SonarCloud Scan on push
      if: github.event.workflow_run.event == 'push' && github.event.workflow_run.head_repository.full_name == github.event.repository.full_name
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.scm.revision=${{ github.event.workflow_run.head_sha }}
          -Dsonar.branch.name=${{ github.event.workflow_run.head_branch }}

---
"
JustCoding-Hai;subtlechat;JustCoding-Hai/subtlechat;https://github.com/JustCoding-Hai/subtlechat;https://api.github.com/repos/JustCoding-Hai/subtlechat;master;08/11/2020 09:10;20/04/2024 11:41;FALSE;
mr-hashemi;mr-hashemi;mr-hashemi/mr-hashemi;https://github.com/mr-hashemi/mr-hashemi;https://api.github.com/repos/mr-hashemi/mr-hashemi;master;19/12/2019 15:08;02/04/2024 04:32;TRUE;"name: Quality Check

on:
  push:
    branches: 
    - master

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - uses: DeLaGuardo/setup-graalvm@5.0
      with:
        graalvm-version: '19.3.0.java8'

#     - run: gu install native-image
#     - uses: actions/checkout@v1
#     - name: Sonar
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_LOGIN: ${{ secrets.SONAR_LOGIN }}
#       run: mvn verify sonar:sonar

---
name: Release Mr. Hashemi

on:
  release:
    types: [created]


jobs:
  release-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: DeLaGuardo/setup-graalvm@5.0
      with:
        graalvm-version: '19.3.0.java8'
    - run: java -version
    - run: gu install native-image
    - uses: actions/checkout@v1
    - name: Build with Maven
      run: mvn package
    - name: Upload the artifacts
      uses: skx/github-action-publish-binaries@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: 'native/hashem*'

---
"
mollyim;mollyim-android;mollyim/mollyim-android;https://github.com/mollyim/mollyim-android;https://api.github.com/repos/mollyim/mollyim-android;main;28/12/2019 13:50;21/04/2024 22:51;TRUE;"name: Release

on:
  push:
    tags:
      - ""v*""

env:
  HAVE_KEYSTORE: ${{ secrets.KEYSTORE != '' }}

jobs:
  build:
    name: Build
    if: ""github.event.base_ref != 'refs/heads/upstream'""
    runs-on: ubuntu-22.04

    permissions:
      contents: read # to fetch code (actions/checkout)

    env:
      GRADLE_OPTS: ""-Dorg.gradle.project.kotlin.compiler.execution.strategy=in-process""
      CI_ENV_FILE: ${{ vars.CI_ENV_FILE || 'beta-stable.env' }}
      CI_MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up builder image
        run: docker-compose build
        working-directory: reproducible-builds

      - name: Extract signing keys
        if: ""env.HAVE_KEYSTORE == 'true'""
        run: printenv KEYSTORE | base64 -d > certs/keystore.jks
        working-directory: reproducible-builds
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}

      - name: Build without signing
        if: ""env.HAVE_KEYSTORE == 'false'""
        run: docker-compose --env-file ""ci/$CI_ENV_FILE"" run assemble
        working-directory: reproducible-builds

      - name: Build and sign
        if: ""env.HAVE_KEYSTORE == 'true'""
        run: docker-compose --env-file ""ci/$CI_ENV_FILE"" run assemble
        working-directory: reproducible-builds
        env:
          CI_KEYSTORE_PATH: certs/keystore.jks
          CI_KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS }}
          CI_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      - name: Clean up keystore
        if: ""always()""
        run: rm -f certs/keystore.jks
        working-directory: reproducible-builds

      - name: Log APK and AAB checksums
        run: find outputs \( -name ""*.aab"" -o -name ""*.apk"" \) -exec sha256sum '{}' +
        working-directory: reproducible-builds

      - name: Upload APKs
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: reproducible-builds/outputs/apk/*/release/*.apk
          if-no-files-found: error

      - name: Upload Bundles
        uses: actions/upload-artifact@v3
        with:
          name: bundle
          path: reproducible-builds/outputs/bundle/*Release/*.aab
          if-no-files-found: error

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Check version for upgrade compatibility
        run: |
          echo ""Listing latest APKs""
          gh release list --exclude-drafts --limit 10
          gh release download --pattern '*.apk' --dir latest || exit 0
          latest_apks=(latest/*.apk)
          build_apks=(apk/*/release/*.apk)
          aapt=($ANDROID_HOME/build-tools/*/aapt)
          version_code() {
            $aapt d badging ""$1"" | gawk 'match($0, /^package:.*versionCode=.([0-9]+)/, v) {print v[1]}'
          }
          echo ""Using aapt: $aapt""
          latest_version_code=$(version_code ""$latest_apks"")
          build_version_code=$(version_code ""$build_apks"")
          echo ""Latest version code: $latest_version_code""
          echo ""Build version code: $build_version_code""
          test $build_version_code -gt $latest_version_code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release draft
        run: gh release create -d -t ""$GITHUB_REF_NAME"" ""$GITHUB_REF_NAME"" ./apk/*/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.PUBLISH_PAT || secrets.GITHUB_TOKEN }}

---
name: Reproducible build

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: ""Enter the version to check""
        required: true
  release:
    types:
      - published

permissions:
  contents: read # to fetch code (actions/checkout)

env:
  TAG_NAME: ""${{ github.event.inputs.tag_name || github.event.release.tag_name }}""

jobs:
  build:
    name: Build new
    runs-on: ubuntu-22.04
    env:
      GRADLE_OPTS: ""-Dorg.gradle.project.kotlin.compiler.execution.strategy=in-process""
      CI_ENV_FILE: ${{ vars.CI_ENV_FILE || 'beta-stable.env' }}
      CI_MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ""${{ env.TAG_NAME }}""

      - name: Set up builder image
        run: docker-compose build
        working-directory: reproducible-builds

      - name: Build release
        run: docker-compose --env-file ""ci/$CI_ENV_FILE"" run assemble
        working-directory: reproducible-builds

      - uses: actions/upload-artifact@v3
        with:
          name: new
          path: reproducible-builds/outputs/apk/*/release/*.apk
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: apkdiff
          path: reproducible-builds/apkdiff/apkdiff.py
          if-no-files-found: error

  download:
    name: Download original
    runs-on: ubuntu-22.04
    outputs:
      apks: ""${{ steps.set.outputs.apks }}""

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ""${{ env.TAG_NAME }}""

      - name: Download published APKs
        run: gh release download --pattern '*.apk' ""$TAG_NAME""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v3
        with:
          name: original
          path: ""*.apk""
          if-no-files-found: error

      - name: Output filenames to compare
        id: set
        run: |
          apks=$(jq -c -n '[$ARGS.positional[] | sub(""-unsigned-"";""-"")]' --args *.apk)
          echo ""apks=$apks"" >> $GITHUB_OUTPUT

  compare:
    name: Compare
    runs-on: ubuntu-22.04
    needs:
      - build
      - download
    strategy:
      fail-fast: false
      matrix:
        apk-file: ${{ fromJSON(needs.download.outputs.apks) }}

    steps:
      - uses: actions/download-artifact@v3

      - name: Install diffuse
        run: |
          curl -o diffuse.jar -L https://github.com/JakeWharton/diffuse/releases/download/0.1.0/diffuse-0.1.0-binary.jar
          echo ""$SHA256"" diffuse.jar | sha256sum -c -
        env:
          SHA256: 60d619373c46a5d06b8126c1d61e0adc18b72f2cbb9245ef920d3387e44b86cf

      - name: Normalize APK filenames
        run: |
          mv -v new/*/release/*.apk new/
          for fn in */*-unsigned-*.apk; do
            mv -v ""$fn"" ""$(sed 's/-unsigned-/-/' <<< $fn)""
          done

      - name: Log diffuse full output
        run: java -jar diffuse.jar diff ""original/$APK_FILE"" ""new/$APK_FILE""
        env:
          APK_FILE: ""${{ matrix.apk-file }}""

      - name: Check for reproducibility
        run: python apkdiff/apkdiff.py ""original/$APK_FILE"" ""new/$APK_FILE""
        env:
          APK_FILE: ""${{ matrix.apk-file }}""

---
name: Sync upstream

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  sync:
    name: Sync
    if: ""github.repository_owner == 'mollyim'""
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          ref: upstream
          fetch-depth: 0
          token: ${{ secrets.PUBLISH_PAT || secrets.GITHUB_TOKEN }}

      - name: Fetch and merge upstream
        run: |
          git remote add upstream https://github.com/signalapp/Signal-Android.git
          git fetch upstream
          git merge --ff-only upstream/main

      - name: Push changes
        run: |
          git push origin upstream
          git tag | grep -xP 'v\d+(?:\.\d+){2,3}' | xargs -r git push origin

---
name: Test

on:
  pull_request:
  push:
    branches:
      - '**'
    paths-ignore:
      - '**/README*.md'
      - '.github/FUNDING.yml'
      - '.github/ISSUE_TEMPLATE/**'

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  wrapper_validation:
    name: Validate Gradle wrapper
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3

      - name: Run wrapper validation
        uses: gradle/wrapper-validation-action@v1

  test:
    name: Run tests
    runs-on: ubuntu-22.04
    env:
      GRADLE_OPTS: ""-Dorg.gradle.project.kotlin.compiler.execution.strategy=in-process""

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Run tests
        run: ./gradlew build --no-daemon

      - name: Archive reports for failed tests
        if: ""failure()""
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: '*/build/reports'

---
"
Hakky54;sslcontext-kickstart;Hakky54/sslcontext-kickstart;https://github.com/Hakky54/sslcontext-kickstart;https://api.github.com/repos/Hakky54/sslcontext-kickstart;master;29/12/2019 20:45;22/04/2024 07:24;TRUE;"name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-13, macos-14 ]
        java: [ '11', '17', '21' ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: print Java version
        run: java -version

      - name: Build with Maven
        run: mvn clean verify --no-transfer-progress

  code-quality-and-coverage-scan:
    if: ${{ (github.actor == 'Hakky54') }}
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: Build, test and quality scan
        run: mvn clean verify sonar:sonar -Dsonar.projectName=sslcontext-kickstart-parent -Dsonar.organization=hakky54 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} --no-transfer-progress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
alibaba;testable-mock;alibaba/testable-mock;https://github.com/alibaba/testable-mock;https://api.github.com/repos/alibaba/testable-mock;master;10/11/2020 04:06;22/04/2024 10:26;FALSE;
intsmaze;flink-boot;intsmaze/flink-boot;https://github.com/intsmaze/flink-boot;https://api.github.com/repos/intsmaze/flink-boot;master;10/11/2020 13:04;18/04/2024 12:29;FALSE;
SpaiR;imgui-java;SpaiR/imgui-java;https://github.com/SpaiR/imgui-java;https://api.github.com/repos/SpaiR/imgui-java;main;29/12/2019 22:01;21/04/2024 09:28;TRUE;"name: CI
on: [ push, pull_request ]
jobs:
  build-java:
    name: Build Java
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: liberica
          cache: gradle

      - name: Build
        run: ./gradlew buildAll

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: java-libraries
          path: |
            imgui-app/build/libs/*.jar
            imgui-binding/build/libs/*.jar
            imgui-lwjgl3/build/libs/*.jar

  build-natives:
    name: Build Native (${{ matrix.type }}${{ matrix.freetype && ', freetype' || ''  }})
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        type: [ windows, linux, macos ]
        freetype: [ true, false ]
        include:
          - type: windows
            expected: /tmp/imgui/libsNative/windows64/imgui-java64.dll
          - type: linux
            expected: /tmp/imgui/libsNative/linux64/libimgui-java64.so
          - type: macos
            expected: /tmp/imgui/libsNative/macosx64/libimgui-java64.dylib
        exclude:
          - os: ubuntu-latest
            type: macos
          - os: macos-latest
            type: windows
          - os: macos-latest
            type: linux
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository and Submodules
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: liberica
          cache: gradle

      - name: Ant Version
        run: ant -version

      - name: Install MinGW-w64/GCC/G++ (Linux & Windows)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install mingw-w64

      - name: FreeType - Install (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.type == 'linux' && matrix.freetype == true
        run: sudo apt install libfreetype6-dev

      - name: FreeType - Install (Windows)
        if: matrix.os == 'ubuntu-latest' && matrix.type == 'windows' && matrix.freetype == true
        run: |
          sudo mkdir /freetype
          sudo tar -xzf ./vendor/freetype-2.12.1.tar.gz -C /freetype --strip-components=1
          cd /freetype
          sudo ./configure --with-zlib=no --with-bzip2=no --with-png=no --with-harfbuzz=no --with-brotli=no --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32
          sudo make
          sudo make install

      - name: Build
        run: ./gradlew imgui-binding:generateLibs -Denvs=${{ matrix.type }} -Dfreetype=${{ matrix.freetype }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.freetype && 'native-libraries-with-freetype' || 'native-libraries' }}
          if-no-files-found: error
          path: ${{ matrix.expected }}

  update-bin:
    name: Update Binaries
    if: github.ref == 'refs/heads/main' && !github.event.repository.fork # runs only on the main branch and not forks (sometimes people do PRs from the main branch)
    runs-on: ubuntu-latest
    needs: build-natives
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/artifacts

      # Job compares sha1 hash of the imgui-binding/src/main directory.
      # If there are any changes, then we update native libraries.
      # We do not rely on git in terms of comparing binaries,
      # since DLL files will always have versioning difference.
      - name: Compare Binding Hash
        id: cmp-binding-hash
        continue-on-error: true
        run: |
          touch bin/binding.sha1
          cat bin/binding.sha1 > /tmp/hash
          find imgui-binding/src/main -type f -print0 | sort -z | xargs -0 sha1sum > bin/binding.sha1
          cmp /tmp/hash bin/binding.sha1

      - name: Update
        if: steps.cmp-binding-hash.outcome != 'success'
        run: |
          mv /tmp/artifacts/native-libraries/* bin/
          mv /tmp/artifacts/native-libraries-with-freetype/* bin/freetype/

      - name: Commit
        if: steps.cmp-binding-hash.outcome != 'success'
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: '[ci skip] update native binaries'

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v') # if tag starts with ""v""
    runs-on: ubuntu-latest
    needs: [ build-java, build-natives ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: liberica
          cache: gradle

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: out/artifacts

      - name: Zip Artifacts
        run: |
          mkdir out/archives
          zip -rj out/archives/native-libraries out/artifacts/native-libraries
          zip -rj out/archives/native-libraries-with-freetype out/artifacts/native-libraries-with-freetype
          zip -rj out/archives/java-libraries out/artifacts/java-libraries

      - name: Publish
        env:
          NEXUS_UPD_ID: ${{ secrets.RELEASE_NEXUS_UPD_ID }}
          NEXUS_UPD_PASS: ${{ secrets.RELEASE_NEXUS_UPD_PASS }}
          SIGNING_KEY_ID: ${{ secrets.RELEASE_SIGNING_KEY_ID }}
          SIGNING_KEY: ${{ secrets.RELEASE_SIGNING_KEY }}
          SIGNING_KEY_PASS: ${{ secrets.RELEASE_SIGNING_KEY_PASS }}
        run: |
          chmod +x ./buildSrc/scripts/publish.sh
          buildSrc/scripts/publish.sh

      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          files: |
            out/archives/**

---
"
supertokens;supertokens-core;supertokens/supertokens-core;https://github.com/supertokens/supertokens-core;https://api.github.com/repos/supertokens/supertokens-core;master;05/01/2020 14:30;22/04/2024 12:27;TRUE;"name: ""Enforcing changelog in PRs Workflow""
on:
  pull_request:
      types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  # Enforces the update of a changelog file on every pull request 
  changelog:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: dangoslen/changelog-enforcer@v2
      with:
        changeLogPath: 'CHANGELOG.md'
        skipLabels: 'Skip-Changelog'
---
name: ""Lint PR Title""

on:
    pull_request:
        types:
            - opened
            - reopened
            - edited
            - synchronize

jobs:
    pr-title:
        name: Lint PR title
        runs-on: ubuntu-latest
        steps:
            - uses: amannn/action-semantic-pull-request@v3
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  validateSingleCommit: true
---
name: ""Check if \""Run tests\"" action succeeded""

on:
    pull_request:
        types:
            - opened
            - reopened
            - edited
            - synchronize

jobs:
    pr-run-test-action:
        name: Check if ""Run tests"" action succeeded
        timeout-minutes: 60
        concurrency:
          group: ${{ github.head_ref }}
          cancel-in-progress: true
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: node install
              run: cd ./.github/helpers && npm i
            - name: Calling github API
              run: cd ./.github/helpers && GITHUB_TOKEN=${{ github.token }} REPO=${{ github.repository }} RUN_ID=${{ github.run_id }} BRANCH=${{ github.head_ref }} JOB_ID=${{ github.job }} SOURCE_OWNER=${{ github.event.pull_request.head.repo.owner.login }} CURRENT_SHA=${{ github.event.pull_request.head.sha }} node node_modules/github-workflow-helpers/test-pass-check-pr.js
---
name: ""Run tests""
on:
  workflow_dispatch:
    inputs:
      pluginRepoOwnerName:
        description: 'supertokens-plugin-interface repo owner name'
        default: supertokens 
        required: true
      pluginInterfaceBranch:
        description: 'supertokens-plugin-interface repos branch name'
        default: master 
        required: true

jobs:
  test_job:
    name: Run tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    container: rishabhpoddar/supertokens_core_testing
    steps:
      - uses: actions/checkout@v2
      - name: Cloning supertokens-root
        run: cd ../ && git clone https://github.com/supertokens/supertokens-root.git
      - name: Update Java 1
        run: update-alternatives --install ""/usr/bin/java"" ""java"" ""/usr/java/jdk-15.0.1/bin/java"" 2
      - name: Update Java 2
        run: update-alternatives --install ""/usr/bin/javac"" ""javac"" ""/usr/java/jdk-15.0.1/bin/javac"" 2
      - name: Modifying modules.txt in supertokens-root
        run: cd ../supertokens-root && echo ""core,master\nplugin-interface,${{ github.event.inputs.pluginInterfaceBranch }},${{ github.event.inputs.pluginRepoOwnerName }}"" > modules.txt
      - name: Contents of modules.txt
        run: cat ../supertokens-root/modules.txt
      - name: Running loadModules in supertokens-root
        run: cd ../supertokens-root && ./loadModules
      - name: Copying current supertokens-core branch into supertokens-root
        run: cd ../supertokens-root && rm -rf ./supertokens-core && cp -r ../supertokens-core ./
      - name: Building and running tests
        run: cd ../supertokens-root && ./startTestingEnv
---
"
648540858;wvp-GB28181-pro;648540858/wvp-GB28181-pro;https://github.com/648540858/wvp-GB28181-pro;https://api.github.com/repos/648540858/wvp-GB28181-pro;master;14/11/2020 15:16;22/04/2024 12:04;FALSE;
qiusunshine;hikerView;qiusunshine/hikerView;https://github.com/qiusunshine/hikerView;https://api.github.com/repos/qiusunshine/hikerView;master;15/11/2020 04:52;19/04/2024 11:19;FALSE;
DerekYRC;mini-spring;DerekYRC/mini-spring;https://github.com/DerekYRC/mini-spring;https://api.github.com/repos/DerekYRC/mini-spring;main;17/11/2020 12:59;22/04/2024 03:45;FALSE;
javasmall;bigsai-algorithm;javasmall/bigsai-algorithm;https://github.com/javasmall/bigsai-algorithm;https://api.github.com/repos/javasmall/bigsai-algorithm;master;22/11/2020 14:17;15/04/2024 09:52;FALSE;
PaperMC;Starlight;PaperMC/Starlight;https://github.com/PaperMC/Starlight;https://api.github.com/repos/PaperMC/Starlight;fabric;22/11/2020 15:28;21/04/2024 10:33;FALSE;
emanuele-f;PCAPdroid;emanuele-f/PCAPdroid;https://github.com/emanuele-f/PCAPdroid;https://api.github.com/repos/emanuele-f/PCAPdroid;master;06/01/2020 19:11;22/04/2024 04:10;TRUE;"name: Debug build

on: [push, pull_request]
   
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/playstore'
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - run: ./gradlew test
    - run: ./gradlew assembleDebug -PdoNotStrip

---
name: ""Validate Gradle Wrapper""
on: [push, pull_request]

jobs:
  validation:
    name: ""Validation""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v2

---
name: Test native code

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
      
    - name: Run native tests
      working-directory: ./app/src/main/jni/tests
      run: make run_tests

---
name: Windows build

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-latest
    if: github.ref != 'refs/heads/playstore'
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        
    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - run: ./gradlew.bat assembleDebug

---
"
didi;DRouter;didi/DRouter;https://github.com/didi/DRouter;https://api.github.com/repos/didi/DRouter;master;26/11/2020 04:41;22/04/2024 04:41;FALSE;
bk138;droidVNC-NG;bk138/droidVNC-NG;https://github.com/bk138/droidVNC-NG;https://api.github.com/repos/bk138/droidVNC-NG;master;26/11/2020 14:33;21/04/2024 12:00;FALSE;
peng-zhihui;BluetoothTouch;peng-zhihui/BluetoothTouch;https://github.com/peng-zhihui/BluetoothTouch;https://api.github.com/repos/peng-zhihui/BluetoothTouch;main;26/11/2020 15:51;19/04/2024 14:18;FALSE;
GoogleCloudPlatform;bank-of-anthos;GoogleCloudPlatform/bank-of-anthos;https://github.com/GoogleCloudPlatform/bank-of-anthos;https://api.github.com/repos/GoogleCloudPlatform/bank-of-anthos;main;07/01/2020 20:02;22/04/2024 05:32;TRUE;"# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: tf-validate-ci
on:
  push:
    branches:
      - main
    paths:
      - 'iac/tf-anthos-gke/**'
      - 'iac/tf-multienv-cicd-anthos-autopilot/**'
      - '.github/workflows/terraform-validate-ci.yaml'
  pull_request:
    paths:
      - 'iac/tf-anthos-gke/**'
      - 'iac/tf-multienv-cicd-anthos-autopilot/**'
      - '.github/workflows/terraform-validate-ci.yaml'
jobs:
  job:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # list of directories in the repo that hosts Terraform samples
        # update this list as new terraform samples are added to the repo
        tf-sample: [
          'iac/tf-anthos-gke',
          'iac/tf-multienv-cicd-anthos-autopilot'
        ]
    steps:
      - uses: actions/checkout@v4
      - name: terraform init & validate
        env:
          SAMPLE_DIR: ${{ matrix.tf-sample }}
        run: |
          cd $SAMPLE_DIR
          terraform init -backend=false
          terraform validate

---
"
getActivity;Logcat;getActivity/Logcat;https://github.com/getActivity/Logcat;https://api.github.com/repos/getActivity/Logcat;master;24/01/2020 05:56;22/04/2024 09:46;TRUE;"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

---
"
linkedin;coral;linkedin/coral;https://github.com/linkedin/coral;https://api.github.com/repos/linkedin/coral;master;27/01/2020 20:07;19/04/2024 12:42;TRUE;"#
# CI build that assembles artifacts and runs tests.
# If validation is successful this workflow releases from the main dev branch.
#
# - skipping CI: add [skip ci] to the commit message
# - skipping release: add [skip release] to the commit message
#
name: CI

on:
  push:
    branches: ['master']
    tags-ignore: [v*] # release tags are autogenerated after a successful CI, no need to run CI against them
  pull_request:
    branches: ['**']

jobs:

  build:
    runs-on: ubuntu-latest
    if: ""! contains(toJSON(github.event.commits.*.message), '[skip ci]')""

    steps:

      - name: 1. Check out code
        uses: actions/checkout@v2 # https://github.com/actions/checkout
        with:
          fetch-depth: '0' # https://github.com/shipkit/shipkit-changelog#fetch-depth-on-ci

      - name: 2. Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: 3. Perform build
        run: ./gradlew -i build

      - name: 4. Perform release
        # Release job, only for pushes to the main development branch
        if: github.event_name == 'push'
          && github.ref == 'refs/heads/master'
          && github.repository == 'linkedin/coral'
          && !contains(toJSON(github.event.commits.*.message), '[skip release]')

        run: ./gradlew githubRelease publishToSonatype closeAndReleaseStagingRepository --stacktrace
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONATYPE_USER: ${{secrets.SONATYPE_USER}}
          SONATYPE_PWD: ${{secrets.SONATYPE_PWD}}
          PGP_KEY: ${{secrets.PGP_KEY}}
          PGP_PWD: ${{secrets.PGP_PWD}}

---
"
hamibot;hamibot;hamibot/hamibot;https://github.com/hamibot/hamibot;https://api.github.com/repos/hamibot/hamibot;master;30/11/2020 05:00;22/04/2024 10:54;FALSE;
Qbian61;forum-java;Qbian61/forum-java;https://github.com/Qbian61/forum-java;https://api.github.com/repos/Qbian61/forum-java;main;30/11/2020 12:41;22/04/2024 10:50;FALSE;
gh0stkey;CaA;gh0stkey/CaA;https://github.com/gh0stkey/CaA;https://api.github.com/repos/gh0stkey/CaA;master;02/12/2020 07:55;22/04/2024 11:40;FALSE;
PerfMa;xpocket;PerfMa/xpocket;https://github.com/PerfMa/xpocket;https://api.github.com/repos/PerfMa/xpocket;main;03/12/2020 13:08;31/03/2024 16:24;FALSE;
AOF-Dev;MCinaBox;AOF-Dev/MCinaBox;https://github.com/AOF-Dev/MCinaBox;https://api.github.com/repos/AOF-Dev/MCinaBox;dev;31/01/2020 05:19;22/04/2024 06:28;TRUE;"name: APK Debug
on:
  push:
    paths-ignore:
      - '**/*.md'
      - .gitignore
      - .editorconfig
      - appveyor.yml
      - 'azure-pipelines*.yml'
      - 'ci/azure-pipelines/template*.yml'
  workflow_dispatch:

  pull_request:
    paths-ignore:
      - '**/*.md'
      - .gitignore
      - .editorconfig
      - appveyor.yml
      - 'azure-pipelines*.yml'
      - 'ci/azure-pipelines/template*.yml'

jobs:
#Prepare:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Build MCinaBox APK with Gradle
#        run: |
#          chmod +x gradlew
#          ./gradlew clean :app:assembleDebug
#      - name: Upload APK
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-debug
#          path: app/build/outputs/apk/debug/app-debug.apk

  build_on_Windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11.0.5
      uses: actions/setup-java@v1.4.3
      with:
        java-version: 11.0.15
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
#保存cache时在Windows里遇到权限问题(太懒还没修复) :)  
  
    - name: Build MCinaBox Debug (with gradle)
      run: |
          chmod +x gradlew
          ./gradlew clean :app:assembleDebug
      shell: bash
    - name: Change APK name
      run: |
        mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/MCinaBox-${{ runner.os }}-Debug.apk
      shell: bash
    - name: Upload All Pack
      uses: actions/upload-artifact@v2
      with:
        name: MCinaBox-${{ runner.os }}-DebugPack
        path: app/build/outputs
    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: MCinaBox-${{ runner.os }}-Debug.apk
        path: app/build/outputs/apk/debug/MCinaBox-${{ runner.os }}-Debug.apk

  build_on_Ubuntu:
    name: Build on Ubuntu
    runs-on: Ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11.0.5
      uses: actions/setup-java@v1.4.3
      with:
        java-version: 11.0.15
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build MCinaBox Debug (with gradle)
      run: |
          chmod +x gradlew
          ./gradlew clean :app:assembleDebug
      shell: bash
    - name: Change APK name
      run: |
        mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/MCinaBox-${{ runner.os }}-Debug.apk
      shell: bash
    - name: Upload All Pack
      uses: actions/upload-artifact@v2
      with:
        name: MCinaBox-${{ runner.os }}-DebugPack
        path: app/build/outputs
    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: MCinaBox-${{ runner.os }}-Debug.apk
        path: app/build/outputs/apk/debug/MCinaBox-${{ runner.os }}-Debug.apk

  build_on_MacOS:
    name: Build on MacOS
    runs-on: MacOS-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11.0.5
      uses: actions/setup-java@v1.4.3
      with:
        java-version: 11.0.15
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Build MCinaBox Debug (with gradle)
      run: |
          chmod +x gradlew
          ./gradlew clean :app:assembleDebug
      shell: bash
    - name: Change APK name
      run: |
        mv app/build/outputs/apk/debug/app-debug.apk app/build/outputs/apk/debug/MCinaBox-${{ runner.os }}-Debug.apk
      shell: bash
    - name: Upload All Pack
      uses: actions/upload-artifact@v2
      with:
        name: MCinaBox-${{ runner.os }}-DebugPack
        path: app/build/outputs
    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: MCinaBox-${{ runner.os }}-Debug.apk
        path: app/build/outputs/apk/debug/MCinaBox-${{ runner.os }}-Debug.apk

---
"
Mr-xn;RedTeam_BlueTeam_HW;Mr-xn/RedTeam_BlueTeam_HW;https://github.com/Mr-xn/RedTeam_BlueTeam_HW;https://api.github.com/repos/Mr-xn/RedTeam_BlueTeam_HW;main;07/12/2020 14:15;22/04/2024 07:52;FALSE;
algorithmzuo;algorithm-primary;algorithmzuo/algorithm-primary;https://github.com/algorithmzuo/algorithm-primary;https://api.github.com/repos/algorithmzuo/algorithm-primary;main;09/12/2020 06:23;14/04/2024 10:43;FALSE;
ipipman;JavaSpringBootSamples;ipipman/JavaSpringBootSamples;https://github.com/ipipman/JavaSpringBootSamples;https://api.github.com/repos/ipipman/JavaSpringBootSamples;master;10/12/2020 02:48;20/04/2024 17:16;FALSE;
CaffeineMC;sodium-fabric;CaffeineMC/sodium-fabric;https://github.com/CaffeineMC/sodium-fabric;https://api.github.com/repos/CaffeineMC/sodium-fabric;dev;01/02/2020 04:04;20/04/2024 20:39;TRUE;"# Used when a commit is pushed to the repository
# This makes use of caching for faster builds and uploads the resulting artifacts
name: build-commit

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Extract current branch name
        shell: bash
        # bash pattern expansion to grab branch name without slashes
        run: ref=""${GITHUB_REF#refs/heads/}"" && echo ""branch=${ref////-}"" >> $GITHUB_OUTPUT
        id: ref
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Initialize caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/loom-cache
            ~/.gradle/wrapper
          key: ${{ runner.os }}-build-commit-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-build-commit-
      - name: Build artifacts
        run: ./gradlew build
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: sodium-artifacts-${{ steps.ref.outputs.branch }}
          path: build/libs/*.jar
---
# Used when building external pull requests
# We don't want to publish build artifacts or expose our other caches to possibly untrusted code
name: build-pull-request

on: [ pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Initialize caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/loom-cache
            ~/.gradle/wrapper
          key: ${{ runner.os }}-build-external-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-build-external-
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Build artifacts
        run: ./gradlew build
---
# Used when a release is pushed to GitHub
# This does not make use of any caching as to ensure a clean build
name: build-release

on:
  release:
     types:
       - published

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Build artifacts
        run: ./gradlew build -Pbuild.release=true
      - name: Upload assets to GitHub
        uses: AButler/upload-release-assets@v2.0
        with:
          # Filter built files to disregard -sources and -dev, and leave only the minecraft-compatible jars.
          files: 'build/libs/*[0-9].jar;LICENSE'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

---
# Used when a commit is tagged and pushed to the repository
# This makes use of caching for faster builds and uploads the resulting artifacts
name: build-tag

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Extract current branch name
        shell: bash
        # bash pattern expansion to grab branch name without slashes
        run: ref=""${GITHUB_REF#refs/heads/}"" && echo ""branch=${ref////-}"" >> $GITHUB_OUTPUT
        id: ref
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Initialize caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/loom-cache
            ~/.gradle/wrapper
          key: ${{ runner.os }}-build-tag-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-build-tag-
      - name: Build artifacts
        run: ./gradlew build -Pbuild.release=true
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: sodium-artifacts-${{ steps.ref.outputs.branch }}
          path: build/libs/*.jar

---
"
chenjiabing666;JavaFamily;chenjiabing666/JavaFamily;https://github.com/chenjiabing666/JavaFamily;https://api.github.com/repos/chenjiabing666/JavaFamily;master;13/12/2020 13:40;22/04/2024 09:07;FALSE;
patzly;doodle-android;patzly/doodle-android;https://github.com/patzly/doodle-android;https://api.github.com/repos/patzly/doodle-android;master;13/12/2020 16:51;22/04/2024 00:31;FALSE;
pmiaowu;BurpFastJsonScan;pmiaowu/BurpFastJsonScan;https://github.com/pmiaowu/BurpFastJsonScan;https://api.github.com/repos/pmiaowu/BurpFastJsonScan;main;15/12/2020 03:22;22/04/2024 09:18;FALSE;
metersphere;metersphere;metersphere/metersphere;https://github.com/metersphere/metersphere;https://api.github.com/repos/metersphere/metersphere;v3.x;03/02/2020 03:06;22/04/2024 13:38;TRUE;"on: pull_request

name: MeterSphere 通用 PR 处理

permissions:
  pull-requests: write

jobs:
  generic_handler:
    name: 为 PR 添加标签
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUBTOKEN }}
          labels: ${{ github.base_ref }}

---
name: Build Docker Image and Push without X-Pack Submodules

on:
  push:
    branches:
      - dev
      - v1*
      - test-build
  workflow_dispatch:

jobs:
  build_push:
    runs-on: ubuntu-latest
    name: Build Docker Image and Push without X-Pack Submodules
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Unzip jar
        run: mkdir -p backend/target/dependency && (cd backend/target/dependency; jar -xf ../*.jar)

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=metersphere/metersphere
          DOCKER_PLATFORMS=linux/amd64,linux/arm64
          TAG_NAME=${{ env.GITHUB_REF_SLUG }}-oss
          DOCKER_IMAGE_TAGS=""--tag ${DOCKER_IMAGE}:${TAG_NAME} --tag ${DOCKER_IMAGE}:latest-oss""
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${TAG_NAME}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${TAG_NAME} \
            --build-arg MS_VERSION=${{ env.GITHUB_REF_SLUG }}-${{ env.GITHUB_SHA_SHORT }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${DOCKER_IMAGE_TAGS} .

      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Docker Buildx (build)
        run: |
          docker buildx build --output ""type=image,push=false"" ${{ steps.prepare.outputs.buildx_args }}

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          username: metersphere
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Docker Buildx (push)
        run: |
          docker buildx build --output ""type=image,push=true"" ${{ steps.prepare.outputs.buildx_args }}
          

---
name: Build Docker Image and Push

on:
  push:
    branches:
      - master
      - dev
      - v1*
      - test-build
  workflow_dispatch:

jobs:
  build_push:
    runs-on: ubuntu-latest
    name: Build Docker Image and Push
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Unzip jar
        run: mkdir -p backend/target/dependency && (cd backend/target/dependency; jar -xf ../*.jar)

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=metersphere/metersphere
          DOCKER_PLATFORMS=linux/amd64,linux/arm64
          TAG_NAME=${{ env.GITHUB_REF_SLUG }}
          DOCKER_IMAGE_TAGS=""--tag ${DOCKER_IMAGE}:${TAG_NAME} --tag ${DOCKER_IMAGE}:latest""
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${TAG_NAME}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --build-arg VERSION=${TAG_NAME} \
            --build-arg MS_VERSION=${{ env.GITHUB_REF_SLUG }}-${{ env.GITHUB_SHA_SHORT }} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${DOCKER_IMAGE_TAGS} .

      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Docker Buildx (build)
        run: |
          docker buildx build --output ""type=image,push=false"" ${{ steps.prepare.outputs.buildx_args }}

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          username: metersphere
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Docker Buildx (push)
        run: |
          docker buildx build --output ""type=image,push=true"" ${{ steps.prepare.outputs.buildx_args }}
          

---
on:
  push:
    branches:
      - v3.*
  pull_request:
    branches:
      - v3.*

name: MeterSphere 覆盖率统计

permissions:
  pull-requests: write

jobs:
  generic_handler:
    name: 覆盖率统计
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 21
          cache: 'maven'
          cache-dependency-path: '**/pom.xml' # optional
          check-latest: true
      - name: Build with Maven - only frontend
        run: mvn -T 1C -B package --file pom.xml -pl frontend
      - name: Build with Maven - other
        run: mvn -T 1C -B package --file pom.xml -pl '!frontend'
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

---
on:
  push:
    branches:    
      - 'pr@**'
      - 'repr@**'

name: 针对特定分支名自动创建 PR

jobs:
  generic_handler:
    name: 自动创建 PR
    runs-on: ubuntu-latest
    steps:
      - name: Create pull request
        uses: jumpserver/action-generic-handler@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

---
name: Issue Close Require

on:
  schedule:
    - cron: ""0 0 * * *""

jobs:
  issue-close-require:
    runs-on: ubuntu-latest
    steps:
      - name: needs more info
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'close-issues'
          labels: '状态:待反馈'
          inactive-day: 30
          body: |
            您超过30天未反馈信息，我们将关闭此Issue，如有需要您可以重新打开或提交新的Issue

---
name: Issue Close Check

on:
  issues:
    types: [closed]

jobs:
  issue-close-remove-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Remove labels
        uses: actions-cool/issues-helper@v2
        if: ${{ !github.event.issue.pull_request }}
        with:
          actions: 'remove-labels'
          labels: '状态:待处理'
---
on:
  issue_comment:
    types: [created]

name: Add issues workflow labels

jobs:
  add-label-if-is-author:
    runs-on: ubuntu-latest
    if: ${{ (github.event.issue.user.id == github.event.comment.user.id) && (!github.event.issue.pull_request) }}
    steps:
      - name: Add require handle label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'add-labels'
          labels: '状态:待处理'

      - name: Remove require reply label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'remove-labels'
          labels: '状态:待用户反馈'

  add-label-if-not-author:
    runs-on: ubuntu-latest
    if: ${{ (github.event.issue.user.id != github.event.comment.user.id) && (!github.event.issue.pull_request) && (github.event.issue.state == 'open') }}
    steps:
      - name: Add require replay label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'add-labels'
          labels: '状态:待用户反馈'

      - name: Remove require handle label
        uses: actions-cool/issues-helper@v2
        with:
          actions: 'remove-labels'
          labels: '状态:待处理'

---
name: Issue Open Check

on:
  issues:
    types: [opened]

jobs:
  issue-open-add-labels:
    runs-on: ubuntu-latest
    steps:
      - name: Add labels
        uses: actions-cool/issues-helper@v2
        if: ${{ !github.event.issue.pull_request }}
        with:
          actions: 'add-labels'
          labels: '状态:待处理'
---
on:
  schedule:
    - cron: ""0 1 * * *""

name: Check recent handle issues

jobs:
  check-recent-issues-not-handle:
    runs-on: ubuntu-latest
    steps:
      - name: Check recent issues and send msg
        uses: jumpserver/action-issues-alert@master
        with:
          hook: ${{ secrets.WECHAT_GROUP_WEB_HOOK }}
          type: recent
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
on:
  schedule:
    - cron: ""0 9 * * 1-5""

name: Check untimely handle issues

jobs:
  check-untimely-handle-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Check untimely issues and send msg
        uses: jumpserver/action-issues-alert@master
        with:
          hook: ${{ secrets.WECHAT_GROUP_WEB_HOOK }}
          type: untimely
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
name: SonarCloud
on:
  push:
    branches:
      - v3.x
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=metersphere_metersphere -DskipTests -DskipAntRunForJenkins --file backend/pom.xml
---

# This is a basic workflow to help you get started with Actions

name: Mirror GitHub Auto Queried Repos to Gitee

on:
  push:
    branches:
      - v3.x

  schedule:
    - cron: '0 17 * * *'

  workflow_dispatch:

jobs:
  run:
    name: Sync-GitHub-to-Gitee
    runs-on: ubuntu-latest

    steps:
      - name: Mirror the Github repos to Gitee.
        uses: Yikun/hub-mirror-action@master
        with:
          src: github/metersphere
          dst: gitee/fit2cloud-feizhiyun
          dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
          dst_token: ${{ secrets.GITEE_TOKEN }}
          static_list: 'MeterSphere'
          force_update: true
          account_type: org
---
"
dromara;x-file-storage;dromara/x-file-storage;https://github.com/dromara/x-file-storage;https://api.github.com/repos/dromara/x-file-storage;main;16/12/2020 07:38;22/04/2024 09:01;FALSE;
threema-ch;threema-android;threema-ch/threema-android;https://github.com/threema-ch/threema-android;https://api.github.com/repos/threema-ch/threema-android;main;20/12/2020 21:14;21/04/2024 18:26;FALSE;
Firebasky;Java;Firebasky/Java;https://github.com/Firebasky/Java;https://api.github.com/repos/Firebasky/Java;main;22/12/2020 10:31;19/04/2024 14:01;FALSE;
xmolecules;jmolecules;xmolecules/jmolecules;https://github.com/xmolecules/jmolecules;https://api.github.com/repos/xmolecules/jmolecules;main;03/02/2020 14:08;22/04/2024 07:42;TRUE;"name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 8
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

---
"
amigoscode;spring-data-jpa-course;amigoscode/spring-data-jpa-course;https://github.com/amigoscode/spring-data-jpa-course;https://api.github.com/repos/amigoscode/spring-data-jpa-course;main;26/12/2020 18:45;17/04/2024 23:53;FALSE;
didi;turbo;didi/turbo;https://github.com/didi/turbo;https://api.github.com/repos/didi/turbo;master;29/12/2020 08:35;22/04/2024 08:47;FALSE;
Rosemoe;sora-editor;Rosemoe/sora-editor;https://github.com/Rosemoe/sora-editor;https://api.github.com/repos/Rosemoe/sora-editor;main;04/02/2020 08:50;22/04/2024 05:29;TRUE;"name: Android CI

on:
  push:
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build debug APK
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant Permissions for Gradle
        run: chmod +x gradlew

      - name: Build debug APK
        id: build
        run: ./gradlew assembleDebug

      - name: Publish snapshot
        if: ${{ always() && github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && steps.build.outcome == 'success' }}
        run: ./gradlew publishAllPublicationsToMavenCentral
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MVN_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MVN_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.MVN_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.MVN_SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.MVN_SIGNING_KEY_PASSWORD }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: ${{ !github.head_ref }}
        with:
          name: apk-debug
          path: app/build/outputs/apk/debug/app-debug.apk

---
"
SafeGroceryStore;MDUT;SafeGroceryStore/MDUT;https://github.com/SafeGroceryStore/MDUT;https://api.github.com/repos/SafeGroceryStore/MDUT;main;30/12/2020 03:49;22/04/2024 10:59;FALSE;
Seogeurim;CS-study;Seogeurim/CS-study;https://github.com/Seogeurim/CS-study;https://api.github.com/repos/Seogeurim/CS-study;main;30/12/2020 06:25;22/04/2024 13:38;FALSE;
CoreyD97;BurpCustomizer;CoreyD97/BurpCustomizer;https://github.com/CoreyD97/BurpCustomizer;https://api.github.com/repos/CoreyD97/BurpCustomizer;master;31/12/2020 12:40;19/04/2024 07:40;FALSE;
wh1t3p1g;ysomap;wh1t3p1g/ysomap;https://github.com/wh1t3p1g/ysomap;https://api.github.com/repos/wh1t3p1g/ysomap;master;08/02/2020 13:59;22/04/2024 11:59;TRUE;"name: build-release
run-name: Auto Build And Release YSOMAP

on:
  push:
    tags:
      - 'v*'

jobs:
  build_release:
    runs-on: ubuntu-22.04
    name: build_release
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'

      - name: build
        run: |
          mvn clean package -DskipTests 
          echo ""artifactPath=$(pwd)/cli/target"" >> $GITHUB_ENV
          version=$(cat VERSION) 
          tag=${GITHUB_REF_NAME}
          echo ""version=$version"" >> $GITHUB_ENV
          echo ""tag=$tag"" >> $GITHUB_ENV

      # debug
      - run: echo version is ${{ env.version }}
      - run: echo tag is ${{ env.tag }}

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: false
          release_name: ${{ env.tag }}
          tag_name: ${{ env.tag }}
          body: ${{ env.version }} auto-generated by github actions
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.artifactPath }}/ysomap.jar
          asset_name: ysomap.jar
          asset_content_type: application/java-archive

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package -DskipTests --file pom.xml

---
"
haveno-dex;haveno;haveno-dex/haveno;https://github.com/haveno-dex/haveno;https://api.github.com/repos/haveno-dex/haveno;master;25/02/2020 00:10;22/04/2024 10:56;TRUE;"name: CI

on:
  workflow_dispatch:
  push:
  pull_request:
    paths-ignore:
      - '**/README.md'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: gradle
      - name: Build with Gradle
        run: ./gradlew build --stacktrace --scan
      - name: cache nodes dependencies
        uses: actions/upload-artifact@v3
        with:
          name: cached-localnet
          path: .localnet
      - name: Install dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install -y rpm
      - name: Install WiX Toolset
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Invoke-WebRequest -Uri 'https://github.com/wixtoolset/wix3/releases/download/wix314rtm/wix314.exe' -OutFile wix314.exe
          .\wix314.exe /quiet /norestart
        shell: powershell
      - name: Build Haveno Installer
        run: |
          ./gradlew clean build --refresh-keys --refresh-dependencies
          ./gradlew packageInstallers
        working-directory: .
      - name: Move Release Files on Unix
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          mkdir ${{ github.workspace }}/release
          if [ ""${{ matrix.os }}"" == ""ubuntu-latest"" ]; then
            mv desktop/build/temp-*/binaries/haveno-*.rpm ${{ github.workspace }}/release
            mv desktop/build/temp-*/binaries/haveno_*.deb ${{ github.workspace }}/release
          else
            mv desktop/build/temp-*/binaries/Haveno-*.dmg ${{ github.workspace }}/release
          fi
          mv desktop/build/temp-*/binaries/desktop-*.jar.SHA-256 ${{ github.workspace }}/release
        shell: bash
      - name: Move Release Files on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mkdir ${{ github.workspace }}/release
          Move-Item -Path desktop\build\temp-*/binaries\Haveno-*.exe -Destination ${{ github.workspace }}/release
          Move-Item -Path desktop\build\temp-*/binaries\desktop-*.jar.SHA-256 -Destination ${{ github.workspace }}/release
        shell: powershell
      - uses: actions/upload-artifact@v3
        with:
          name: HavenoInstaller-${{ matrix.os }}
          path: ${{ github.workspace }}/release

---
name: Codacy Coverage Reporter

on: [""push""]

permissions:
  contents: read

jobs:
  build:
    if: github.repository == 'haveno-dex/haveno'
    name: Publish coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew clean build -x checkstyleMain -x checkstyleTest -x shadowJar

      - name: Run codacy coverage reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ github.workspace }}/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '43 21 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'adopt'
        cache: gradle

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below).
#    - name: Autobuild
#      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - name: Build
      run: ./gradlew build --stacktrace -x test -x checkstyleMain -x checkstyleTest

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: Comment to label

on:
  issues:
    types: [labeled]
  workflow_call:

jobs:
  issueLabeled:
    runs-on: ubuntu-latest
    steps:
      - name: Bounty explanation
        uses: peter-evans/create-or-update-comment@v3
        if: github.event.label.name == '💰bounty'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: >
            There is a bounty on this issue, the amount is in the title. The reward will be awarded to the first person or group of people who resolves this issue.


            If you are starting to work on this bounty, please write a comment, so that we can assign the issue to you. We expect contributors to provide a PR in a reasonable time frame or, in case of an extensive work, updates on their progresses. We will unassign the issue if we feel the assignee is not responsive or has abandoned the task.


            Read the [full conditions and details](https://github.com/haveno-dex/haveno/blob/master/docs/bounties.md) of our bounty system.

---
"
libxzr;KonaBess;libxzr/KonaBess;https://github.com/libxzr/KonaBess;https://api.github.com/repos/libxzr/KonaBess;master;11/01/2021 06:20;22/04/2024 10:48;FALSE;
Pleiterson;desafios-bootcamps-dio;Pleiterson/desafios-bootcamps-dio;https://github.com/Pleiterson/desafios-bootcamps-dio;https://api.github.com/repos/Pleiterson/desafios-bootcamps-dio;master;11/01/2021 17:36;19/04/2024 03:59;FALSE;
ethicalhackingplayground;ssrf-king;ethicalhackingplayground/ssrf-king;https://github.com/ethicalhackingplayground/ssrf-king;https://api.github.com/repos/ethicalhackingplayground/ssrf-king;main;12/01/2021 03:57;18/04/2024 00:45;FALSE;
RikkaApps;Shizuku-API;RikkaApps/Shizuku-API;https://github.com/RikkaApps/Shizuku-API;https://api.github.com/repos/RikkaApps/Shizuku-API;master;12/01/2021 06:57;22/04/2024 04:01;FALSE;
PojavLauncherTeam;PojavLauncher;PojavLauncherTeam/PojavLauncher;https://github.com/PojavLauncherTeam/PojavLauncher;https://api.github.com/repos/PojavLauncherTeam/PojavLauncher;v3_openjdk;11/03/2020 04:22;22/04/2024 10:19;TRUE;"name: Android CI

on:
  pull_request:
    branches-ignore:
      - 'l10n_v3_openjdk2'
    types: [ opened, reopened ]
  push:
    branches-ignore:
      - 'l10n_v3_openjdk2'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      GPLAY_KEYSTORE_PASSWORD: ${{ secrets.GPLAY_KEYSTORE_PASSWORD }}
      CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Get JRE 8
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          path: app_pojavlauncher/src/main/assets/components/jre
          workflow_conclusion: success
          repo: PojavLauncherTeam/android-openjdk-build-multiarch
          branch: buildjre8
          name: jre8-pojav

      - name: Get JRE17
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          path: app_pojavlauncher/src/main/assets/components/jre-new
          workflow_conclusion: success
          repo: PojavLauncherTeam/android-openjdk-build-multiarch
          branch: buildjre17
          name: jre17-pojav

      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.6.1

      - name: Build JRE JAR files
        run: |
          ./scripts/languagelist_updater.sh

          mkdir out
          # Build JRE JAR files (security manager, etc...)
          gradle :jre_lwjgl3glfw:build --no-daemon

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Google Play .aab
        if: github.repository_owner == 'PojavLauncherTeam' && github.ref_name == 'v3_openjdk'
        run: |
          gradle :app_pojavlauncher:bundleGplay
          mv app_pojavlauncher/build/outputs/bundle/gplay/app_pojavlauncher-gplay.aab out/app-gplay.aab

      - name: Build Debug .apk
        run: |
          # Build the launcher
          gradle :app_pojavlauncher:assembleDebug
          mv app_pojavlauncher/build/outputs/apk/debug/app_pojavlauncher-debug.apk out/app-debug.apk

      - name: Build APK without runtime
        run: |
          rm -r app_pojavlauncher/src/main/assets/components/jre
          rm -r app_pojavlauncher/src/main/assets/components/jre-new
          gradle assembleDebug
          mv app_pojavlauncher/build/outputs/apk/debug/app_pojavlauncher-debug.apk out/app-debug-noruntime.apk
      - name: Gen md5sums
        run: |
          md5sum out/app-debug.apk > out/app-debug.md5
          md5sum out/app-debug-noruntime.apk > out/app-debug-noruntime.md5
          
      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug
          path: out/app-debug.*
      
      - name: Upload AAB
        uses: actions/upload-artifact@v3
        with:
          name: app-release-aab
          path: out/app-gplay.aab

      - name: Upload onto the Google Play testing track
        continue-on-error: true
        if: github.repository_owner == 'PojavLauncherTeam' && github.ref_name == 'v3_openjdk'
        uses: r0adkll/upload-google-play@v1.1.2
        with:
          serviceAccountJsonPlainText: ${{ secrets.GPLAY_SERVICE_JSON }}
          packageName: net.kdt.pojavlaunch
          releaseFiles: out/app-gplay.aab
          track: internal
          inAppUpdatePriority: 5

      - name: Upload APK (without runtime)
        uses: actions/upload-artifact@v3
        with:
          name: app-debug-noruntime
          path: out/app-debug-noruntime.*


---
"
vvb2060;KeyAttestation;vvb2060/KeyAttestation;https://github.com/vvb2060/KeyAttestation;https://api.github.com/repos/vvb2060/KeyAttestation;master;12/03/2020 07:57;21/04/2024 14:57;TRUE;"name: Build CI

on: [ push, pull_request ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]

    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Build with Gradle
        run: |
          echo 'org.gradle.caching=true' >> gradle.properties
          ./gradlew assemble
          ./gradlew --stop
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifact
          path: app/build/outputs

---
"
Berkeley-CS61B;skeleton-sp21;Berkeley-CS61B/skeleton-sp21;https://github.com/Berkeley-CS61B/skeleton-sp21;https://api.github.com/repos/Berkeley-CS61B/skeleton-sp21;master;14/01/2021 23:51;21/04/2024 04:46;FALSE;
s-unscrupulous;idea_seat;s-unscrupulous/idea_seat;https://github.com/s-unscrupulous/idea_seat;https://api.github.com/repos/s-unscrupulous/idea_seat;master;16/01/2021 06:11;18/04/2024 04:52;FALSE;
newbee-ltd;newbee-mall-plus;newbee-ltd/newbee-mall-plus;https://github.com/newbee-ltd/newbee-mall-plus;https://api.github.com/repos/newbee-ltd/newbee-mall-plus;main;17/01/2021 03:31;13/04/2024 12:56;FALSE;
PowerJob;PowerJob;PowerJob/PowerJob;https://github.com/PowerJob/PowerJob;https://api.github.com/repos/PowerJob/PowerJob;master;16/03/2020 10:19;22/04/2024 08:16;TRUE;"name: Docker Image CI

on:
  push:
    branches: [ master ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: mvn clean package -Pdev -DskipTests -U -e && /bin/cp -rf powerjob-server/powerjob-server-starter/target/*.jar powerjob-server/docker/powerjob-server.jar && /bin/cp -rf powerjob-worker-agent/target/*.jar powerjob-worker-agent/powerjob-agent.jar && /bin/cp -rf powerjob-worker-samples/target/*.jar powerjob-worker-samples/powerjob-worker-samples.jar
    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: tjqq/powerjob-server
        tag_with_ref: true
        tags: latest
        path: powerjob-server/docker/
    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: tjqq/powerjob-agent
        tag_with_ref: true
        tags: latest
        path: powerjob-worker-agent/
    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: tjqq/powerjob-worker-samples
        tag_with_ref: true
        tags: latest
        path: powerjob-worker-samples/
---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B clean package -Pdev -DskipTests --file pom.xml
    - name: upload build result
      run: mkdir staging && cp powerjob-server/powerjob-server-starter/target/*.jar staging/powerjob-server.jar && cp powerjob-client/target/*.jar staging/powerjob-client.jar && cp powerjob-worker-agent/target/*.jar staging/powerjob-agent.jar
    - uses: actions/upload-artifact@v1
      with:
        name: powerjob-server.jar
        path: staging/powerjob-server.jar
    - uses: actions/upload-artifact@v1
      with:
        name: powerjob-client.jar
        path: staging/powerjob-client.jar
    - uses: actions/upload-artifact@v1
      with:
        name: powerjob-agent.jar
        path: staging/powerjob-agent.jar

---
"
spring-projects;spring-authorization-server;spring-projects/spring-authorization-server;https://github.com/spring-projects/spring-authorization-server;https://api.github.com/repos/spring-projects/spring-authorization-server;main;17/03/2020 18:28;22/04/2024 04:52;TRUE;"name: Build and Deploy

on:
  push:
    branches:
      - '**'
  schedule:
    - cron: '0 10 * * *' # Once per day at 10am UTC
  workflow_dispatch:

jobs:
  build:
    name: Build
    uses: spring-io/spring-security-release-tools/.github/workflows/build.yml@v1
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        jdk: [17]
    with:
      runs-on: ${{ matrix.os }}
      java-version: ${{ matrix.jdk }}
      distribution: temurin
    secrets: inherit
  test:
    name: Test Against Snapshots
    uses: spring-io/spring-security-release-tools/.github/workflows/test.yml@v1
    with:
      test-args: --refresh-dependencies --stacktrace -PforceMavenRepositories=snapshot -PspringFrameworkVersion=6.1.+ -PspringSecurityVersion=6.3.+
    secrets: inherit
  deploy-artifacts:
    name: Deploy Artifacts
    needs: [build, test]
    uses: spring-io/spring-security-release-tools/.github/workflows/deploy-artifacts.yml@v1
    with:
      should-deploy-artifacts: ${{ needs.build.outputs.should-deploy-artifacts }}
    secrets: inherit
  deploy-docs:
    name: Deploy Docs
    needs: [build, test]
    uses: spring-io/spring-security-release-tools/.github/workflows/deploy-docs.yml@v1
    with:
      should-deploy-docs: ${{ needs.build.outputs.should-deploy-artifacts }}
    secrets: inherit
  perform-release:
    name: Perform Release
    needs: [deploy-artifacts, deploy-docs]
    uses: spring-io/spring-security-release-tools/.github/workflows/perform-release.yml@v1
    with:
      should-perform-release: ${{ needs.deploy-artifacts.outputs.artifacts-deployed }}
      project-version: ${{ needs.deploy-artifacts.outputs.project-version }}
      milestone-repo-url: https://repo.spring.io/artifactory/milestone
      release-repo-url: https://repo1.maven.org/maven2
      artifact-path: org/springframework/security/spring-security-oauth2-authorization-server
      slack-announcing-id: spring-authorization-server-announcing
    secrets: inherit
---
name: Deploy Docs
on:
  push:
    tags: '**'
  repository_dispatch:
    types: request-build-reference # legacy
  #schedule:
  #- cron: '0 10 * * *' # Once per day at 10am UTC
  workflow_dispatch:
permissions:
  actions: write
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'spring-projects'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: docs-build
          fetch-depth: 1
      - name: Dispatch (partial build)
        if: github.ref_type == 'branch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}
      - name: Dispatch (full build)
        if: github.ref_type == 'tag'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)

---
name: PR build

on:
  pull_request:
    branches:
      - '**'

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        jdk: [17]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ matrix.jdk }}
        uses: spring-io/spring-gradle-build-action@v2
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
      - name: Build with Gradle
        run: ./gradlew clean build

---
name: Release Scheduler

on:
  schedule:
    - cron: '15 15 * * TUE' # Every Tuesday at 3:15pm UTC
  workflow_dispatch:

permissions: read-all

jobs:
  dispatch_scheduled_releases:
    name: Dispatch scheduled releases
    if: ${{ github.repository_owner == 'spring-projects' }}
    strategy:
      matrix:
        # List of active maintenance branches.
        branch: [ main, 1.2.x, 1.1.x ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Dispatch
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
        run: gh workflow run update-scheduled-release-version.yml -r ${{ matrix.branch }}

---
name: Update Scheduled Release Version

on:
  workflow_dispatch: # Manual trigger only. Triggered by release-scheduler.yml on main.

jobs:
  update-scheduled-release-version:
    name: Update Scheduled Release Version
    uses: spring-io/spring-security-release-tools/.github/workflows/update-scheduled-release-version.yml@v1
    secrets: inherit

---
"
osudroid;osu-droid;osudroid/osu-droid;https://github.com/osudroid/osu-droid;https://api.github.com/repos/osudroid/osu-droid;master;21/03/2020 09:39;20/04/2024 05:32;TRUE;"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: ""temurin""
        java-version: 17

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build apk
      uses: gradle/actions/setup-gradle@v3
      with:
        arguments: build

---
name: Validate Gradle Wrapper
on: [push, pull_request]

jobs:
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v2

---
"
charlotte-xiao;NCM2MP3;charlotte-xiao/NCM2MP3;https://github.com/charlotte-xiao/NCM2MP3;https://api.github.com/repos/charlotte-xiao/NCM2MP3;master;24/01/2021 15:14;22/04/2024 03:33;FALSE;
yulichang;mybatis-plus-join;yulichang/mybatis-plus-join;https://github.com/yulichang/mybatis-plus-join;https://api.github.com/repos/yulichang/mybatis-plus-join;master;27/01/2021 08:36;22/04/2024 06:27;FALSE;
silently9527;coupons;silently9527/coupons;https://github.com/silently9527/coupons;https://api.github.com/repos/silently9527/coupons;master;28/01/2021 12:06;22/04/2024 08:15;FALSE;
sparrowwallet;sparrow;sparrowwallet/sparrow;https://github.com/sparrowwallet/sparrow;https://api.github.com/repos/sparrowwallet/sparrow;master;22/03/2020 09:08;22/04/2024 13:29;TRUE;"name: Package

on: workflow_dispatch

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, ubuntu-20.04, macos-12]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up JDK 18.0.1
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '18.0.1'
      - name: Show Build Versions
        run: ./gradlew -v
      - name: Build with Gradle
        run: ./gradlew jpackage
      - name: Package zip distribution
        if: ${{ runner.os == 'Windows' || runner.os == 'macOS' }}
        run: ./gradlew packageZipDistribution
      - name: Package tar distribution
        if: ${{ runner.os == 'Linux' }}
        run: ./gradlew packageTarDistribution
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Sparrow Build - ${{ runner.os }}
          path: |
            build/jpackage/*
            !build/jpackage/Sparrow/
      - name: Headless build with Gradle
        if: ${{ runner.os == 'Linux' }}
        run: ./gradlew -Djava.awt.headless=true clean jpackage
      - name: Package headless tar distribution
        if: ${{ runner.os == 'Linux' }}
        run: ./gradlew -Djava.awt.headless=true packageTarDistribution
      - name: Rename Headless Artifacts
        if: ${{ runner.os == 'Linux' }}
        run: for f in build/jpackage/sparrow*; do mv -v ""$f"" ""${f/sparrow/sparrow-server}""; done;
      - name: Upload Headless Artifact
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: Sparrow Build - ${{ runner.os }} Headless
          path: |
            build/jpackage/*
            !build/jpackage/Sparrow/
---
"
karma9874;AndroRAT;karma9874/AndroRAT;https://github.com/karma9874/AndroRAT;https://api.github.com/repos/karma9874/AndroRAT;master;22/03/2020 10:31;22/04/2024 10:07;TRUE;"name: Close inactive issues
on:
  schedule:
    - cron: ""30 1 * * *""

jobs:
  close-issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/stale@v5
        with:
          days-before-issue-stale: 30
          days-before-issue-close: 7
          stale-issue-label: ""stale""
          stale-issue-message: ""This issue is stale because it has been open for 30 days with no activity.""
          close-issue-message: ""This issue was closed because it has been inactive for 7 days since being marked as stale.""
          days-before-pr-stale: -1
          days-before-pr-close: -1
          repo-token: ${{ secrets.GITHUB_TOKEN }}

---
# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x Android_Code/gradlew
    - name: Build with Gradle
      run: ./Android_Code/gradlew build

---
"
Moulberry;NotEnoughUpdates;Moulberry/NotEnoughUpdates;https://github.com/Moulberry/NotEnoughUpdates;https://api.github.com/repos/Moulberry/NotEnoughUpdates;master;29/03/2020 06:31;21/04/2024 23:15;TRUE;"name: Build

on:
  push:
    branches:
      - ""*""
    paths-ignore:
      - ""README.md""
      - ""COPYING""
      - ""COPYING.LESSER""
      - "".gitignore""
      - ""Update Notes""
  pull_request:
    branches:
      - ""*""
    paths-ignore:
      - ""README.md""
      - ""COPYING""
      - ""COPYING.LESSER""
      - "".gitignore""
      - ""Update Notes""
  workflow_dispatch:
jobs:
  build:
    env:
      GIT_URL: ${{ github.server_url }}/${{ github.repository }}/tree/${{ github.sha }}
      REF_NAME: ${{ github.ref_name }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      ACTOR: ${{ github.actor }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Send discord notification
        id: sendmsg
        if: ${{ env.WEBHOOK_URL }}
        run: |
          ./.github/workflows/send_webhook_update.sh
        env:
          STATUS: WORKING
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
      - name: Build with Gradle
        run: chmod +x ./gradlew && ./gradlew clean test remapJar --no-daemon
      - uses: actions/upload-artifact@v2
        with:
          path: build/libs/*-dep.jar
      - name: Update discord notification
        if: ${{ env.WEBHOOK_URL && success() }}
        run: |
          ./.github/workflows/send_webhook_update.sh
        env:
          STATUS: SUCCESS
          MESSAGE_ID: ${{ steps.sendmsg.outputs.MESSAGE_ID }}
      - name: Update discord notification
        if: ${{ env.WEBHOOK_URL && failure() }}
        run: |
          ./.github/workflows/send_webhook_update.sh
        env:
          STATUS: FAILURE
          MESSAGE_ID: ${{ steps.sendmsg.outputs.MESSAGE_ID }}

---
name: Infer

on:
  - pull_request
  - workflow_dispatch
jobs:
  inferering:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout feature
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
      - name: Setup Infer
        uses: srz-zumix/setup-infer@v1
      - name: Run Infer on feature
        run: |
          echo On commit $(git log --pretty=%s -1)
          mkdir -p ciwork
          infer capture -- ./gradlew clean test --no-daemon
          infer analyze
          cp infer-out/report.json ciwork/report-feature.json
      - uses: actions/checkout@v2
        name: Checkout base
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          clean: false
      - name: Run Infer on base
        run: |
          echo On commit $(git log --pretty=%s -1)
          infer capture --reactive -- ./gradlew clean test --no-daemon
          infer analyze --reactive
      - name: Generate report
        run: |
          infer reportdiff --report-current ciwork/report-feature.json --report-previous infer-out/report.json
          jq -r '.[] | select(.severity == ""ERROR"") | (""::error file=""+.file +"",line="" +(.line|tostring)+""::"" + .qualifier)' <infer-out/differential/introduced.json
          jq -r '.[] | select(.severity == ""WARNING"") | (""::warning file=""+.file +"",line="" +(.line|tostring)+""::"" + .qualifier)' <infer-out/differential/introduced.json
          fixcount=$(jq -r ""length"" <infer-out/differential/fixed.json)
          unfixcount=$(jq -r ""length"" <infer-out/differential/introduced.json)
          othercount=$(jq -r ""length"" <infer-out/differential/preexisting.json)
          echo ""This PR fixes $fixcount potential bug(s), introduces $unfixcount potential bug(s). (Total present in feature branch: $((unfixcount + othercount)))"" >>$GITHUB_STEP_SUMMARY
          [[ $unfixcount != 0 ]] && exit 1 || echo ok.

---
"
Endava;cats;Endava/cats;https://github.com/Endava/cats;https://api.github.com/repos/Endava/cats;master;02/04/2020 15:14;20/04/2024 02:41;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '20 1 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

      # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    - name: Build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mvn -B clean --file pom.xml
        mvn -B install --file pom.xml

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    # Runs a single command using the runners shell
    - name: SonarCloud Scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        mvn -B clean --file pom.xml
        mvn -B install sonar:sonar -Dsonar.projectKey=cats -Dsonar.organization=en-milie -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN

---
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package

on:
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: |
        mvn -B clean --file pom.xml
        mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

---
name: Release to Maven Central

on:
  workflow_dispatch:
    inputs:
      releaseversion:
        description: 'Release version'
        required: true
        default: 'X.X.X'
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Set projects Maven version to GitHub Action GUI set version
        run: mvn versions:set ""-DnewVersion=${{ github.event.inputs.releaseversion }}""

      - name: Build with Maven
        run: |
          mvn -B clean --file pom.xml
          mvn -B package --file pom.xml -DskipTests=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          server-id: ossrh
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.GPG_SIGN_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Apache Maven Central
        run: mvn -B deploy -Psign --file pom.xml
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME}}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_SIGN_PASSPHRASE }}
---
"
sqlancer;sqlancer;sqlancer/sqlancer;https://github.com/sqlancer/sqlancer;https://api.github.com/repos/sqlancer/sqlancer;main;03/04/2020 08:27;21/04/2024 13:00;TRUE;"name: ci

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'test/**'
      - '.github/workflows/*.yml'
      - 'pom.xml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'test/**'
      - '.github/workflows/*.yml'
      - 'pom.xml'

jobs:
  misc:
    name: General tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Verify
        run: mvn -B verify -DskipTests=true
      - name: Misc Tests
        run: mvn -B '-Dtest=!sqlancer.dbms.**,!sqlancer.qpg.**,!sqlancer.reducer.**' test
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Naming Convention Tests
        run: python src/check_names.py

  citus:
    name: DBMS Tests (Citus)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up Citus
        run: |
          echo ""deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main"" | sudo tee  /etc/apt/sources.list.d/pgdg.list
          curl https://install.citusdata.com/community/deb.sh | sudo bash
          sudo apt-get -y install  postgresql-15-citus-11.1
          sudo chown -R $USER:$USER /var/run/postgresql
          export PATH=/usr/lib/postgresql/15/bin:$PATH
          cd ~
          mkdir -p citus/coordinator citus/worker1 citus/worker2
          initdb -D citus/coordinator
          initdb -D citus/worker1
          initdb -D citus/worker2
          echo ""shared_preload_libraries = 'citus'"" >> citus/coordinator/postgresql.conf
          echo ""shared_preload_libraries = 'citus'"" >> citus/worker1/postgresql.conf
          echo ""shared_preload_libraries = 'citus'"" >> citus/worker2/postgresql.conf
          pg_ctl -D citus/coordinator -o ""-p 9700"" -l coordinator_logfile start || cat coordinator_logfile || cat citus/coordinator/coordinator_logfile
          pg_ctl -D citus/worker1 -o ""-p 9701"" -l worker1_logfile start
          ls citus/worker1
          pg_ctl -D citus/worker2 -o ""-p 9702"" -l worker2_logfile start
          psql -c ""CREATE ROLE sqlancer SUPERUSER LOGIN CREATEDB PASSWORD 'sqlancer';"" -p 9700 -d postgres -U $USER
          createdb test -p 9700 -U $USER
          psql -c ""CREATE ROLE sqlancer SUPERUSER LOGIN CREATEDB PASSWORD 'sqlancer';"" -p 9701 -d postgres -U $USER
          createdb test -p 9701 -U $USER
          psql -c ""CREATE ROLE sqlancer SUPERUSER LOGIN CREATEDB PASSWORD 'sqlancer';"" -p 9702 -d postgres -U $USER
          createdb test -p 9702 -U $USER
          psql -c ""CREATE EXTENSION citus;"" -p 9700 -U $USER -d test
          psql -c ""CREATE EXTENSION citus;"" -p 9701 -U $USER -d test
          psql -c ""CREATE EXTENSION citus;"" -p 9702 -U $USER -d test
          psql -c ""SELECT * from citus_add_node('localhost', 9701);"" -p 9700 -U $USER -d test
          psql -c ""SELECT * from citus_add_node('localhost', 9702);"" -p 9700 -U $USER -d test
      - name: Run Tests
        run: CITUS_AVAILABLE=true mvn -Dtest=TestCitus test

  clickhouse:
    name: DBMS Tests (ClickHouse)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up ClickHouse
        run: |
          docker pull clickhouse/clickhouse-server:24.3.1.2672
          docker run --ulimit nofile=262144:262144 --name clickhouse-server -p8123:8123 -d clickhouse/clickhouse-server:24.3.1.2672
          sleep 5
      - name: Run Tests
        run: CLICKHOUSE_AVAILABLE=true mvn -Dtest=ClickHouseBinaryComparisonOperationTest,TestClickHouse,ClickHouseOperatorsVisitorTest,ClickHouseToStringVisitorTest test
      - name: Show fatal errors
        run: docker exec clickhouse-server grep Fatal /var/log/clickhouse-server/clickhouse-server.log || echo No Fatal Errors found
      - name: Teardown ClickHouse server
        run: |
          docker stop clickhouse-server
          docker rm clickhouse-server

  cockroachdb:
    name: DBMS Tests (CockroachDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up CockroachDB
        run: |
          wget -qO- https://binaries.cockroachdb.com/cockroach-v23.2.0-beta.1.linux-amd64.tgz | tar  xvz
          cd  cockroach-v23.2.0-beta.1.linux-amd64/ && ./cockroach start-single-node --insecure &
          sleep 10
      - name: Create SQLancer user
        run: cd cockroach-v23.2.0-beta.1.linux-amd64/ && ./cockroach sql --insecure -e ""CREATE USER sqlancer; GRANT admin to sqlancer"" && cd ..
      - name: Run Tests
        run: COCKROACHDB_AVAILABLE=true mvn -Dtest=TestCockroachDB test

  cockroachdb-qpg:
    name: QPG Tests (CockroachDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up CockroachDB
        run: |
          wget -qO- https://binaries.cockroachdb.com/cockroach-v23.2.0-beta.1.linux-amd64.tgz | tar  xvz
          cd  cockroach-v23.2.0-beta.1.linux-amd64/ && ./cockroach start-single-node --insecure &
          sleep 10
      - name: Create SQLancer user
        run: cd cockroach-v23.2.0-beta.1.linux-amd64/ && ./cockroach sql --insecure -e ""CREATE USER sqlancer; GRANT admin to sqlancer"" && cd ..
      - name: Run Tests
        run: COCKROACHDB_AVAILABLE=true mvn -Dtest=TestCockroachDBQPG test

  databend:
    name: DBMS Tests (Databend)
    runs-on: ubuntu-latest
    services:
      databend:
        image: datafuselabs/databend
        env:
          QUERY_DEFAULT_USER: sqlancer
          QUERY_DEFAULT_PASSWORD: sqlancer
        ports:
          - 8000:8000
          - 3307:3307
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: |
          DATABEND_AVAILABLE=true mvn -Dtest=TestDatabend test

  duckdb:
    name: DBMS Tests (DuckDB)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build
        run: mvn -B package -DskipTests=true
      - name: DuckDB Tests
        run: |
          mvn -Dtest=TestDuckDBTLP test
          mvn -Dtest=TestDuckDBNoREC test

  h2:
    name: DBMS Tests (H2)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: H2_AVAILABLE=true mvn -Dtest=TestH2 test

  mariadb:
    name: DBMS Tests (MariaDB)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Install MariaDB
        run: |
          sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
          sudo add-apt-repository 'deb [arch=amd64,arm64,ppc64el] http://sfo1.mirrors.digitalocean.com/mariadb/repo/10.3/ubuntu bionic main'
          sudo apt update
          sudo apt install mariadb-server
          sudo systemctl start mariadb
      - name: Create SQLancer User
        run: sudo mysql -uroot -proot -e ""CREATE USER 'sqlancer'@'localhost' IDENTIFIED BY 'sqlancer'; GRANT ALL PRIVILEGES ON * . * TO 'sqlancer'@'localhost';""
      - name: Run Tests
        run: MARIADB_AVAILABLE=true mvn -Dtest=TestMariaDB test

  materialize:
    name: DBMS Tests (Materialize)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Materialize
        run: |
          docker pull materialize/materialized:latest
          docker run -d -p6875:6875 -p6877:6877 -p 26257:26257 materialize/materialized:latest
          sleep 5
          # Workaround for https://github.com/cockroachdb/cockroach/issues/93892
          psql postgres://root@localhost:26257 -c ""SET CLUSTER SETTING sql.stats.forecasts.enabled = false""
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: |
          MATERIALIZE_AVAILABLE=true mvn test -Dtest=TestMaterialize
          MATERIALIZE_AVAILABLE=true mvn test -Dtest=TestMaterializePQS

  materialize-qpg:
    name: QPG Tests (Materialize)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Materialize
        run: |
          docker pull materialize/materialized:latest
          docker run -d -p6875:6875 -p6877:6877 -p 26257:26257 materialize/materialized:latest
          sleep 5
          # Workaround for https://github.com/cockroachdb/cockroach/issues/93892
          psql postgres://root@localhost:26257 -c ""SET CLUSTER SETTING sql.stats.forecasts.enabled = false""
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: |
          MATERIALIZE_AVAILABLE=true mvn test -Dtest=TestMaterializeQPG
          MATERIALIZE_AVAILABLE=true mvn test -Dtest=TestMaterializeQueryPlan

  mysql:
    name: DBMS Tests (MySQL)
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.36
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd=""mysqladmin ping"" --health-interval=10s --health-timeout=5s --health-retries=10
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Create SQLancer user
        run: mysql -h 127.0.0.1  -uroot -proot -e ""CREATE USER 'sqlancer'@'%' IDENTIFIED BY 'sqlancer'; GRANT ALL PRIVILEGES ON * . * TO 'sqlancer'@'%';""
      - name: Run Tests
        run: |
          MYSQL_AVAILABLE=true mvn test -Dtest=TestMySQLPQS
          MYSQL_AVAILABLE=true mvn test -Dtest=TestMySQLTLP

  postgres:
    name: DBMS Tests (PostgreSQL)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1.0.0
        with:
          postgresql version: '12'
          postgresql user: 'sqlancer'
          postgresql password: 'sqlancer'
          postgresql db: 'test'
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: |
          POSTGRES_AVAILABLE=true mvn -Dtest=TestPostgresPQS test
          POSTGRES_AVAILABLE=true mvn -Dtest=TestPostgresTLP test
          POSTGRES_AVAILABLE=true mvn -Dtest=TestPostgresNoREC test

  sqlite:
    name: DBMS Tests (SQLite)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build
        run: mvn -B package -DskipTests=true
      - name: SQLite Tests
        run: |
          mvn -Dtest=TestSQLitePQS test
          mvn -Dtest=TestSQLiteTLP test
          mvn -Dtest=TestSQLiteNoREC test

  sqlite-qpg:
    name: QPG Tests (SQLite)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build
        run: mvn -B package -DskipTests=true
      - name: SQLite Tests for QPG
        run: |
          mvn -Dtest=TestSQLiteQPG test

  stonedb:
    name: DBMS Tests (StoneDB)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up StoneDB
        run: |
          docker run -p 3306:3306 -itd  -e MYSQL_ROOT_PASSWORD='123456'  stoneatom/stonedb
          ContainerID=$(docker ps --filter ancestor=stoneatom/stonedb --format ""{{.ID}}"") 
          docker exec $ContainerID bash
          sleep 60s
          docker exec $ContainerID sed -i ""s/tianmu_insert_delayed=1/tianmu_insert_delayed=0/"" /opt/stonedb57/install/my.cnf
          docker exec $ContainerID /opt/stonedb57/install/bin/mysql -uroot -p123456 -e ""CREATE USER 'sqlancer'@'%' IDENTIFIED WITH mysql_native_password BY 'sqlancer'; GRANT ALL PRIVILEGES ON *.* TO 'sqlancer'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;""
          sleep 60s
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build
        run: mvn -B package -DskipTests=true
      - name: StoneDB Tests
        run: |
          STONEDB_AVAILABLE=true mvn test -Dtest=TestStoneDBFuzz

  tidb:
    name: DBMS Tests (TiDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up TiDB
        run: |
          docker pull pingcap/tidb:latest
          docker run --name tidb-server -d -p 4000:4000 pingcap/tidb:v7.5.1
          sleep 10
      - name: Create SQLancer user
        run: sudo mysql -h 127.0.0.1 -P 4000 -u root -D test -e ""CREATE USER 'sqlancer'@'%' IDENTIFIED WITH mysql_native_password BY 'sqlancer'; GRANT ALL PRIVILEGES ON *.* TO 'sqlancer'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;""
      - name: Run Tests
        run: TIDB_AVAILABLE=true mvn -Dtest=TestTiDB test

  tidb-qpg:
    name: QPG Tests (TiDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up TiDB
        run: |
          docker pull pingcap/tidb:latest
          docker run --name tidb-server -d -p 4000:4000 pingcap/tidb:latest
          sleep 10
      - name: Create SQLancer user
        run: sudo mysql -h 127.0.0.1 -P 4000 -u root -D test -e ""CREATE USER 'sqlancer'@'%' IDENTIFIED WITH mysql_native_password BY 'sqlancer'; GRANT ALL PRIVILEGES ON *.* TO 'sqlancer'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;""
      - name: Run Tests
        run: TIDB_AVAILABLE=true mvn -Dtest=TestTiDBQPG test

  yugabyte:
    name: DBMS Tests (YugabyteDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Set up Yugabyte
        run: |
          docker pull yugabytedb/yugabyte:latest
          docker run -d --name yugabyte -p7000:7000 -p9000:9000 -p5433:5433 -p9042:9042 yugabytedb/yugabyte:latest bin/yugabyted start --daemon=false
          sleep 5
      - name: Run Tests
        run: YUGABYTE_AVAILABLE=true mvn -Dtest=TestYugabyte test


  doris:
    name: DBMS Tests (Apache Doris)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: install mysql client
        run: |
          sudo apt update
          sudo apt install mysql-client --assume-yes
      - name: Set up Apache Doris
        run: |
          sudo sysctl -w vm.max_map_count=2000000
          LASTEST_TAG=$(curl -s GET https://api.github.com/repos/apache/doris/releases | jq -r '.[].tag_name' | sed -n 1p)
          LASTEST_TAG_BIG_VERSION=$(echo ${LASTEST_TAG} | awk '{split($1, arr, "".""); print arr[1]"".""arr[2]}')
          curl -LJO ""https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=doris/${LASTEST_TAG_BIG_VERSION}/${LASTEST_TAG}/apache-doris-fe-${LASTEST_TAG}-bin-x86_64.tar.xz""
          curl -LJO ""https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=doris/${LASTEST_TAG_BIG_VERSION}/${LASTEST_TAG}/apache-doris-be-${LASTEST_TAG}-bin-x86_64.tar.xz""
          curl -LJO ""https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=doris/${LASTEST_TAG_BIG_VERSION}/${LASTEST_TAG}/apache-doris-dependencies-${LASTEST_TAG}-bin-x86_64.tar.xz""
          mkdir ./doris
          tar xf apache-doris-fe-${LASTEST_TAG}-bin-x86_64.tar.xz -C ./doris && mv doris/apache-doris-fe-${LASTEST_TAG}-bin-x86_64 doris/fe
          tar xf apache-doris-be-${LASTEST_TAG}-bin-x86_64.tar.xz -C ./doris && mv doris/apache-doris-be-${LASTEST_TAG}-bin-x86_64 doris/be
          tar xf apache-doris-dependencies-${LASTEST_TAG}-bin-x86_64.tar.xz -C ./doris && mv doris/apache-doris-dependencies-${LASTEST_TAG}-bin-x86_64 doris/dependencies
          cp doris/dependencies/*.jar doris/be/lib/
          doris/fe/bin/start_fe.sh --daemon
          doris/be/bin/start_be.sh --daemon
          sudo apt install libnet-ifconfig-wrapper-perl --assume-yes
          IP=$(ifconfig eth0 | grep inet | grep -v inet6 | awk '{print $2}')
          mysql -u root -h 127.0.0.1 --port 9030 -e ""ALTER SYSTEM ADD BACKEND '${IP}:9050';""
          mysql -u root -h 127.0.0.1 --port 9030 -e ""CREATE USER 'sqlancer' IDENTIFIED BY 'sqlancer'; GRANT ALL ON *.* TO sqlancer;""
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: DORIS_AVAILABLE=true mvn -Dtest=TestDoris test

  reducer:
    name: Reducer Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Build
        run: mvn -B package -DskipTests=true
      - name: Run Tests
        run: |
          mvn -Dtest=TestStatementReducer test

---
name: Publish package to the Maven Central Repository and Docker Hub
on:
  release:
    types: [created]
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Install gpg secret key
        run: cat <(echo -e ""${{ secrets.OSSRH_GPG_SECRET_KEY }}"") | gpg --batch --import
      - name: Publish package
        run: mvn --batch-mode deploy -DskipTests=true -DreleaseBuild=true -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build SQLancer
        run: mvn -B package -DskipTests=true
      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: mrigger/sqlancer
          tag_with_ref: true

---
"
Yiuman;citrus;Yiuman/citrus;https://github.com/Yiuman/citrus;https://api.github.com/repos/Yiuman/citrus;master;04/04/2020 16:20;18/04/2024 09:27;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Checkstyle CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        java-version: [ 8.0.192, 8 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java-version }} ${{ matrix.os }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'zulu'
          cache: maven
      - name: Checkstyle with Maven
        run: mvn checkstyle:check

---
# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request, surfacing known-vulnerable versions of the packages declared or updated in the PR. Once installed, if the workflow run is marked as required, PRs introducing known-vulnerable packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
name: 'Dependency Review'
on: [pull_request]

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v1

---
"
projectnessie;nessie;projectnessie/nessie;https://github.com/projectnessie/nessie;https://api.github.com/repos/projectnessie/nessie;main;09/04/2020 20:39;22/04/2024 12:46;TRUE;"# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Projectnessie Update development version on 'main' (or another branch) to the next
# patch/minor/major version as a -SNAPSHOT version.

# Manually triggered workflow, takes the optional ""bumpType"" and ""bumpBranch"" arguments.
# This workflow creates a Git commit to bump the development version.

# Secrets:
#   NESSIE_BUILDER  GH access-token to push the release-commits+tag to the branch,
#                   bypassing the required commit-hooks + review.

name: Bump version

on:
  # Manually triggered
  workflow_dispatch:
    inputs:
      bumpType:
        description: 'Bump what (`patch`, `minor`, `major`), defaults to `patch`'
        required: true
        type: string
        default: ""patch""
      bumpBranch:
        description: 'The branch name to bump the version in, leave empty to bump the version on the `main` branch.'
        required: true
        type: string
        default: ""main""

jobs:
  create-release:
    name: Bump version
    runs-on: ubuntu-22.04
    if: github.repository == 'projectnessie/nessie'
    env:
      BUMP_ON_BRANCH: ${{ github.event.inputs.bumpBranch }}
      BUMP_TYPE: ${{ github.event.inputs.bumpType }}

    steps:

    ### BEGIN runner setup
    - name: Checkout
      uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      with:
        ref: ${{ env.BUMP_ON_BRANCH }}
    - name: Setup Java, Gradle
      uses: ./.github/actions/dev-tool-java
    ### END runner setup

    - name: Get previous version information
      run: echo ""PREVIOUS_VERSION=$(cat version.txt)"" >> ${GITHUB_ENV}

    - name: Bump to version
      uses: gradle/actions/setup-gradle@v3
      env:
        # Same as for ci.yml
        GRADLE_BUILD_ACTION_CACHE_KEY_ENVIRONMENT: java-17
        GRADLE_BUILD_ACTION_CACHE_KEY_JOB: nessie-ci
        GRADLE_BUILD_ACTION_CACHE_KEY_JOB_INSTANCE: ci
      with:
        cache-read-only: true
        arguments: :bumpVersion --bumpType ${{ env.BUMP_TYPE }}

    - name: Get bumped version information
      run: |
        echo ""BUMPED_VERSION=$(cat version.txt)"" >> ${GITHUB_ENV}
        echo ""BUMPED_VERSION_NO_SNAPSHOT=${BUMPED_VERSION%-SNAPSHOT}"" >> ${GITHUB_ENV}

    - name: Configure bump-version-bot-user in git config
      run: |
        git config --global user.email ""nessie-bump-version-workflow-noreply@projectnessie.org""
        git config --global user.name ""Nessie Bump Version Workflow [bot]""

    # Record the next development iteration in git
    - name: Record next development version in git
      run: git commit -a -m ""[bump-version] bump to ${BUMPED_VERSION}""

    - name: Version information
      run: |
        cat <<! >> $GITHUB_STEP_SUMMARY
        ## Version information

        | **Previous Nessie version** | ${PREVIOUS_VERSION}       |
        | **Current Nessie version**  | ${BUMPED_VERSION}         |
        | **Bump type**               | ${BUMP_TYPE}              |
        | Git HEAD                    | \`$(git rev-parse HEAD)\` |
        !

    # Push the Git commit. If this one fails, some other commit was pushed to the
    # 'main' branch and break the linear history for the Nessie git repo.
    - name: Push Git commit
      run: |
        # Push directly using the remote repo URL, which includes the secret so this job can push to the repo
        UPSTREAM=""https://${{ secrets.NESSIE_BUILDER }}@github.com/${GITHUB_REPOSITORY}.git""

        # Move the default auth settings in ~/.gitconfig out of the way, so the git-push can use the token
        git config --rename-section http.https://github.com/ http.https://save.github.com/

        git push --no-verify ""${UPSTREAM}"" HEAD:${GITHUB_REF}

        # Move the default auth settings in ~/.gitconfig back
        git config --rename-section http.https://save.github.com/ http.https://github.com/

---
# Copyright (C) 2022 Dremio
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Projectnessie GitHub Pull-Request / macOS CI

name: macOS Build Check

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
  schedule:
    # Run daily on week days
    - cron:  '0 4 * * 1-5'
  workflow_dispatch:

# For the main branch: let all CI runs complete, one after the other. This has a couple advantages:
# * Site deployments happen in commit-order
# * Saved Gradle cache are persisted in commit-order
# * (Potentially) more GH runners available for PRs
concurrency:
  # PRs: 1 CI run concurrently / older ones are cancelled
  # main branch: 1 CI run concurrently / all commits / no cancellation
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  java:
    name: Java/Gradle macOS
    runs-on: macos-14
    timeout-minutes: 60
    if: (github.repository == 'projectnessie/nessie' && github.event_name != 'pull_request') || contains(github.event.pull_request.labels.*.name, 'pr-macos-win')
    env:
      SPARK_LOCAL_IP: localhost
      CI_MAC: ""true""

    steps:
    - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
    - name: Setup Java, Gradle
      uses: ./.github/actions/dev-tool-java

    - name: Gradle / compile
      uses: gradle/actions/setup-gradle@v3
      env:
        # Same as for ci.yml
        GRADLE_BUILD_ACTION_CACHE_KEY_ENVIRONMENT: java-17
        GRADLE_BUILD_ACTION_CACHE_KEY_JOB: nessie-ci
        GRADLE_BUILD_ACTION_CACHE_KEY_JOB_INSTANCE: ci
      with:
        cache-read-only: true
        arguments: assemble --scan

    - name: Gradle / unit test
      uses: gradle/actions/setup-gradle@v3
      env:
        SPARK_LOCAL_IP: localhost
      with:
        arguments: test --scan

    - name: Capture Test Reports
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: test-results
        path: |
          **/build/reports/*
          **/build/test-results/*
        retention-days: 3

---
# Copyright (C) 2022 Dremio
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Projectnessie GitHub Pull-Request / macOS CI

name: Windows Build Check

on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
  schedule:
    # Run daily on week days
    - cron:  '0 4 * * 1-5'
  workflow_dispatch:

# For the main branch: let all CI runs complete, one after the other. This has a couple advantages:
# * Site deployments happen in commit-order
# * Saved Gradle cache are persisted in commit-order
# * (Potentially) more GH runners available for PRs
concurrency:
  # PRs: 1 CI run concurrently / older ones are cancelled
  # main branch: 1 CI run concurrently / all commits / no cancellation
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  java:
    name: Java/Gradle Windows
    runs-on: windows-2022
    timeout-minutes: 60
    if: (github.repository == 'projectnessie/nessie' && github.event_name != 'pull_request') || contains(github.event.pull_request.labels.*.name, 'pr-macos-win')
    env:
      SPARK_LOCAL_IP: localhost

    steps:
    - name: Git line ending config
      # This is a workaround to pass the ui/ project's prettier configuration, which has the strict
      # rule to allow only LF as the line ending.
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf

    - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      with:
        repository: cdarlint/winutils
        path: hadoop-winutils
        ref: d018bd9c919dee1448b95519351cc591a6338a00

    - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
    - name: Setup Java, Gradle
      uses: ./.github/actions/dev-tool-java

    - name: Gradle / compile
      uses: gradle/actions/setup-gradle@v3
      env:
        # Same as for ci.yml
        GRADLE_BUILD_ACTION_CACHE_KEY_ENVIRONMENT: java-17
        GRADLE_BUILD_ACTION_CACHE_KEY_JOB: nessie-ci
        GRADLE_BUILD_ACTION_CACHE_KEY_JOB_INSTANCE: ci
      with:
        cache-read-only: true
        arguments: assemble --scan

---
# Copyright (C) 2020 Dremio
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Unifies main + PR workflow.
#
# The unified CI workflow consists of 2 ""stages"":
# - Checks - test, intTest, NesQuEIT, etc
# - Finalize - a ""success"" dummy job for PRs + a ""save to github-cache"" job for push-to-main
#
# Utilizes the Gradle build cache for all stages. The updated build cache
# of the jobs in the checks stage are saved as artifacts (with the minimum
# retention period). The updated build cache is pushed back to GigHub's
# cache when the checks have successfully finished.

name: CI build

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'LICENSE'
      - 'NOTICE'
      - '**.md'
      - '!site/**'
      - '.github/renovate.json5'
      - '.github/workflows/release*.yml'
      - '.github/workflows/check*.yml'
      - '.idea/**'
      - '.editorconfig'
  pull_request:
    types: [labeled, opened, synchronize, reopened]

# For the main branch: let all CI runs complete, one after the other. This has a couple advantages:
# * Site deployments happen in commit-order
# * Saved Gradle cache are persisted in commit-order
# * (Potentially) more GH runners available for PRs
concurrency:
  # PRs: 1 CI run concurrently / older ones are cancelled
  # main branch: 1 CI run concurrently / all commits / no cancellation
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  code-checks:
    name: CI Code Checks et al
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      max-parallel: 2
      matrix:
        java-version: ['17']
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java
        with:
          java-version: ${{ matrix.java-version }}

      # Needed for the Quarkus plugin - can likely go away once we use Quarkus 3 or newer
      - name: Bump Gradle daemon heap
        run: sed -i 's/-Xms.*/-Xms6G -Xmx6G -XX:MaxMetaspaceSize=1g \\/' gradle.properties

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare
        with:
          java-version: ${{ matrix.java-version }}

      - name: Gradle / Compile
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: |
            spotlessCheck
            compileAll
            -x :nessie-quarkus:compileAll
            -x :nessie-quarkus-cli:compileAll
            -x :nessie-events-quarkus:compileAll
            --scan

      - name: Gradle / Compile Quarkus
        run: |
          # 2 Retries - to mitigate https://github.com/gradle/gradle/issues/25751
          ./gradlew :nessie-quarkus:compileAll :nessie-quarkus-cli:compileAll :nessie-events-quarkus:compileAll --scan || \
            ./gradlew :nessie-quarkus:compileAll :nessie-quarkus-cli:compileAll :nessie-events-quarkus:compileAll --scan || \
            ./gradlew :nessie-quarkus:compileAll :nessie-quarkus-cli:compileAll :nessie-events-quarkus:compileAll --scan

      - name: Gradle / Checkstyle
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: checkstyle --scan

      - name: Gradle / Assemble
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: assemble --scan

      - name: Gradle / Publish to Maven local
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: publishToMavenLocal --scan

      # This is a rather quick one and uses the output of 'publishToMavenLocal', which uses the
      # outputs of 'assemble'
      - name: Gradle / build tools integration tests
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: buildToolsIntegrationTest

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'code-checks'
          java-version: ${{ matrix.java-version }}

  test:
    name: CI Test
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      max-parallel: 2
      matrix:
        java-version: ['17']
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java
        with:
          java-version: ${{ matrix.java-version }}

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare
        with:
          java-version: ${{ matrix.java-version }}

      - name: Gradle / test
        uses: gradle/actions/setup-gradle@v3
        with:
          arguments: |
            test
            :nessie-client:check 
            -x :nessie-client:intTest 
            -x :nessie-quarkus:test
            -x :nessie-quarkus-cli:test
            -x :nessie-events-quarkus:test
            --scan

      - name: Capture Test Reports
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ci-test-reports
          path: |
            **/build/reports/*
            **/build/test-results/*
          retention-days: 7

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'test'
          java-version: ${{ matrix.java-version }}

  test-quarkus:
    name: CI Test Quarkus
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      max-parallel: 2
      matrix:
        java-version: ['17']
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java
        with:
          java-version: ${{ matrix.java-version }}

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare
        with:
          java-version: ${{ matrix.java-version }}

      - name: Gradle / Test Quarkus Server
        run: |
          # 2 Retries - to mitigate https://github.com/gradle/gradle/issues/25751
          ./gradlew :nessie-quarkus:test --scan || \
            ./gradlew :nessie-quarkus:test --scan || \
            ./gradlew :nessie-quarkus:test --scan

      - name: Gradle / Test Quarkus Events
        run: |
          # 2 Retries - to mitigate https://github.com/gradle/gradle/issues/25751
          ./gradlew :nessie-events-quarkus:test --scan || \
            ./gradlew :nessie-events-quarkus:test --scan || \
            ./gradlew :nessie-events-quarkus:test --scan

      - name: Dump quarkus.log
        if: ${{ failure() }}
        run: |
          find . -path ""**/build/quarkus.log"" | while read ql ; do
            echo ""::group::Quarkus build log $ql""
            cat $ql
            echo ""::endgroup::""
          done

      - name: Capture Test Reports
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ci-test-quarkus-reports
          path: |
            **/build/quarkus.log
            **/build/reports/*
            **/build/test-results/*
          retention-days: 7

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'test-quarkus'
          java-version: ${{ matrix.java-version }}

  int-test:
    name: CI intTest
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      max-parallel: 2
      matrix:
        java-version: ['17']
    env:
      SPARK_LOCAL_IP: localhost
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java
        with:
          java-version: ${{ matrix.java-version }}

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare

      - name: Gradle / intTest
        run: |
          echo ""::group::Collect :nessie-versioned-storage projects""
          ./gradlew :listProjectsWithPrefix --prefix :nessie-versioned-persist- --output ../persist-prjs.txt --exclude
          echo ""::endgroup::""

          echo ""::group::Collect :nessie-versioned-persist projects""
          ./gradlew :listProjectsWithPrefix --prefix :nessie-versioned-storage- --output ../storage-prjs.txt --exclude
          echo ""::endgroup::""

          echo ""::group::Collect :nessie-spark-extensions projects""
          ./gradlew :listProjectsWithPrefix --prefix :nessie-spark-ext --output ../spark-prjs.txt --exclude
          echo ""::endgroup::""

          ./gradlew intTest \
            -x :nessie-quarkus:intTest \
            -x :nessie-quarkus-cli:intTest \
            -x :nessie-events-quarkus:intTest \
            $(cat ../persist-prjs.txt) \
            $(cat ../storage-prjs.txt) \
            $(cat ../spark-prjs.txt) \
            --scan

      - name: Capture Test Reports
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ci-inttest-reports
          path: |
            **/build/reports/*
            **/build/test-results/*
          retention-days: 7

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'int-test'
          java-version: ${{ matrix.java-version }}

  int-test-stores:
    name: CI intTest versioned/stores
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      max-parallel: 2
      matrix:
        java-version: ['17']
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java
        with:
          java-version: ${{ matrix.java-version }}

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare
        with:
          java-version: ${{ matrix.java-version }}

      - name: Gradle / intTest versioned/stores
        run: |
          echo ""::group::Collect :nessie-versioned-storage projects""
          ./gradlew :listProjectsWithPrefix --prefix :nessie-versioned-storage- --output ../storage-prjs.txt
          echo ""::endgroup::""

          echo ""::group::Collect :nessie-versioned-persist projects""
          ./gradlew :listProjectsWithPrefix --prefix :nessie-versioned-persist- --output ../persist-prjs.txt
          echo ""::endgroup::""

          ./gradlew $(cat ../persist-prjs.txt) $(cat ../storage-prjs.txt) --scan

      - name: Capture Test Reports
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ci-inttest-stores-reports
          path: |
            **/build/reports/*
            **/build/test-results/*
          retention-days: 7

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'int-test-stores'
          java-version: ${{ matrix.java-version }}

  int-test-integrations:
    name: CI intTest integrations
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      SPARK_LOCAL_IP: localhost
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare

      - name: Gradle / intTest integrations
        run: |
          echo ""::group::Collect :nessie-spark-extensions projects""
          ./gradlew :listProjectsWithPrefix --prefix :nessie-spark-ext --output ../spark-prjs.txt
          echo ""::endgroup::""

          ./gradlew $(cat ../spark-prjs.txt) --scan

      - name: Capture Test Reports
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ci-inttest-integrations-reports
          path: |
            **/build/reports/*
            **/build/test-results/*
          retention-days: 7

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'int-test-integrations'

  int-test-quarkus:
    name: CI intTest Quarkus
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      max-parallel: 2
      matrix:
        java-version: ['17']
    steps:
      - uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java
        with:
          java-version: ${{ matrix.java-version }}

      - name: Prepare Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-prepare
        with:
          java-version: ${{ matrix.java-version }}

      - name: Gradle / intTest Quarkus Server
        run:
          # 2 Retries - to mitigate https://github.com/gradle/gradle/issues/25751
          ./gradlew :nessie-quarkus:intTest --scan || \
            ./gradlew :nessie-quarkus:intTest --scan || \
            ./gradlew :nessie-quarkus:intTest --scan

      - name: Gradle / intTest Quarkus CLI
        run:
          # 2 Retries - to mitigate https://github.com/gradle/gradle/issues/25751
          ./gradlew :nessie-quarkus-cli:intTest --scan || \
            ./gradlew :nessie-quarkus-cli:intTest --scan || \
            ./gradlew :nessie-quarkus-cli:intTest --scan

      - name: Gradle / intTest Quarkus Events
        run:
          # 2 Retries - to mitigate https://github.com/gradle/gradle/issues/25751
          ./gradlew :nessie-events-quarkus:intTest --scan || \
            ./gradlew :nessie-events-quarkus:intTest --scan || \
            ./gradlew :nessie-events-quarkus:intTest --scan

      - name: Dump quarkus.log
        if: ${{ failure() }}
        run: |
          find . -path ""**/build/quarkus.log"" | while read ql ; do
            echo ""::group::Quarkus build log $ql""
            cat $ql
            echo ""::endgroup::""
          done

      - name: Capture Test Reports
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: ci-inttest-quarkus-reports
          path: |
            **/build/quarkus.log
            **/build/reports/*
            **/build/test-results/*
          retention-days: 7

      - name: Save partial Gradle build cache
        uses: ./.github/actions/ci-incr-build-cache-save
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          job-name: 'int-test-quarkus'
          java-version: ${{ matrix.java-version }}

  determine-jobs:
    name: CI Determine jobs
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      # Each ""conditional"" job has a mapped output here, also a ""non-PR"" case and a ""PR"" case
      # with label and globs (at the end of the script).
      docker: ${{ steps.determine.outputs.docker }}
      nesqueit: ${{ steps.determine.outputs.nesqueit }}
    steps:
      - name: install minimatch
        shell: bash
        run: npm install minimatch@""^7.4.3""
      - name: Determine conditional jobs to run
        id: determine
        uses: actions/github-script@v7
        with:
          script: |
            const {Minimatch} = require(""minimatch"");

            async function getChangedFiles(pull_request) {
              const listFilesOptions = github.rest.pulls.listFiles.endpoint.merge({
                owner: pull_request.base.repo.owner.login,
                repo: pull_request.base.repo.name,
                pull_number: pull_request.number,
              });
              return github.paginate(listFilesOptions).then(resp => resp.map(f => f.filename))
            }

            function isMatch(changedFile, matchers) {
              for (const matcher of matchers) {
                if (matcher.match(changedFile)) {
                  core.info(""Match found for changed file "" + changedFile);
                  return true;
                }
              }
              core.info(""No changed file matched the globs"");
              return false;
            }

            function filesMatchAnyGlob(changedFiles, globs) {
              const matchers = globs.map(g => new Minimatch(g));
              for (const changedFile of changedFiles) {
                if (isMatch(changedFile, matchers)) {
                  return true;
                }
              }
              return false;
            }

            function checkLabelOrGlobs(pr, changedFiles, labelName, globs) {
              core.info(""Checking for "" + labelName);

              // If the PR has the given label, then let the conditional job run.
              for (const label of pr.labels) {
                if (label.name === labelName) {
                  core.info(""PR has label "" + labelName);
                  return true;
                }
              }

              // For pull request, check the list of changed files against the given globs.
              // Let the conditional job run, if any of the globs matches and of the changed files.
              core.info(""Checking changed files against globs "" + globs);
              return filesMatchAnyGlob(changedFiles, globs);
            }

            ///////////////////////////////////////////////////////////////////////////////////////
            // ""Non PR"" case:
            // Behavior of the conditional jobs when the event that triggered the workflow is not
            // for a pull request (usually a push-to-main).
            //
            if (!context.payload || !context.payload.pull_request) {
              core.info(""Not a pull-request, enabling all jobs."");

              // Yield default values for all event payload types, except pull_request
              core.setOutput('docker', true);
              core.setOutput('nesqueit', false); // handled in a scheduled job
              return true;
            }

            ///////////////////////////////////////////////////////////////////////////////////////
            // ""PR"" case:
            // Determine the whether the conditional jobs shall run, based on a label name, which
            // has been manually added, or, if the label is not present, based on some globs to
            // check.

            const pr = context.payload.pull_request
            core.info(""pull-request #"" + pr.number);

            // Retrieves the full list of changed files for the PR.
            const changedFiles = await getChangedFiles(pr);

            core.startGroup('PR job check / Docker');
            core.setOutput('docker', checkLabelOrGlobs(pr, changedFiles,
              'pr-docker',
              ['gradle/wrapper/**', 'tools/dockerbuild/**', 'helm/**', '.github/**']));
            core.endGroup();

            core.startGroup('PR job check / NesQuEIT');
            core.setOutput('nesqueit', checkLabelOrGlobs(pr, changedFiles,
              'pr-integrations',
              ['gradle/wrapper/**', 'integrations/**', 'api/**', '.github/**']));
            core.endGroup();

  docker-testing:
    name: CI Docker and Helm checks
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs:
      - determine-jobs
    if: needs.determine-jobs.outputs.docker == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          fetch-depth: 0
      - name: Setup runner
        uses: ./.github/actions/setup-runner
      - name: Setup Java, Gradle
        uses: ./.github/actions/dev-tool-java

      - name: Extract version
        run: |
          VERSION=""$(cat version.txt)""
          DOCKER_VERSION=""${VERSION%-SNAPSHOT}""
          echo ${DOCKER_VERSION}
          echo ""DOCKER_VERSION=${DOCKER_VERSION}"" >> ${GITHUB_ENV}

      # Free disk space (minikube warning: ""Docker is nearly out of disk space, which may cause
      # deployments to fail! (85% of capacity)"")
      - name: Free disk space
        uses: ./.github/actions/free-disk-space

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          # https://helm.sh/docs/topics/version_skew/
          version: 'v3.11.3'

      - name: Setup chart-testing
        uses: helm/chart-testing-action@v2.6.1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup & Start Minikube
        uses: medyagh/setup-minikube@v0.0.16
        with:
          # If required, use the matrix strategy against this option to test against multiple Kubernetes versions:
          kubernetes-version: stable
          cache: false
          # This _should_ work, but doesn't somehow (the image push fails). It errors out looking for a coredns pod
          # with these settings...
          #addons: 'registry'
          #insecure-registry: '192.168.0.0/16'

      - name: Setup Docker registry
        run: |
          echo ""::group::Get registry IP""
          DOCKER_REGISTRY=""$(minikube ip)""
          echo ""Registry IP is ${DOCKER_REGISTRY}""
          echo ""::endgroup::""

          echo ""::group::Update buildkitd_conf for 'docker buildx build'""
          # Use 'http' instead of 'https' during 'docker buildx build' in 'tools/dockerbuild/build-push-images.sh'
          cat <<EOF > ../buildkitd.toml                                                                                                                                                                                                                                                                                            
          [registry.""${DOCKER_REGISTRY}:5000""]                                                                                                                            "
Team-xManager;xManager;Team-xManager/xManager;https://github.com/Team-xManager/xManager;https://api.github.com/repos/Team-xManager/xManager;main;08/02/2021 12:31;22/04/2024 12:11;FALSE;
fordes123;subtitles-view;fordes123/subtitles-view;https://github.com/fordes123/subtitles-view;https://api.github.com/repos/fordes123/subtitles-view;main;11/04/2020 16:32;14/04/2024 14:18;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI Build

on:
  push:
    paths-ignore:
      - 'README.md'
    branches: [ main ]
  pull_request:
    paths-ignore:
      - 'README.md'
    branches: [ main ]

  workflow_dispatch:
    inputs:
      generateInstaller:
        description: 'generateInstaller'
        required: true
        type: choice
        options:
          - 'true'
          - 'false'
        default: 'false'
      customizedJre:
        description: 'customizedJre'
        required: true
        type: choice
        options:
          - 'true'
          - 'false'
        default: 'false'

jobs:
  bundling-for-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn --file pom.xml -Dplatform=windows -DgenerateInstaller=${{github.event.inputs.bundleJre}} -DcustomizedJre=${{github.event.inputs.customizedJre}} -DcreateZipball=true -DcreateTarball=false -B package
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: |
            target/subtitles-view-*.*
            !target/subtitles-view-*.jar
  bundling-for-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn --file pom.xml -Dplatform=linux -DgenerateInstaller=${{github.event.inputs.bundleJre}} -DcustomizedJre=${{github.event.inputs.customizedJre}} -DcreateZipball=false -DcreateTarball=true -B package
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: |
            target/subtitles-view-*.*
            !target/subtitles-view-*.jar
  bundling-for-mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn --file pom.xml -Dplatform=mac -DgenerateInstaller=${{github.event.inputs.bundleJre}} -DcustomizedJre=${{github.event.inputs.customizedJre}} -DcreateZipball=false -DcreateTarball=true -B package
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mac
          path: |
            target/subtitles-view-*.*
            !target/subtitles-view-*.jar
---
"
GuntherRademacher;rr;GuntherRademacher/rr;https://github.com/GuntherRademacher/rr;https://api.github.com/repos/GuntherRademacher/rr;master;14/04/2020 20:31;15/04/2024 21:18;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.2
    - name: Set up JDK 11
      uses: actions/setup-java@v4.2.1
      with:
        java-version: 11
        distribution: zulu
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

---
"
netease-im;camellia;netease-im/camellia;https://github.com/netease-im/camellia;https://api.github.com/repos/netease-im/camellia;master;15/04/2020 09:32;22/04/2024 13:31;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml

---
"
xjjdog;bcmall;xjjdog/bcmall;https://github.com/xjjdog/bcmall;https://api.github.com/repos/xjjdog/bcmall;master;17/02/2021 10:59;08/04/2024 12:02;FALSE;
WorldQL;mammoth;WorldQL/mammoth;https://github.com/WorldQL/mammoth;https://api.github.com/repos/WorldQL/mammoth;trunk;19/04/2020 18:36;14/04/2024 01:03;TRUE;"name: Java Build
on:
  push:
    branches:
      - trunk
    tags:
      - v*
  pull_request:

env:
  JDK_VERSION: '17'
  SPIGOT_VERSION: '1.18.1'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: ${{ env.JDK_VERSION }}
        cache: maven
    - name: Compile Spigot with BuildTools
      uses: SpraxDev/Action-SpigotMC@v3
      with:
        versions: ${{ env.SPIGOT_VERSION }}
        buildToolProvider: SpigotMC
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Resolve .jar name
      id: prep
      run: |
        JAR_PATH=`echo target/Mammoth*.jar`
        JAR_NAME=`basename ${JAR_PATH}`

        echo ::set-output name=jar_path::${JAR_PATH}
        echo ::set-output name=jar_name::${JAR_NAME}
    - name: Upload .jar
      if: contains(github.ref, 'refs/tags/') == false
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.prep.outputs.jar_name }}
        path: ${{ steps.prep.outputs.jar_path }}
    - name: Create Release
      if: contains(github.ref, 'refs/tags/') == true
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Mammoth ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      if: contains(github.ref, 'refs/tags/') == true
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.prep.outputs.jar_path }}
        asset_name: ${{ steps.prep.outputs.jar_name }}
        asset_content_type: application/java-archive

---
"
apache;flink-training;apache/flink-training;https://github.com/apache/flink-training;https://api.github.com/repos/apache/flink-training;master;20/04/2020 12:01;19/04/2024 07:47;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11]

    steps:
      - uses: actions/checkout@v3

      - name: Set JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build without Scala
        run: ./gradlew build --scan --stacktrace -Porg.gradle.project.enable_scala=false

      - name: Build with Scala
        run: ./gradlew build --scan --stacktrace -Porg.gradle.project.enable_scala=true

---
"
openrewrite;rewrite;openrewrite/rewrite;https://github.com/openrewrite/rewrite;https://api.github.com/repos/openrewrite/rewrite;main;12/05/2020 22:16;22/04/2024 10:24;TRUE;"---
name: ci

on:
  push:
    branches:
      - main
    tags-ignore:
      - ""*""
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    uses: openrewrite/gh-automation/.github/workflows/ci-gradle.yml@main
    secrets:
      gradle_enterprise_access_key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      ossrh_username: ${{ secrets.OSSRH_USERNAME }}
      ossrh_token: ${{ secrets.OSSRH_TOKEN }}
      ossrh_signing_key: ${{ secrets.OSSRH_SIGNING_KEY }}
      ossrh_signing_password: ${{ secrets.OSSRH_SIGNING_PASSWORD }}

---
name: Dependency Submission

on:
  workflow_run:
    workflows: [""publish""]
    types:
      - completed

permissions:
  contents: write

jobs:
  dependency-submission:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3
        env:
          # Exclude all dependencies that originate solely in the 'buildSrc' project
          DEPENDENCY_GRAPH_EXCLUDE_PROJECTS: ':buildSrc'
          # Exclude dependencies that are only resolved in test classpaths
          DEPENDENCY_GRAPH_EXCLUDE_CONFIGURATIONS: '.*[Tt]est(Compile|Runtime)Classpath'

---
---
name: nightly-ci

on:
  schedule:
    - cron: 0 16 * * *

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    uses: openrewrite/gh-automation/.github/workflows/ci-gradle.yml@main
    secrets:
      gradle_enterprise_access_key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      ossrh_username: ${{ secrets.OSSRH_USERNAME }}
      ossrh_token: ${{ secrets.OSSRH_TOKEN }}
      ossrh_signing_key: ${{ secrets.OSSRH_SIGNING_KEY }}
      ossrh_signing_password: ${{ secrets.OSSRH_SIGNING_PASSWORD }}

---
---
name: publish

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    uses: openrewrite/gh-automation/.github/workflows/publish-gradle.yml@main
    secrets:
      gradle_enterprise_access_key: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
      ossrh_username: ${{ secrets.OSSRH_USERNAME }}
      ossrh_token: ${{ secrets.OSSRH_TOKEN }}
      ossrh_signing_key: ${{ secrets.OSSRH_SIGNING_KEY }}
      ossrh_signing_password: ${{ secrets.OSSRH_SIGNING_PASSWORD }}

---
---
name: repository-backup
on:
  workflow_dispatch: {}
  schedule:
    - cron: 0 17 * * *

concurrency:
  group: backup-${{ github.ref }}
  cancel-in-progress: false

jobs:
  repository-backup:
    uses: openrewrite/gh-automation/.github/workflows/repository-backup.yml@main
    secrets:
      bucket_mirror_target: ${{ secrets.S3_GITHUB_REPOSITORY_BACKUPS_BUCKET_NAME }}
      bucket_access_key_id: ${{ secrets.S3_GITHUB_REPOSITORY_BACKUPS_ACCESS_KEY_ID }}
      bucket_secret_access_key: ${{ secrets.S3_GITHUB_REPOSITORY_BACKUPS_SECRET_ACCESS_KEY }}

---
"
nining377;dolby_beta;nining377/dolby_beta;https://github.com/nining377/dolby_beta;https://api.github.com/repos/nining377/dolby_beta;master;19/05/2020 14:13;22/04/2024 11:46;TRUE;"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew app:assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: ${{github.workspace}}/app/build/outputs/apk/release/*.apk
          if-no-files-found: warn
          retention-days: 30
---
"
mwiede;jsch;mwiede/jsch;https://github.com/mwiede/jsch;https://api.github.com/repos/mwiede/jsch;master;19/05/2020 15:40;22/04/2024 11:45;TRUE;"name: Dependabot auto-merge patch versions
on: pull_request

permissions:
  contents: write
  pull-requests: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ""${{ secrets.GITHUB_TOKEN }}""
      - name: Enable auto-merge for Dependabot PRs
        if: ${{steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
        run: gh pr merge --auto --merge ""$PR_URL""
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on: workflow_dispatch

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        check-latest: true    
        cache: 'maven'
        
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines. 
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo ""Run, Build Application using script""
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

---
name: Coverity Scan

# We only want to run this on demand at the moment
on: workflow_dispatch

jobs:
  coverity:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up build JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        check-latest: true    
        cache: 'maven'
    - uses: vapier/coverity-scan-action@v1
      with:
        email: ${{ secrets.COVERITY_SCAN_EMAIL }}
        token: ${{ secrets.COVERITY_SCAN_TOKEN }}
        build_language: 'java'
        command: 'mvn -DskipTests=true compile'

---
name: Build Javadocs and Deploy to Github Pages
on:
  workflow_dispatch:
  push:
    tags:
      - '*'
permissions:
  contents: write
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
      - name: Set up build JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          check-latest: true
      - name: Build Javadoc
        run: ./mvnw -B -V -e javadoc:javadoc
      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: target/site/apidocs
          target-folder: ${{github.ref_name}}

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths-ignore: 
      - '**.md'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: ['8', '11', '17', '21']
    steps:
    - uses: actions/checkout@v4
    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-${{ matrix.java }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.java }}-maven-
    - name: Set up build JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'
        check-latest: true
    - name: Build with Maven
      run: ./mvnw -B -V -e -DskipTests=true package
    - uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.java }}-jars
        path: |
          **/target/*.jar
          **/target/bom.*
      if: always()
    - name: Set up test JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ matrix.java }}
        check-latest: true
    - name: Test with Maven
      run: ./mvnw -B -V -e -P coverage verify -Denforcer.skip=true -Dmaven.resources.skip=true -Dflatten.skip=true -Dmaven.main.skip=true -Dbnd.skip=true -Dassembly.skipAssembly=true -Dmaven.javadoc.skip=true -Dcyclonedx.skip=true -DskipITs=false
    - uses: actions/upload-artifact@v4
      with:
        name: java-${{ matrix.java }}-testresults
        path: |
          **/target/surefire-reports/
          **/target/failsafe-reports/
          **/target/site/jacoco/
          **/target/site/jacoco-it/
      if: always()

---




# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  create

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    # Runs a set of commands using the runners shell
    - name: Release
      uses: mwiede/github-actions-maven-release@master
      with:
        release-branch-name: ""release""

        gpg-enabled: ""true""
        gpg-key-id: ${{ secrets.GPG_ID }}
        gpg-key: ${{ secrets.GPG_KEY }}

        maven-repo-server-id: ${{ secrets.MVN_REPO_ID }}
        maven-repo-server-username: ${{ secrets.MVN_REPO_PRIVATE_REPO_USER }}
        maven-repo-server-password: ${{ secrets.MVN_REPO_PRIVATE_REPO_PASSWORD }}

        #maven-args: ""-Dmaven.javadoc.skip=true -DskipTests -DskipITs -Ddockerfile.skip -DdockerCompose.skip""
        maven-args: ""-Dgpg.passphrase=""

        git-release-bot-name: ""release-bot""
        git-release-bot-email: ""mwiede@gmx.de""

        access-token: ${{ secrets.ACCESS_TOKEN }}

---
"
whwlsfb;BurpCrypto;whwlsfb/BurpCrypto;https://github.com/whwlsfb/BurpCrypto;https://api.github.com/repos/whwlsfb/BurpCrypto;master;29/05/2020 04:59;21/04/2024 10:26;TRUE;"name: Java CI

on:
  watch:
    types: started
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - run: mkdir release && cp target/*-full.jar release
      - run: echo ""NOW=$(date +'%Y%m%dT%H%M%S')"" >> $GITHUB_ENV
      
      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: dev-${{ env.NOW }}
          prerelease: true
          title: Auto Build - ${{ env.NOW }}
          files: release/*.jar
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: BurpCrypto_${{ env.NOW }}
          # Directory containing files to upload
          path: release

---
"
gzu-liyujiang;Android_CN_OAID;gzu-liyujiang/Android_CN_OAID;https://github.com/gzu-liyujiang/Android_CN_OAID;https://api.github.com/repos/gzu-liyujiang/Android_CN_OAID;master;29/05/2020 23:47;22/04/2024 10:07;TRUE;"# This workflow will build a package using Gradle and then publish it to maven local when a release is created
# See https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
# and https://github.com/actions/starter-workflows/blob/master/ci/gradle-publish.yml

name: Gradle Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Publish to mavenLocal()
        run: ./gradlew publishToMavenLocal --info --warning-mode all
      - name: Auto send a request to JitPack
        uses: badasintended/autojitpack@v0

---
# This workflow will build a Java/Android project with Gradle
# See https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
# and https://docs.github.com/en/actions/guides/storing-workflow-data-as-artifacts

name: Release APK

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean assembleRelease --info --warning-mode all
      - name: Store android package
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: app/build/outputs/apk/pub/release/*.apk
          if-no-files-found: warn
          retention-days: 7

---
"
xinyu2428;TDOA_RCE;xinyu2428/TDOA_RCE;https://github.com/xinyu2428/TDOA_RCE;https://api.github.com/repos/xinyu2428/TDOA_RCE;master;01/03/2021 08:18;30/03/2024 02:37;FALSE;
confluentinc;parallel-consumer;confluentinc/parallel-consumer;https://github.com/confluentinc/parallel-consumer;https://api.github.com/repos/confluentinc/parallel-consumer;master;03/06/2020 14:36;21/04/2024 19:27;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

# Tests disabled due to flakiness with under resourced github test machines. Confluent Jira works fine. Will fix later.
name: Unit tests only

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # Why not? because we can.
        # 2.0.1, 2.1.1, 2.2.2, 2.3.1, 2.4.1 don't work - needs zstd and some kafka client libs.
        # Doesn't mean it couldn't be modified slightly to work...
        #ak: [ 2.5.1, 2.6.1, 2.7.0, 2.8.1, 3.0.1, 3.1.0 ]
        # 25 and 26 include a dep with a vulnerability which ossindex fails the build for
        ak: [ 2.7.0, 2.8.1, 3.0.1, 3.1.0 ]
        #ak: [ 2.7.0 ]
        #jdk: [ '-P jvm8-release -Djvm8.location=/opt/hostedtoolcache/Java_Zulu_jdk/8.0.332-9/x64', '' ]
        # TG currently targets 11, so can't run the tests on 8 https://github.com/astubbs/truth-generator/issues/114
        jdk: [ '' ]
        experimental: [ false ]
        name: [ ""Stable AK version"" ]
        include:
          # AK 2.4 not supported
          #           - ak: ""'[2.4.1,2.5)'"" # currently failing
          #             experimental: true
          #             name: ""Oldest AK breaking version 2.4.1+ (below 2.5.0) expected to fail""
          - ak: ""'[2.7.0,4)'"" # currently failing
            experimental: true
            name: ""Newest AK version 2.7.0+?""

    continue-on-error: ${{ matrix.experimental }}
    name: ""AK: ${{ matrix.ak }} JDK: ${{ matrix.jdk }}""
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'
          cache: 'maven'

      # the patch version will be upgraded silently causing the build to eventually start failing - need to store this as a var - possible?
      - name: Show java 1.8 home
        # /opt/hostedtoolcache/Java_Zulu_jdk/8.0.332-9/x64/bin/java
        run: which java

      #     - name: Setup JDK 1.9
      #       uses: actions/setup-java@v1
      #       with:
      #         java-version: 1.9

      #    - name: Show java 1.9 home
      # /opt/hostedtoolcache/jdk/9.0.7/x64
      #      run: which java

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: Show java 17 home
        # /opt/hostedtoolcache/jdk/13.0.2/x64/bin/java
        run: which java

      #    - name: Show java version
      #      run: java -version

      #     - name: Show mvn version
      #       run: mvn -version

      #    - name: Build with Maven on Java 13
      #      run: mvn -B package --file pom.xml


      # done automatically now
      #      - name: Cache Maven packages
      #        uses: actions/cache@v2.1.7
      #        with:
      #          path: ~/.m2/repository
      #          key: ${{ runner.os }}-m2
      #          restore-keys: ${{ runner.os }}-m2

      - name: Test with Maven
        run: mvn -Pci -B package ${{ matrix.jdk }} -Dkafka.version=${{ matrix.ak }} -Dlicense.skip

#     - name: Archive test results
#       if: ${{ always() }}
#       uses: actions/upload-artifact@v2
#       with:
#         name: test-reports
#         path: target/**-reports/*
#         retention-days: 14
#
#     - name: Archive surefire test results
#       if: ${{ always() }}
#       uses: actions/upload-artifact@v2
#       with:
#         name: test-reports
#         path: target/surefire-reports/*
#         retention-days: 14

---
"
tal-tech;conan;tal-tech/conan;https://github.com/tal-tech/conan;https://api.github.com/repos/tal-tech/conan;master;02/03/2021 04:10;19/04/2024 17:07;FALSE;
google;tsunami-security-scanner;google/tsunami-security-scanner;https://github.com/google/tsunami-security-scanner;https://api.github.com/repos/google/tsunami-security-scanner;master;03/06/2020 18:20;22/04/2024 04:52;TRUE;"name: build

on:
  push:
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java: [ 11 ]
    runs-on: ${{ matrix.os }}
    name: 'Build on ${{ matrix.os }} using Java ${{ matrix.java }}'
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: 'Cache Gradle resources'
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Javadocs'
        run: ./gradlew javadoc
      - name: 'Gradle build'
        run: ./gradlew build
      - name: 'Shadow JAR'
        run: ./gradlew shadowJar

---
"
google;tsunami-security-scanner-plugins;google/tsunami-security-scanner-plugins;https://github.com/google/tsunami-security-scanner-plugins;https://api.github.com/repos/google/tsunami-security-scanner-plugins;master;04/06/2020 17:19;21/04/2024 17:06;TRUE;"name: community-plugins-build

on:
  push:
    paths:
      - 'community/**'
  pull_request:
    paths:
      - 'community/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java: [ 11 ]
    runs-on: ${{ matrix.os }}
    name: 'Build Community plugins on ${{ matrix.os }} using Java ${{ matrix.java }}'
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: 'Cache Gradle resources'
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Build Community plugins'
        run: ./community/build_all.sh

---
name: doyensec-plugins-build

on:
  push:
    paths:
      - 'doyensec/**'
  pull_request:
    paths:
      - 'doyensec/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java: [ 11 ]
    runs-on: ${{ matrix.os }}
    name: 'Build doyensec plugins on ${{ matrix.os }} using Java ${{ matrix.java }}'
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: 'Cache Gradle resources'
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Build Doyensec plugins'
        run: ./doyensec/build_all.sh

---
name: example-plugins-build

on:
  push:
    paths:
      - 'examples/**'
  pull_request:
    paths:
      - 'examples/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java: [ 11 ]
    runs-on: ${{ matrix.os }}
    name: 'Build example plugins on ${{ matrix.os }} using Java ${{ matrix.java }}'
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: 'Cache Gradle resources'
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Build example plugins'
        run: ./examples/build_all.sh

---
name: google-plugins-build

on:
  push:
    paths:
      - 'google/**'
  pull_request:
    paths:
      - 'google/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java: [ 11 ]
    runs-on: ${{ matrix.os }}
    name: 'Build Google plugins on ${{ matrix.os }} using Java ${{ matrix.java }}'
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: 'Cache Gradle resources'
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Build Google plugins'
        run: ./google/build_all.sh

---
name: govtech-plugins-build

on:
  push:
    paths:
      - 'govtech/**'
  pull_request:
    paths:
      - 'govtech/**'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java: [ 11 ]
    runs-on: ${{ matrix.os }}
    name: 'Build GovTech plugins on ${{ matrix.os }} using Java ${{ matrix.java }}'
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
      - name: 'Set up JDK ${{ matrix.java }}'
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: 'Cache Gradle resources'
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Build GovTech plugins'
        run: ./govtech/build_all.sh

---
"
structurizr;cli;structurizr/cli;https://github.com/structurizr/cli;https://api.github.com/repos/structurizr/cli;master;05/06/2020 13:45;05/04/2024 19:21;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew

---
"
deptofdefense;AndroidTacticalAssaultKit-CIV;deptofdefense/AndroidTacticalAssaultKit-CIV;https://github.com/deptofdefense/AndroidTacticalAssaultKit-CIV;https://api.github.com/repos/deptofdefense/AndroidTacticalAssaultKit-CIV;master;05/06/2020 21:54;20/04/2024 17:52;TRUE;"name: Assemble ATAK

on:
  pull_request:
jobs:
  assemble:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: openjdk:8-jdk
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout github repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Checkout LFS objects
      run: |
        apt update
        apt -y install git-lfs
        git lfs install --local
        git lfs fetch
        git lfs checkout
    - name: set environment
      run: |
        apt -y install ant
        apt -y install apg
        apt -y install dos2unix
        apt -y install autoconf
        apt -y install automake
        apt -y install g++
        apt -y install libtool
        apt -y install patch
        apt -y install make
        apt -y install cmake
        apt -y install ninja-build
        apt -y install swig
        apt -y install tclsh
        apt -y install python3-pip
        pip3 install -U pip setuptools
        pip3 install conan==1.59.0
        echo ""ANDROID_COMPILE_SDK=29"" >> $GITHUB_ENV
        echo ""ANDROID_BUILD_TOOLS=29.0.3"" >> $GITHUB_ENV
        echo ""ANDROID_SDK_TOOLS=4333796"" >> $GITHUB_ENV
        echo ""NDK_VERSION=12b"" >> $GITHUB_ENV
        echo ""KEYSTORE_ALIAS=CI"" >> $GITHUB_ENV
        echo ""KEYSTORE_STORE_PASSWORD=$(apg -a 1 -n 1 -m 16 -x 16 -E '\')"" >> $GITHUB_ENV
        echo ""KEYSTORE_KEY_PASSWORD=$(apg -a 1 -n 1 -m 16 -x 16 -E '\')"" >> $GITHUB_ENV
        mkdir $HOME/secrets
    - name: set up Android SDK
      run: |
       wget --quiet --tries=0 --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip;
       unzip -qq -d android-sdk-linux android-sdk.zip;
       mkdir -p ~/.android;
       touch ~/.android/repositories.cfg;
       echo y | android-sdk-linux/tools/bin/sdkmanager ""platforms;android-${ANDROID_COMPILE_SDK}"" >/dev/null;
       echo y | android-sdk-linux/tools/bin/sdkmanager ""platform-tools"" >/dev/null;
       echo y | android-sdk-linux/tools/bin/sdkmanager ""build-tools;${ANDROID_BUILD_TOOLS}"" >/dev/null;
       echo ""ANDROID_HOME=$PWD/android-sdk-linux"" >> $GITHUB_ENV
       echo ""$PWD/android-sdk-linux/platform-tools/"" >> $GITHUB_PATH
       set +o pipefail
       yes | android-sdk-linux/tools/bin/sdkmanager --licenses
       set -o pipefail
    - name: set up Android NDK
      run: |
       wget --quiet --tries=0 --output-document=android-ndk.zip https://dl.google.com/android/repository/android-ndk-r${NDK_VERSION}-linux-x86_64.zip;
       unzip -qq  android-ndk.zip;
       echo ""ANDROID_NDK_HOME=$PWD/android-ndk-r${NDK_VERSION}"" >> $GITHUB_ENV
       echo ""ANDROID_NDK=$PWD/android-ndk-r${NDK_VERSION}"" >> $GITHUB_ENV
    - name: set up CMake
      run: |
       wget --quiet --tries=0 --output-document=cmake-3.14.7.tar.gz https://cmake.org/files/v3.14/cmake-3.14.7-Linux-x86_64.tar.gz;
       gzip -d cmake-3.14.7.tar.gz;
       tar xf cmake-3.14.7.tar;
       rm -rf cmake-3.14.7.tar;
       echo ""CMAKE_HOME=$PWD/cmake-3.14.7-Linux-x86_64"" >> $GITHUB_ENV
    - name: Build Dependencies
      run: |
        git submodule update --init --recursive
        pushd .
        cd scripts
        bash ./prebuild.sh
        popd
        cd takthirdparty
        rm -rf distfiles ; \
        for i in builds/* ; do \
            pushd $i ; \
            (find * -type d -not -name ""include"" -not -path ""include/*"" -not -name ""java"" -not -name ""lib"" -not -path ""lib/ogdi"" -print0 | xargs -0 -I {} rm -rf {}) ; \
            (find . -maxdepth 1 -type f -print0 | xargs -0 -I {} rm -f {}) ; \
            (cd lib && (find . -maxdepth 1 -type f -not -name ""*.so"" -print0 | xargs -0 -I {} rm -f {})) ; \
            popd ; \
        done
    - name: Create Keystore
      run: |
        echo y | $JAVA_HOME/bin/keytool -genkeypair -dname ""cn=ATAK CIV, ou=, o=, c=US"" -alias $KEYSTORE_ALIAS -keypass $KEYSTORE_KEY_PASSWORD -keystore $HOME/secrets/android_keystore -storepass $KEYSTORE_STORE_PASSWORD -validity 10000
        cd atak
        rm -rf local.properties
        echo ""takDebugKeyFile=$HOME/secrets/android_keystore"" >> local.properties
        echo ""takDebugKeyFilePassword=$KEYSTORE_STORE_PASSWORD"" >> local.properties
        echo ""takDebugKeyAlias=$KEYSTORE_ALIAS"" >> local.properties
        echo ""takDebugKeyPassword=$KEYSTORE_KEY_PASSWORD"" >> local.properties
        echo ""takReleaseKeyFile=$HOME/secrets/android_keystore"" >> local.properties
        echo ""takReleaseKeyFilePassword=$KEYSTORE_STORE_PASSWORD"" >> local.properties
        echo ""takReleaseKeyAlias=$KEYSTORE_ALIAS"" >> local.properties
        echo ""takReleaseKeyPassword=$KEYSTORE_KEY_PASSWORD"" >> local.properties
    - name: Assemble ATAK APK
      run: |
        cd atak
        echo ""cmake.dir=$CMAKE_HOME"" >> local.properties
        echo ""ndk.dir=$ANDROID_NDK"" >> local.properties
        rm -rf ATAK/app/build
        bash ./gradlew generateJniHeaders
        bash ./gradlew assembleCivSdk
    - name: generate ATAK CIV SDK package
      run: |
        rm -rf takthirdparty
        rm -rf takengine
        rm -rf pluginsdk/
        unzip -qq pluginsdk.zip
        cp ./atak/ATAK/app/build/outputs/apk/civ/sdk/*-sdk.apk ./pluginsdk/atak.apk
        cp ./atak/ATAK/app/build/libs/main.jar ./pluginsdk
        cp ./atak/ATAK/app/src/main/assets/support/license/LICENSE.txt ./pluginsdk
        cp -r ./plugin-examples ./pluginsdk/
        echo ""ATAK CIV SDK `git rev-parse --short HEAD` (`git show -s --format=%ct`)"" > pluginsdk/VERSION.txt
        rm -rf javadoc
        mkdir -p tmp/src
        cp -R ./atak/ATAK/app/src/common/java/* tmp/src
        cp -R ./atak/ATAK/app/src/main/java/* tmp/src
        pushd .
        cd tmp/src && javadoc -linkoffline http://d.android.com/reference file://$ANDROID_HOME/docs/reference -d ../javadoc -classpath .:$ANDROID_HOME/platforms/android-${ANDROID_COMPILE_SDK}/android.jar -subpackages . &> /dev/null || echo ""success by failure""
        popd
        pushd .
        cd tmp/javadoc && jar cvf ../../pluginsdk/atak-javadoc.jar .
        popd
        pushd .
        cd atak-gradle-takdev
        chmod 755 gradlew
        dos2unix gradlew
        ./gradlew jar
        cp ./build/libs/atak-gradle-takdev-*.jar ../pluginsdk/atak-gradle-takdev.jar
        popd
        mv pluginsdk atak-civ-sdk
    - name: Upload SDK build output
      uses: actions/upload-artifact@v2
      with:
        name: assembleCivSdk
        path: |
            atak-civ-sdk

---
name: Release SDK

on:
  release:
    types:
      - created

jobs:
  assemble:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: openjdk:8-jdk
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout github repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Checkout LFS objects
      run: |
        apt update
        apt -y install git-lfs
        git lfs install --local
        git lfs fetch
        git lfs checkout
    - name: set environment
      run: |
        apt -y install ant
        apt -y install apg
        apt -y install dos2unix
        apt -y install autoconf
        apt -y install automake
        apt -y install g++
        apt -y install libtool
        apt -y install patch
        apt -y install make
        apt -y install cmake
        apt -y install ninja-build
        apt -y install swig
        apt -y install tclsh
        apt -y install zip
        apt -y install python3-pip
        pip3 install -U pip setuptools
        pip3 install conan==1.59.0
        echo ""ANDROID_COMPILE_SDK=29"" >> $GITHUB_ENV
        echo ""ANDROID_BUILD_TOOLS=29.0.3"" >> $GITHUB_ENV
        echo ""ANDROID_SDK_TOOLS=4333796"" >> $GITHUB_ENV
        echo ""NDK_VERSION=12b"" >> $GITHUB_ENV
    - name: set up Android SDK
      run: |
       wget --quiet --tries=0 --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip;
       unzip -qq -d android-sdk-linux android-sdk.zip;
       mkdir -p ~/.android;
       touch ~/.android/repositories.cfg;
       echo y | android-sdk-linux/tools/bin/sdkmanager ""platforms;android-${ANDROID_COMPILE_SDK}"" >/dev/null;
       echo y | android-sdk-linux/tools/bin/sdkmanager ""platform-tools"" >/dev/null;
       echo y | android-sdk-linux/tools/bin/sdkmanager ""build-tools;${ANDROID_BUILD_TOOLS}"" >/dev/null;
       echo ""ANDROID_HOME=$PWD/android-sdk-linux"" >> $GITHUB_ENV
       echo ""$PWD/android-sdk-linux/platform-tools/"" >> $GITHUB_PATH
       set +o pipefail
       yes | android-sdk-linux/tools/bin/sdkmanager --licenses
       set -o pipefail
    - name: set up Android NDK
      run: |
       wget --quiet --tries=0 --output-document=android-ndk.zip https://dl.google.com/android/repository/android-ndk-r${NDK_VERSION}-linux-x86_64.zip;
       unzip -qq  android-ndk.zip;
       echo ""ANDROID_NDK_HOME=$PWD/android-ndk-r${NDK_VERSION}"" >> $GITHUB_ENV
       echo ""ANDROID_NDK=$PWD/android-ndk-r${NDK_VERSION}"" >> $GITHUB_ENV
    - name: build dependencies
      run: |
        git submodule update --init --recursive
        pushd .
        cd scripts
        bash ./prebuild.sh
        popd
        cd takthirdparty
        rm -rf distfiles ; \
        for i in builds/* ; do \
            pushd $i ; \
            (find * -type d -not -name ""include"" -not -path ""include/*"" -not -name ""java"" -not -name ""lib"" -not -path ""lib/ogdi"" -print0 | xargs -0 -I {} rm -rf {}) ; \
            (find . -maxdepth 1 -type f -print0 | xargs -0 -I {} rm -f {}) ; \
            (cd lib && (find . -maxdepth 1 -type f -not -name ""*.so"" -print0 | xargs -0 -I {} rm -f {})) ; \
            popd ; \
        done
    - name: set up CMake
      run: |
       wget --quiet --tries=0 --output-document=cmake-3.14.7.tar.gz https://cmake.org/files/v3.14/cmake-3.14.7-Linux-x86_64.tar.gz;
       gzip -d cmake-3.14.7.tar.gz;
       tar xf cmake-3.14.7.tar;
       rm -rf cmake-3.14.7.tar;
       echo ""CMAKE_HOME=$PWD/cmake-3.14.7-Linux-x86_64"" >> $GITHUB_ENV
    - name: install ATAK SDK keystore
      env:
          ANDROID_KEYSTORE_FILE: ${{ secrets.SDK_KEYSTORE_FILE }}
          ANDROID_KEYSTORE_ALIAS: ${{ secrets.SDK_KEYSTORE_ALIAS }}
          ANDROID_KEYSTORE_STORE_PASSWORD: ${{ secrets.SDK_KEYSTORE_STORE_PASSWORD }}
          ANDROID_KEYSTORE_KEY_PASSWORD: ${{ secrets.SDK_KEYSTORE_KEY_PASSWORD }}
      run: |
        rm -rf $HOME/secrets
        mkdir $HOME/secrets
        echo ""$ANDROID_KEYSTORE_FILE"" > $HOME/secrets/sdk_keystore.base64
        base64 -d $HOME/secrets/sdk_keystore.base64 > $HOME/secrets/sdk_keystore
        cd atak
        rm -rf local.properties
        echo ""takDebugKeyFile=$HOME/secrets/sdk_keystore"" >> local.properties
        echo ""takDebugKeyFilePassword=$ANDROID_KEYSTORE_STORE_PASSWORD"" >> local.properties
        echo ""takDebugKeyAlias=$ANDROID_KEYSTORE_ALIAS"" >> local.properties
        echo ""takDebugKeyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD"" >> local.properties
        echo ""takReleaseKeyFile=$HOME/secrets/sdk_keystore"" >> local.properties
        echo ""takReleaseKeyFilePassword=$ANDROID_KEYSTORE_STORE_PASSWORD"" >> local.properties
        echo ""takReleaseKeyAlias=$ANDROID_KEYSTORE_ALIAS"" >> local.properties
        echo ""takReleaseKeyPassword=$ANDROID_KEYSTORE_KEY_PASSWORD"" >> local.properties
    - name: assemble ATAK APK
      run: |
        cd atak
        echo ""cmake.dir=$CMAKE_HOME"" >> local.properties
        echo ""ndk.dir=$ANDROID_NDK"" >> local.properties
        rm -rf ATAK/app/build
        bash ./gradlew generateJniHeaders
        bash ./gradlew assembleCivSdk
    - name: generate ATAK CIV SDK package
      run: |
        rm -rf takthirdparty
        rm -rf takengine
        rm -rf pluginsdk/
        unzip -qq pluginsdk.zip
        cp ./atak/ATAK/app/build/outputs/apk/civ/sdk/*-sdk.apk ./pluginsdk/atak.apk
        cp ./atak/ATAK/app/build/libs/main.jar ./pluginsdk
        cp ./atak/ATAK/app/src/main/assets/support/license/LICENSE.txt ./pluginsdk
        cp -r ./plugin-examples ./pluginsdk/
        echo ""ATAK CIV SDK `git rev-parse --short HEAD` (`git show -s --format=%ct`)"" > pluginsdk/VERSION.txt
        rm -rf javadoc
        mkdir -p tmp/src
        cp -R ./atak/ATAK/app/src/common/java/* tmp/src
        cp -R ./atak/ATAK/app/src/main/java/* tmp/src
        pushd .
        cd tmp/src && javadoc -linkoffline http://d.android.com/reference file://$ANDROID_HOME/docs/reference -d ../javadoc -classpath .:$ANDROID_HOME/platforms/android-${ANDROID_COMPILE_SDK}/android.jar -subpackages . &> /dev/null || echo ""success by failure""
        popd
        pushd .
        cd tmp/javadoc && jar cvf ../../pluginsdk/atak-javadoc.jar .
        popd
        pushd .
        cd atak-gradle-takdev
        chmod 755 gradlew
        dos2unix gradlew
        ./gradlew jar
        cp ./build/libs/atak-gradle-takdev-*.jar ../pluginsdk/atak-gradle-takdev.jar
        popd
        mv pluginsdk atak-civ
        zip -qq -r atak-civ-sdk-${{ github.event.release.tag_name }}.zip atak-civ
        rm -rf atak-civ
    - name: publish ATAK SDK release artifact
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: atak-civ-sdk-${{ github.event.release.tag_name }}.zip
        asset_name: atak-civ-sdk-${{ github.event.release.tag_name }}.zip
        asset_content_type: binary/octet-stream

---
"
1n7erface;PocList;1n7erface/PocList;https://github.com/1n7erface/PocList;https://api.github.com/repos/1n7erface/PocList;main;11/03/2021 23:49;10/04/2024 08:02;FALSE;
Keyfactor;ejbca-ce;Keyfactor/ejbca-ce;https://github.com/Keyfactor/ejbca-ce;https://api.github.com/repos/Keyfactor/ejbca-ce;main;12/03/2021 11:12;20/04/2024 12:41;FALSE;
cami-la;curso-dio-intro-collections;cami-la/curso-dio-intro-collections;https://github.com/cami-la/curso-dio-intro-collections;https://api.github.com/repos/cami-la/curso-dio-intro-collections;master;13/03/2021 19:53;03/04/2024 03:39;FALSE;
structurizr;dsl;structurizr/dsl;https://github.com/structurizr/dsl;https://api.github.com/repos/structurizr/dsl;master;13/06/2020 22:51;20/04/2024 13:47;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew

---
"
javaweb-sec;javaweb-sec;javaweb-sec/javaweb-sec;https://github.com/javaweb-sec/javaweb-sec;https://api.github.com/repos/javaweb-sec/javaweb-sec;master;22/03/2021 08:29;19/04/2024 04:26;FALSE;
yhy0;ExpDemo-JavaFX;yhy0/ExpDemo-JavaFX;https://github.com/yhy0/ExpDemo-JavaFX;https://api.github.com/repos/yhy0/ExpDemo-JavaFX;master;27/03/2021 12:51;21/04/2024 17:15;FALSE;
ongres;stackgres;ongres/stackgres;https://github.com/ongres/stackgres;https://api.github.com/repos/ongres/stackgres;main;15/06/2020 15:15;22/04/2024 10:40;TRUE;"name: 'Repo Lockdown'

on:
  issues:
    types: opened
  pull_request_target:
    types: opened

permissions:
  issues: write
  pull-requests: write

jobs:
  lockdown:
    runs-on: ubuntu-latest
    steps:
      - uses: dessant/repo-lockdown@v3
        with:
          github-token: ${{ github.token }}
          issue-comment: >
            This repository is just a mirror and does not accept bug reports,
            the primary repository is located at https://gitlab.com/ongresinc/stackgres
          skip-closed-issue-comment: true
          pr-comment: >
            This repository is just a mirror and does not accept pull requests,
            the primary repository is located at https://gitlab.com/ongresinc/stackgres
          skip-closed-pr-comment: true

---
"
threedr3am;ZhouYu;threedr3am/ZhouYu;https://github.com/threedr3am/ZhouYu;https://api.github.com/repos/threedr3am/ZhouYu;main;29/03/2021 11:50;20/04/2024 09:50;FALSE;
alibaba;one-java-agent;alibaba/one-java-agent;https://github.com/alibaba/one-java-agent;https://api.github.com/repos/alibaba/one-java-agent;master;22/06/2020 13:13;20/04/2024 10:32;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '31 4 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: JavaCI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11 ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }} 
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        run: |
          mvn clean package -DskipTests
          mvn test

  build_jdk_ge_12:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [12, 13, 14, 15]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'zulu'
          cache: 'maven'
      - name: save java8 home
        run: |
          export JAVA8_HOME=$JAVA_HOME && echo $JAVA8_HOME
          echo ""export JAVA8_HOME=$JAVA_HOME"" > ~/.testenv

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        run: |
          source ~/.testenv 
          mvn -Dmaven.compiler.fork=true -Dmaven.compiler.executable=$JAVA8_HOME/bin/javac clean package -DskipTests
          mvn -Dmaven.compiler.fork=true -Dmaven.compiler.executable=$JAVA8_HOME/bin/javac test
---
"
ionic-team;capacitor-plugins;ionic-team/capacitor-plugins;https://github.com/ionic-team/capacitor-plugins;https://api.github.com/repos/ionic-team/capacitor-plugins;main;09/07/2020 01:18;19/04/2024 10:42;TRUE;"name: Bot

on:
  issues:
    types: [opened, edited, labeled]
  pull_request:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  bot:
    name: ${{ github.event_name }}/${{ github.event.action }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ionic-team/bot@main
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}
        env:
          GIT_AUTHOR_NAME: Ionitron
          GIT_AUTHOR_EMAIL: hi@ionicframework.com
          GIT_COMMITTER_NAME: Ionitron
          GIT_COMMITTER_EMAIL: hi@ionicframework.com

---
name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14]
    timeout-minutes: 30
    outputs:
      plugins: ${{ steps.packages.outputs.paths }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@ce177499ccf9fd2aded3b0426c97e5434c2e8a73
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Latest
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: NPM ^9.5.0
        run: npm i -g npm@^9.5.0 --registry=https://registry.npmjs.org
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - id: files
        uses: tj-actions/changed-files@v37
        with:
          json: true
          write_output_files: true
      - id: catjson
        run: |
          echo ""FILES_JSON=$(cat .github/outputs/all_changed_files.json)"" >> $GITHUB_OUTPUT
      - id: packages
        uses: ./.github/actions/changed-packages
        with:
         files: ${{ steps.catjson.outputs.FILES_JSON }}

  lint-scripts:
    runs-on: macos-14
    timeout-minutes: 30
    needs:
      - setup
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: NPM ^9.5.0
        run: npm i -g npm@^9.5.0 --registry=https://registry.npmjs.org
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - run: npm run lint

  lint:
    runs-on: macos-14
    timeout-minutes: 30
    needs:
      - setup
      - lint-scripts
    if: needs.setup.outputs.plugins != '[]'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: NPM ^9.5.0
        run: npm i -g npm@^9.5.0 --registry=https://registry.npmjs.org
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - run: npm run lint
        working-directory: ${{ matrix.plugin }}

  verify-ios:
    runs-on: macos-14
    if: needs.setup.outputs.plugins != '[]'
    timeout-minutes: 30
    needs:
      - setup
      - lint
      - lint-scripts
    strategy:
      matrix:
        xcode:
        - /Applications/Xcode_15.0.app
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    steps:
      - run: sudo xcode-select --switch ${{ matrix.xcode }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: NPM ^9.5.0
        run: npm i -g npm@^9.5.0 --registry=https://registry.npmjs.org
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - run: npm run verify:ios
        working-directory: ${{ matrix.plugin }}

  verify-android:
    runs-on: ubuntu-latest
    if: needs.setup.outputs.plugins != '[]'
    timeout-minutes: 30
    needs:
      - setup
      - lint
      - lint-scripts
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: NPM ^9.5.0
        run: npm i -g npm@^9.5.0 --registry=https://registry.npmjs.org
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - run: npm run set-settings-gradle-for-monorepo
      - run: npm run verify:android
        working-directory: ${{ matrix.plugin }}

  verify-web:
    runs-on: ubuntu-latest
    if: needs.setup.outputs.plugins != '[]'
    timeout-minutes: 30
    needs:
      - setup
      - lint
      - lint-scripts
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: NPM ^9.5.0
        run: npm i -g npm@^9.5.0 --registry=https://registry.npmjs.org
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - run: npm run verify:web
        working-directory: ${{ matrix.plugin }}

# deploy:
#   runs-on: macos-latest
#   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#   timeout-minutes: 30
#   needs:
#     - setup
#     - lint
#     - verify-ios
#     - verify-android
#     - verify-web
#   steps:
#     - uses: actions/setup-node@v1
#       with:
#         node-version: 14.x
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0
#     - name: Restore Dependency Cache
#       id: cache-modules
#       uses: actions/cache@v2
#       with:
#         path: |
#           node_modules
#           */node_modules
#         key: dependency-cache-${{ hashFiles('package.json', '*/package.json') }}
#     - run: npm install
#     - run: echo ""//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"" >> .npmrc
#     - run: npx lerna publish from-git --yes

---
name: Release Dev Build for PR

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions:
  contents: write
  id-token: write

jobs:
  setup:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      plugins: ${{ steps.packages.outputs.paths }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@ce177499ccf9fd2aded3b0426c97e5434c2e8a73
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get Latest
        uses: actions/setup-node@v3
        with:
          node-version: 18.18.0
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - id: files
        uses: tj-actions/changed-files@v37
        with:
          json: true
          write_output_files: true
      - id: catjson
        run: |
          echo ""FILES_JSON=$(cat .github/outputs/all_changed_files.json)"" >> $GITHUB_OUTPUT
      - id: packages
        uses: ./.github/actions/changed-packages
        with:
         files: ${{ steps.catjson.outputs.FILES_JSON }}

  release-dev-of-plugins:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      pull-requests: write
      id-token: write
    needs:
      - setup
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18.18.0
      - uses: actions/checkout@v3
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */node_modules
          key: ${{ runner.os }}-dependency-caching-${{ hashFiles('package.json', '*/package.json') }}
      - name: ""NPM Identity""
        run: |
          echo ""//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"" >> ~/.npmrc
          npm whoami
      - run: npm install
      - name: Version & Publish
        env: 
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: | 
          npm whoami
          npm version prerelease --no-git-tag-version -f --preid dev-$PR_NUMBER-$(date +%Y%m%dT%H%M%S)
          npm publish --tag dev
        working-directory: ${{ matrix.plugin }}
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
        with:
          path: ${{ matrix.plugin }}
      - uses: mshick/add-pr-comment@v2
        with:
          message: |
            Released dev build of ${{ matrix.plugin }} with dev version: ${{ steps.package-version.outputs.current-version }}

---
name: E2E Tests

on:
  pull_request:
    branches:
      - '**'

jobs:
  setup:
    if: 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      plugins: ${{ steps.e2e-packages.outputs.e2e-paths }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@ce177499ccf9fd2aded3b0426c97e5434c2e8a73
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v2
      - name: Restore Dependency Cache
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */node_modules
          key: dependency-cache-${{ hashFiles('package.json', '*/package.json') }}
      - run: npm install
      - id: files
        uses: imhoffd/get-changed-files@v2
        with:
          format: 'json'
      - id: packages
        uses: ./.github/actions/changed-packages
        with:
          files: ${{ steps.files.outputs.all }}
      - id: e2e-packages
        uses: ./.github/actions/filter-out-non-e2e-enabled
        with:
          paths: ${{ steps.packages.outputs.paths }}

  e2e-ios:
    runs-on: macos-11
    timeout-minutes: 35
    if: needs.setup.outputs.plugins != '[]'
    needs:
      - setup
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    defaults:
      run:
        working-directory: ${{ matrix.plugin }}/e2e-tests
    steps:
      - uses: actions/checkout@v2

      - name: Setup NodeJS & NPM
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Prepare Local Package
        run: npm install && npm run build && npm run pack-local
        working-directory: ${{ matrix.plugin }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup NPMRC
        run: echo ""//registry.npmjs.org/:_authToken=${{secrets.E2E_NPM_TOKEN}}"" > .npmrc

      - name: Prepare Local Package
        run: npm run e2e:prepare
        env:
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Install Packages
        run: npm install
        env:
          NPM_TOKEN: ${{ secrets.E2E_NPM_TOKEN }}

      - name: Run E2E Test on iOS
        run: npm run e2e:ios
        env:
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}

  e2e-android:
    runs-on: macos-10.15
    timeout-minutes: 35
    if: needs.setup.outputs.plugins != '[]'
    needs:
      - setup
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.setup.outputs.plugins) }}
    defaults:
      run:
        working-directory: ${{ matrix.plugin }}/e2e-tests
    steps:
      - uses: actions/checkout@v2

      - name: Setup NodeJS & NPM
        uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Prepare Local Package
        run: npm run e2e:prepare
        env:
          NPM_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Prepare Local Package
        run: npm install && npm run build && npm run pack-local
        working-directory: ${{ matrix.plugin }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup NPMRC
        run: echo ""//registry.npmjs.org/:_authToken=${{secrets.E2E_NPM_TOKEN}}"" > .npmrc

      - name: Setup local.properties
        run: echo ""REACT_APP_GOOGLE_MAPS_API_KEY=${{secrets.REACT_APP_GOOGLE_MAPS_API_KEY}}"" > android/local.properties

      - name: Install Packages
        run: npm install
        env:
          NPM_TOKEN: ${{ secrets.E2E_NPM_TOKEN }}

      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-adb-p3a-30-cache-2

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          avd-name: e2eDevice
          api-level: 30
          target: google_apis
          arch: x86
          profile: pixel_3a
          emulator-build: 7759208
          force-avd-creation: true
          emulator-options: -no-window -no-audio -no-boot-anim -accel on
          script: echo ""Generated AVD snapshot for caching.""

      - name: Run E2E Test on Android
        uses: reactivecircus/android-emulator-runner@v2
        with:
          avd-name: e2eDevice
          api-level: 30
          target: google_apis
          arch: x86
          profile: pixel_3a
          working-directory: ${{ matrix.plugin }}/e2e-tests
          emulator-build: 7759208
          emulator-options: -no-window -no-audio -no-boot-anim -accel on -no-snapshot-save
          disable-animations: false
          script: npm run e2e:android
        env:
          REACT_APP_GOOGLE_MAPS_API_KEY: ${{ secrets.REACT_APP_GOOGLE_MAPS_API_KEY }}

---
name: Close old issues that need reply

on:
  schedule:
    - cron: ""0 0 * * *""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Close old issues that need reply
        uses: imhoffd/needs-reply@v2
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}
          issue-label: 'needs reply'
          days-before-close: 15
          close-message: |
            It looks like this issue didn't get the information it needed, so I'll close it for now. If I made a mistake, sorry! I am just a bot.

            Have a great day!
            Ionitron 💙

---
name: Publish Native Android Libraries

on:
  workflow_call:
    secrets:
      ANDROID_OSSRH_USERNAME:
        required: true
      ANDROID_OSSRH_PASSWORD:
        required: true
      ANDROID_SIGNING_KEY_ID:
        required: true
      ANDROID_SIGNING_PASSWORD:
        required: true
      ANDROID_SIGNING_KEY:
        required: true
      ANDROID_SONATYPE_STAGING_PROFILE_ID:
        required: true
      CAP_GH_RELEASE_TOKEN:
        required: true
    inputs:
      plugins:
        description: 'Specify an optional subset of plugins to publish (space delimited)'
        type: string
        required: false
        default: ''
      capacitor-version:
        description: 'Optional. Specify the version of Capacitor the plugins should depend on. Must be in mathematical notation, eg: [4.0,5.0) for 4.x versions only, or [4.0,) for 4.x versions and higher'
        type: string
        required: false
        default: ''
  workflow_dispatch:
    inputs:
      plugins:
        description: 'Specify an optional subset of plugins to publish (space delimited)'
        required: false
        default: ''
      capacitor-version:
        description: 'Optional. Specify the version of Capacitor the plugins should depend on. Must be in mathematical notation, eg: [4.0,5.0) for 4.x versions only, or [4.0,) for 4.x versions and higher'
        required: false
        default: ''
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
    - name: Grant execute permission for publishing script
      run: chmod +x ./scripts/publish-android.sh
    - name: Run publish script
      working-directory: ./scripts
      env:
        GITHUB_PLUGINS: ${{ github.event.inputs.plugins }}
        GITHUB_CAPACITOR_VERSION: ${{ github.event.inputs.capacitor-version }}
        ANDROID_OSSRH_USERNAME: ${{ secrets.ANDROID_OSSRH_USERNAME }}
        ANDROID_OSSRH_PASSWORD: ${{ secrets.ANDROID_OSSRH_PASSWORD }}
        ANDROID_SIGNING_KEY_ID: ${{ secrets.ANDROID_SIGNING_KEY_ID }}
        ANDROID_SIGNING_PASSWORD: ${{ secrets.ANDROID_SIGNING_PASSWORD }}
        ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
        ANDROID_SONATYPE_STAGING_PROFILE_ID: ${{ secrets.ANDROID_SONATYPE_STAGING_PROFILE_ID }}
      run: ./publish-android.sh

---
name: Publish Native iOS Libraries

on:
  workflow_dispatch:
    inputs:
      plugins:
        description: 'Specify a set of plugins to publish (as a JSON array, ex: [\""camera\"", \""browser\""])'
        required: true
jobs:
  publish-ios:
    runs-on: macos-14
    if: github.event.inputs.plugins != '[]'
    timeout-minutes: 30
    strategy:
      matrix:
        plugin: ${{ fromJson(github.event.inputs.plugins) }}
    steps:
      - run: sudo xcode-select --switch /Applications/Xcode_15.0.app
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/checkout@v3
      - name: Install Cocoapods
        run: | 
          gem install cocoapods
      - name: Deploy to Cocoapods
        run: |
          set -eo pipefail
          npm run publish:cocoapod
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        working-directory: ${{ matrix.plugin }}

---
name: Publish Latest

on: workflow_dispatch

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  publish-npm-latest:
    uses: ./.github/workflows/publish-npm-latest.yml
    secrets:
      CAP_GH_RELEASE_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  publish-android:
    needs: publish-npm-latest
    uses: ./.github/workflows/publish-android.yml
    secrets:
      ANDROID_OSSRH_USERNAME: ${{ secrets.ANDROID_OSSRH_USERNAME }}
      ANDROID_OSSRH_PASSWORD: ${{ secrets.ANDROID_OSSRH_PASSWORD }}
      ANDROID_SIGNING_KEY_ID: ${{ secrets.ANDROID_SIGNING_KEY_ID }}
      ANDROID_SIGNING_PASSWORD: ${{ secrets.ANDROID_SIGNING_PASSWORD }}
      ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
      ANDROID_SONATYPE_STAGING_PROFILE_ID: ${{ secrets.ANDROID_SONATYPE_STAGING_PROFILE_ID }}
      CAP_GH_RELEASE_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}

---
name: Publish NPM Alpha

on: workflow_dispatch

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-alpha:
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:alpha

---
name: Publish NPM Beta

on: workflow_dispatch

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-beta:
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:beta

---
name: Publish NPM Dev

on: workflow_dispatch

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-dev:
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:dev

---
name: Publish NPM Latest From Prerelease

on: 
  workflow_call:
    secrets:
      CAP_GH_RELEASE_TOKEN:
        required: true
      NPM_TOKEN:
        required: true
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-latest-from-pre:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:latest-from-pre

---
name: Publish NPM Latest

on:
  workflow_call:
    secrets:
      CAP_GH_RELEASE_TOKEN:
        required: true
      NPM_TOKEN:
        required: true
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-latest:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:latest

---
name: Publish NPM Nightly

on:
  schedule:
    - cron: '0 15 * * 1-5'

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-nightly:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:nightly

---
name: Publish NPM RC

on: workflow_dispatch

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-rc:
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: npm
          cache-dependency-path: '**/package.json'
      - run: |
          npm install
      - name: Version & Publish
        env: 
          GH_TOKEN: ${{ secrets.CAP_GH_RELEASE_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config user.name ""Github Workflow (on behalf of ${{ github.actor }})""
          git config user.email ""users.noreply.github.com""
          npm whoami
          npm run ci:publish:rc

---
"
thepranaygupta;Data-Structures-and-Algorithms;thepranaygupta/Data-Structures-and-Algorithms;https://github.com/thepranaygupta/Data-Structures-and-Algorithms;https://api.github.com/repos/thepranaygupta/Data-Structures-and-Algorithms;main;03/04/2021 11:46;20/04/2024 10:36;FALSE;
WuKongOpenSource;WukongCRM-11.0-JAVA;WuKongOpenSource/WukongCRM-11.0-JAVA;https://github.com/WuKongOpenSource/WukongCRM-11.0-JAVA;https://api.github.com/repos/WuKongOpenSource/WukongCRM-11.0-JAVA;master;06/04/2021 12:58;20/04/2024 09:38;FALSE;
linesoft2;open2share;linesoft2/open2share;https://github.com/linesoft2/open2share;https://api.github.com/repos/linesoft2/open2share;master;11/07/2020 16:19;20/04/2024 20:50;TRUE;"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

---
"
alibaba;compileflow;alibaba/compileflow;https://github.com/alibaba/compileflow;https://api.github.com/repos/alibaba/compileflow;master;14/07/2020 11:38;19/04/2024 04:14;TRUE;"# Quickstart for GitHub Actions
# https://docs.github.com/en/actions/quickstart

name: CI
on: [ push, pull_request ]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        java: [ 8, 11, 17 ]
      fail-fast: false
      max-parallel: 64
    name: Test JDK ${{ matrix.java }}, ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
          cache: 'maven'
      - name: Build with Maven
        run: ./mvnw -V --no-transfer-progress clean install

---
"
mikepound;enigma;mikepound/enigma;https://github.com/mikepound/enigma;https://api.github.com/repos/mikepound/enigma;main;08/04/2021 00:38;03/04/2024 20:31;FALSE;
LandGrey;spring-boot-upload-file-lead-to-rce-tricks;LandGrey/spring-boot-upload-file-lead-to-rce-tricks;https://github.com/LandGrey/spring-boot-upload-file-lead-to-rce-tricks;https://api.github.com/repos/LandGrey/spring-boot-upload-file-lead-to-rce-tricks;main;09/04/2021 11:09;21/04/2024 15:05;FALSE;
mrpkdeveloper;450-DSA-Questions;mrpkdeveloper/450-DSA-Questions;https://github.com/mrpkdeveloper/450-DSA-Questions;https://api.github.com/repos/mrpkdeveloper/450-DSA-Questions;main;11/04/2021 06:14;18/04/2024 14:40;FALSE;
ServenScorpion;VirtualApp;ServenScorpion/VirtualApp;https://github.com/ServenScorpion/VirtualApp;https://api.github.com/repos/ServenScorpion/VirtualApp;master;11/04/2021 17:35;22/04/2024 10:32;FALSE;
mikeroyal;AWS-Guide;mikeroyal/AWS-Guide;https://github.com/mikeroyal/AWS-Guide;https://api.github.com/repos/mikeroyal/AWS-Guide;main;11/04/2021 23:07;20/04/2024 19:12;FALSE;
1250422131;bilibilias;1250422131/bilibilias;https://github.com/1250422131/bilibilias;https://api.github.com/repos/1250422131/bilibilias;release;17/07/2020 07:11;18/04/2024 10:05;TRUE;"name: Push

on:
  pull_request:
    types:
      - opened
  push:
    branches: [ ""develop_imcys"", ""develop"",""workflow_dispatch""]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        run: echo ""date_today=$(date +'%Y-%m-%d')"" >> $GITHUB_ENV

      # Set Repository Name As Env Variable
      - name: Set repository name as env variable
        run: echo ""repository_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')"" >> $GITHUB_ENV

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Tests Build
      - name: Run gradle tests
        run: ./gradlew test

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build
        
      # Create APK Debug
      - name: Build apk debug project (APK) - ${{ env.main_project_module }} module
        run: ./gradlew assembleDebug

      - name: Upload build APK Debug
        uses: actions/upload-artifact@v4
        with:
          name: Build DBUG
          path: |
            ./app/build/outputs/apk/debug/*.apk

---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow performs a static analysis of your Kotlin source code using
# Detekt.
#
# Scans are triggered:
# 1. On every push to default and protected branches
# 2. On every Pull Request targeting the default branch
# 3. On a weekly schedule
# 4. Manually, on demand, via the ""workflow_dispatch"" event
#
# The workflow should work with no modifications, but you might like to use a
# later version of the Detekt CLI by modifing the $DETEKT_RELEASE_TAG
# environment variable.
name: Scan with Detekt

on:
  # Triggers the workflow on push or pull request events but only for default and protected branches
  push:
    branches: [ ""develop"" ]
  pull_request:
    branches: [ ""develop"" ]
  schedule:
     - cron: '25 17 * * 1'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Release tag associated with version of Detekt to be installed
  # SARIF support (required for this workflow) was introduced in Detekt v1.15.0
  DETEKT_RELEASE_TAG: v1.15.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""scan""
  scan:
    name: Scan
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3

    # Gets the download URL associated with the $DETEKT_RELEASE_TAG
    - name: Get Detekt download URL
      id: detekt_info
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh api graphql --field tagName=$DETEKT_RELEASE_TAG --raw-field query='
          query getReleaseAssetDownloadUrl($tagName: String!) {
            repository(name: ""detekt"", owner: ""detekt"") {
              release(tagName: $tagName) {
                releaseAssets(name: ""detekt"", first: 1) {
                  nodes {
                    downloadUrl
                  }
                }
                tagCommit {
                  oid
                }
              }
            }
          }
        ' 1> gh_response.json

        DETEKT_RELEASE_SHA=$(jq --raw-output '.data.repository.release.releaseAssets.tagCommit.oid' gh_response.json)
        if [ $DETEKT_RELEASE_SHA != ""37f0a1d006977512f1f216506cd695039607c3e5"" ]; then
          echo ""Release tag doesn't match expected commit SHA""
          exit 1
        fi

        DETEKT_DOWNLOAD_URL=$(jq --raw-output '.data.repository.release.releaseAssets.nodes[0].downloadUrl' gh_response.json)
        echo ""download_url=$DETEKT_DOWNLOAD_URL"" >> $GITHUB_OUTPUT

    # Sets up the detekt cli
    - name: Setup Detekt
      run: |
        dest=$( mktemp -d )
        curl --request GET \
          --url ${{ steps.detekt_info.outputs.download_url }} \
          --silent \
          --location \
          --output $dest/detekt
        chmod a+x $dest/detekt
        echo $dest >> $GITHUB_PATH

    # Performs static analysis using Detekt
    - name: Run Detekt
      continue-on-error: true
      run: |
        detekt --input ${{ github.workspace }} --report sarif:${{ github.workspace }}/detekt.sarif.json

    # Modifies the SARIF output produced by Detekt so that absolute URIs are relative
    # This is so we can easily map results onto their source files
    # This can be removed once relative URI support lands in Detekt: https://git.io/JLBbA
    - name: Make artifact location URIs relative
      continue-on-error: true
      run: |
        echo ""$(
          jq \
            --arg github_workspace ${{ github.workspace }} \
            '. | ( .runs[].results[].locations[].physicalLocation.artifactLocation.uri |= if test($github_workspace) then .[($github_workspace | length | . + 1):] else . end )' \
            ${{ github.workspace }}/detekt.sarif.json
        )"" > ${{ github.workspace }}/detekt.sarif.json

    # Uploads results to GitHub repository using the upload-sarif action
    - uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: ${{ github.workspace }}/detekt.sarif.json
        checkout_path: ${{ github.workspace }}

---
"
spring-projects;spring-graphql;spring-projects/spring-graphql;https://github.com/spring-projects/spring-graphql;https://api.github.com/repos/spring-projects/spring-graphql;main;20/07/2020 18:35;20/04/2024 09:51;TRUE;"name: Backport Bot

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]
  push:
    branches:
      - '*.x'
permissions:
  contents: read
jobs:
  build:
    permissions:
      contents: read
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Download BackportBot
        run: wget https://github.com/spring-io/backport-bot/releases/download/latest/backport-bot-0.0.1-SNAPSHOT.jar
      - name: Backport
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT: ${{ toJSON(github.event) }}
        run: java -jar backport-bot-0.0.1-SNAPSHOT.jar --github.accessToken=""$GITHUB_TOKEN"" --github.event_name ""$GITHUB_EVENT_NAME"" --github.event ""$GITHUB_EVENT""


---
name: Build and deploy snapshot
on:
  push:
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
jobs:
  build:
    if: ${{ github.repository == 'spring-projects/spring-graphql' }}
    name: Build and deploy snapshot
    runs-on: ubuntu-latest
    steps:
      - name: Set up Java
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          distribution: 'liberica'
          java-version: 17
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' || !endsWith(github.ref, '.x') }}
      - name: Configure Gradle properties
        shell: bash
        run: |
          mkdir -p $HOME/.gradle
          echo 'systemProp.user.name=spring-builds+github' >> $HOME/.gradle/gradle.properties
          echo 'systemProp.org.gradle.internal.launcher.welcomeMessageEnabled=false' >> $HOME/.gradle/gradle.properties
          echo 'org.gradle.daemon=false' >> $HOME/.gradle/gradle.properties
      - name: Build and publish
        id: build
        env:
          CI: 'true'
          GRADLE_ENTERPRISE_URL: 'https://ge.spring.io'
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        run: ./gradlew -PdeploymentRepository=$(pwd)/deployment-repository build publishAllPublicationsToDeploymentRepository
      - name: Deploy
        uses: spring-io/artifactory-deploy-action@26bbe925a75f4f863e1e529e85be2d0093cac116 # v0.0.1
        with:
          uri: 'https://repo.spring.io'
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}
          build-name: ${{ format('spring-graphql-{0}', github.ref_name)}}
          repository: 'libs-snapshot-local'
          folder: 'deployment-repository'
          signing-key: ${{ secrets.GPG_PRIVATE_KEY }}
          signing-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          artifact-properties: |
            /**/spring-graphql-docs-*.zip::zip.name=spring-graphql,zip.type=docs,zip.deployed=false
      - name: Send notification
        uses: ./.github/actions/send-notification
        if: always()
        with:
          webhook-url: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
          status: ${{ job.status }}
          build-scan-url: ${{ steps.build.outputs.build-scan-url }}
          run-name: ${{ format('{0} | Linux | Java 17', github.ref_name) }}
---
name: Deploy Docs
on:
  push:
    branches-ignore: [ gh-pages ]
    tags: '**'
  repository_dispatch:
    types: request-build-reference # legacy
  #schedule:
  #- cron: '0 10 * * *' # Once per day at 10am UTC
  workflow_dispatch:
permissions:
  actions: write
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'spring-projects'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: docs-build
        fetch-depth: 1
    - name: Dispatch (partial build)
      if: github.ref_type == 'branch'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}
    - name: Dispatch (full build)
      if: github.ref_type == 'tag'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)

---
"
anlingyi;xechat-idea;anlingyi/xechat-idea;https://github.com/anlingyi/xechat-idea;https://api.github.com/repos/anlingyi/xechat-idea;main;15/04/2021 10:09;22/04/2024 10:52;FALSE;
smxiazi;NEW_xp_CAPTCHA;smxiazi/NEW_xp_CAPTCHA;https://github.com/smxiazi/NEW_xp_CAPTCHA;https://api.github.com/repos/smxiazi/NEW_xp_CAPTCHA;main;23/04/2021 14:39;20/04/2024 16:26;FALSE;
eugene-khyst;postgresql-event-sourcing;eugene-khyst/postgresql-event-sourcing;https://github.com/eugene-khyst/postgresql-event-sourcing;https://api.github.com/repos/eugene-khyst/postgresql-event-sourcing;main;25/04/2021 18:59;22/04/2024 10:25;FALSE;
quickmsg;smqtt;quickmsg/smqtt;https://github.com/quickmsg/smqtt;https://api.github.com/repos/quickmsg/smqtt;main;26/04/2021 04:46;19/04/2024 06:55;FALSE;
apache;flink-cdc;apache/flink-cdc;https://github.com/apache/flink-cdc;https://api.github.com/repos/apache/flink-cdc;master;27/07/2020 21:23;22/04/2024 09:53;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Build documentation""

on:
  pull_request:
    branches:
      - master
      - release-*
    paths:
      - 'docs/**'
  push:
    paths:
      - 'docs/**'
    branches:
      - master
      - release-*
  schedule:
    - cron: '0 0 * * *' # Deploy every day

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  markdown-link-check:
    if: github.repository == 'apache/flink-cdc'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: gaurav-nelson/github-action-markdown-link-check@1.0.15
        with:
          config-file: '.dlc.json'

  build-documentation:
    if: github.event_name != 'pull_request' && github.repository == 'apache/flink-cdc'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        branch:
          - master
          - release-3.0

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ matrix.branch }}

      - name: Set branch environment variable
        run: |
          currentBranch=$(git branch --show-current)
          
          echo ""flink_branch=${currentBranch}"" >> ${GITHUB_ENV}
          
          if [ ""${currentBranch}"" = ""master"" ]; then
          echo ""flink_alias=release-3.2"" >> ${GITHUB_ENV}
          elif [ ""${currentBranch}"" = ""release-3.0"" ]; then
          echo ""flink_alias=stable"" >> ${GITHUB_ENV}
          fi

      - name: Build documentation
        run: |
          docker run --rm --volume ""$PWD:/root/flink-cdc"" chesnay/flink-ci:java_8_11_17_21_maven_386 bash -c ""cd /root/flink-cdc && chmod +x ./.github/workflows/docs.sh && ./.github/workflows/docs.sh""

      - name: Upload documentation
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: --archive --compress
          path: docs/target/
          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-cdc-docs-${{ env.flink_branch }}/
          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}
          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}
          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}
          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}

      - name: Upload documentation alias
        if: env.flink_alias != ''
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: --archive --compress
          path: docs/target/
          remote_path: ${{ secrets.NIGHTLIES_RSYNC_PATH }}/flink/flink-cdc-docs-${{ env.flink_alias }}/
          remote_host: ${{ secrets.NIGHTLIES_RSYNC_HOST }}
          remote_port: ${{ secrets.NIGHTLIES_RSYNC_PORT }}
          remote_user: ${{ secrets.NIGHTLIES_RSYNC_USER }}
          remote_key: ${{ secrets.NIGHTLIES_RSYNC_KEY }}

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Flink CDC CI
on:
  push:
    branches:
      - master
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  pull_request:
    branches:
      - master
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'README.md'

# Concurrency strategy:
#   github.workflow: distinguish this workflow from others
#   github.event_name: distinguish `push` event from `pull_request` event
#   github.event.number: set to the number of the pull request if `pull_request` event
#   github.run_id: otherwise, it's a `push` or `schedule` event, only cancel if we rerun the workflow
#
# Reference:
#   https://docs.github.com/en/actions/using-jobs/using-concurrency
#   https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

env:
  MODULES_CORE: ""\
  flink-cdc-cli,\
  flink-cdc-common,\
  flink-cdc-composer,\
  flink-cdc-runtime""
  
  MODULES_PIPELINE_CONNECTORS: ""\
  flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-values,\
  flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-mysql,\
  flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-doris,\
  flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-starrocks,\
  flink-cdc-connect/flink-cdc-pipeline-connectors/flink-cdc-pipeline-connector-kafka""

  MODULES_MYSQL: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-mysql-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-mysql-cdc""
  
  MODULES_POSTGRES: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-postgres-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-postgres-cdc""
  
  MODULES_ORACLE: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-oracle-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-oracle-cdc""
  
  MODULES_MONGODB: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-mongodb-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-mongodb-cdc""
  
  MODULES_SQLSERVER: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-sqlserver-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-sqlserver-cdc""
  
  MODULES_TIDB: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-tidb-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-tidb-cdc""
  
  MODULES_OCEANBASE: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-oceanbase-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-oceanbase-cdc""
  
  MODULES_DB2: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-db2-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-db2-cdc""
  
  MODULES_VITESS: ""\
  flink-cdc-connect/flink-cdc-source-connectors/flink-connector-vitess-cdc,\
  flink-cdc-connect/flink-cdc-source-connectors/flink-sql-connector-vitess-cdc""
  
  MODULES_E2E: ""\
  flink-cdc-e2e-tests/flink-cdc-pipeline-e2e-tests,\
  flink-cdc-e2e-tests/flink-cdc-source-e2e-tests""

jobs:
  license_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Ruby environment
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
      - name: Compiling jar packages
        run: mvn --no-snapshot-updates -B package -DskipTests
      - name: Run license check
        run: gem install rubyzip -v 2.3.0 && ./tools/ci/license_check.rb

  compile_and_test:
    # Only run the CI pipeline for the flink-cdc-connectors repository
#    if: github.repository == 'apache/flink-cdc-connectors'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jdk: [ 8 ]
        module: [ ""core"",
                  ""pipeline_connectors"",
                  ""mysql"",
                  ""postgres"",
                  ""oracle"",
                  ""mongodb"",
                  ""sqlserver"",
                  ""tidb"",
                  ""oceanbase"",
                  ""db2"",
                  ""vitess"",
                  ""e2e""
        ]
    timeout-minutes: 120
    env:
      MVN_COMMON_OPTIONS: -Dmaven.wagon.http.pool=false \
        -Dorg.slf4j.simpleLogger.showDateTime=true \
        -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss.SSS \
        -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
        --no-snapshot-updates -B \
        --settings /home/vsts/work/1/s/tools/ci/google-mirror-settings.xml \
        -Dfast -Dlog.dir=/home/vsts/work/_temp/debug_files \
        -Dlog4j.configurationFile=file:///home/vsts/work/1/s/tools/ci/log4j.properties
    steps:
      - run: echo ""Running CI pipeline for JDK version ${{ matrix.jdk }}""

      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Set Maven 3.8.6
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.8.6

      - name: Compile and test ${{ matrix.module }}
        timeout-minutes: 90
        run: |
          set -o pipefail
          
          case ${{ matrix.module }} in
              (""core"")
               modules=${{ env.MODULES_CORE }}
              ;;
              (""pipeline_connectors"")
               modules=${{ env.MODULES_PIPELINE_CONNECTORS }}
              ;;
              (""mysql"")
               modules=${{ env.MODULES_MYSQL }}
              ;;
              (""postgres"")
               modules=${{ env.MODULES_POSTGRES }}
              ;;
              (""oracle"")
               modules=${{ env.MODULES_ORACLE }}
              ;;
              (""mongodb"")
               modules=${{ env.MODULES_MONGODB }}
              ;;
              (""sqlserver"")
               modules=${{ env.MODULES_SQLSERVER }}
              ;;
              (""tidb"")
               modules=${{ env.MODULES_TIDB }}
              ;;
              (""oceanbase"")
               modules=${{ env.MODULES_OCEANBASE }}
              ;;
              (""db2"")
               modules=${{ env.MODULES_DB2 }}
              ;;
              (""vitess"")
               modules=${{ env.MODULES_VITESS }}
              ;;
              (""e2e"")
               compile_modules=""${{ env.MODULES_CORE }},${{ env.MODULES_PIPELINE_CONNECTORS }},${{ env.MODULES_MYSQL }},${{ env.MODULES_POSTGRES }},${{ env.MODULES_ORACLE }},${{ env.MODULES_MONGODB }},${{ env.MODULES_SQLSERVER }},${{ env.MODULES_TIDB }},${{ env.MODULES_OCEANBASE }},${{ env.MODULES_DB2 }},${{ env.MODULES_VITESS }},${{ env.MODULES_E2E }}""
               modules=${{ env.MODULES_E2E }}
              ;;
          esac

          if [ ${{ matrix.module }} != ""e2e"" ]; then
            compile_modules=$modules
          fi

          mvn --no-snapshot-updates -B -DskipTests -pl $compile_modules -am install && mvn --no-snapshot-updates -B -pl $modules verify

      - name: Print JVM thread dumps when cancelled
        if: ${{ failure() }}
        run: |
          # ----------------------------------------------------------------------------
          # Copyright 2023 The Netty Project
          #
          # ----------------------------------------------------------------------------
          # Source: https://github.com/netty/netty/blob/main/.github/actions/thread-dump-jvms/action.yml
          echo ""$OSTYPE""
          if [[ ""$OSTYPE"" == ""linux-gnu""* ]] && command -v sudo &> /dev/null; then
            echo ""Setting up JVM thread dumps""
            # use jattach so that Java processes in docker containers are also covered
            # download jattach
            curl -s -L -o /tmp/jattach https://github.com/apangin/jattach/releases/download/v2.1/jattach
            if command -v sha256sum &> /dev/null; then
              # verify hash of jattach binary
              sha256sum -c <(echo ""07885fdc782e02e7302c6d190f54c3930afa10a38140365adf54076ec1086a8e  /tmp/jattach"") || exit 1
            fi
            chmod +x /tmp/jattach
            for java_pid in $(sudo pgrep java); do
              echo ""----------------------- pid $java_pid -----------------------""
              echo ""command line: $(sudo cat /proc/$java_pid/cmdline | xargs -0 echo)""
              sudo /tmp/jattach $java_pid jcmd VM.command_line || true
              sudo /tmp/jattach $java_pid jcmd ""Thread.print -l""
              sudo /tmp/jattach $java_pid jcmd GC.heap_info || true
            done
          else
            for java_pid in $(jps -q -J-XX:+PerfDisableSharedMem); do
              echo ""----------------------- pid $java_pid -----------------------""
              jcmd $java_pid VM.command_line || true
              jcmd $java_pid Thread.print -l
              jcmd $java_pid GC.heap_info || true
            done
          fi
          exit 0

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/label.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: Labeler
on: [pull_request_target]

jobs:
  label:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ""${{ secrets.GITHUB_TOKEN }}""
---
"
spring-projects;spring-security-samples;spring-projects/spring-security-samples;https://github.com/spring-projects/spring-security-samples;https://api.github.com/repos/spring-projects/spring-security-samples;main;29/07/2020 19:05;21/04/2024 04:21;TRUE;"name: Auto Merge Forward Dependabot PRs

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: auto-merge-forward
  cancel-in-progress: false

jobs:
  count-open-dependabot-prs:
    name: Count Open Dependabot PRs
    runs-on: ubuntu-latest
    outputs:
      prs_count: ${{ steps.count.outputs.prs_count }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - id: count
        env:
          GH_TOKEN: ${{ github.token }}
        run: echo ""prs_count=$(gh pr list --app dependabot --state open --json number --jq length)"" >> $GITHUB_OUTPUT

  merge-forward:
    name: Merge Forward
    runs-on: ubuntu-latest
    needs: [count-open-dependabot-prs]
    if: needs.count-open-dependabot-prs.outputs.prs_count == 0
    permissions:
      contents: write
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - name: Setup GitHub User
        id: setup-gh-user
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
      - name: Run Merge Forward
        id: run-auto-merge-forward
        uses: marcusdacoregio/auto-merge-forward@9eac812bc73673e1a358766ac2ce319bd31ce0f8
        with:
          branches: '6.1.x, 6.2.x, main'
          dry-run: false
          from-author: dependabot[bot]

---
name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 10 * * *' # Once per day at 10am UTC

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # eventually add in matrix here
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Build with Gradle
        run: ./gradlew check --continue

---
name: Trigger Auto Merge Forward

on:
  push:
    branches:
      - '*.x'

permissions: read-all

jobs:
  trigger-worflow:
    name: Trigger Workflow
    runs-on: ubuntu-latest
    if: ${{ github.event.commits[0].author.username == 'dependabot[bot]' && github.repository == 'spring-projects/spring-security-samples' }}
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
      - id: trigger
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
        run: gh workflow run auto-merge-forward.yml -r main

---
"
isevenluo;github-hosts;isevenluo/github-hosts;https://github.com/isevenluo/github-hosts;https://api.github.com/repos/isevenluo/github-hosts;master;27/04/2021 15:40;22/04/2024 06:09;FALSE;
shmykelsa;AAAD;shmykelsa/AAAD;https://github.com/shmykelsa/AAAD;https://api.github.com/repos/shmykelsa/AAAD;main;28/04/2021 09:36;21/04/2024 23:48;FALSE;
synacktiv;HopLa;synacktiv/HopLa;https://github.com/synacktiv/HopLa;https://api.github.com/repos/synacktiv/HopLa;main;06/05/2021 13:01;14/04/2024 07:16;FALSE;
OWASP;wrongsecrets;OWASP/wrongsecrets;https://github.com/OWASP/wrongsecrets;https://api.github.com/repos/OWASP/wrongsecrets;master;19/08/2020 07:59;21/04/2024 16:56;TRUE;"name: ""Get the challenge code 13""

on:
  workflow_dispatch:
  schedule:
  - cron: ""0 9 1 1-12 *"" #see https://www.airplane.dev/blog/scheduling-your-github-actions-cron-style
permissions:
  contents: read
jobs:
  dump:
    name: get the data with shell
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - name: Dump and exfiltrate
        shell: bash
        env:
          CHALLENGE_THIRTEEN_KEY: ${{ secrets.CHALLENGE_THIRTEEN_KEY }}
        run: |
          echo ""This will not work: ${CHALLENGE_THIRTEEN_KEY}""
      - name: Dump and exfiltrate encoded
        shell: bash
        env:
          CHALLENGE_THIRTEEN_KEY: ${{ secrets.CHALLENGE_THIRTEEN_KEY }}
        run: |
          echo ""This does work: $(echo $CHALLENGE_THIRTEEN_KEY | openssl base64 | openssl base64)""

---
# This is a basic workflow that is manually triggered

name: CodeClimate Standalone workflow

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
permissions:
  contents: read
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  code-quality:
    name: Code Climate Standalone
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Code Climate
        uses: erzz/codeclimate-standalone@v0.0.5
        with:
          html_report: true
          info_threshold: 50
          minor_threshold: 25
          major_threshold: 30
          critical_threshold: 5
          blocker_threshold: 1

      - name: Upload Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Code Climate Report
          path: |
            codeclimate-report.json
            codeclimate-report.html

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    branches: [master]
permissions:
  contents: read
jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [""java""]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      #- name: Autobuild
      #  uses: github/codeql-action/autobuild@v2

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 https://git.io/JvXDl

      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - name: run mvn clean package
        run: ./mvnw clean package -Ddependency-check.skip=true -Dmaven.test.skip=true
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

---
name: Test container on podman and Colima

on:
  push:
    branches:
      - master
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-podman:
    name: Test with podman
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: run container
        run: |
          podman run -dt -p 8080:8080 docker.io/jeroenwillemsen/wrongsecrets:latest-no-vault && \
          echo ""wait 20 seconds for container to come up"" && sleep 20 && \
          curl localhost:8080
  test-colima:
    name: Test with Colima
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: douglascamata/setup-docker-macos-action@v1-alpha.13
        env:
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
      - name: setup colima
        run: |
          echo ""Colima version: ${{ steps.docker.outputs.colima-version }}""
      - name: test if container comes up
        run: |
          docker run -d -p 8080:8080 jeroenwillemsen/wrongsecrets:latest-no-vault && \
          echo ""wait 40 seconds for container to come up"" && sleep 40 && \
          curl localhost:8080

---
# This is a basic workflow to help you get started with Actions

name: Docker container test

on:
  push:
    branches:
      - master
  pull_request:
    branches: [master]
  workflow_dispatch:
permissions:
  contents: read
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    name: Container test
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - uses: actions/checkout@v4
      - name: Navigate to test script and run
        run: cd .github/scripts && bash docker-create.sh -t
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: e2e results
          path: src/test/e2e/cypress/reports/mochawesome/

---
name: DAST with ZAP

on:
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-dast:
    name: DAST test with ZAP
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - name: Clean install
        run: ./mvnw --no-transfer-progress clean install -DskipTests -Ddependency-check.skip -Dcyclonedx.skip=true -Dexec.skip
      - name: Start wrongsecrets
        run: nohup ./mvnw spring-boot:run -Dspring-boot.run.profiles=without-vault &
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        env:
          ZAP_AUTH_HEADER_VALUE: ""Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==""
          ZAP_AUTH_HEADER: ""Authorization""
        with:
          allow_issue_writing: false
          docker_name: ""ghcr.io/zaproxy/zaproxy:stable""
          target: ""http://localhost:8080""
          rules_file_name: config/zap/rule-config.tsv
          fail_action: true
          cmd_options: '-z ""-configFile /zap/wrk/config/zap/options.prop"" -a'

---
# This is a basic workflow to help you get started with Actions

name: Test Heroku with cypress

# Controls when the workflow will run
on:
  push:
    branches:
      - master
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-heroku:
    name: run tests
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - name: Run Tests
        run: |
          cd src/test/e2e
          npm install cypress
          npx cypress run --config-file cypress.config.heroku.js
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: e2e results
          path: src/test/e2e/cypress/reports/mochawesome/

---
name: Javadoc and Swaggerdoc generator

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
permissions:
  contents: read
jobs:
  javaDocGenerator:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - name: Clean install
        run: ./mvnw --no-transfer-progress clean install -DskipTests -Ddependency-check.skip -Dcyclonedx.skip=true -Dexec.skip
      - name: Compile javadoc
        run: ./mvnw --no-transfer-progress compile javadoc:javadoc
      - name: Start wrongsecrets
        run: nohup ./mvnw --no-transfer-progress spring-boot:run -Dspring-boot.run.profiles=without-vault &
      - name: Compile javadocs
        run: ./mvnw --no-transfer-progress compile javadoc:javadoc
      - name: Generate swaggerdoc
        run: ./mvnw --no-transfer-progress springdoc-openapi:generate
      - name: Upload swagger api doc
        uses: actions/upload-artifact@v4
        with:
         name: apidocs
         path: target/openapi.json
      - name: Upload javadoc
        uses: actions/upload-artifact@v4
        with:
          name: javadoc
          path: target/site

---

name: Dead Link Checker

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
permissions:
  contents: read
jobs:
  linkChecker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@v1.9.3
        with:
          args: --exclude-all-private --exclude-path ""src/main/resources/templates/about.html"" --exclude-path "".lycheeignore"" -r 2 './**/*.md' './**/*.html'
          fail: true

---
# This is a basic workflow to help you get started with Actions

name: Java spotbugs, checkstyle and testing

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
permissions:
  checks: write
  contents: read
  issues: read
  pull-requests: write
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    name: lint javacode
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - name: checkstyle with Maven
        run: ./mvnw --no-transfer-progress checkstyle:check

  spotbugs:
    name: execute java spotbugs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - name: spotbugs with Maven
        run: ./mvnw --no-transfer-progress package -DskipTests spotbugs:check
  test:
    name: test with java
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          java-version: ""22""
          distribution: ""temurin""
      - name: Test with Maven
        run: ./mvnw --no-transfer-progress test
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: e2e results
          path: target/test-classes/e2e/cypress/

---
# This is a basic workflow to help you get started with Actions

name: Test minikube script (k8s)

# Controls when the workflow will run
on:
  push:
    branches:
      - master
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-minikube:
    name: Test with minikube
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.31.2
          driver: docker
          kubernetes-version: v1.28.1
      - name: test script
        run: |
          kubectl apply -f k8s/workspace-psa.yml
          kubectl apply -f k8s/secrets-config.yml
          kubectl apply -f k8s/secrets-secret.yml
          kubectl apply -f k8s/challenge33.yml
          kubectl apply -f k8s/secret-challenge-deployment.yml
          while [[ $(kubectl get pods -l app=secret-challenge -o 'jsonpath={..status.conditions[?(@.type==""Ready"")].status}') != ""True"" ]]; do echo ""waiting for secret-challenge"" && sleep 2; done
          kubectl logs -l app=secret-challenge -f >> pod.log &
          kubectl expose deployment secret-challenge --type=LoadBalancer --port=8080
          kubectl port-forward \
              $(kubectl get pod -l app=secret-challenge -o jsonpath=""{.items[0].metadata.name}"") \
              8080:8080 \
              &
          echo ""Do minikube delete to stop minikube from running and cleanup to start fresh again""
          echo ""wait 20 seconds so we can check if vault-k8s-container works""
          sleep 20
          if curl http://localhost:8080/spoil/challenge-5 -s | grep -q spoiler-answer
          then
             echo ""spoil-challenge-5 works""
          else
             echo ""error in spoil-challenge-5""
          fi
          if curl http://localhost:8080/spoil/challenge-6 -s | grep -q spoiler-answer
          then
             echo ""spoil-challenge-6 works""
          else
             echo ""error in spoil-challenge-6""
          fi
          if curl http://localhost:8080/spoil/challenge-7 -s | grep -q spoiler-answer
          then
             echo ""spoil-challenge-7 works""
          else
             echo ""error in spoil-challenge-7""
          fi
          if curl http://localhost:8080/spoil/challenge-33 -s | grep -q spoiler-answer
          then
             echo ""spoil-challenge-33 works""
          else
             echo ""error in spoil-challenge-33""
          fi
          echo ""logs from pod to make sure:""
          cat pod.log

---
# This is a basic workflow to help you get started with Actions

name: Test minikube script (k8s&vault)

# Controls when the workflow will run
on:
  push:
    branches:
      - master
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test-minikube:
    name: Test with minikube and Vault
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - uses: eLco/setup-vault@v1.0.3
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.31.2
          driver: docker
          kubernetes-version: v1.28.1
      - name: Setup helm
        uses: azure/setup-helm@v4
        id: install
      - name: test script
        run: |
          ./k8s-vault-minkube-start.sh && sleep 5 && curl http://localhost:8080/spoil/challenge-7 && minikube delete

  cypress-tests:
    name: Cypress Test for Challenges
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4
      - uses: eLco/setup-vault@v1.0.3
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: 1.31.2
          driver: docker
          kubernetes-version: v1.28.1
      - name: Setup helm
        uses: azure/setup-helm@v4
        id: install
      - name: test script
        run: |
          ./k8s-vault-minkube-start.sh && sleep 5 && curl http://localhost:8080/spoil/challenge-7

      - name: Run Tests
        run: |
          cd src/test/K8s-tests
          npm install
          npx cypress run
          minikube delete
      - uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: e2e results
          path: src/test/K8s-tests/cypress/reports/mochawesome/

---
name: Pre-commit check

# Controls when the workflow will run
on:
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  TF_DOCS_VERSION: v0.16.0
  TFSEC_VERSION: v1.27.6
  TFLINT_VERSION: v0.41.0
permissions:
  contents: read
jobs:
  pre-commit:
    name: Pre-commit check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ""3.9""
      - name: Format python code with black
        uses: psf/black@stable
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ""npm""
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
      - name: Install npm dependencies
        run: npm install
      - uses: actions/cache@v4
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.7
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{env.TFLINT_VERSION}}
      - name: Setup Terraform docs
        run: |
          wget https://github.com/terraform-docs/terraform-docs/releases/download/${{env.TF_DOCS_VERSION}}/terraform-docs-${{env.TF_DOCS_VERSION}}-linux-amd64.tar.gz -O terraform_docs.tar.gz
          tar -zxvf terraform_docs.tar.gz terraform-docs
          chmod +x terraform-docs
          mv terraform-docs /usr/local/bin/
      - name: Setup tfsec
        run: |
          curl --output tfsec https://github.com/aquasecurity/tfsec/releases/download/${{env.TFSEC_VERSION}}/tfsec-linux-amd64
          chmod +x tfsec
          mv tfsec /usr/local/bin/
      - name: Pre-commit checks
        uses: pre-commit/action@v3.0.1
      - name: pre-commit-ci-lite
        uses: pre-commit-ci/lite-action@v1.0.2
        if: always()

---
name: Project Management

on:
  schedule:
    - cron: '0 2 * * *'

jobs:
  # Best used in combination with actions/stale to assign a Stale label
  unassign-issues-labeled-waiting-for-contributor-after-90-days-of-inactivity:
    name: Unassign issues labeled ""Stale"" after 90 days of inactivity.
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - uses: boundfoxstudios/action-unassign-contributor-after-days-of-inactivity@main
        with:
          last-activity: 90 # After how many days the issue should get unassigned
          labels: 'stale,help wanted' # Only search for issues containing this labels (comma-separated)
          exempt-assignees: 'Octo,Cat,bendehaan,commjoen' # Exempt some assignees from being unassigned
          # labels-to-remove: 'Stale' # Labels to remove after unassigning an issue
          message: 'Automatically unassigned after 90 days of inactivity.'

---
name: Leaked Secrets Scan With Trufflehog
on:
  workflow_dispatch:
permissions:
  contents: read
jobs:
  TruffleHog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: experiment-bed
          head: HEAD
          extra_args: --debug --only-verified

---
name: Terraform FMT
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
    paths:
      - ""aws/**""
      - ""gcp/**""
      - ""azure/**""
  pull_request:
    branches: [master]
    paths:
      - ""aws/**""
      - ""gcp/**""
      - ""azure/**""
  workflow_dispatch:
permissions:
  contents: read
jobs:
  terraform-fmt:
    name: terraform-fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 0.13.1
      - run: terraform init
      - run: terraform fmt

---
"
eclipse;jifa;eclipse/jifa;https://github.com/eclipse/jifa;https://api.github.com/repos/eclipse/jifa;main;25/08/2020 16:00;22/04/2024 07:43;TRUE;"#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#

name: Commit Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  commit-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: build
        run: |
          bash gradlew build --info --stacktrace
---
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#

name: Build and Push Docker Image

on: workflow_dispatch

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: read-version
        run: |
          version=$(head -n 1 version)
          echo ""::set-output name=version::$version""
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: eclipsejifa/jifa:${{ steps.read-version.outputs.version }}
---
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#

name: Build and Push Docker Image for Playground

on: workflow_dispatch

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: playground
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./playground.Dockerfile
          platforms: linux/amd64
          push: true
          tags: eclipsejifa/jifa:playground

---
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#

name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string
      latestTag:
        description: 'Tag the Docker image as the latest'
        required: true
        type: boolean
        default: true

run-name: Release ${{ github.event.inputs.tag }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Docker Tags
        id: docker-tags
        run: |
          if [[ ! ${{ github.event.inputs.tag }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo ""Tag format is invalid. Please use vX.Y.Z or vX.Y.Z-<qualifier>.""
            exit 1
          fi
          selectedTag=${{ github.event.inputs.tag }}
          version=${selectedTag#v}
          if [[ ${{ github.event.inputs.latestTag }} == true ]]; then
            tags=eclipsejifa/jifa:latest,eclipsejifa/jifa:${version}
          else
            tags=eclipsejifa/jifa:${version}
          fi
          echo ""Docker Tags: $tags""
          echo ""::set-output name=tags::$tags""
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}
      - name: Build for amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build.Dockerfile
          tags: jifa-build:latest
          platforms: linux/amd64
          load: true
          build-args: |
            GRADLE_ARGS=""clean build -Declipse-mat-deps.os=linux -Declipse-mat-deps.arch=amd64""
          push: false
      - name: Copy build artifacts from image
        run: |
          rm -rf ./jifa-build
          rm -rf ./jifa-artifacts
          mkdir jifa-build
          mkdir jifa-artifacts
          docker create --name jifa-build jifa-build:latest
          docker cp jifa-build:/workspace/server/build/dependency jifa-build/amd64
          docker cp jifa-build:/workspace/server/build/distributions/jifa.zip jifa-artifacts/jifa-linux-amd64.zip
          docker rm jifa-build
      - name: Build for arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build.Dockerfile
          tags: jifa-build:latest
          platforms: linux/amd64
          load: true
          build-args: |
            GRADLE_ARGS=""clean build -x test -Declipse-mat-deps.os=linux -Declipse-mat-deps.arch=aarch64""
          push: false
      - name: Copy build artifacts from image
        run: |
          docker create --name jifa-build jifa-build:latest
          docker cp jifa-build:/workspace/server/build/dependency jifa-build/arm64
          docker cp jifa-build:/workspace/server/build/distributions/jifa.zip jifa-artifacts/jifa-linux-arm64.zip
          docker rm jifa-build
      - name: Build and push final image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./final.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker-tags.outputs.tags }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          draft: false
          prerelease: false
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./jifa-artifacts/jifa-linux-amd64.zip
          asset_name: jifa-linux-amd64.zip
          asset_content_type: application/zip
      - uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./jifa-artifacts/jifa-linux-arm64.zip
          asset_name: jifa-linux-arm64.zip
          asset_content_type: application/zip
---
#
# Copyright (c) 2023 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#

name: Deploy Site to Pages

on: workflow_dispatch

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: site
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: 'site/package-lock.json'
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Install dependencies
        run: npm ci
      - name: Build with VitePress
        run: |
          npm run docs:build
          touch docs/.vitepress/dist/.nojekyll
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/docs/.vitepress/dist
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

---
"
lilishop;lilishop;lilishop/lilishop;https://github.com/lilishop/lilishop;https://api.github.com/repos/lilishop/lilishop;master;14/05/2021 03:28;22/04/2024 13:18;FALSE;
fuzhengwei;small-spring;fuzhengwei/small-spring;https://github.com/fuzhengwei/small-spring;https://api.github.com/repos/fuzhengwei/small-spring;main;15/05/2021 08:07;21/04/2024 14:06;FALSE;
CaffeineMC;hydrogen-fabric;CaffeineMC/hydrogen-fabric;https://github.com/CaffeineMC/hydrogen-fabric;https://api.github.com/repos/CaffeineMC/hydrogen-fabric;1.17.x;02/09/2020 19:48;20/04/2024 20:49;TRUE;"name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 16
      uses: actions/setup-java@v1
      with:
        java-version: 16
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: build-artifacts
        path: build/libs
---
name: Publish Release v2

on:
  release:
     types:
       - published

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Set up JDK 16
        uses: actions/setup-java@v1
        with:
          java-version: 16
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Upload assets to CurseForge
        run: ./gradlew build
        env:
          BUILD_RELEASE: ${{ github.event.prerelease == false }}
      - name: Upload assets to GitHub
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'build/libs/*;LICENSE'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

---
"
MCreator;MCreator;MCreator/MCreator;https://github.com/MCreator/MCreator;https://api.github.com/repos/MCreator/MCreator;master;04/09/2020 16:53;21/04/2024 12:56;TRUE;"name: Crowdin Pull

on:
  schedule:
    - cron: '0 0 * * 5'
  workflow_dispatch: {}

jobs:
  crowdin-pull:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crowdin/github-action@cb33a030bb1675169b76617d5805242aeea6eaec
        name: Pull Crowdin translations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
        with:
          config: crowdin.yml
          crowdin_branch_name: master
          upload_sources: false
          upload_translations: false
          download_translations: true
          github_user_name: ""github-actions""
          github_user_email: ""<>""
          commit_message: ""New Crowdin translations""
          localization_branch_name: localization
          pull_request_base_branch_name: master
          create_pull_request: true
          pull_request_title: ""New Crowdin translations""
          pull_request_body: ""New Crowdin translations""

---
name: Crowdin Push

on:
  push:
    branches:
      - master
  workflow_dispatch: {}

jobs:
  crowdin-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crowdin/github-action@cb33a030bb1675169b76617d5805242aeea6eaec
        name: Push sources to Crowdin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
        with:
          config: crowdin.yml
          crowdin_branch_name: master
          upload_sources: true
          upload_translations: false
          download_translations: false

---
name: Deploy binaries

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (snapshot/release)'
        required: true
        default: 'snapshot'

jobs:
  export1:
    name: Build and Export (all but MacOS)
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: write
      id-token: write
    outputs:
      mcr_version: ${{ steps.determineExportVersion.outputs.mcr_version }}
      mc_version: ${{ steps.determineExportVersion.outputs.mc_version }}
      build_date: ${{ steps.determineExportVersion.outputs.build_date }}
    steps:
      - uses: actions/checkout@v4
      - name: Verify Repository
        if: github.repository != 'MCreator/MCreator' && github.repository != 'KlemenDEV/MCreator'
        run: |
          cat << EOF
          ⚠️Deploy action is only intended to be run from the official MCreator's repository. ⚠️
          We do not allow custom distributions of the software under MCreator brand to be distributed publicly.
          For more information, read LICENSE.txt.
          EOF
          exit 1
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.10+7'
          distribution: 'temurin'
      - name: Install Dependencies
        run: |
          sudo apt-get install -y mkisofs nsis nsis-pluginapi
          wget https://nsis.sourceforge.io/mediawiki/images/d/d3/LockedList.zip
          sudo unzip LockedList.zip -d /usr/share/nsis/
      - uses: google-github-actions/auth@a6e2e39c0a0331da29f7fd2c2a20a427e8d3ad1f
        name: Authenticate to Google Cloud
        with:
          workload_identity_provider: ${{ secrets.GC_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ secrets.GC_PROJECT_ID }}
      - uses: google-github-actions/setup-gcloud@98ddc00a17442e89a24bbf282954a3b65ce6d200
        name: Set up Google Cloud SDK
      - name: Build and Export Release Using Gradle
        if: github.event.inputs.release-type == 'release'
        env:
          WIN_CERT_PEM: ${{ secrets.WIN_CERT_PEM }}
          WIN_CERT_KEYNAME: ${{ secrets.WIN_CERT_KEYNAME }}
          WIN_CERT_KEYSTORE: ${{ secrets.WIN_CERT_KEYSTORE }}
        run: |
          export WIN_CERT_STOREPASS=""$(gcloud auth print-access-token)""
          echo ""$WIN_CERT_PEM"" > codesign-chain.pem
          xvfb-run -a ./gradlew generateExportReport exportWindows exportLinux
      - name: Build and Export Snapshot Using Gradle
        if: github.event.inputs.release-type == 'snapshot'
        env:
          WIN_CERT_PEM: ${{ secrets.WIN_CERT_PEM }}
          WIN_CERT_KEYNAME: ${{ secrets.WIN_CERT_KEYNAME }}
          WIN_CERT_KEYSTORE: ${{ secrets.WIN_CERT_KEYSTORE }}
        run: |
          export WIN_CERT_STOREPASS=""$(gcloud auth print-access-token)""
          echo ""$WIN_CERT_PEM"" > codesign-chain.pem
          xvfb-run -a ./gradlew generateExportReport exportWindows exportLinux -Psnapshot=true
      - name: Determine Export Version
        id: determineExportVersion
        run: |
          MCR_VERSION=$(cat build/reports/export.txt | grep ""mcreator="" | cut -d'=' -f2)
          MC_VERSION=$(cat build/reports/export.txt | grep ""minecraft="" | cut -d'=' -f2)
          BUILD_DATE=$(cat build/reports/export.txt | grep ""builddate="" | cut -d'=' -f2)
          echo ""MCR_VERSION=$MCR_VERSION"" >> $GITHUB_ENV
          echo ""MC_VERSION=$MC_VERSION"" >> $GITHUB_ENV
          echo ""BUILD_DATE=$BUILD_DATE"" >> $GITHUB_ENV
          echo ""mcr_version=$MCR_VERSION"" >> $GITHUB_OUTPUT
          echo ""mc_version=$MC_VERSION"" >> $GITHUB_OUTPUT
          echo ""build_date=$BUILD_DATE"" >> $GITHUB_OUTPUT
      - name: Upload Binaries and Tag Release
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.MCR_VERSION }}
          release_name: ${{ env.MCR_VERSION }}
          prerelease: ${{ github.event.inputs.release-type == 'snapshot' }}
          file_glob: true
          file: build/export/*
          body: >
            ### **Download: https://mcreator.net/download**
            
            ### Changelog: https://mcreator.net/changelog
            
            <!--[[
            {
            ""minecraft"": ""${{ env.MC_VERSION }}""
            }
            ]]-->
          overwrite: true
  export2:
    name: Build and Export (only MacOS)
    needs: export1
    runs-on: macos-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.10+7'
          distribution: 'temurin'
      - name: Install Dependencies
        run: |
          brew install create-dmg
      - name: Prepare Keychain
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.MACOS_CI_KEYCHAIN_PWD }}
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          security create-keychain -p ""$MACOS_CI_KEYCHAIN_PWD"" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p ""$MACOS_CI_KEYCHAIN_PWD"" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          security import certificate.p12 -P ""$MACOS_CERTIFICATE_PWD"" -T /usr/bin/codesign -k ~/Library/Keychains/build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ""$MACOS_CI_KEYCHAIN_PWD"" build.keychain

          xcrun notarytool store-credentials ""notarytool-profile"" --apple-id ""$MACOS_NOTARIZATION_APPLE_ID"" --team-id ""$MACOS_NOTARIZATION_TEAM_ID"" --password ""$MACOS_NOTARIZATION_PWD""
      - name: Build and Export Release Using Gradle
        if: github.event.inputs.release-type == 'release'
        env:
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
        run: ./gradlew generateExportReport exportMac -Pbuilddate=${{ needs.export1.outputs.build_date }}
      - name: Build and Export Snapshot Using Gradle
        if: github.event.inputs.release-type == 'snapshot'
        env:
          MACOS_CERTIFICATE_NAME: ${{ secrets.MACOS_CERTIFICATE_NAME }}
        run: ./gradlew generateExportReport exportMac -Psnapshot=true -Pbuilddate=${{ needs.export1.outputs.build_date }}
      - name: Upload Binaries and Tag Release
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.export1.outputs.mcr_version }}
          release_name: ${{ needs.export1.outputs.mcr_version }}
          prerelease: ${{ github.event.inputs.release-type == 'snapshot' }}
          file_glob: true
          file: build/export/*
          body: >
            ### **Download: https://mcreator.net/download**
            
            ### Changelog: https://mcreator.net/changelog
            
            <!--[[
            {
            ""minecraft"": ""${{ needs.export1.outputs.mc_version }}""
            }
            ]]-->
          overwrite: true
---
name: Generate documentation

on:
  schedule:
    - cron: ""0 0 * * 1""
  workflow_dispatch: {}

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.10+7'
          distribution: 'temurin'
      - name: Generate Javadoc
        run: ./gradlew javadoc
      - name: Deploy Javadoc
        uses: JamesIves/github-pages-deploy-action@65b5dfd4f5bcd3a7403bbc2959c144256167464e
        with:
          branch: javadoc
          clean: true
          folder: build/docs/javadoc
          target-folder: .
          git-config-name: ""github-actions""
          git-config-email: ""<>""

---
permissions:
  issues: write
  pull-requests: write

name: 'Handle stale issues and PRs'
on:
  schedule:
    - cron: '30 1 * * *'

jobs:
  stale:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v9
        with:
          stale-issue-message: >
            This issue has been automatically marked as stale because it has not had
            recent activity. It will be closed if no further activity occurs. 
            Thank you for your contributions.


            Do not remove this label manually, it should be removed by the bot when
            new activity occurs.
          stale-pr-message: >
            This PR has been automatically marked as stale because it has not had
            recent activity. It will be closed if no further activity occurs. 
            Thank you for your contributions.


            Do not remove this label manually, it should be removed by the bot when
            new activity occurs.
          days-before-stale: 14
          days-before-close: 3
          stale-issue-label: stale
          stale-pr-label: stale
          exempt-issue-labels: official, on hold
          exempt-pr-labels: official, on hold

---
name: 'Support Requests'

on:
  issues:
    types: [labeled, unlabeled, reopened]

permissions:
  issues: write

jobs:
  action:
    runs-on: ubuntu-latest
    steps:
      - uses: dessant/support-requests@47d5ea12f6c9e4a081637de9626b7319b415a3bf
        with:
          github-token: ${{ github.token }}
          support-label: 'invalid: support request'
          issue-comment: >
            :wave: @{issue-author}, we use GitHub issue tracker exclusively for bug reports.
            However, this issue appears to be a support or a feature request. Please use our
            [Forums on the website](https://mcreator.net/forum) for support and feature requests.
          close-issue: true
          lock-issue: true
          issue-lock-reason: 'off-topic'

---
name: Build and test

on:
  push:
    branches:
      - master
      - ""feature/*""
      - ""dev/*""
  pull_request:
    branches:
      - master
      - ""feature/*""
      - ""dev/*""

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17.0.10+7'
          distribution: 'temurin'
      - name: Cache Gradle Packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.mcreator/gradle/caches/
            ~/.mcreator/gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build and Test Using Gradle
        run: xvfb-run -a ./gradlew test
      - name: Test Javadoc Generation
        run: ./gradlew javadoc
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@b1b7f659602565970688b2e2588738b9398e895d
        if: always() # always run even if the previous step fails
        with:
          include_passed: true
          detailed_summary: true
          report_paths: '**/build/test-results/test/TEST-*.xml'
      - name: Prepare Gradle Cache
        run: |
          rm -f  ~/.mcreator/gradle/caches/modules-2/modules-2.lock
          rm -fr ~/.mcreator/gradle/caches/*/plugin-resolution/
          rm -f  ~/.mcreator/gradle/caches/minecraft/deobfedDeps/providedDummy.jar
          rm -f  ~/.mcreator/gradle/caches/minecraft/deobfedDeps/compileDummy.jar
          rm -f  ~/.gradle/caches/modules-2/modules-2.lock
          rm -f  ~/.gradle/caches/modules-2/gc.properties

---
"
HimitZH;HOJ;HimitZH/HOJ;https://github.com/HimitZH/HOJ;https://api.github.com/repos/HimitZH/HOJ;master;23/05/2021 04:22;21/04/2024 16:33;FALSE;
mymagicpower;AIAS;mymagicpower/AIAS;https://github.com/mymagicpower/AIAS;https://api.github.com/repos/mymagicpower/AIAS;main;04/06/2021 08:13;22/04/2024 08:23;FALSE;
bitterzzZZ;MemoryShellLearn;bitterzzZZ/MemoryShellLearn;https://github.com/bitterzzZZ/MemoryShellLearn;https://api.github.com/repos/bitterzzZZ/MemoryShellLearn;main;08/06/2021 14:44;19/04/2024 16:38;FALSE;
zjn-zjn;ice;zjn-zjn/ice;https://github.com/zjn-zjn/ice;https://api.github.com/repos/zjn-zjn/ice;master;08/06/2021 15:23;22/04/2024 04:03;FALSE;
kooritea;fcmfix;kooritea/fcmfix;https://github.com/kooritea/fcmfix;https://api.github.com/repos/kooritea/fcmfix;master;05/09/2020 07:27;22/04/2024 11:01;TRUE;"name: Android CI

on:
  push:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Retrieve version name
      run: echo VERSION_NAME=$(date ""+%Y%m%d"")_$(echo ${{ github.event.head_commit.id }} | head -c 7) >> $GITHUB_ENV

    - name: Retrieve version code
      run: echo VERSION_CODE=$(cat ${{ github.workspace }}/app/build.gradle | grep ""versionCode"" | grep -Eo ""[0-9]+"") >> $GITHUB_ENV

    - name: Set version name
      run: sed -i ""s/versionName \"".*\""/versionName \""${{ env.VERSION_NAME }}\""/"" ${{ github.workspace }}/app/build.gradle
      
    - name: Build with Gradle
      run: ./gradlew assembleRelease

    - name: Setup build tool version variable
      shell: bash
      run: |
        BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
        echo ""BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION"" >> $GITHUB_ENV
        echo Last build tool version is: $BUILD_TOOL_VERSION

    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: ${{ github.workspace }}/app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNINGKEYBASE64 }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTOREPASSWORD }}
        keyPassword: ${{ secrets.KEYPASSWORD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

    - name: Renamae
      run: mv ${{ github.workspace }}/app/build/outputs/apk/release/app-release-unsigned-signed.apk ${{ github.workspace }}/app/build/outputs/apk/release/fcmfix-ci-${{ env.VERSION_NAME }}.apk
    
    - name: Upload built apk
      uses: actions/upload-artifact@v3
      with:
        name: release
        path: ${{ github.workspace }}/app/build/outputs/apk/release/fcmfix-ci-${{ env.VERSION_NAME }}.apk

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        name: ""Auto Release ${{ env.VERSION_NAME }}""
        tag_name: ${{ env.VERSION_CODE }}-${{ env.VERSION_NAME }}
        token: ""${{ secrets.TOKEN }}""
        files: |
          ${{ github.workspace }}/app/build/outputs/apk/release/fcmfix-ci-${{ env.VERSION_NAME }}.apk
    
    - name: Release lsposed module repository
      if: ${{ github.event_name == 'push' && contains(github.event.head_commit.modified, 'app/build.gradle') }}
      uses: softprops/action-gh-release@v2
      with:
        name: ""Auto Release ${{ env.VERSION_NAME }}""
        tag_name: ${{ env.VERSION_CODE }}-${{ env.VERSION_NAME }}
        repository: Xposed-Modules-Repo/com.kooritea.fcmfix
        token: ""${{ secrets.TOKEN }}""
        files: |
          ${{ github.workspace }}/app/build/outputs/apk/release/fcmfix-ci-${{ env.VERSION_NAME }}.apk

---
"
SummerSec;ShiroAttack2;SummerSec/ShiroAttack2;https://github.com/SummerSec/ShiroAttack2;https://api.github.com/repos/SummerSec/ShiroAttack2;master;13/06/2021 05:44;19/04/2024 08:04;FALSE;
19MisterX98;SeedcrackerX;19MisterX98/SeedcrackerX;https://github.com/19MisterX98/SeedcrackerX;https://api.github.com/repos/19MisterX98/SeedcrackerX;master;07/09/2020 14:39;20/04/2024 08:17;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build

on:
  push:
    paths-ignore:
      - '*.md'
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'zulu'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: |
        ./gradlew apiJar
        ./gradlew remapApiJar
        ./gradlew build
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      if: github.ref != format('refs/heads/{0}', github.event.repository.default_branch) # Only runs if this CI was NOT triggered by the default branch
      with:
        name: build
        path: build/libs/*
    
    - name: Remove *-dev.jar
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)  # Only runs if this CI was triggered by the default branch
      run: rm ./build/libs/*-dev.jar || true
    - name: Remove *-api.jar
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)  # Only runs if this CI was triggered by the default branch
      run: rm ./build/libs/*-api.jar || true
    - name: Create prerelease
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)  # Only runs if this CI was triggered by the default branch
      uses: ""marvinpinto/action-automatic-releases@latest""
      with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""prerelease""
          prerelease: true
          title: ""Prerelease Build""
          files: |
            ./build/libs/*.jar
    

---
"
funkygao;cp-ddd-framework;funkygao/cp-ddd-framework;https://github.com/funkygao/cp-ddd-framework;https://api.github.com/repos/funkygao/cp-ddd-framework;master;07/09/2020 16:03;22/04/2024 03:58;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
name: ""CodeQL""

on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    - cron: '0 6 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # Override automatic language detection by changing the below list
        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
        language: ['java']
        # Learn more...
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    - name: Setup Java JDK
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

---
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Package

on:
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CODECOV_TOKEN:: ${{ secrets.CODECOV_TOKEN }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: 'Generate coverage report'
      run: mvn clean verify -Ptest
    - name: 'Upload coverage to Codecov'
      uses: codecov/codecov-action@v1

---
"
hanxinhao000;ZeroTermux;hanxinhao000/ZeroTermux;https://github.com/hanxinhao000/ZeroTermux;https://api.github.com/repos/hanxinhao000/ZeroTermux;main;18/06/2021 09:29;22/04/2024 05:38;FALSE;
su18;MemoryShell;su18/MemoryShell;https://github.com/su18/MemoryShell;https://api.github.com/repos/su18/MemoryShell;main;21/06/2021 03:14;22/04/2024 12:15;FALSE;
Lotus6;ThinkphpGUI;Lotus6/ThinkphpGUI;https://github.com/Lotus6/ThinkphpGUI;https://api.github.com/repos/Lotus6/ThinkphpGUI;main;22/06/2021 17:01;22/04/2024 08:17;FALSE;
dromara;RuoYi-Vue-Plus;dromara/RuoYi-Vue-Plus;https://github.com/dromara/RuoYi-Vue-Plus;https://api.github.com/repos/dromara/RuoYi-Vue-Plus;5.X;23/06/2021 08:32;22/04/2024 07:52;FALSE;
dromara;RuoYi-Cloud-Plus;dromara/RuoYi-Cloud-Plus;https://github.com/dromara/RuoYi-Cloud-Plus;https://api.github.com/repos/dromara/RuoYi-Cloud-Plus;2.X;23/06/2021 08:50;22/04/2024 08:20;FALSE;
kumaransg;LLD;kumaransg/LLD;https://github.com/kumaransg/LLD;https://api.github.com/repos/kumaransg/LLD;main;23/06/2021 12:59;22/04/2024 07:37;FALSE;
f0ng;poc2jar;f0ng/poc2jar;https://github.com/f0ng/poc2jar;https://api.github.com/repos/f0ng/poc2jar;main;03/07/2021 06:11;19/04/2024 05:36;FALSE;
j3ers3;Hello-Java-Sec;j3ers3/Hello-Java-Sec;https://github.com/j3ers3/Hello-Java-Sec;https://api.github.com/repos/j3ers3/Hello-Java-Sec;master;04/07/2021 07:32;22/04/2024 10:19;FALSE;
ChenJunsen;Hegui3.0;ChenJunsen/Hegui3.0;https://github.com/ChenJunsen/Hegui3.0;https://api.github.com/repos/ChenJunsen/Hegui3.0;master;07/07/2021 02:07;17/04/2024 03:16;FALSE;
TheoKanning;openai-java;TheoKanning/openai-java;https://github.com/TheoKanning/openai-java;https://api.github.com/repos/TheoKanning/openai-java;main;15/09/2020 04:58;22/04/2024 07:59;TRUE;"name: Publish

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 8

    - name: Test
      run: ./gradlew test
      env:
        OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}

    - name: Publish
      run: ./gradlew build publish --no-parallel
      env:
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_KEY_PASSWORD }}

---
name: Compile

on:
  pull_request:
    branches: [ main ]

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 8

    - name: Compile
      run: ./gradlew compileJava compileTestJava

---
name: Test

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 1.8
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 8

    - name: Test
      run: ./gradlew test --stacktrace
      env:
        OPENAI_TOKEN: ${{ secrets.OPENAI_TOKEN }}

---
"
MinaMichita;MiuiEULocalizationToolsBox;MinaMichita/MiuiEULocalizationToolsBox;https://github.com/MinaMichita/MiuiEULocalizationToolsBox;https://api.github.com/repos/MinaMichita/MiuiEULocalizationToolsBox;main;12/07/2021 07:32;19/04/2024 05:02;FALSE;
zmops;zeus-iot;zmops/zeus-iot;https://github.com/zmops/zeus-iot;https://api.github.com/repos/zmops/zeus-iot;develop;15/07/2021 16:56;22/04/2024 08:01;FALSE;
safe6Sec;ShiroExp;safe6Sec/ShiroExp;https://github.com/safe6Sec/ShiroExp;https://api.github.com/repos/safe6Sec/ShiroExp;master;16/07/2021 17:20;20/04/2024 08:46;FALSE;
openjdk;jol;openjdk/jol;https://github.com/openjdk/jol;https://api.github.com/repos/openjdk/jol;master;24/09/2020 10:57;21/04/2024 16:56;TRUE;"name: JOL Pre-Integration Tests

on:
  push:
    branches-ignore:
      - master
      - pr/*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [8, 11, 17, 20, 21-ea]
        os: [ubuntu-22.04, windows-2022, macos-11]
      fail-fast: false
    name: Test JDK ${{ matrix.java }}, ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build all without tests
      run: mvn clean install -DskipTests -B --file pom.xml
    - name: Run tests
      run: mvn test -B --file pom.xml

---
"
cami-la;desafio-poo-dio;cami-la/desafio-poo-dio;https://github.com/cami-la/desafio-poo-dio;https://api.github.com/repos/cami-la/desafio-poo-dio;master;20/07/2021 00:33;10/04/2024 02:08;FALSE;
devopshydclub;vprofile-project;devopshydclub/vprofile-project;https://github.com/devopshydclub/vprofile-project;https://api.github.com/repos/devopshydclub/vprofile-project;vp-rem;24/09/2020 17:43;21/04/2024 15:05;TRUE;"name: Build Workflow
on: workflow_dispatch
jobs:
  first-job:
    runs-on: ubuntu-latest
    steps:
     - name: Fetch Source coce
       uses: actions/checkout@v4
     - name: Build artifacts
       run: | 
          mvn install
          mv target/vprofile-v2.war .
          rm -rf target
          mkdir target
          mv vprofile-v2.war target/
          ls -l target/
          

---
"
fnuecke;oc2;fnuecke/oc2;https://github.com/fnuecke/oc2;https://api.github.com/repos/fnuecke/oc2;1.18-forge;26/09/2020 20:03;02/04/2024 17:40;TRUE;"name: build

on:
  pull_request:
  push:
    branches: [ '**' ]

jobs:
  build:
    strategy:
      matrix:
        java: [ 17 ]
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build
        env:
          GPR_USER: ${{ secrets.GPR_USER }}
          GPR_KEY: ${{ secrets.GPR_KEY }}

---
name: publish

on:
  release:
    types: [published]

jobs:
  publish-github:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Extract Version from Tag
        uses: rishabhgupta/split-by@v1
        id: split_tag
        with:
          string: ${{ github.event.release.tag_name }}
          split-by: '/'

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ubuntu-latest-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ubuntu-latest-gradle-
      - name: Build with Gradle
        run: ./gradlew -Psemver='${{ steps.split_tag.outputs._1 }}' build
        env:
          GPR_USER: ${{ secrets.GPR_USER }}
          GPR_KEY: ${{ secrets.GPR_KEY }}

      - name: Add Artifacts to Github Release
        uses: alexellis/upload-assets@0.3.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '[""./build/libs/*.jar""]'

      - name: Publish to Github Packages
        run: gradle -Psemver='${{ steps.split_tag.outputs._1 }}' publish
        env:
          GPR_USER: ${{ secrets.GPR_USER }}
          GPR_KEY: ${{ secrets.GPR_KEY }}
          GITHUB_MAVEN_URL: 'https://maven.pkg.github.com/${{ github.repository }}'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-curse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Extract Version from Tag
        uses: rishabhgupta/split-by@v1
        id: split_tag
        with:
          string: ${{ github.event.release.tag_name }}
          split-by: '/'

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ubuntu-latest-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ubuntu-latest-gradle-

      # Set Curseforge release type based on pre-release flag.
      - name: Set release type to 'release'
        run: |
          echo ""CURSEFORGE_RELEASE_TYPE=release"" >> $GITHUB_ENV
        if: github.event.release.prerelease == false
      - name: Set release type to 'alpha'
        run: |
          echo ""CURSEFORGE_RELEASE_TYPE=alpha"" >> $GITHUB_ENV
        if: github.event.release.prerelease == true

      - name: Publish to Curseforge
        run: ./gradlew -Psemver='${{ steps.split_tag.outputs._1 }}' curseforge
        env:
          GPR_USER: ${{ secrets.GPR_USER }}
          GPR_KEY: ${{ secrets.GPR_KEY }}
          CURSEFORGE_API_KEY: ${{ secrets.CURSEFORGE_API_KEY }}
          CURSEFORGE_RELEASE_TYPE: ${{ env.CURSEFORGE_RELEASE_TYPE }}
          CHANGELOG: ${{ github.event.release.body }}

---
"
awspring;spring-cloud-aws;awspring/spring-cloud-aws;https://github.com/awspring/spring-cloud-aws;https://api.github.com/repos/awspring/spring-cloud-aws;main;01/10/2020 00:40;19/04/2024 19:19;TRUE;"name: Java CI with Maven

on:
  push:
    branches: [ main, 2.3.x, 2.4.x, 3.0.x, 3.1.x ]
  pull_request:
    branches: [ main, 2.3.x, 2.4.x, 3.0.x, 3.1.x ]

permissions:
  contents: read

jobs:
  build:
    name: ""Test with ${{ matrix.version }}""
    strategy:
      matrix:
        version: [ 17.0.1-tem, 21-tem ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Download ${{ matrix.version }}
        uses: sdkman/sdkman-action@master
        id: sdkman
        with:
          candidate: java
          version: ${{ matrix.version }}
      - name: Set up ${{ matrix.version }}
        uses: actions/setup-java@v1
        with:
          java-version: 8
          jdkFile: ${{ steps.sdkman.outputs.file }}
      - name: Build with Maven
        run: ./mvnw -V -B verify -Pspring
  sonar:
    name: ""Run Sonar Analysis""
    runs-on: ubuntu-latest
    # Disable Sonar for foreign PRs
    if: (github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository))
    steps:
      - uses: actions/checkout@v2
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Download JDK
        uses: sdkman/sdkman-action@master
        id: sdkman
        with:
          candidate: java
          version: 17.0.1-tem
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
          jdkFile: ${{ steps.sdkman.outputs.file }}
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -V -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage,spring

---
name: Issue triager
on:
  issues:
    types: [opened]

permissions:
  contents: read

jobs:
  label:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - uses: damccorm/tag-ur-it@master
        with:
          repo-token: ""${{ secrets.GITHUB_TOKEN }}""
          configuration-path: ""./.github/triage-rules.yml""

      - if: always()
        uses: actions/github-script@0.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['status: waiting-for-triage']
            })

---
name: ""Pull Request Labeler""
on: 
- pull_request_target

permissions:
  contents: read

jobs:
  triage:
    permissions:
      contents: read  # for actions/labeler to determine modified files
      pull-requests: write  # for actions/labeler to add labels to PRs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/labeler@v2
      with:
        repo-token: ""${{ secrets.GITHUB_TOKEN }}""

---
name: Release

on:
  push:
    tags:
      - v2.3.*
      - v2.4.*
      - v3.0.*
      - v3.1.*
      - v3.2.*

env:
  # https://github.com/actions/checkout/issues/440#issuecomment-854240996
  AWS_EC2_METADATA_DISABLED: true

permissions:
  contents: read

jobs:
  build:
    name: ""Release""
    strategy:
      matrix:
        version: [ 17.0.1-tem ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      - name: Download ${{ matrix.version }}
        uses: sdkman/sdkman-action@master
        id: sdkman
        with:
          candidate: java
          version: ${{ matrix.version }}
      - name: Set up ${{ matrix.version }}
        uses: actions/setup-java@v1
        with:
          java-version: 8
          jdkFile: ${{ steps.sdkman.outputs.file }}
          server-id: ossrh-awspring
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Run tests
        run: ./mvnw -V verify javadoc:aggregate -Pspring,docs-classic
      - name: Deploy to Sonatype
        run: ./mvnw -V -Prelease,spring deploy -DskipTests
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_AWS_SECRET_KEY }}
        run: |
          aws s3 sync --acl public-read docs/target/generated-docs/ s3://awspring-docs/spring-cloud-aws/docs/
          aws s3 sync --acl public-read target/site/ s3://awspring-docs/spring-cloud-aws/docs/
          aws cloudfront create-invalidation --distribution-id EA7LER7CI960A --paths ""/*""

---
name: Build and upload docs

on:
  push:
    branches:
      - main
      - 3.1.x
      - 3.0.x
      - 2.4.x
      - 2.3.x
      - 2.2.x

env:
  # https://github.com/actions/checkout/issues/440#issuecomment-854240996
  AWS_EC2_METADATA_DISABLED: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: sdkman/sdkman-action@master
        id: sdkman
        with:
          candidate: java
          version: '17.0.1-tem'
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: 8
          distribution: 'adopt'
          cache: 'maven'
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build docs
        run: ./mvnw clean package javadoc:aggregate -Pdocs-classic,spring -DskipTests=true -e
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_AWS_SECRET_KEY }}
        run: |
          aws s3 sync --acl public-read docs/target/generated-docs/ s3://awspring-docs/spring-cloud-aws/docs/
          aws s3 sync --acl public-read target/site/ s3://awspring-docs/spring-cloud-aws/docs/
          aws cloudfront create-invalidation --distribution-id EA7LER7CI960A --paths ""/*""

---
"
fm-sys;snapdrop-android;fm-sys/snapdrop-android;https://github.com/fm-sys/snapdrop-android;https://api.github.com/repos/fm-sys/snapdrop-android;master;06/10/2020 11:01;22/04/2024 08:36;TRUE;"name: APK Build
on: 
  push:
    branches:
      - master

  pull_request:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Build the app
        run: |
          chmod +x gradlew
          ./gradlew build
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error

---
name: Generate reverse translations
on:
  pull_request:

jobs:
  translate:
    if: ${{ github.head_ref == 'l10n_master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get Pull Request Number
        id: pr
        run: echo ""pull_request_number=$(gh pr view l10n_master --json number -q .number || echo """")"" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Translate
        id: translate
        # we can give directory path that contains action.yaml or repo address in username/repository_name@version format
        # in our case it would be nashmaniac/create-issue-action@v1.0 where v1.0 is the version of action
        # for now we will give directory path. The directory must contain action.yaml
        uses: ./translation-validation-bot/
        # pass user input as arguments
        with:
          pr: ${{ steps.pr.outputs.pull_request_number }}
      # Temporarily disable console output, as it can't handle <""> characters correctly 
      #- name: Display translations
      #  run: |
      #    echo ""${{ steps.translate.outputs.content }}""
      - name: Update PR description
        uses: riskledger/update-pr-description@v2
        with:
          body: ${{ steps.translate.outputs.content }}
          token: ${{ secrets.GITHUB_TOKEN }}

---
"
wh1t3p1g;tabby;wh1t3p1g/tabby;https://github.com/wh1t3p1g/tabby;https://api.github.com/repos/wh1t3p1g/tabby;master;09/10/2020 13:53;19/04/2024 08:32;TRUE;"name: Test Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: 'Test Build'
    runs-on: ubuntu-latest
    steps:
      - name: 'checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        name: 'Setup JDK'
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew bootJar

---
name: build-release
run-name: Build And Release Tabby

on:
  push:
    tags:
      - 'v*'

jobs:
  build_release:
    runs-on: ubuntu-latest
    name: build_release
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build
        run: |
          ./gradlew bootJar
          echo ""artifactPath=$(pwd)"" >> $GITHUB_ENV
          version=$(cat VERSION) 
          tag=${GITHUB_REF_NAME}
          echo ""version=$version"" >> $GITHUB_ENV
          echo ""tag=$tag"" >> $GITHUB_ENV
          cp build/libs/tabby.jar .
          zip -r tabby.zip . -x ""build/*"" "".github/*"" ""cyphers/*"" "".git/*"" ""doc/*"" ""gradle/*"" ""src/*"" "".gitignore"" ""README.md"" ""*gradle*""
          rm tabby.jar

      # debug
      - run: echo version is ${{ env.version }}
      - run: echo tag is ${{ env.tag }}

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ env.tag }}
          tag_name: ${{ env.tag }}
          body: RELEASE:${{ env.version }}. Generated By Github Actions.
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.artifactPath }}/tabby.zip
          asset_name: tabby.zip
          asset_content_type: application/zip

---
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  release:
    types: [created]

jobs:
  build:
    name: 'Test Build'
    runs-on: ubuntu-latest
    steps:
      - name: 'checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        name: 'Setup JDK'
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew bootJar
---
"
palexdev;MaterialFX;palexdev/MaterialFX;https://github.com/palexdev/MaterialFX;https://api.github.com/repos/palexdev/MaterialFX;main;16/10/2020 01:29;20/04/2024 14:14;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17.0.2
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test

---
"
zfdang;Android-Touch-Helper;zfdang/Android-Touch-Helper;https://github.com/zfdang/Android-Touch-Helper;https://api.github.com/repos/zfdang/Android-Touch-Helper;master;16/10/2020 02:58;21/04/2024 14:17;TRUE;"# This is a basic workflow to help you get started with Actions

name: Build_TouchHelper_APK

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths-ignore:
      - .github/workflows
      - 'docs/**'
      - README.md
  pull_request:
    branches: [ master ]
    paths-ignore:
      - .github/workflows
      - 'docs/**'
      - README.md

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: checkout codes
      uses: actions/checkout@v2
      with:
        fetch-depth: '0' # 0 indicates all history, this is needed for git revision 

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Assemble Release APK
      run: ./gradlew assembleRelease --stacktrace
  
    - name: Upload APK to artifacts
      uses: actions/upload-artifact@v1
      with:
        name: TouchHelper
        path: ./app/build/outputs/apk/
        
    - name: Create ZIPs
      working-directory: ./app/build/outputs/apk/
      run: |
        zip -r ./TouchHelper.zip ./release

    - name: Get git revision
      id: get_git_revision
      run: |
        echo ""::set-output name=tag_name::$(($(git rev-list HEAD --count) + 100))""
        echo ""::set-output name=release_name::$(($(git rev-list HEAD --count) + 100))""

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: tag-${{ steps.get_git_revision.outputs.tag_name }}
          release_name: Release ${{ steps.get_git_revision.outputs.release_name }}
          draft: false
          prerelease: false

    - name: Upload Release APK
      id: upload-release-asset-images
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./app/build/outputs/apk/TouchHelper.zip
          asset_name: TouchHelper.zip
          asset_content_type: application/zip

---
"
kunal-kushwaha;DSA-Bootcamp-Java;kunal-kushwaha/DSA-Bootcamp-Java;https://github.com/kunal-kushwaha/DSA-Bootcamp-Java;https://api.github.com/repos/kunal-kushwaha/DSA-Bootcamp-Java;main;30/07/2021 14:23;22/04/2024 07:39;FALSE;
fit2cloud;riskscanner;fit2cloud/riskscanner;https://github.com/fit2cloud/riskscanner;https://api.github.com/repos/fit2cloud/riskscanner;master;20/10/2020 08:28;21/04/2024 02:46;TRUE;"
name: Create Release And Upload assets

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Create Release File To Upload
        id: create_release_file
        env:
          RELEASE_VERSION: ${{github.ref}}
        run: |
          git clone https://github.com/riskscanner/riskscanner-installer.git --depth=1
          cd riskscanner-installer
          rm -rf hudson.* .travis.yml .git .github
          chmod +x rsctl.sh
          cd ..
          version=`echo ${RELEASE_VERSION##*/}`
          filename=riskscanner-installer-$version
          mv riskscanner-installer $filename
          echo $version > $filename/config_init/conf/version
          sed -i ""s@VERSION=.*@VERSION=${version}@g"" $filename/static.env
          sed -i ""s@Version=.*@Version=${version}@g"" $filename/quick_start.sh
          tar -czvf $filename.tar.gz $filename
          echo ""::set-output name=VERSION::$(echo $version)""
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            # 快速开始
            仅需两步快速安装 RiskScanner：
              1.  准备一台不小于 4 G内存的 64位 Linux 主机；
              2.  以 root 用户执行如下命令一键安装 RiskScanner。
            ```sh
              curl -sSL https://github.com/riskscanner/riskscanner/releases/latest/download/quick_start.sh | bash
            ```
            如果您已经部署旧版本，可通过如下命令一键升级至最新版本:
            ```sh
              # 升级
              ./rsctl.sh check_update
            ```
            # 产品文档
            点击 [完整文档](https://docs.riskscanner.io/) 查看完整的安装和使用文档
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./riskscanner-installer-${{ steps.create_release_file.outputs.VERSION }}.tar.gz
          asset_name: riskscanner-installer-${{ steps.create_release_file.outputs.VERSION }}.tar.gz
          asset_content_type: application/zip

      - name: Upload Quick Start Script
        id: upload-release-quick-start-shell
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./riskscanner-installer-${{ steps.create_release_file.outputs.VERSION }}/quick_start.sh
          asset_name: quick_start.sh
          asset_content_type: application/text

---
"
gz-yami;mall4cloud;gz-yami/mall4cloud;https://github.com/gz-yami/mall4cloud;https://api.github.com/repos/gz-yami/mall4cloud;master;04/08/2021 05:04;21/04/2024 16:43;FALSE;
apache;rocketmq-dashboard;apache/rocketmq-dashboard;https://github.com/apache/rocketmq-dashboard;https://api.github.com/repos/apache/rocketmq-dashboard;master;09/08/2021 13:30;16/04/2024 13:57;FALSE;
w2016561536;android_virtual_cam;w2016561536/android_virtual_cam;https://github.com/w2016561536/android_virtual_cam;https://api.github.com/repos/w2016561536/android_virtual_cam;master;13/08/2021 07:44;22/04/2024 03:42;FALSE;
xiaojieonly;Ehviewer_CN_SXJ;xiaojieonly/Ehviewer_CN_SXJ;https://github.com/xiaojieonly/Ehviewer_CN_SXJ;https://api.github.com/repos/xiaojieonly/Ehviewer_CN_SXJ;BiLi_PC_Gamer;09/11/2020 07:14;22/04/2024 13:31;TRUE;"name: Build

on:
  push:
    branches: [ BiLi_PC_Gamer ]
  pull_request:
    branches: [ BiLi_PC_Gamer ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Build
        run: |
          chmod +x ./gradlew
          ./gradlew clean app:assembleDebug
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: ./app/build/outputs/apk/
---
"
shatyuka;Zhiliao;shatyuka/Zhiliao;https://github.com/shatyuka/Zhiliao;https://api.github.com/repos/shatyuka/Zhiliao;master;09/11/2020 08:17;22/04/2024 13:04;TRUE;"name: Android CI

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Setup JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Retrieve version
        run: |
          echo VERSION=$(echo ${{ github.event.head_commit.id }} | head -c 10) >> $GITHUB_ENV
      - name: Write key
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
        run: |
          if [ ! -z ""${{ secrets.KEY_STORE }}"" ]; then
            echo releaseStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> gradle.properties
            echo releaseKeyAlias='${{ secrets.ALIAS }}' >> gradle.properties
            echo releaseKeyPassword='${{ secrets.KEY_PASSWORD }}' >> gradle.properties
            echo releaseStoreFile='key.jks' >> gradle.properties
            echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          fi
      - name: Build with Gradle
        run: bash ./gradlew -PappVerName=${{ env.VERSION }} assembleRelease
      - name: Upload built apk
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: Zhiliao_${{ env.VERSION }}
          path: ${{ github.workspace }}/app/build/outputs/apk/release
      - name: Send commit to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |+
            New push to github!
            *${{ github.event.head_commit.message }}* by ${{ github.event.head_commit.author.name }}
            See commit detail [here](${{ github.event.head_commit.url }})
            Snapshot apk is attached
          document: ${{ github.workspace }}/app/build/outputs/apk/release/Zhiliao_${{ env.VERSION }}.apk

  skipped:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - uses: actions/checkout@v2
      - name: Send commit to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |+
            New push to github!
            *${{ github.event.head_commit.message }}* by ${{ github.event.head_commit.author.name }}
            See commit detail [here](${{ github.event.head_commit.url }})
            This push skipped building

---
"
ffffffff0x;BerylEnigma;ffffffff0x/BerylEnigma;https://github.com/ffffffff0x/BerylEnigma;https://api.github.com/repos/ffffffff0x/BerylEnigma;master;11/11/2020 11:07;22/04/2024 05:12;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    tags:
    - ""**""

jobs:
  win-build:
    runs-on: windows-latest

    outputs:
      output1: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Jlink with Maven
      run: mvn javafx:jlink --file pom.xml

    - name: Jpackage
      run: cd jpackage && jpackage -n BE-BerylEnigma --app-version ${{ github.ref_name }} -m ""beryenigma/ffffffff0x.beryenigma.Main"" --runtime-image ..\target\beryenigma --dest ..\target\ --java-options ""-Djava.class.path=.\runtime\ext\bcprov-jdk18on-171.jar --add-opens=java.base/java.lang.reflect=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix --add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix --add-exports=javafx.base/com.sun.javafx.event=com.jfoenix --add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix --add-exports=javafx.graphics/com.sun.javafx.scene=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix"" --icon .\ico\BerylEnigma.ico --type app-image --description ""BerylEnigma"" --vendor ""RyuZU,ffffffff0x"" --copyright ""Copyright 2022 ffffffff0x,MIT License""

    - name: Show target dir
      run: ls target

    - name: Add new sec file
      run: cd jpackage && xcopy .\conf\java.security ..\target\BE-BerylEnigma\runtime\conf\security\ /y

    - name: Add ext jar
      run: cd jpackage && xcopy .\ext ..\target\BE-BerylEnigma\runtime\ext\

    - name: Download 7z
      run: powershell -c ""invoke-webrequest -uri https://github.com/RyuZUSUNC/Archive/raw/main/ArchiveUtils/7z.exe -outfile 7z.exe""

    - name: Zip the Build
      run: 7z.exe a BE-BerylEnigma-win.zip .\target\BE-BerylEnigma

    - name: Show file dir
      run: ls

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: TODO New Release.
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./BE-BerylEnigma-win.zip
        asset_name: BE-BerylEnigma-win.zip
        asset_content_type: application/zip

  linux-build:
    needs: win-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Jlink with Maven
        run: mvn javafx:jlink --file pom.xml

      - name: Jpackage
        run: cd jpackage && jpackage -n BE-BerylEnigma --app-version ${{ github.ref_name }} -m ""beryenigma/ffffffff0x.beryenigma.Main"" --runtime-image ../target/beryenigma --dest ../target/ --java-options ""-Djava.class.path=../lib/runtime/ext/bcprov-jdk18on-171.jar --add-opens=java.base/java.lang.reflect=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix --add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix --add-exports=javafx.base/com.sun.javafx.event=com.jfoenix --add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix --add-exports=javafx.graphics/com.sun.javafx.scene=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix"" --icon ./ico/BerylEnigma.png --type app-image --description ""BerylEnigma"" --vendor ""RyuZU,ffffffff0x"" --copyright ""Copyright 2022 ffffffff0x,MIT License""

      - name: Show target dir
        run: ls target

      - name: Del old sec file
        run: cd jpackage && rm -rf ../target/BE-BerylEnigma/lib/runtime/conf/security/java.security

      - name: Add new sec file
        run: cd jpackage && cp -rf ./conf/java.security ../target/BE-BerylEnigma/lib/runtime/conf/security/java.security

      - name: Add ext jar
        run: cd jpackage && cp -rf ./ext ../target/BE-BerylEnigma/lib/runtime/ext

      - name: Zip the Build
        run: cd target && zip -r ../BE-BerylEnigma-linux.zip BE-BerylEnigma

      - name: Show file dir
        run: ls

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.win-build.outputs.output1 }}
          asset_path: ./BE-BerylEnigma-linux.zip
          asset_name: BE-BerylEnigma-linux.zip
          asset_content_type: application/zip

  mac-build:
    needs: win-build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Jlink with Maven
        run: mvn javafx:jlink --file pom.xml

      - name: Jpackage
        run: cd jpackage && jpackage -n BE-BerylEnigma --app-version ${{ github.ref_name }} -m ""beryenigma/ffffffff0x.beryenigma.Main"" --runtime-image ../target/beryenigma --dest ../target/ --java-options ""-Djava.class.path=/Applications/BE-BerylEnigma.app/Contents/runtime/Contents/Home/ext/bcprov-jdk18on-171.jar --add-opens=java.base/java.lang.reflect=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix --add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix --add-exports=javafx.base/com.sun.javafx.event=com.jfoenix --add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix --add-exports=javafx.graphics/com.sun.javafx.scene=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix --add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix"" --icon ./ico/BerylEnigma.icns --type app-image --description ""BerylEnigma"" --vendor ""RyuZU,ffffffff0x"" --copyright ""Copyright 2022 ffffffff0x,MIT License""

      - name: Show target dir
        run: ls target

      - name: Del old sec file
        run: cd jpackage && rm -rf ../target/BE-BerylEnigma.app/Contents/runtime/Contents/Home/conf/security/java.security

      - name: Add new sec file
        run: cd jpackage && cp -rf ./conf/mac_java.security ../target/BE-BerylEnigma.app/Contents/runtime/Contents/Home/conf/security/java.security

      - name: Add ext jar
        run: cd jpackage && cp -rf ./ext ../target/BE-BerylEnigma.app/Contents/runtime/Contents/Home/ext

      - name: Zip the Build
        run: cd target && zip -r ../BE-BerylEnigma-mac.zip BE-BerylEnigma.app

      - name: Show file dir
        run: ls

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.win-build.outputs.output1 }}
          asset_path: ./BE-BerylEnigma-mac.zip
          asset_name: BE-BerylEnigma-mac.zip
          asset_content_type: application/zip
---
"
guyijie1211;JustLive-Android;guyijie1211/JustLive-Android;https://github.com/guyijie1211/JustLive-Android;https://api.github.com/repos/guyijie1211/JustLive-Android;master;16/08/2021 17:19;22/04/2024 09:49;FALSE;
rhs0266;FastCampus;rhs0266/FastCampus;https://github.com/rhs0266/FastCampus;https://api.github.com/repos/rhs0266/FastCampus;main;13/11/2020 15:48;18/04/2024 00:41;TRUE;"name: Mark stale issues and pull requests

on:
  schedule:
  - cron: ""30 1 * * *""

jobs:
  stale:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/stale@v3
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: 'Stale issue message'
        stale-pr-message: 'Stale pull request message'
        stale-issue-label: 'no-issue-activity'
        stale-pr-label: 'no-pr-activity'

---
"
realpdai;tech-pdai-spring-demos;realpdai/tech-pdai-spring-demos;https://github.com/realpdai/tech-pdai-spring-demos;https://api.github.com/repos/realpdai/tech-pdai-spring-demos;main;17/08/2021 14:36;21/04/2024 17:31;FALSE;
TGX-Android;Telegram-X;TGX-Android/Telegram-X;https://github.com/TGX-Android/Telegram-X;https://api.github.com/repos/TGX-Android/Telegram-X;main;17/08/2021 19:09;22/04/2024 11:09;FALSE;
bytedance;CodeLocator;bytedance/CodeLocator;https://github.com/bytedance/CodeLocator;https://api.github.com/repos/bytedance/CodeLocator;main;19/08/2021 02:19;21/04/2024 08:54;FALSE;
xnbox;DeepfakeHTTP;xnbox/DeepfakeHTTP;https://github.com/xnbox/DeepfakeHTTP;https://api.github.com/repos/xnbox/DeepfakeHTTP;main;21/08/2021 10:41;15/04/2024 22:37;FALSE;
thingsboard;tbmq;thingsboard/tbmq;https://github.com/thingsboard/tbmq;https://api.github.com/repos/thingsboard/tbmq;main;24/11/2020 13:08;14/04/2024 02:45;TRUE;"#
# Copyright © 2016-2024 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: License header format

on:
  push:
    branches:
      - 'main'
      - 'develop/*'

jobs:
  license-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto' # https://github.com/actions/setup-java?tab=readme-ov-file#supported-distributions
          java-version: '21'
          cache: 'maven' # https://github.com/actions/setup-java?tab=readme-ov-file#caching-sbt-dependencies

      - name: License header format
        run: mvn -T 1C license:format

      - name: License header format (msa/black-box-tests/)
        run: mvn -T 1C license:format -f msa/black-box-tests/

      - name: Set Git user information
        run: |
          git config user.name ""ThingsBoard Bot""
          git config user.email ""noreply@thingsboard.io""
      - name: Check and push changes
        run: |
          git diff --exit-code || git commit -am ""License header format"" && git push

---
"
cami-la;loops-e-arrays;cami-la/loops-e-arrays;https://github.com/cami-la/loops-e-arrays;https://api.github.com/repos/cami-la/loops-e-arrays;master;25/08/2021 00:39;21/04/2024 00:36;FALSE;
NativeVision;viro;NativeVision/viro;https://github.com/NativeVision/viro;https://api.github.com/repos/NativeVision/viro;main;27/11/2020 01:40;22/04/2024 05:44;TRUE;"# This action will run after a release is created and published on github.
# It will attempt to publish that release to NPM.

name: Viro React NPM publish
on:
  release:
    types: [published]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}

---
"
virjarRatel;ratel-core;virjarRatel/ratel-core;https://github.com/virjarRatel/ratel-core;https://api.github.com/repos/virjarRatel/ratel-core;master;26/08/2021 11:25;18/04/2024 18:06;FALSE;
TwitchRecover;TwitchRecover;TwitchRecover/TwitchRecover;https://github.com/TwitchRecover/TwitchRecover;https://api.github.com/repos/TwitchRecover/TwitchRecover;master;28/11/2020 01:28;12/04/2024 17:41;TRUE;"# This workflow checks out code, performs a Codacy security scan
# and integrates the results with the
# GitHub Advanced Security code scanning feature.  For more information on
# the Codacy security scan action usage and parameters, see
# https://github.com/codacy/codacy-analysis-cli-action.
# For more information on Codacy Analysis CLI in general, see
# https://github.com/codacy/codacy-analysis-cli.

name: Codacy Security Scan

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.1.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master, release-2.0 ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '31 19 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
       make TwitchRecover.CLI.CLI

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

---
# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      

---
"
jreleaser;jreleaser;jreleaser/jreleaser;https://github.com/jreleaser/jreleaser;https://api.github.com/repos/jreleaser/jreleaser;main;28/11/2020 15:33;15/04/2024 19:57;TRUE;"name: Build

on:
  pull_request:

permissions:
  contents: read

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew build -S

---
name: Clear cache

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

jobs:
  clear:
    name: Delete all caches
    runs-on: ubuntu-latest
    steps:
      - name: Clear caches
        uses: easimon/wipe-cache@v2

---
name: CodeQL

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  security-events: write
  actions: write
  contents: read

jobs:
  precheck:
    name: Precheck
    uses: jreleaser/jreleaser/.github/workflows/step-precheck.yml@main
    secrets: inherit

  codeql:
    name: CodeQL
    needs: [precheck]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cancel previous run
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: zulu
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew build -S

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

---
name: EarlyAccess

on:
  push:
    branches: [ main ]

permissions:
  actions: write
  id-token: write
  contents: write

jobs:
  precheck:
    name: Precheck
    uses: jreleaser/jreleaser/.github/workflows/step-precheck.yml@main
    secrets: inherit

  jlink:
    name: Jlink
    needs: [precheck]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    uses: jreleaser/jreleaser/.github/workflows/step-jlink.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
    secrets:
      gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
      oci-compartment-id: ${{ secrets.JRELEASER_OCI_COMPARTMENTID }}

  jpackage:
    name: JPackage
    needs: [precheck, jlink]
    uses: jreleaser/jreleaser/.github/workflows/step-jpackage.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
      project-effective-version: early-access

  native-image:
    name: Native Image
    needs: [precheck, jlink]
    uses: jreleaser/jreleaser/.github/workflows/step-native-image.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
    secrets:
      gh-access-token: ${{ secrets.GIT_ACCESS_TOKEN }}

  release:
    name: Release
    needs: [precheck, jlink, jpackage, native-image]
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.slsa.outputs.HASHES }}
      tagname: ${{ steps.slsa.outputs.TAGNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: plugins

      - name: Download java-archive
        uses: actions/download-artifact@v4
        with:
          name: java-archive
          path: out/jreleaser/assemble/jreleaser/java-archive

      - name: Download jlink
        uses: actions/download-artifact@v4
        with:
          name: jlink
          path: out/jreleaser/assemble/jreleaser-standalone/jlink

      - name: Download jpackage
        uses: actions/download-artifact@v4
        with:
          pattern: jpackage-*
          merge-multiple: true
          path: out/jreleaser/assemble/jreleaser-installer/jpackage

      - name: Download native-image
        uses: actions/download-artifact@v4
        with:
          pattern: native-image-*
          merge-multiple: true
          path: out/jreleaser/assemble/jreleaser-native/native-image

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          version: early-access
          arguments: full-release
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: SLSA
        shell: bash
        id: slsa
        run: |
          echo ""HASHES=$(cat out/jreleaser/checksums/checksums_sha256.txt | base64 -w0)"" >> ""$GITHUB_OUTPUT""
          echo ""TAGNAME=$(grep tagName out/jreleaser/output.properties | awk -F'=' '{print $2}')"" >> ""$GITHUB_OUTPUT""

  provenance:
    name: Provenance
    needs: [precheck, release]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      base64-subjects: ${{ needs.release.outputs.hashes }}
      upload-assets: true
      upload-tag-name: ${{ needs.release.outputs.tagname }}
      provenance-name: jreleaser-all-${{ needs.release.outputs.tagname }}.intoto.jsonl

  update-wiki:
    name: Update Wiki
    needs: [precheck, release]
    uses: jreleaser/jreleaser/.github/workflows/step-update-wiki.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
      project-tag: ${{ needs.release.outputs.tagname }}
    secrets:
      gh-access-token: ${{ secrets.GIT_ACCESS_TOKEN }}

  update-bach-info:
    name: Update Bach Info
    needs: [precheck, release]
    uses: jreleaser/jreleaser/.github/workflows/step-update-bach-info.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
      project-tag: ${{ needs.release.outputs.tagname }}
    secrets:
      gh-access-token: ${{ secrets.GIT_ACCESS_TOKEN }}

---
name: Frogbot

on:
  push:
    branches: [ main ]

env:
  CI: true

permissions:
  contents: write
  actions: write
  pull-requests: write
  security-events: write

jobs:
  precheck:
    name: Precheck
    uses: jreleaser/jreleaser/.github/workflows/step-precheck.yml@main
    secrets: inherit

  frogbot:
    name: Frogbot
    needs: [precheck]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - uses: jfrog/frogbot@5d0e9daa940c15717f1258ada5d841dace6ed538
        env:
          JF_URL: ${{ secrets.JFROG_PLATFORM_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_OCI_COMPARTMENTID: ${{ secrets.JRELEASER_OCI_COMPARTMENTID }}

---
name: OpenSSF Scorecard
on:
  # Only the default branch is supported.
  branch_protection_rule:
  schedule:
    # Weekly on Saturdays.
    - cron: '30 1 * * 6'
  push:
    branches: [ main ]
  workflow_dispatch:

# Declare default permissions as read only.
permissions: read-all

jobs:
  precheck:
    name: Precheck
    uses: jreleaser/jreleaser/.github/workflows/step-precheck.yml@main
    secrets: inherit

  analysis:
    name: Scorecards analysis
    needs: [precheck]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    runs-on: ubuntu-latest
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      # Used to receive a badge. (Upcoming feature)
      id-token: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736  # tag=v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3.24.5
        with:
          sarif_file: results.sarif

---
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true

permissions:
  actions: write
  id-token: write
  contents: write

jobs:
  precheck:
    name: Precheck
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Version
        id: vars
        shell: bash
        run: |
          echo ""VERSION=${{ github.event.inputs.version }}"" >> $GITHUB_OUTPUT
          echo ${{ github.event.inputs.version }} > VERSION
          git add VERSION
          sed -i -e ""s/^\:project-version\:\ .*/:project-version: ${{ github.event.inputs.version }}/g"" README.adoc
          git config --global user.email ""${{ secrets.COMMIT_EMAIL }}""
          git config --global user.name ""Andres Almiray""
          git commit -a -m ""Releasing version ${{ github.event.inputs.version }}""
          git push origin main

  jlink:
    name: Jlink
    needs: [precheck]
    uses: jreleaser/jreleaser/.github/workflows/step-jlink.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
    secrets:
      gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
      oci-compartment-id: ${{ secrets.JRELEASER_OCI_COMPARTMENTID }}

  jpackage:
    name: JPackage
    needs: [precheck, jlink]
    uses: jreleaser/jreleaser/.github/workflows/step-jpackage.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
      project-effective-version: ${{ needs.precheck.outputs.version }}

  native-image:
    name: Native Image
    needs: [precheck, jlink]
    uses: jreleaser/jreleaser/.github/workflows/step-native-image.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
    secrets:
      gh-access-token: ${{ secrets.GIT_ACCESS_TOKEN }}

  release:
    name: Release
    needs: [precheck, jlink, jpackage, native-image]
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.slsa.outputs.HASHES }}
      tagname: ${{ steps.slsa.outputs.TAGNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: artifacts
          path: plugins

      - name: Download java-archive
        uses: actions/download-artifact@v4
        with:
          name: java-archive
          path: out/jreleaser/assemble/jreleaser/java-archive

      - name: Download jlink
        uses: actions/download-artifact@v4
        with:
          name: jlink
          path: out/jreleaser/assemble/jreleaser-standalone/jlink

      - name: Download jpackage
        uses: actions/download-artifact@v4
        with:
          pattern: jpackage-*
          merge-multiple: true
          path: out/jreleaser/assemble/jreleaser-installer/jpackage

      - name: Download native-image
        uses: actions/download-artifact@v4
        with:
          pattern: native-image-*
          merge-multiple: true
          path: out/jreleaser/assemble/jreleaser-native/native-image

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Deploy
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: |
          ./gradlew -Pprofile=sbom -PreproducibleBuild=true publishPlugins publish -S
          ./gradlew cleanupStagedRepository

      - name: Upload deploy artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: deploy
          path: |
            build/repos/local/release/

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          version: early-access
          arguments: full-release
        env:
          JRELEASER_PROJECT_VERSION: ${{ needs.precheck.outputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.JRELEASER_DOCKER_PASSWORD }}
          JRELEASER_SDKMAN_CONSUMER_KEY: ${{ secrets.SDKMAN_CONSUMER_KEY }}
          JRELEASER_SDKMAN_CONSUMER_TOKEN: ${{ secrets.SDKMAN_CONSUMER_TOKEN }}
          JRELEASER_TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
          JRELEASER_TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
          JRELEASER_TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          JRELEASER_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          JRELEASER_MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          JRELEASER_HTTP_NOTICEABLE_PASSWORD: ${{ secrets.NOTICEABLE_APIKEY }}
          JRELEASER_OPENCOLLECTIVE_TOKEN: ${{ secrets.OPENCOLLECTIVE_TOKEN }}
          NOTICEABLE_AUTHOR_EMAIL: ${{ secrets.NOTICEABLE_AUTHOR_EMAIL }}
          NOTICEABLE_PROJECTID: ${{ secrets.NOTICEABLE_PROJECTID }}
          JRELEASER_BLUESKY_HOST: ${{ secrets.BLUESKY_HOST }}
          JRELEASER_BLUESKY_HANDLE: ${{ secrets.BLUESKY_HANDLE }}
          JRELEASER_BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}

      - name: JReleaser release output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      - name: SLSA
        shell: bash
        id: slsa
        run: |
          echo ""HASHES=$(cat out/jreleaser/checksums/checksums_sha256.txt | base64 -w0)"" >> ""$GITHUB_OUTPUT""
          echo ""TAGNAME=$(grep tagName out/jreleaser/output.properties | awk -F'=' '{print $2}')"" >> ""$GITHUB_OUTPUT""

  provenance:
    name: Provenance
    needs: [precheck, release]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      base64-subjects: ${{ needs.release.outputs.hashes }}
      upload-assets: true
      upload-tag-name: ${{ needs.release.outputs.tagname }}
      provenance-name: jreleaser-all-${{ needs.precheck.outputs.version }}.intoto.jsonl

  update-wiki:
    name: Update Wiki
    needs: [precheck, release]
    uses: jreleaser/jreleaser/.github/workflows/step-update-wiki.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
      project-tag: ${{ needs.release.outputs.tagname }}
      template-params: '-PincludeSboms'
    secrets:
      gh-access-token: ${{ secrets.GIT_ACCESS_TOKEN }}

  update-bach-info:
    name: Update Bach Info
    needs: [precheck, release]
    uses: jreleaser/jreleaser/.github/workflows/step-update-bach-info.yml@main
    with:
      project-version: ${{ needs.precheck.outputs.version }}
      project-tag: ${{ needs.release.outputs.tagname }}
    secrets:
      gh-access-token: ${{ secrets.GIT_ACCESS_TOKEN }}

  update-website:
    name: Update Website
    needs: [precheck, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: jreleaser/jreleaser.github.io
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}

      - name: Download assets
        shell: bash
        run: |
          curl -sL https://raw.githubusercontent.com/jreleaser/jreleaser/main/.github/scripts/update-website.sh --output update-website.sh
          curl -sL ""https://github.com/jreleaser/jreleaser/releases/download/${TAG}/jreleaser-tool-provider-${VERSION}.jar"" --output jreleaser-cli.jar
        env:
          TAG: ${{ needs.release.outputs.tagname }}
          VERSION: ${{ needs.precheck.outputs.version }}

      - name: Commit
        shell: bash
        env:
          TAG: ${{ needs.release.outputs.tagname }}
          VERSION: ${{ needs.precheck.outputs.version }}
          GH_BOT_EMAIL: ${{ vars.GH_BOT_EMAIL }}
        run: |
          chmod +x update-website.sh
          ./update-website.sh

---
name: SmokeTests

on:
  push:
    branches: [ main ]

env:
  CI: true
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  JRELEASER_OCI_COMPARTMENTID: ${{ secrets.JRELEASER_OCI_COMPARTMENTID }}

permissions:
  contents: read
  actions: write

jobs:
  precheck:
    name: Precheck
    uses: jreleaser/jreleaser/.github/workflows/step-precheck.yml@main
    secrets: inherit

  build-cli:
    name: 'CLI ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-13  , args: '-xp docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '-xp docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          unzip -qo ../plugins/jreleaser/build/distributions/jreleaser-${{ needs.precheck.outputs.version }}.zip
          sed -i -e ""s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g"" pom.xml
          sed -i -e ""s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g"" build.xml
          sed -i -e ""s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g"" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo ""::group::➡️ build""
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          echo ""::endgroup::""
          echo ""::group::➡️ json-schema""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser json-schema
          echo ""::endgroup::""
          echo ""::group::➡️ env""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser env
          echo ""::endgroup::""
          echo ""::group::➡️ assemble""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser assemble -PoutputDir=out
          echo ""::endgroup::""
          echo ""::group::➡️ config""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser config -PoutputDir=out
          echo ""::endgroup::""
          echo ""::group::➡️ changelog""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser changelog -PoutputDir=out
          echo ""::endgroup::""
          echo ""::group::➡️ download""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser download -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ catalog""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser catalog -PoutputDir=out --select-current-platform
          echo ""::endgroup::""
          echo ""::group::➡️ checksum""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser checksum -PoutputDir=out --select-current-platform
          echo ""::endgroup::""
          echo ""::group::➡️ sign""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser sign -PoutputDir=out --select-current-platform
          echo ""::endgroup::""
          echo ""::group::➡️ deploy""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser deploy -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ upload""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser upload --select-current-platform -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ release""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser release --select-current-platform -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ prepare""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser prepare --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ package""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser package --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ publish""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser publish --select-current-platform -PoutputDir=out --dry-run ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ full-release""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser full-release -PoutputDir=out --select-current-platform --dry-run ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ announce""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser announce -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ template generate""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser template generate --announcer discord
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser template generate --assembler-type jlink --assembler-name app-standalone
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser template generate --packager brew --distribution app
          echo ""::endgroup::""
          echo ""::group::➡️ init""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser init --overwrite --format yml
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser init --overwrite --format toml
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser init --overwrite --format json
          echo ""::endgroup::""
          echo ""::group::➡️ auto-config""
          ./jreleaser-${{ needs.precheck.outputs.version }}/bin/jreleaser release --auto-config --dry-run
          echo ""::endgroup::""
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEASER_PROJECT_VERSION: 1.0.0
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JAVA_OPTS: '-javaagent:jacoco/jacocoagent.jar=includes=*jreleaser*,destfile=jreleaser-cli-${{ runner.os }}.exec'

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 7
          name: 'jreleaser-cli-${{ runner.os }}'
          path: |
            smoketests-jreleaser/out/jreleaser/trace.log
            smoketests-jreleaser/out/jreleaser/output.properties
            smoketests-jreleaser/out/jreleaser/release/CHANGELOG.md
            smoketests-jreleaser/out/jreleaser/prepare

      - name: JaCoCo upload
        if: always()
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: 'jacoco-cli-${{ runner.os }}'
          path: smoketests-jreleaser/*.exec

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          ./gradlew -stop
          rm -rf ~/.m2/repository/org/jreleaser
          rm -rf ~/.gradle/caches/modules-2/files-2.1/org.jreleaser          

  build-tool:
    name: 'Tool ${{ matrix.job.os }}'
    needs: [ precheck ]
    if: endsWith(${{ needs.precheck.outputs.version }}, '-SNAPSHOT')
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: macos-13  , args: '-xp docker' }
          - { os: ubuntu-latest , args: '' }
          - { os: windows-latest, args: '-xp docker' }
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Decrypt secrets
        shell: bash
        run: sh .github/scripts/decrypt-secrets.sh

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ vars.JAVA_VERSION }}
          distribution: ${{ vars.JAVA_DISTRO }}
          cache: gradle

      - name: Build
        shell: bash
        run: ./gradlew -PreproducibleBuild=true build publishToMavenLocal -S

      - name: Checkout smoketests repository
        uses: actions/checkout@v4
        with:
          repository: jreleaser/smoketests-jreleaser
          path: smoketests-jreleaser
          fetch-depth: 0
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: setup-java-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Prepare
        shell: bash
        run: |
          cd smoketests-jreleaser
          cp ../plugins/jreleaser-tool-provider/build/libs/jreleaser-tool-provider-${{ needs.precheck.outputs.version }}.jar jreleaser.jar
          sed -i -e ""s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g"" pom.xml
          sed -i -e ""s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g"" build.xml
          sed -i -e ""s/0.0.0-SNAPSHOT/${{ needs.precheck.outputs.version }}/g"" gradle.properties
          sh ../.github/scripts/jacoco-instrument.sh

      - name: Setup Graal
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ vars.GRAAL_VERSION }}
          java-version: ${{ vars.GRAAL_JAVA_VERSION }}
          github-token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: JReleaser
        shell: bash
        run: |
          cd smoketests-jreleaser
          echo ""::group::➡️ build""
          chmod +x gradlew
          ./gradlew build
          chmod +x mvnw
          ./mvnw -B -ntp deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          echo ""::endgroup::""
          echo ""::group::➡️ json-schema""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar json-schema
          echo ""::endgroup::""
          echo ""::group::➡️ env""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar env
          echo ""::endgroup::""
          echo ""::group::➡️ assemble""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar assemble -PoutputDir=out
          echo ""::endgroup::""
          echo ""::group::➡️ config""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar config -PoutputDir=out
          echo ""::endgroup::""
          echo ""::group::➡️ changelog""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar changelog -PoutputDir=out
          echo ""::endgroup::""
          echo ""::group::➡️ download""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar download -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ catalog""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar catalog -PoutputDir=out --select-current-platform
          echo ""::endgroup::""
          echo ""::group::➡️ checksum""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar checksum -PoutputDir=out --select-current-platform
          echo ""::endgroup::""
          echo ""::group::➡️ sign""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar sign -PoutputDir=out --select-current-platform
          echo ""::endgroup::""
          echo ""::group::➡️ deploy""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar deploy -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ upload""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar upload --select-current-platform -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ release""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar release --select-current-platform -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ prepare""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar prepare --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ package""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar package --select-current-platform -PoutputDir=out ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ publish""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar publish --select-current-platform -PoutputDir=out --dry-run ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ full-release""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar full-release -PoutputDir=out --select-current-platform --dry-run ${{ matrix.job.args }}
          echo ""::endgroup::""
          echo ""::group::➡️ announce""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar announce -PoutputDir=out --dry-run
          echo ""::endgroup::""
          echo ""::group::➡️ template generate""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar template generate --announcer discord
          java ""${JAVA_OPTS}"" -jar jreleaser.jar template generate --assembler-type jlink --assembler-name app-standalone
          java ""${JAVA_OPTS}"" -jar jreleaser.jar template generate --packager brew --distribution app
          echo ""::endgroup::""
          echo ""::group::➡️ init""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar init --overwrite --format yml
          java ""${JAVA_OPTS}"" -jar jreleaser.jar init --overwrite --format toml
          java ""${JAVA_OPTS}"" -jar jreleaser.jar init --overwrite --format json
          echo ""::endgroup::""
          echo ""::group::➡️ auto-config""
          java ""${JAVA_OPTS}"" -jar jreleaser.jar release --auto-config --dry-run
          echo ""::endgroup::""
        env:
          JRELEASER_OUTPUT_DIRECTORY: out
          JRELEASER_USER_HOME: ${{ github.workspace }}/smoketests-jreleaser/.jreleaser
          JRELEAS"
androidx;media;androidx/media;https://github.com/androidx/media;https://api.github.com/repos/androidx/media;release;02/09/2021 20:42;22/04/2024 03:22;FALSE;
getActivity;GsonFactory;getActivity/GsonFactory;https://github.com/getActivity/GsonFactory;https://api.github.com/repos/getActivity/GsonFactory;master;05/12/2020 04:12;21/04/2024 05:33;TRUE;"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

---
"
Auties00;Cobalt;Auties00/Cobalt;https://github.com/Auties00/Cobalt;https://api.github.com/repos/Auties00/Cobalt;master;29/12/2020 18:19;22/04/2024 09:38;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        env:
          GITHUB_ACTIONS: true
          WHATSAPP_STORE: ${{ secrets.WHATSAPP_STORE }}
          WHATSAPP_KEYS: ${{ secrets.WHATSAPP_KEYS }}
          WHATSAPP_CONTACT: ${{ secrets.WHATSAPP_CONTACT }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}

---
"
RikkaApps;Sui;RikkaApps/Sui;https://github.com/RikkaApps/Sui;https://api.github.com/repos/RikkaApps/Sui;master;03/01/2021 09:26;22/04/2024 12:16;TRUE;"name: Module

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/README.md'
jobs:
  build:
    runs-on: ubuntu-20.04
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Cache Gradle Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-module-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            gradle-deps
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-module-${{ hashFiles('**/build.gradle') }}
          restore-keys: |
            gradle-deps
      - name: Cache Ccache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-cache-
      - name: Install ccache
        run: |
          sudo apt-get install -y ccache
          ccache -o max_size=2G
          ccache -o hash_dir=false
      - name: Build with Gradle
        run: |
          mkdir -p ~/.gradle/wrapper
          mkdir -p ~/.gradle/caches
          [ $(du -s ~/.gradle/wrapper | awk '{ print $1 }') -gt 250000 ] && rm -rf ~/.gradle/wrapper/* || true
          find ~/.gradle/caches -exec touch -d ""2 days ago"" {} + || true
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          ./gradlew zipRiruDebug zipRiruRelease zipZygiskDebug zipZygiskRelease
      - name: Prepare artifact
        if: success()
        id: prepareArtifact
        run: |
          riruReleaseName=`ls out/sui-riru-*-release.zip | awk -F '(/|.zip)' '{print $2}'` && echo ""::set-output name=riruReleaseName::$riruReleaseName""
          riruDebugName=`ls out/sui-riru-*-debug.zip | awk -F '(/|.zip)' '{print $2}'` && echo ""::set-output name=riruDebugName::$riruDebugName""
          zygiskReleaseName=`ls out/sui-zygisk-*-release.zip | awk -F '(/|.zip)' '{print $2}'` && echo ""::set-output name=zygiskReleaseName::$zygiskReleaseName""
          zygiskDebugName=`ls out/sui-zygisk-*-debug.zip | awk -F '(/|.zip)' '{print $2}'` && echo ""::set-output name=zygiskDebugName::$zygiskDebugName""
          unzip out/sui-riru-*-release.zip -d sui-riru-release
          unzip out/sui-riru-*-debug.zip -d sui-riru-debug
          unzip out/sui-zygisk-*-release.zip -d sui-zygisk-release
          unzip out/sui-zygisk-*-debug.zip -d sui-zygisk-debug
      - name: Upload Riru release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.riruReleaseName }}
          path: './sui-riru-release/*'
      - name: Upload Riru debug
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.riruDebugName }}
          path: './sui-riru-debug/*'
      - name: Upload Zygisk release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskReleaseName }}
          path: './sui-zygisk-release/*'
      - name: Upload Zygisk debug
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepareArtifact.outputs.zygiskDebugName }}
          path: './sui-zygisk-debug/*'
      - name: Upload mappings
        uses: actions/upload-artifact@v3
        with:
          name: mappings
          path: |
            ""module/build/outputs/mapping/release""
            ""ui/build/outputs/mapping/release""

---
"
javahuang;SurveyKing;javahuang/SurveyKing;https://github.com/javahuang/SurveyKing;https://api.github.com/repos/javahuang/SurveyKing;master;06/09/2021 15:34;22/04/2024 12:29;FALSE;
mdsecresearch;BurpSuiteSharpener;mdsecresearch/BurpSuiteSharpener;https://github.com/mdsecresearch/BurpSuiteSharpener;https://api.github.com/repos/mdsecresearch/BurpSuiteSharpener;main;07/01/2021 16:34;15/04/2024 19:18;TRUE;"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'
          cache: 'gradle'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Creating the jar file
        run: ./gradlew jar
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ./releases/*.jar
          name: Downloadable Extension File
      - name: Delete older releases
        uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ""latest_build_by_github""
          body: ""This jar file has been built by GitHub automatically.\nYou can view the latest version number in the [extension.properties](../../blob/main/src/main/resources/extension.properties) file.""
          allowUpdates: true
          artifacts: ""releases/*.jar""
---
"
mqttsnet;thinglinks;mqttsnet/thinglinks;https://github.com/mqttsnet/thinglinks;https://api.github.com/repos/mqttsnet/thinglinks;main;17/09/2021 08:07;19/04/2024 06:56;FALSE;
AlicanAkkus;Modular-Architecture-Hexagonal-Demo-Project;AlicanAkkus/Modular-Architecture-Hexagonal-Demo-Project;https://github.com/AlicanAkkus/Modular-Architecture-Hexagonal-Demo-Project;https://api.github.com/repos/AlicanAkkus/Modular-Architecture-Hexagonal-Demo-Project;main;13/01/2021 11:04;21/04/2024 22:14;TRUE;"name: Acceptance Test

on:
  push:
    paths:
      - ticket-api/**
      - payment-api/**
      - acceptance-test-suite/**
      - .github/workflows/acceptance-test.yml
      - run-acceptance-tests.sh
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Create API's And Run Tests
        run: |
          docker volume create hexagonaldemo_mysql_data
          echo ""volume created""

          docker network create hexagonaldemo_network
          echo ""network created""

          docker-compose -f docker-compose-ci.yml up -d
          sleep 10
          echo ""Running acceptance test has started""

          export PROFILE=ci
          ./gradlew clean :acceptance-test-suite:cucumber -PskipInfraSetup -Dorg.gradle.daemon=false
          echo ""Running acceptance test has finished""
---
name: Payment API Run Build On Each Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - payment-api/**
      - .github/workflows/payment-api*.yml

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: my-secret-pw
        ports:
          - 4306:3306

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set Up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache gradle dependencies
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

      - name: Build
        run: |
          ./gradlew verifierStubsJar :payment-api:build -PskipInfraSetup -Dorg.gradle.daemon=false

---
name: Build Payment API Image

on:
  push:
    paths:
      - payment-api/**
      - .github/workflows/payment-api*.yml
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:

      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 4306:3306

      redis:
        image: redis
        options: >-
          --health-cmd ""redis-cli ping""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 29092:29092
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set Up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache gradle dependencies
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

      - name: Build with Thundra
        uses: thundra-io/thundra-gradle-test-action@v1
        with:
          apikey: 2a0ad462-59bb-4c4d-9d43-ab3705aad4c8
          project_id: 68b8e211-fbee-4cc5-9794-34912c05452c
          command: ./gradlew clean verifierStubsJar :payment-api:build :payment-api:bootJar -PskipInfraSetup -Dorg.gradle.daemon=false --rerun-tasks

      - name: Upload Jar File
        uses: actions/upload-artifact@v1
        with:
          name: payment-api-jar
          path: payment-api/build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          dockerfile: ./payment-api/Dockerfile

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: payment-api
          push: true
          tags: lemiorhan/hexagonaldemo-paymentapi:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

---
name: Sonar Analysis

on:
  push:

    paths:
      - ticket-api/**
      - payment-api/**
      - .github/workflows/sonar-analysis.yml
      - gradle/config/sonar.gradle
      - gradle/config/jacoco.gradle
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:

      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 4306:3306
        options: >-
          --health-cmd ""mysqladmin ping"" --health-interval 10s --health-timeout 5s --health-retries 10

      redis:
        image: redis
        env:
          REDIS_PASSWORD: redisPassword
        options: >-
          --health-cmd ""redis-cli ping""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: true

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Mysql initialize
        run: |
          mysql -h 127.0.0.1 --port 4306 -u root -ppassword mysql < docs/ddl/0_initialize.sql
          mysql -h 127.0.0.1 --port 4306 -u root -ppassword mysql < docs/ddl/1_schema.sql
          mysql -h 127.0.0.1 --port 4306 -u root -ppassword mysql < docs/ddl/2_data.sql

      - name: Set Up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache gradle dependencies
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew clean jacocoTestReport sonarqube -PskipInfraSetup -Dorg.gradle.daemon=false

---
name: testing

on:
  push:
    paths:
      - .github/workflows/test.yml
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    services:

      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: my-secret-pw
        ports:
          - 4306:3306
        options: --health-cmd=""mysqladmin ping"" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:

      - name: Checkout
        uses: actions/checkout@v1

      - name: Init Database
        run:  mysql -uroot -h127.0.0.1 --port 4306 --password=my-secret-pw -e 'CREATE DATABASE IF NOT EXISTS db1;'

---
name: Ticket API Run Build On Each Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - ticket-api/**
      - .github/workflows/ticket-api*.yml

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: my-secret-pw
        ports:
          - 4306:3306
      redis:
        image: redis
        options: >-
          --health-cmd ""redis-cli ping""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set Up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache gradle dependencies
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

      - name: Build
        run: |
          ./gradlew verifierStubsJar :ticket-api:build -PskipInfraSetup -Dorg.gradle.daemon=false

---
name: Build Ticket API Image

on:
  push:
    paths:
      - ticket-api/**
      - .github/workflows/ticket-api*.yml
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 4306:3306

      redis:
        image: redis
        options: >-
          --health-cmd ""redis-cli ping""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 29092:29092
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    steps:

      - name: Checkout
        uses: actions/checkout@v1

      - name: Set Up Java 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache gradle dependencies
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

      - name: Build
        run: ./gradlew verifierStubsJar :ticket-api:build :ticket-api:bootJar -PskipInfraSetup -Dorg.gradle.daemon=false --rerun-tasks

      - name: Upload Jar File
        uses: actions/upload-artifact@v1
        with:
          name: ticket-api-jar
          path: ticket-api/build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          dockerfile: ./ticket-api/Dockerfile

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ticket-api
          push: true
          tags: lemiorhan/hexagonaldemo-ticketapi:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


---
"
cami-la;exceptions-java;cami-la/exceptions-java;https://github.com/cami-la/exceptions-java;https://api.github.com/repos/cami-la/exceptions-java;master;24/09/2021 15:24;02/04/2024 19:40;FALSE;
caoccao;Javet;caoccao/Javet;https://github.com/caoccao/Javet;https://api.github.com/repos/caoccao/Javet;main;14/01/2021 04:02;20/04/2024 08:01;TRUE;"name: Android Node Build

concurrency:
  group: android_node_build_${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:

env:
  JAVET_NODE_VERSION: 20.12.2
  JAVET_VERSION: 3.1.1
  ROOT: /home/runner/work/Javet

jobs:
  build_javet_lib:
    strategy:
      matrix:
        include:
          - android_arch: arm
            android_abi: armeabi-v7a
          - android_arch: arm64
            android_abi: arm64-v8a
          - android_arch: x86
            android_abi: x86
          - android_arch: x86_64
            android_abi: x86_64

    name: Build Javet ${{ matrix.android_arch }}
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup Ubuntu
      run: |
        sudo apt-get install -y execstack gcc-multilib g++-multilib

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        local-cache: false

    - name: Setup Path
      run: |
        echo ""${{ env.ROOT }}/google/depot_tools"" >> $GITHUB_PATH

    - name: Build Node.js
      run: |
        cd ${{ env.ROOT }}
        git clone https://github.com/nodejs/node.git
        cd node
        git checkout v${{ env.JAVET_NODE_VERSION }}
        git apply < ../Javet/scripts/patches/android/node/android_configure.py.patch
        git apply < ../Javet/scripts/patches/android/node/common.gypi.patch
        git apply < ../Javet/scripts/patches/android/node/configure.py.patch
        git apply < ../Javet/scripts/patches/android/node/constants-arm.h.patch
        git apply < ../Javet/scripts/patches/android/node/push_registers_asm.cc.patch
        git apply < ../Javet/scripts/patches/android/node/trap-handler.h.patch
        git apply < ../Javet/scripts/patches/android/node/test_crypto_clienthello.cc.patch
        ./android-configure ${{ steps.setup-ndk.outputs.ndk-path }} 24 ${{ matrix.android_arch }}
        make -j4
        mv out out.${{ matrix.android_arch }}

    - name: Setup JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 11

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sh ./build-android.sh -DNODE_DIR=${{ env.ROOT }}/node -DCMAKE_ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }} -DCMAKE_ANDROID_ARCH=${{ matrix.android_arch }}

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-android-node-${{ matrix.android_arch }}-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/${{ matrix.android_abi }}/*.so

  build_javet_aar:
    needs: [build_javet_lib]
    name: Build Javet AAR
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 17

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: 8.5

    - name: Prepare JNI Libs
      run: |
        mkdir -p android/javet-android/src/main/jniLibs/armeabi-v7a
        mkdir -p android/javet-android/src/main/jniLibs/arm64-v8a
        mkdir -p android/javet-android/src/main/jniLibs/x86
        mkdir -p android/javet-android/src/main/jniLibs/x86_64

    - name: Download Javet arm
      uses: actions/download-artifact@v4
      with:
        name: javet-android-node-arm-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/armeabi-v7a

    - name: Download Javet arm64
      uses: actions/download-artifact@v4
      with:
        name: javet-android-node-arm64-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/arm64-v8a

    - name: Download Javet x86
      uses: actions/download-artifact@v4
      with:
        name: javet-android-node-x86-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/x86

    - name: Download Javet x86_64
      uses: actions/download-artifact@v4
      with:
        name: javet-android-node-x86_64-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/x86_64

    - name: Build the Artifact
      run: |
        cd ${{ env.ROOT }}/Javet/scripts/python
        python3 patch_android_build.py
        cd ${{ env.ROOT }}/Javet/android
        gradle build --debug

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-android-node-${{ env.JAVET_VERSION }}
        path: android/javet-android/build/outputs/aar/javet*release.aar

    - name: Delete Javet arm
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-node-arm-${{ env.JAVET_VERSION }}

    - name: Delete Javet arm64
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-node-arm64-${{ env.JAVET_VERSION }}

    - name: Delete Javet x86
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-node-x86-${{ env.JAVET_VERSION }}

    - name: Delete Javet x86_64
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-node-x86_64-${{ env.JAVET_VERSION }}

---
name: Android V8 Build

concurrency:
  group: android_v8_build_${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:

env:
  JAVET_V8_VERSION: 12.4.254.9
  JAVET_VERSION: 3.1.1
  ROOT: /home/runner/work/Javet

jobs:
  build_javet_lib:
    strategy:
      matrix:
        include:
          - v8_release: arm
            v8_arch: arm
            android_arch: arm
            android_abi: armeabi-v7a
          - v8_release: arm64
            v8_arch: arm64
            android_arch: arm64
            android_abi: arm64-v8a
          - v8_release: ia32
            v8_arch: x86
            android_arch: x86
            android_abi: x86
          - v8_release: x64
            v8_arch: x64
            android_arch: x86_64
            android_abi: x86_64

    name: Build Javet ${{ matrix.android_arch }}
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup Ubuntu
      run: |
        sudo apt-get install -y execstack gcc-multilib

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        local-cache: false

    - name: Setup Path
      run: |
        echo ""${{ env.ROOT }}/google/depot_tools"" >> $GITHUB_PATH

    - name: Build V8
      run: |
        cd ${{ env.ROOT }}
        mkdir google
        cd google
        git clone --depth=10 --branch=main https://chromium.googlesource.com/chromium/tools/depot_tools.git
        cd depot_tools
        git checkout remotes/origin/main
        cd ..
        fetch v8
        cd v8
        git checkout ${{ env.JAVET_V8_VERSION }}
        ./build/install-build-deps.sh
        cd ..
        echo 'target_os = [""android""]' >> .gclient
        gclient sync -D
        cd v8
        python3 tools/dev/v8gen.py ${{ matrix.v8_release }}.release -- 'target_os=""android""' 'target_cpu=""${{ matrix.v8_arch }}""' 'v8_target_cpu=""${{ matrix.v8_arch }}""' v8_monolithic=true v8_use_external_startup_data=false is_component_build=false v8_enable_i18n_support=false v8_enable_pointer_compression=false v8_static_library=true symbol_level=0 use_custom_libcxx=false v8_enable_sandbox=false
        ninja -C out.gn/${{ matrix.v8_release }}.release v8_monolith || python3 ${{ env.ROOT }}/Javet/scripts/python/patch_v8_build.py -p ./
        ninja -C out.gn/${{ matrix.v8_release }}.release v8_monolith

    - name: Setup JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 11

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sh ./build-android.sh -DV8_DIR=${{ env.ROOT }}/google/v8 -DCMAKE_ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }} -DCMAKE_ANDROID_ARCH=${{ matrix.android_arch }}

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-android-v8-${{ matrix.android_arch }}-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/${{ matrix.android_abi }}/*.so

  build_javet_aar:
    needs: [build_javet_lib]
    name: Build Javet AAR
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 17

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: 8.5

    - name: Prepare JNI Libs
      run: |
        mkdir -p android/javet-android/src/main/jniLibs/armeabi-v7a
        mkdir -p android/javet-android/src/main/jniLibs/arm64-v8a
        mkdir -p android/javet-android/src/main/jniLibs/x86
        mkdir -p android/javet-android/src/main/jniLibs/x86_64

    - name: Download Javet arm
      uses: actions/download-artifact@v4
      with:
        name: javet-android-v8-arm-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/armeabi-v7a

    - name: Download Javet arm64
      uses: actions/download-artifact@v4
      with:
        name: javet-android-v8-arm64-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/arm64-v8a

    - name: Download Javet x86
      uses: actions/download-artifact@v4
      with:
        name: javet-android-v8-x86-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/x86

    - name: Download Javet x86_64
      uses: actions/download-artifact@v4
      with:
        name: javet-android-v8-x86_64-${{ env.JAVET_VERSION }}
        path: android/javet-android/src/main/jniLibs/x86_64

    - name: Build the Artifact
      run: |
        cd ${{ env.ROOT }}/Javet/scripts/python
        python3 patch_android_build.py
        cd ${{ env.ROOT }}/Javet/android
        gradle build --debug

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-android-v8-${{ env.JAVET_VERSION }}
        path: android/javet-android/build/outputs/aar/javet*release.aar

    - name: Delete Javet arm
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-v8-arm-${{ env.JAVET_VERSION }}

    - name: Delete Javet arm64
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-v8-arm64-${{ env.JAVET_VERSION }}

    - name: Delete Javet x86
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-v8-x86-${{ env.JAVET_VERSION }}

    - name: Delete Javet x86_64
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-android-v8-x86_64-${{ env.JAVET_VERSION }}

---
name: Linux Build (2/2) Artifact
concurrency:
  group: linux_build_artifact_${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - ""**.rst""
      - ""docs/**""
  push:
    paths-ignore:
      - ""**.rst""
      - ""docs/**""

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_REPO_JAVET: ${{ secrets.DOCKERHUB_REPO_JAVET }}
  JAVET_NODE_VERSION: 20.12.2
  JAVET_V8_VERSION: 12.4.254.9
  JAVET_VERSION: 3.1.1

jobs:
  javet_linux_x86_64:
    name: Build Javet Linux x86_64 Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Build the Artifact
        run: |
          docker build -t javet:local \
            --build-arg JAVET_REPO=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }} \
            --build-arg JAVET_NODE_VERSION=${{ env.JAVET_NODE_VERSION }} \
            --build-arg JAVET_V8_VERSION=${{ env.JAVET_V8_VERSION }} \
            --build-arg JAVET_VERSION=${{ env.JAVET_VERSION }} \
            -f docker/linux-x86_64/build_artifact.Dockerfile .

      - name: Copy the Artifact
        run: mkdir $PWD/build && docker run --rm -i -v $PWD/build:/output javet:local cp -rf /Javet/build/libs /output

      - name: Upload the Artifact
        uses: actions/upload-artifact@v4
        with:
          name: javet-linux-x86_64
          path: build/libs/javet*.jar

---
name: Linux Build (1/2) Base Images
on:
  workflow_dispatch:
    inputs:
      skip_base_jvm:
        default: false
        type: boolean
      skip_base_v8:
        default: false
        type: boolean
      skip_base_node:
        default: false
        type: boolean
  push:
    paths:
      - '.github/workflows/**'
      - 'docker/**'
      - 'scripts/python/**'
      - 'scripts/shell/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_REPO_JAVET: ${{ secrets.DOCKERHUB_REPO_JAVET }}
  JAVET_NODE_VERSION: 20.12.2
  JAVET_V8_VERSION: 12.4.254.9
  JAVET_VERSION: 3.1.1

# if we skip a job using a job level `if` condition, then any dependent jobs also don't run.
# we can skip a step of the job, using a step level `if` condition.
# however GitHub doesn't support skipping all subsequent steps of a job.
# we need to add the condition to every step.

jobs:
  publish_jvm_base_image:
    name: Publish Ubuntu, Build Tools and JDK 8 Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        if: inputs.skip_base_jvm == false
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Checkout the code
        if: inputs.skip_base_jvm == false
        uses: actions/checkout@v4

      - name: Build Ubuntu, Build Tools and JDK 8 Base Image
        if: inputs.skip_base_jvm == false
        run: |
          export BASE_JVM_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-base-jvm
          docker build \
            -t ${BASE_JVM_IMAGE_TAG} \
            -f docker/linux-x86_64/base_jvm.Dockerfile .

      - name: Publish Ubuntu, Build Tools and JDK 8 Base Image
        if: inputs.skip_base_jvm == false
        run: |
          export BASE_JVM_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-base-jvm
          docker push ${BASE_JVM_IMAGE_TAG}

  publish_node_base_image:
    needs: [publish_jvm_base_image]
    name: Publish Node.js Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        if: inputs.skip_base_node == false
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Checkout the code
        if: inputs.skip_base_node == false
        uses: actions/checkout@v4

      - name: Build Node.js Base Image
        if: inputs.skip_base_node == false
        run: |
          export BASE_NODE_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-base-node_${{ env.JAVET_NODE_VERSION }}
          docker build \
            -t ${BASE_NODE_IMAGE_TAG} \
            --build-arg JAVET_REPO=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }} \
            --build-arg JAVET_NODE_VERSION=${{ env.JAVET_NODE_VERSION }} \
            -f docker/linux-x86_64/base_node.Dockerfile .

      - name: Publish Node.js Base Image
        if: inputs.skip_base_node == false
        run: |
          export BASE_NODE_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-base-node_${{ env.JAVET_NODE_VERSION }}
          docker push ${BASE_NODE_IMAGE_TAG}

  publish_v8_base_image:
    needs: [publish_jvm_base_image]
    name: Publish V8 Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        if: inputs.skip_base_v8 == false
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Checkout the code
        if: inputs.skip_base_v8 == false
        uses: actions/checkout@v4

      - name: Build V8 Base Image
        if: inputs.skip_base_v8 == false
        run: |
          export BASE_V8_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-base-v8_${{ env.JAVET_V8_VERSION }}
          docker build \
            -t ${BASE_V8_IMAGE_TAG} \
            --build-arg JAVET_REPO=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }} \
            --build-arg JAVET_V8_VERSION=${{ env.JAVET_V8_VERSION }} \
            -f docker/linux-x86_64/base_v8.Dockerfile .

      - name: Publish V8 Base Image
        if: inputs.skip_base_v8 == false
        run: |
          export BASE_V8_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-base-v8_${{ env.JAVET_V8_VERSION }}
          docker push ${BASE_V8_IMAGE_TAG}

  publish_gradle_base_image:
    needs: [publish_jvm_base_image]
    name: Publish Gradle Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Build Gradle Base Image
        run: |
          export BASE_GRADLE_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-${{ env.JAVET_VERSION }}
          docker build \
            -t ${BASE_GRADLE_IMAGE_TAG} \
            --build-arg JAVET_REPO=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }} \
            -f docker/linux-x86_64/base_gradle.Dockerfile .

      - name: Publish Gradle Base Image
        run: |
          export BASE_GRADLE_IMAGE_TAG=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPO_JAVET }}:x86_64-${{ env.JAVET_VERSION }}
          docker push ${BASE_GRADLE_IMAGE_TAG}

---
name: Linux x86_64 Build

concurrency:
  group: linux_x86_64_build_${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_dispatch:

env:
  JAVET_NODE_VERSION: 20.12.2
  JAVET_V8_VERSION: 12.4.254.9
  JAVET_VERSION: 3.1.1
  ROOT: /home/runner/work/Javet

jobs:
  build_javet_v8:
    name: Build Javet V8
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup Ubuntu
      run: |
        sudo apt-get install -y execstack

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup Path
      run: |
        echo ""${{ env.ROOT }}/google/depot_tools"" >> $GITHUB_PATH

    - name: Build V8
      run: |
        cd ${{ env.ROOT }}
        mkdir google
        cd google
        git clone --depth=10 --branch=main https://chromium.googlesource.com/chromium/tools/depot_tools.git
        cd depot_tools
        git checkout remotes/origin/main
        cd ..
        fetch v8
        cd v8
        git checkout ${{ env.JAVET_V8_VERSION }}
        ./build/install-build-deps.sh
        cd ..
        gclient sync -D
        cd v8
        python3 tools/dev/v8gen.py x64.release -- v8_monolithic=true v8_use_external_startup_data=false is_component_build=false v8_enable_i18n_support=false v8_enable_pointer_compression=false v8_static_library=true symbol_level=0 use_custom_libcxx=false v8_enable_sandbox=false
        sed -i '/#include ""src\/libplatform\//a #include <cstdlib>' src/libplatform/default-thread-isolated-allocator.cc
        sed -i '/bool KernelHasPkruFix()/a const char* env = std::getenv(""JAVET_DISABLE_PKU""); if (env && std::strlen(env) > 0) { return false; }' src/libplatform/default-thread-isolated-allocator.cc
        ninja -C out.gn/x64.release v8_monolith || python3 ${{ env.ROOT }}/Javet/scripts/python/patch_v8_build.py -p ./
        ninja -C out.gn/x64.release v8_monolith

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sh ./build-linux-x86_64.sh -DV8_DIR=${{ env.ROOT }}/google/v8

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-linux-v8-x86_64-${{ env.JAVET_VERSION }}
        path: src/main/resources/*.so

  build_javet_node:
    name: Build Javet Node
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup Ubuntu
      run: |
        sudo apt-get install -y execstack

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Build Node.js
      run: |
        cd ${{ env.ROOT }}
        git clone https://github.com/nodejs/node.git
        cd node
        git checkout v${{ env.JAVET_NODE_VERSION }}
        python3 ${{ env.ROOT }}/Javet/scripts/python/patch_node_build.py -p ./
        ./configure --enable-static --without-intl
        python3 ${{ env.ROOT }}/Javet/scripts/python/patch_node_build.py -p ./
        make -j4

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sh ./build-linux-x86_64.sh -DNODE_DIR=${{ env.ROOT }}/node

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-linux-node-x86_64-${{ env.JAVET_VERSION }}
        path: src/main/resources/*.so

  build_javet_jar:
    needs: [build_javet_v8, build_javet_node]
    name: Build Javet Jar
    runs-on: ubuntu-latest

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: 8.5

    - name: Download Javet V8
      uses: actions/download-artifact@v4
      with:
        name: javet-linux-v8-x86_64-${{ env.JAVET_VERSION }}
        path: src/main/resources/

    - name: Download Javet Node
      uses: actions/download-artifact@v4
      with:
        name: javet-linux-node-x86_64-${{ env.JAVET_VERSION }}
        path: src/main/resources/

    - name: Build the Artifact
      run: |
        cd ${{ env.ROOT }}/Javet
        touch src/main/resources/libjavet-v8*
        gradle build test --rerun-tasks --debug
        touch src/main/resources/libjavet-node*
        gradle test --rerun-tasks --debug
        gradle build generatePomFileForGeneratePomPublication

    - name: Clear up Source Jar
      uses: edgarrc/action-7z@v1
      with:
        args: 7z d build/libs/javet-${{ env.JAVET_VERSION }}-sources.jar *.so

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-linux-x86_64-${{ env.JAVET_VERSION }}
        path: |
          build/libs/*.jar
          build/libs/*.pom

    - name: Delete Javet V8
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-linux-v8-x86_64-${{ env.JAVET_VERSION }}

    - name: Delete Javet Node
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-linux-node-x86_64-${{ env.JAVET_VERSION }}

---
name: MacOS arm64 Build

concurrency:
  group: macos_arm64_build_${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_dispatch:

env:
  JAVET_NODE_VERSION: 20.12.2
  JAVET_V8_VERSION: 12.4.254.9
  JAVET_VERSION: 3.1.1
  ROOT: /Users/runner/work/Javet

jobs:
  build_javet_v8:
    name: Build Javet V8
    runs-on: macos-14

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Setup Path
      run: |
        echo ""${{ env.ROOT }}/google/depot_tools"" >> $GITHUB_PATH

    - name: Build V8
      run: |
        cd ${{ env.ROOT }}
        mkdir google
        cd google
        git clone --depth=10 --branch=main https://chromium.googlesource.com/chromium/tools/depot_tools.git
        cd depot_tools
        git checkout remotes/origin/main
        cd ..
        fetch v8
        cd v8
        git checkout ${{ env.JAVET_V8_VERSION }}
        cd ..
        gclient sync -D
        cd v8
        python3 tools/dev/v8gen.py arm64.release -- v8_monolithic=true 'target_cpu=""arm64""' v8_use_external_startup_data=false is_component_build=false v8_enable_i18n_support=false v8_enable_pointer_compression=false v8_static_library=true symbol_level=0 use_custom_libcxx=false v8_enable_sandbox=false
        gn gen out.gn/arm64.release
        ninja -C out.gn/arm64.release v8_monolith || python3 ${{ env.ROOT }}/Javet/scripts/python/patch_v8_build.py -p ./
        ninja -C out.gn/arm64.release v8_monolith

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sed -i '.bak' 's/`nproc`/2/g' build-macos.sh
        sh ./build-macos.sh -DV8_DIR=${{ env.ROOT }}/google/v8

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-macos-v8-arm64-${{ env.JAVET_VERSION }}
        path: src/main/resources/*.dylib

  build_javet_node:
    name: Build Javet Node
    runs-on: macos-14

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build Node.js
      run: |
        cd ${{ env.ROOT }}
        git clone https://github.com/nodejs/node.git
        cd node
        git checkout v${{ env.JAVET_NODE_VERSION }}
        ./configure --enable-static --without-intl
        make -j4

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sed -i '.bak' 's/`nproc`/2/g' build-macos.sh
        sh ./build-macos.sh -DNODE_DIR=${{ env.ROOT }}/node

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-macos-node-arm64-${{ env.JAVET_VERSION }}
        path: src/main/resources/*.dylib

  build_javet_jar:
    needs: [build_javet_v8, build_javet_node]
    name: Build Javet Jar
    runs-on: macos-14

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: 8.5

    - name: Download Javet V8
      uses: actions/download-artifact@v4
      with:
        name: javet-macos-v8-arm64-${{ env.JAVET_VERSION }}
        path: src/main/resources/

    - name: Download Javet Node
      uses: actions/download-artifact@v4
      with:
        name: javet-macos-node-arm64-${{ env.JAVET_VERSION }}
        path: src/main/resources/

    - name: Build the Artifact
      run: |
        cd ${{ env.ROOT }}/Javet
        touch src/main/resources/libjavet-v8*
        gradle build test --rerun-tasks --debug
        touch src/main/resources/libjavet-node*
        gradle test --rerun-tasks --debug
        gradle build generatePomFileForGeneratePomPublication
        zip -d build/libs/javet-${{ env.JAVET_VERSION }}-sources.jar *.dylib

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-macos-arm64-${{ env.JAVET_VERSION }}
        path: |
          build/libs/*.jar
          build/libs/*.pom

    - name: Delete Javet V8
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-macos-v8-arm64-${{ env.JAVET_VERSION }}

    - name: Delete Javet Node
      uses: geekyeggo/delete-artifact@v4
      with:
        name: javet-macos-node-arm64-${{ env.JAVET_VERSION }}

---
name: MacOS x86_64 Build

concurrency:
  group: macos_x86_64_build_${{ github.ref }}
  cancel-in-progress: true
on:
  workflow_dispatch:

env:
  JAVET_NODE_VERSION: 20.12.2
  JAVET_V8_VERSION: 12.4.254.9
  JAVET_VERSION: 3.1.1
  ROOT: /Users/runner/work/Javet

jobs:
  build_javet_v8:
    name: Build Javet V8
    runs-on: macos-13

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Setup XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Setup Path
      run: |
        echo ""${{ env.ROOT }}/google/depot_tools"" >> $GITHUB_PATH

    - name: Build V8
      run: |
        cd ${{ env.ROOT }}
        mkdir google
        cd google
        git clone --depth=10 --branch=main https://chromium.googlesource.com/chromium/tools/depot_tools.git
        cd depot_tools
        git checkout remotes/origin/main
        cd ..
        fetch v8
        cd v8
        git checkout ${{ env.JAVET_V8_VERSION }}
        cd ..
        gclient sync -D
        cd v8
        python3 tools/dev/v8gen.py x64.release -- v8_monolithic=true v8_use_external_startup_data=false is_component_build=false v8_enable_i18n_support=false v8_enable_pointer_compression=false v8_static_library=true symbol_level=0 use_custom_libcxx=false v8_enable_sandbox=false
        gn gen out.gn/x64.release
        ninja -C out.gn/x64.release v8_monolith || python3 ${{ env.ROOT }}/Javet/scripts/python/patch_v8_build.py -p ./
        ninja -C out.gn/x64.release v8_monolith

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sed -i '.bak' 's/`nproc`/2/g' build-macos.sh
        sh ./build-macos.sh -DV8_DIR=${{ env.ROOT }}/google/v8

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-macos-v8-x86_64-${{ env.JAVET_VERSION }}
        path: src/main/resources/*.dylib

  build_javet_node:
    name: Build Javet Node
    runs-on: macos-13

    steps:

    - name: Checkout the code
      uses: actions/checkout@v4

    - name: Setup XCode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Build Node.js
      run: |
        cd ${{ env.ROOT }}
        git clone https://github.com/nodejs/node.git
        cd node
        git checkout v${{ env.JAVET_NODE_VERSION }}
        ./configure --enable-static --without-intl
        make -j4

    - name: Setup JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: corretto
        java-version: 8

    - name: Setup Cmake
      uses: jwlawson/actions-setup-cmake@v2.0
      with:
        cmake-version: '3.23.x'

    - name: Build Javet JNI
      run: |
        cd ${{ env.ROOT }}/Javet/cpp
        sed -i '.bak' 's/`nproc`/2/g' build-macos.sh
        sh ./build-macos.sh -DNODE_DIR=${{ env.ROOT }}/node

    - name: Upload the Artifact
      uses: actions/upload-artifact@v4
      with:
        name: javet-macos-node-x86_64-${{ env.JAVET_VERSION }}
   "
cami-la;debugging-java;cami-la/debugging-java;https://github.com/cami-la/debugging-java;https://api.github.com/repos/cami-la/debugging-java;master;05/10/2021 15:42;22/04/2024 08:24;FALSE;
CN-GuoZiyang;MYDB;CN-GuoZiyang/MYDB;https://github.com/CN-GuoZiyang/MYDB;https://api.github.com/repos/CN-GuoZiyang/MYDB;master;10/10/2021 17:24;20/04/2024 17:42;FALSE;
ba0gu0;520apkhook;ba0gu0/520apkhook;https://github.com/ba0gu0/520apkhook;https://api.github.com/repos/ba0gu0/520apkhook;master;14/10/2021 05:46;22/04/2024 11:55;FALSE;
pmiaowu;HostCollision;pmiaowu/HostCollision;https://github.com/pmiaowu/HostCollision;https://api.github.com/repos/pmiaowu/HostCollision;master;15/10/2021 18:14;21/04/2024 10:52;FALSE;
XiaoMi;mone;XiaoMi/mone;https://github.com/XiaoMi/mone;https://api.github.com/repos/XiaoMi/mone;master;22/01/2021 06:20;10/04/2024 18:53;TRUE;"# This is a basic workflow to help you get started with Actions

name: hera test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    paths:
    - 'hera-all/**'
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-build-8:
    name: hera test
    runs-on: ubuntu-latest
    if: (github.event == 'pull_request' && github.head_ref == 'refs/heads/jdk8')
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          java-version: 8
          #settings-properties: '[{""propertyName1"": ""propertyValue1""}, {""propertyName2"": ""propertyValue2""}]'

      - run: echo '<settings>    <interactiveMode>false</interactiveMode>    <profiles>        <profile>            <repositories>                <repository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </repository>            </repositories>            <pluginRepositories>                <pluginRepository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </pluginRepository>            </pluginRepositories>            <id>artifactory</id>        </profile>    </profiles>    <activeProfiles>        <activeProfile>artifactory</activeProfile>    </activeProfiles>    <servers>        <server>            <id>github</id>            <username>${env.GITHUB_ACTOR}</username>            <password>${env.GITHUB_TOKEN}</password>        </server>    </servers>    <mirrors/>    <proxies/></settings>' > ~/.m2/settings.xml

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            hera-app:
              - 'hera-all/hera-app/**'
            hera-operator:
              - 'hera-all/hera-operator/**'
            hera-tspandata:
              - 'hera-all/hera-tspandata/**'
            hera-log:
              - 'hera-all/hera-log/**'
            hera-monitor:
              - 'hera-all/hera-monitor/**'
            hera-prometheus-agent:
              - 'hera-all/hera-prometheus-agent/**'
            prometheus-starter-all:
              - 'hera-all/prometheus-starter-all/**'
            trace-etl:
              - 'hera-all/trace-etl/**'
            hera-demo-client:
              - 'hera-all/hera-demo-client/**'
            hera-webhook:
              - 'hera-all/hera-webhook/**'
        # run only if some file in 'src' folder was changed
      - if: always() && steps.changes.outputs.hera-app == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-app; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.hera-operator == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-operator; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.hera-tspandata == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-tspandata; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.hera-log == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-log; mvn -U clean package --fail-at-end -Dmaven.test.skip=true -pl '!log-agent'; cd ../..
      - if: always() && steps.changes.outputs.hera-monitor == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-monitor; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..\
      - if: always() && steps.changes.outputs.hera-prometheus-agent == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-prometheus-agent; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.prometheus-starter-all == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/prometheus-starter-all; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.trace-etl == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/trace-etl; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.hera-demo-client == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-demo-client; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
      - if: always() && steps.changes.outputs.hera-webhook == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-webhook; mvn -U clean package --fail-at-end -Dmaven.test.skip=true; cd ../..
  check-build-20:
    name: hera test 20
    runs-on: ubuntu-latest
    if: (github.event == 'pull_request' && github.head_ref == 'refs/heads/master')
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          java-version: 20
          #settings-properties: '[{""propertyName1"": ""propertyValue1""}, {""propertyName2"": ""propertyValue2""}]'

      - run: echo '<settings>    <interactiveMode>false</interactiveMode>    <profiles>        <profile>            <repositories>                <repository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </repository>            </repositories>            <pluginRepositories>                <pluginRepository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </pluginRepository>            </pluginRepositories>            <id>artifactory</id>        </profile>    </profiles>    <activeProfiles>        <activeProfile>artifactory</activeProfile>    </activeProfiles>    <servers>        <server>            <id>github</id>            <username>${env.GITHUB_ACTOR}</username>            <password>${env.GITHUB_TOKEN}</password>        </server>    </servers>    <mirrors/>    <proxies/></settings>' > ~/.m2/settings.xml

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            hera-log:
              - 'hera-all/hera-log/**'
        # run only if some file in 'src' folder was changed
      - if: always() && steps.changes.outputs.hera-log == 'true' || github.event == 'workflow_dispatch'
        run: cd hera-all/hera-log; mvn -U clean package --fail-at-end -Dmaven.test.skip=true -pl 'log-agent'; cd ../..

---
# This is a basic workflow to help you get started with Actions

name: Jcommon test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    paths:
    - 'jcommon/**'
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check-build-8:
    name: Jcommon test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.head_ref == 'refs/heads/jdk8'
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          java-version: 8
          #settings-properties: '[{""propertyName1"": ""propertyValue1""}, {""propertyName2"": ""propertyValue2""}]'

      - run: echo '<settings>    <interactiveMode>false</interactiveMode>    <profiles>        <profile>            <repositories>                <repository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </repository>            </repositories>            <pluginRepositories>                <pluginRepository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </pluginRepository>            </pluginRepositories>            <id>artifactory</id>        </profile>    </profiles>    <activeProfiles>        <activeProfile>artifactory</activeProfile>    </activeProfiles>    <servers>        <server>            <id>github</id>            <username>${env.GITHUB_ACTOR}</username>            <password>${env.GITHUB_TOKEN}</password>        </server>    </servers>    <mirrors/>    <proxies/></settings>' > ~/.m2/settings.xml
      - run: cd jcommon; mvn -U clean package --fail-at-end -Dmaven.test.skip=true -pl '!docean,!docean-plugin/docean-plugin-http-server'
  check-build-20:
    name: Jcommon test 20
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.head_ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          java-version: 20
          #settings-properties: '[{""propertyName1"": ""propertyValue1""}, {""propertyName2"": ""propertyValue2""}]'

      - run: echo '<settings>    <interactiveMode>false</interactiveMode>    <profiles>        <profile>            <repositories>                <repository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </repository>            </repositories>            <pluginRepositories>                <pluginRepository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </pluginRepository>            </pluginRepositories>            <id>artifactory</id>        </profile>    </profiles>    <activeProfiles>        <activeProfile>artifactory</activeProfile>    </activeProfiles>    <servers>        <server>            <id>github</id>            <username>${env.GITHUB_ACTOR}</username>            <password>${env.GITHUB_TOKEN}</password>        </server>    </servers>    <mirrors/>    <proxies/></settings>' > ~/.m2/settings.xml
      - run: cd jcommon; mvn -U clean package --fail-at-end -Dmaven.test.skip=true

  check-build-21:
    name: Jcommon test 21
    runs-on: ubuntu-latest
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.7.0
        with:
          java-version: 21
          #settings-properties: '[{""propertyName1"": ""propertyValue1""}, {""propertyName2"": ""propertyValue2""}]'

      - run: echo '<settings>    <interactiveMode>false</interactiveMode>    <profiles>        <profile>            <repositories>                <repository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </repository>            </repositories>            <pluginRepositories>                <pluginRepository>                    <snapshots />                    <id>ossrh</id>                    <name>ossrh-snapshot</name>                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>                </pluginRepository>            </pluginRepositories>            <id>artifactory</id>        </profile>    </profiles>    <activeProfiles>        <activeProfile>artifactory</activeProfile>    </activeProfiles>    <servers>        <server>            <id>github</id>            <username>${env.GITHUB_ACTOR}</username>            <password>${env.GITHUB_TOKEN}</password>        </server>    </servers>    <mirrors/>    <proxies/></settings>' > ~/.m2/settings.xml
      - run: cd jcommon; mvn -U clean package --fail-at-end -Dmaven.test.skip=true

---
"
Y4tacker;JavaSec;Y4tacker/JavaSec;https://github.com/Y4tacker/JavaSec;https://api.github.com/repos/Y4tacker/JavaSec;main;18/10/2021 03:21;22/04/2024 05:37;FALSE;
ce-automne;TomcatMemShell;ce-automne/TomcatMemShell;https://github.com/ce-automne/TomcatMemShell;https://api.github.com/repos/ce-automne/TomcatMemShell;main;18/10/2021 12:59;18/04/2024 04:33;FALSE;
YunaiV;ruoyi-vue-pro;YunaiV/ruoyi-vue-pro;https://github.com/YunaiV/ruoyi-vue-pro;https://api.github.com/repos/YunaiV/ruoyi-vue-pro;master;24/01/2021 04:18;22/04/2024 12:46;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  # pull_request:
  #   branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.Java }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -Dmaven.test.skip=true

---
name: yudao-ui-admin CI

# 在master分支发生push事件时触发。
on:
  push:
    branches: [ master ]
  # pull_request:
  #   branches: [ master ]
env: # 设置环境变量
  TZ: Asia/Shanghai # 时区（设置时区可使页面中的`最近更新时间`使用时区时间）
  WORK_DIR: yudao-ui-admin #工作目录

defaults:
  run:
    shell: bash
    working-directory: yudao-ui-admin

jobs:
  build: # 自定义名称
    runs-on: ubuntu-latest # 运行在虚拟机环境ubuntu-latest

    strategy:
      matrix:
        node_version: [14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout # 步骤1
        uses: actions/checkout@v2 # 使用的动作。格式：userName/repoName。作用：检出仓库，获取源码。 官方actions库：https://github.com/actions
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.15.1

      - name: Set node version to ${{ matrix.node_version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          cache: ""yarn""
          cache-dependency-path: yudao-ui-admin/yarn.lock

      - name: Install deps
        run: node --version && yarn --version && yarn install

      - name: Build
        run: yarn build:prod
  
      # 查看 workflow 的文档来获取更多信息
      # @see https://github.com/crazy-max/ghaction-github-pages


---
"
opensearch-project;OpenSearch;opensearch-project/OpenSearch;https://github.com/opensearch-project/OpenSearch;https://api.github.com/repos/opensearch-project/OpenSearch;main;29/01/2021 23:10;22/04/2024 10:02;TRUE;"name: Gradle Assemble
on: [pull_request]

jobs:
  assemble:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [ 11, 17, 21 ]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
      - name: Setup docker (missing on MacOS)
        if: runner.os == 'macos'
        run: |
          brew install docker
          colima start
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock
      - name: Run Gradle (assemble)
        run: |
          ./gradlew assemble --parallel --no-build-cache -PDISABLE_BUILD_CACHE

---
name: Releases

on:
  push:
    tags:
      - '*'

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: GitHub App token
        id: github_app_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: 22958780
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - uses: actions/checkout@v4
      - uses: ncipollo/release-action@v1
        with:
          github_token: ${{ steps.github_app_token.outputs.token }}
          bodyFile: release-notes/opensearch.release-notes-${{steps.tag.outputs.tag}}.md

---
name: Backport
on:
  pull_request_target:
    types:
      - closed
      - labeled

jobs:
  backport:
    name: Backport
    runs-on: ubuntu-latest
    # Only react to merged PRs for security reasons.
    # See https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target.
    if: >
      github.event.pull_request.merged
      && (
        github.event.action == 'closed'
        || (
          github.event.action == 'labeled'
          && contains(github.event.label.name, 'backport')
        )
      )
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: GitHub App token
        id: github_app_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: 22958780

      - name: Backport
        uses: VachaShah/backport@v2.2.0
        with:
          github_token: ${{ steps.github_app_token.outputs.token }}
          head_template: backport/backport-<%= number %>-to-<%= base %>
          failure_labels: backport-failed

---
name: ""Changelog Verifier""
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  # Enforces the update of a changelog file on every pull request
  verify-changelog:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: dangoslen/changelog-enforcer@v3
        id: verify-changelog-3x
        with:
          skipLabels: ""autocut, skip-changelog""
          changeLogPath: 'CHANGELOG-3.0.md'
        continue-on-error: true
      - uses: dangoslen/changelog-enforcer@v3
        id: verify-changelog
        with:
          skipLabels: ""autocut, skip-changelog""
          changeLogPath: 'CHANGELOG.md'
        continue-on-error: true
      - run: |
          # The check was possibly skipped leading to success for both the jobs
          if [[ ${{ steps.verify-changelog-3x.outcome }} == 'success' && ${{ steps.verify-changelog.outcome }} == 'success' ]]; then
            exit 0
          fi
          
          if [[ ${{ steps.verify-changelog-3x.outcome }} == 'failure' && ${{ steps.verify-changelog.outcome }} == 'failure' ]]; then
            echo ""error: Please ensure a changelog entry exists in CHANGELOG.md or CHANGELOG-3.0.md""
            exit 1
          fi
          
          # Concatenates the labels and checks if the string contains ""backport""
          has_backport_label=${{ contains(join(github.event.pull_request.labels.*.name, ', '), 'backport')}}
          if [[ ${{ steps.verify-changelog.outcome }} == 'success' && $has_backport_label == false ]]; then
            echo ""error: Please make sure that the PR has a backport label associated with it when making an entry to the CHANGELOG.md file""
            exit 1
          fi

---
name: Copy labels from linked issues
on:
  pull_request_target:
    types: [opened, edited, review_requested, synchronize, reopened, ready_for_review]

jobs:
  copy-issue-labels:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest
    permissions:
      issues: read
      contents: read
      pull-requests: write
    steps:
      - name: copy-issue-labels
        uses: michalvankodev/copy-issue-labels@v1.3.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          labels-to-exclude: |
            untriaged
            triaged

---
name: Create Documentation Issue
on:
  pull_request:
    types:
      - labeled
env:
  PR_NUMBER: ${{ github.event.number }}

jobs:
  create-issue:
    if: ${{ github.event.label.name == 'needs-documentation' }}
    runs-on: ubuntu-latest
    name: Create Documentation Issue
    steps:
      - name: GitHub App token
        id: github_app_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: 22958780

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Edit the issue template
        run: |
          echo ""https://github.com/opensearch-project/OpenSearch/pull/${{ env.PR_NUMBER }}."" >> ./ci/documentation/issue.md
          
      - name: Create Issue From File
        id: create-issue
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: Add documentation related to new feature
          content-filepath: ./ci/documentation/issue.md
          labels: documentation
          repository: opensearch-project/documentation-website
          token: ${{ steps.github_app_token.outputs.token }}
      
      - name: Print Issue
        run: echo Created related documentation issue ${{ steps.create-issue.outputs.issue-number }}

---
name: Delete merged branch of the backport PRs
on: 
  pull_request:
    types:
      - closed
  
jobs:
  delete-branch:
    runs-on: ubuntu-latest
    if: startsWith(github.event.pull_request.head.ref,'backport/')
    steps:
      - name: Delete merged branch
        uses: SvanBoxel/delete-merged-branch@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
name: Dependabot PR actions
on: pull_request

jobs:
  dependabot:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: GitHub App token
        id: github_app_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: 22958780

      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.github_app_token.outputs.token }}

      - name: Update Gradle SHAs
        run: |
          ./gradlew updateSHAs

      - name: Commit the changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Updating SHAs
          branch: ${{ github.head_ref }}
          commit_user_name: dependabot[bot]
          commit_user_email: support@github.com
          commit_options: '--signoff'

      - name: Run spotless
        run: |
          ./gradlew spotlessApply

      - name: Commit the changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Spotless formatting
          branch: ${{ github.head_ref }}
          commit_user_name: dependabot[bot]
          commit_user_email: support@github.com
          commit_options: '--signoff'

      - name: Update the changelog
        uses: dangoslen/dependabot-changelog-helper@v3
        with:
          version: 'Unreleased 2.x'

      - name: Commit the changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ""Update changelog""
          branch: ${{ github.head_ref }}
          commit_user_name: dependabot[bot]
          commit_user_email: support@github.com
          commit_options: '--signoff'

---
name: ""Detect Breaking Changes""
on:
  pull_request:
    branches-ignore:
      - main # This branch represents a to-be-released version of OpenSearch where breaking changes are allowed

jobs:
  detect-breaking-change:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: temurin # Temurin is a distribution of adoptium
        java-version: 21
    - uses: gradle/gradle-build-action@v3
      with:
        cache-disabled: true
        arguments: japicmp
        gradle-version: 8.7
        build-root-directory: server
    - if: failure()
      run: cat server/build/reports/java-compatibility/report.txt
    - if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: java-compatibility-report.html
        path: ${{ github.workspace }}/server/build/reports/java-compatibility/report.html
  
---
name: Gradle Check (Jenkins)
on:
  push:
    branches-ignore:
      - 'backport/**'
      - 'create-pull-request/**'
      - 'dependabot/**'
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  contents: read # to fetch code (actions/checkout)

jobs:
  gradle-check:
    if: github.repository == 'opensearch-project/OpenSearch'
    permissions:
      contents: read # to fetch code (actions/checkout)
      pull-requests: write # to create or update comment (peter-evans/create-or-update-comment)
      issues: write # To create an issue if check fails on push.

    runs-on: ubuntu-latest
    timeout-minutes: 130
    steps:
      - name: Checkout OpenSearch repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup environment variables (PR)
        if: github.event_name == 'pull_request_target'
        run: |
          echo ""pr_from_sha=$(jq --raw-output .pull_request.head.sha $GITHUB_EVENT_PATH)"" >> $GITHUB_ENV
          echo ""pr_from_clone_url=$(jq --raw-output .pull_request.head.repo.clone_url $GITHUB_EVENT_PATH)"" >> $GITHUB_ENV
          echo ""pr_to_clone_url=$(jq --raw-output .pull_request.base.repo.clone_url $GITHUB_EVENT_PATH)"" >> $GITHUB_ENV
          echo ""pr_title=$(jq --raw-output .pull_request.title $GITHUB_EVENT_PATH)"" >> $GITHUB_ENV
          echo ""pr_number=$(jq --raw-output .pull_request.number $GITHUB_EVENT_PATH)"" >> $GITHUB_ENV

      - name: Setup environment variables (Push)
        if: github.event_name == 'push'
        run: |
          repo_url=""https://github.com/opensearch-project/OpenSearch""
          ref_id=$(git rev-parse HEAD)
          branch_name=$(git rev-parse --abbrev-ref HEAD)
          echo ""branch_name=$branch_name"" >> $GITHUB_ENV
          echo ""pr_from_sha=$ref_id"" >> $GITHUB_ENV
          echo ""pr_from_clone_url=$repo_url"" >> $GITHUB_ENV
          echo ""pr_to_clone_url=$repo_url"" >> $GITHUB_ENV
          echo ""pr_title=Push trigger $branch_name $ref_id $repo_url"" >> $GITHUB_ENV
          echo ""pr_number=Null"" >> $GITHUB_ENV

      - name: Checkout opensearch-build repo
        uses: actions/checkout@v4
        with:
          repository: opensearch-project/opensearch-build
          ref: main
          path: opensearch-build

      - name: Trigger jenkins workflow to run gradle check
        run: |
          set -e
          set -o pipefail
          bash opensearch-build/scripts/gradle/gradle-check.sh ${{ secrets.JENKINS_GRADLE_CHECK_GENERIC_WEBHOOK_TOKEN }} | tee -a gradle-check.log

      - name: Setup Result Status
        if: always()
        run: |
          WORKFLOW_URL=`cat gradle-check.log | grep 'WORKFLOW_URL' | awk '{print $2}'`
          RESULT=`cat gradle-check.log | grep 'Result:' | awk '{print $2}'`
          echo ""workflow_url=$WORKFLOW_URL"" >> $GITHUB_ENV
          echo ""result=$RESULT"" >> $GITHUB_ENV

      - name: Upload Coverage Report
        if: success()
        uses: codecov/codecov-action@v4
        with:
          files: ./codeCoverage.xml

      - name: Create Comment Success
        if: ${{ github.event_name == 'pull_request_target' && success() && env.result == 'SUCCESS' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.pr_number }}
          body: |
            :white_check_mark: Gradle check result for ${{ env.pr_from_sha }}: [${{ env.result }}](${{ env.workflow_url }})

      - name: Extract Test Failure
        if: ${{ github.event_name == 'pull_request_target' && env.result != 'SUCCESS' }}
        run: |
          TEST_FAILURES=`curl -s ""${{ env.workflow_url }}/testReport/api/json?tree=suites\[cases\[status,className,name\]\]"" | jq -r '.. | objects | select(.status==""FAILED"",.status==""REGRESSION"") | (.className + ""."" +  .name)' | uniq -c | sort -n -r | head -n 10`
          if [[ ""$TEST_FAILURES"" != """" ]]
          then
            echo ""test_failures<<EOF"" >> $GITHUB_ENV
            echo """" >> $GITHUB_ENV
            echo ""* **TEST FAILURES:**"" >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            echo ""$TEST_FAILURES"" >> $GITHUB_ENV
            echo '```' >> $GITHUB_ENV
            echo ""EOF"" >> $GITHUB_ENV
          fi

      - name: Create Comment Flaky
        if: ${{ github.event_name == 'pull_request_target' && success() && env.result != 'SUCCESS' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.pr_number }}
          body: |
            :grey_exclamation: Gradle check result for ${{ env.pr_from_sha }}: [${{ env.result }}](${{ env.workflow_url }}) ${{ env.test_failures }}

            Please review all [flaky tests](https://github.com/opensearch-project/OpenSearch/blob/main/DEVELOPER_GUIDE.md#flaky-tests) that succeeded after retry and create an issue if one does not already exist to track the flaky failure.

      - name: Create Comment Failure
        if: ${{ github.event_name == 'pull_request_target' && failure() }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.pr_number }}
          body: |
            :x: Gradle check result for ${{ env.pr_from_sha }}: [${{ env.result }}](${{ env.workflow_url }})

            Please examine the workflow log, locate, and copy-paste the failure(s) below, then iterate to green. Is the failure [a flaky test](https://github.com/opensearch-project/OpenSearch/blob/main/DEVELOPER_GUIDE.md#flaky-tests) unrelated to your change?

      - name: Create Issue On Push Failure
        if: ${{ github.event_name == 'push' && failure() }}
        uses: dblock/create-a-github-issue@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          assignees: ${{ github.event.head_commit.author.username }}, ${{ github.triggering_actor }}
          filename: .github/ISSUE_TEMPLATE/failed_check.md

---
name: Link Checker
on:
  schedule:
    - cron:  '0 0 * * *'
permissions:
  contents: read # to fetch code (actions/checkout)
jobs:
  linkchecker:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: lychee Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@v1.9.3
        with:
          args: --accept=200,403,429 --exclude-mail **/*.html **/*.md **/*.txt **/*.json --exclude-file .lychee.excludes
          fail: true
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

---
# This workflow will check out, build, and publish snapshots of lucene.

name: OpenSearch Lucene snapshots

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      ref:
        description: 'Lucene ref in github.com/apache/lucene'
        type: string
        required: false
        default: 'main'

jobs:
  publish-snapshots:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Lucene ref:${{ github.event.inputs.ref }}
        uses: actions/checkout@v4
        with:
          repository: 'apache/lucene'
          ref: ${{ github.event.inputs.ref }}

      - name: Get Java Min Version and Lucene Revision from Lucene Repository
        run: |
          java_version=`cat build.gradle | grep minJavaVersion | head -1 | grep -Eo '_[0-9]+$' | tr -d '_'`
          echo ""JAVA_VERSION=$java_version"" >> $GITHUB_ENV
          echo ""REVISION=$(git rev-parse --short HEAD)"" >> $GITHUB_ENV

      - name: Setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Initialize gradle settings
        run: ./gradlew localSettings

      - name: Publish Lucene to local maven repo.
        run: ./gradlew publishJarsPublicationToMavenLocal -Pversion.suffix=snapshot-${{ env.REVISION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LUCENE_SNAPSHOTS_SECRET_ROLE }}
          aws-region: us-east-1

      - name: Get S3 Bucket
        id: get_s3_bucket
        run: |
          lucene_snapshots_bucket=`aws secretsmanager get-secret-value --secret-id jenkins-artifact-bucket-name --query SecretString --output text`
          echo ""::add-mask::$lucene_snapshots_bucket""
          echo ""LUCENE_SNAPSHOTS_BUCKET=$lucene_snapshots_bucket"" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LUCENE_SNAPSHOTS_S3_ROLE }}
          aws-region: us-east-1

      - name: Copy files to S3 with the aws CLI (New)
        run: |
          aws s3 cp ~/.m2/repository/org/apache/lucene/ s3://${{ steps.get_s3_bucket.outputs.LUCENE_SNAPSHOTS_BUCKET }}/snapshots/lucene/org/apache/lucene/  --recursive --no-progress

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LUCENE_SNAPSHOTS_ROLE }}
          aws-region: us-west-2

        # We will remove this step once all the lucene snapshots old links are updated with the new one
      - name: Copy files to S3 with the aws CLI (Old)
        run: |
          aws s3 cp ~/.m2/repository/org/apache/lucene/ s3://${{ secrets.LUCENE_SNAPSHOTS_BUCKET }}/snapshots/lucene/org/apache/lucene/  --recursive --no-progress

---
name: Maintainers approval

on:
  pull_request_review:

jobs:
  maintainer-approved-check:
    name: Minimum approval count
    runs-on: ubuntu-latest
    steps:
      - id: find-maintainers
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            // Get the collaborators - filtered to maintainer permissions
            const maintainersResponse = await github.request('GET /repos/{owner}/{repo}/collaborators', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                permission: 'maintain',
                affiliation: 'all',
                per_page: 100
            });

            return maintainersResponse.data.map(item => item.login).join(', ');

      - uses: peternied/required-approval@v1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          min-required: 1
          required-approvers-list: ${{ steps.find-maintainers.outputs.result }}

---
name: Add comment
on:
  issues:
    types:
      - labeled
jobs:
  add-comment:
    if: github.event.label.name == 'poc'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Add comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ### POC Checklist:

            Please go through the following checklist to ensure these items are taken into account while designing the POC.

            - [ ] Supports safe upgrade paths from all supported BWC versions to the current version
            - [ ] Supports compatibility with all plugins
                - [ ] opensearch-alerting
                - [ ] opensearch-anomaly-detection
                - [ ] opensearch-asynchronous-search
                - [ ] opensearch-cross-cluster-replication
                - [ ] opensearch-geospatial
                - [ ] opensearch-index-management
                - [ ] opensearch-job-scheduler
                - [ ] opensearch-knn
                - [ ] opensearch-ml
                - [ ] opensearch-notifications
                - [ ] opensearch-notifications-core
                - [ ] opensearch-observability
                - [ ] opensearch-performance-analyzer
                - [ ] opensearch-reports-scheduler
                - [ ] opensearch-security
                - [ ] opensearch-sql
            - [ ] Supports lucene upgrades across minor lucene versions
            - [ ] Supports lucene upgrades across major lucene versions
            - [ ] Supports lucene upgrades across underlying lucene codec bumps (Eg: Lucene95Codec -> Lucene96Codec)
            - [ ] Supports wire compatibility of OpenSearch
            - [ ] Plan to measure performance degradation/improvement (if any)
            - [ ] Plan to document any user facing changes introduced by this feature
            - [ ] Ensure working and passing CI

            Thank you for your contribution!


---
name: Gradle Precommit
on: [pull_request]

jobs:
  precommit:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java: [ 11, 17, 21 ]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: gradle
      - name: Run Gradle (precommit)
        run: |
          ./gradlew javadoc precommit --parallel

---
name: Publish snapshots to maven

on:
  workflow_dispatch:
  push:
      branches:
        - main
        - '[0-9]+.[0-9]+'
        - '[0-9]+.x'

jobs:
  build-and-publish-snapshots:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: 17

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PUBLISH_SNAPSHOTS_ROLE }}
          aws-region: us-east-1

      - name: Publish snapshots to maven
        run: |
          export SONATYPE_USERNAME=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-username --query SecretString --output text)
          export SONATYPE_PASSWORD=$(aws secretsmanager get-secret-value --secret-id maven-snapshots-password --query SecretString --output text)
          echo ""::add-mask::$SONATYPE_USERNAME""
          echo ""::add-mask::$SONATYPE_PASSWORD""
          ./gradlew publishNebulaPublicationToSnapshotsRepository

---
name: Pull Request Checks

on:
  pull_request:
    types:
      [
        opened,
        edited,
        review_requested,
        synchronize,
        reopened,
        ready_for_review,
      ]

jobs:
  verify-description-checklist:
    name: Verify Description Checklist
    runs-on: ubuntu-latest
    steps:
      - uses: peternied/check-pull-request-description-checklist@v1.1
        if: github.actor != 'dependabot[bot]'
        with:
          checklist-items: |
            New functionality includes testing.
            All tests pass
            New functionality has been documented.
            New functionality has javadoc added
            Commits are signed per the DCO using --signoff
            Commit changes are listed out in CHANGELOG.md file (See: [Changelog](../blob/main/CONTRIBUTING.md#changelog))

---
name: Label Stalled PRs
on:
  schedule:
    - cron: '15 15 * * *' # Run every day at 15:15 UTC / 7:15 PST / 8:15 PDT
permissions:
  pull-requests: write
jobs:
  stale:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest
    steps:
      - name: GitHub App token
        id: github_app_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: 22958780
      - name: Stale PRs
        uses: actions/stale@v9
        with:
          repo-token: ${{ steps.github_app_token.outputs.token }}
          stale-pr-label: 'stalled'
          stale-pr-message: 'This PR is stalled because it has been open for 30 days with no activity.'
          days-before-pr-stale: 30
          days-before-issue-stale: -1
          days-before-pr-close: -1
          days-before-issue-close: -1

---
name: Auto triage based on the component label in issue

on:
  issues:
    types: [opened, reopened, transferred]

jobs:
  apply-label:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7.0.1
        with:
          script: |
            const { issue, repository } = context.payload;
            const { number, body } = issue;
            const { owner, name } = repository;
            const regex = /###\sRelated\scomponent\n\n(\w.*)\n/gm;
            let match;
            while ( ( match = regex.exec( body ) ) ) {
              const [ , component_label ] = match;
              await github.rest.issues.addLabels( {
                owner: owner.login,
                repo: name,
                issue_number: number,
                labels: [ `${ component_label }` ],
              } );
            }
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['untriaged']
            })

---
name: Increment Version

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'the tag'
        required: true
        type: string
  push:
    tags:
      - '*.*.*'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    if: github.repository == 'opensearch-project/OpenSearch'
    runs-on: ubuntu-latest
    steps:
      - name: Fetch tag and version information
        run: |
          TAG=$(echo ""${GITHUB_REF#refs/*/}"")
          if [ -n ${{ github.event.inputs.tag }} ]; then
            TAG=${{ github.event.inputs.tag }}
          fi
          CURRENT_VERSION_ARRAY=($(echo ""$TAG"" | tr . '\n'))
          BASE=$(IFS=. ; echo ""${CURRENT_VERSION_ARRAY[*]:0:2}"")
          BASE_X=$(IFS=. ; echo ""${CURRENT_VERSION_ARRAY[*]:0:1}.x"")
          CURRENT_VERSION=$(IFS=. ; echo ""${CURRENT_VERSION_ARRAY[*]:0:3}"")
          CURRENT_VERSION_UNDERSCORE=$(IFS=_ ; echo ""V_${CURRENT_VERSION_ARRAY[*]:0:3}"")
          CURRENT_VERSION_ARRAY[2]=$((CURRENT_VERSION_ARRAY[2]+1))
          NEXT_VERSION=$(IFS=. ; echo ""${CURRENT_VERSION_ARRAY[*]:0:3}"")
          NEXT_VERSION_UNDERSCORE=$(IFS=_ ; echo ""V_${CURRENT_VERSION_ARRAY[*]:0:3}"")
          if [[ ${#CURRENT_VERSION_ARRAY[2]} -gt 1 ]]; then
            NEXT_VERSION_ID=""${CURRENT_VERSION_ARRAY[0]:0:3}0${CURRENT_VERSION_ARRAY[1]:0:3}${CURRENT_VERSION_ARRAY[2]:0:3}99""
          else
            NEXT_VERSION_ID=$(IFS=0 ; echo ""${CURRENT_VERSION_ARRAY[*]:0:3}99"")
          fi
          echo ""TAG=$TAG"" >> $GITHUB_ENV
          echo ""BASE=$BASE"" >> $GITHUB_ENV
          echo ""BASE_X=$BASE_X"" >> $GITHUB_ENV
          echo ""CURRENT_VERSION=$CURRENT_VERSION"" >> $GITHUB_ENV
          echo ""CURRENT_VERSION_UNDERSCORE=$CURRENT_VERSION_UNDERSCORE"" >> $GITHUB_ENV
          echo ""NEXT_VERSION=$NEXT_VERSION"" >> $GITHUB_ENV
          echo ""NEXT_VERSION_UNDERSCORE=$NEXT_VERSION_UNDERSCORE"" >> $GITHUB_ENV
          echo ""NEXT_VERSION_ID=$NEXT_VERSION_ID"" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE }}

      - name: Increment Patch Version on Major.Minor branch
        uses: peternied/opensearch-core-version-updater@v1
        with:
          previous-version: ${{ env.CURRENT_VERSION }}
          new-version: ${{ env.NEXT_VERSION }}
          update-current: true

      - name: Create PR for BASE
        id: base_pr
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ env.BASE }}
          branch: 'create-pull-request/patch-${{ env.BASE }}'
          commit-message: Increment version to ${{ env.NEXT_VERSION }}
          signoff: true
          delete-branch: true
          labels: |
            autocut
          title: '[AUTO] Increment version to ${{ env.NEXT_VERSION }}.'
          body: |
            I've noticed that a new tag ${{ env.TAG }} was pushed, and incremented the version from ${{ env.CURRENT_VERSION }} to ${{ env.NEXT_VERSION }}.

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BASE_X }}

      - name: Add Patch Version on Major.X branch
        uses: peternied/opensearch-core-version-updater@v1
        with:
          previous-version: ${{ env.CURRENT_VERSION }}
          new-version: ${{ env.NEXT_VERSION }}
          update-current: false

      - name: Create PR for BASE_X
        id: base_x_pr
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ env.BASE_X }}
          branch: 'create-pull-request/patch-${{ env.BASE_X }}'
          commit-message: Add bwc version ${{ env.NEXT_VERSION }}
          signoff: true
          delete-branch: true
          labels: |
            autocut
          title: '[AUTO] [${{ env.BASE_X }}] Add bwc version ${{ env.NEXT_VERSION }}.'
          body: |
            I've noticed that a new tag ${{ env.TAG }} was pushed, and added a bwc version ${{ env.NEXT_VERSION }}.

      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Add Patch Version on main branch
        uses: peternied/opensearch-core-version-updater@v1
        with:
          previous-version: ${{ env.CURRENT_VERSION }}
          new-version: ${{ env.NEXT_VERSION }}
          update-current: false

      - name: Create PR for main
        id: main_pr
        uses: peter-evans/create-pull-request@v6
        with:
          base: main
          branch: 'create-pull-request/patch-main'
          commit-message: Add bwc version ${{ env.NEXT_VERSION }}
          signoff: true
          delete-branch: true
          labels: |
            autocut
          title: '[AUTO] [main] Add bwc version ${{ env.NEXT_VERSION }}.'
          body: |
            I've noticed that a new tag ${{ env.TAG }} was pushed, and added a bwc version ${{ env.NEXT_VERSION }}.

      - name: Create tracking issue
        id: create-issue
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const body = `
             ### Description
             A new version of OpenSearch was released, to prepare for the next release new version numbers need to be updated in all active branches of development.

             ### Exit Criteria
             Review and merged the following pull requests
             - [ ] ${{ steps.base_pr.outputs.pull-request-url }}
             - [ ] ${{ steps.base_x_pr.outputs.pull-request-url }}
             - [ ] ${{ steps.main_pr.outputs.pull-request-url }}

             ### Additional Context
             See project wide guidance on branching and versions [[link]](https://github.com/opensearch-project/.github/blob/main/RELEASING.md).
            `
            const { data: issue }= await github.rest.issues.create({"
threeknowbigdata;flink_second_understand;threeknowbigdata/flink_second_understand;https://github.com/threeknowbigdata/flink_second_understand;https://api.github.com/repos/threeknowbigdata/flink_second_understand;master;23/10/2021 13:03;18/04/2024 08:54;FALSE;
dataease;dataease;dataease/dataease;https://github.com/dataease/dataease;https://api.github.com/repos/dataease/dataease;dev-v2;02/02/2021 05:10;22/04/2024 12:56;TRUE;"name: Typos Check
on: [push, pull_request]

jobs:
  run:
    name: Spell Check with Typos
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Actions Repository
      uses: actions/checkout@v2

    - name: Check spelling
      uses: crate-ci/typos@master

---
"
sanfengAndroid;FakeXposed;sanfengAndroid/FakeXposed;https://github.com/sanfengAndroid/FakeXposed;https://api.github.com/repos/sanfengAndroid/FakeXposed;main;03/02/2021 09:40;17/04/2024 17:21;TRUE;"name: Android CI

on:
  push:
    branches: [ main ]

jobs:
  build:
#    name: Build Apk on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os: [ ubuntu-latest, windows-latest, macOS-latest ]
    name: Build Apk on ubuntu-latest
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set up GitHub env (Windows)
        if: runner.os == 'Windows'
        run: |
          echo ""ANDROID_SDK_ROOT=$env:ANDROID_SDK_ROOT"" >> $env:GITHUB_ENV

      - name: Set up GitHub env (Unix)
        if: runner.os != 'Windows'
        run: |
          echo ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT >> $GITHUB_ENV

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build release
        run:  python build.py -vrm -f ${{ secrets.storeFileBase64 }} -s ${{ secrets.signConfig }} -l 3 all

      - name: Build debug
        run: python build.py -vm -f ${{ secrets.storeFileBase64 }} -s ${{ secrets.signConfig }} all

      - name: Upload a Build Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2.2.2
        with:
          name: ${{ github.sha }}
          path: out
---
"
itsdrnoob;DataMonitor;itsdrnoob/DataMonitor;https://github.com/itsdrnoob/DataMonitor;https://api.github.com/repos/itsdrnoob/DataMonitor;release/2.4.0;02/11/2021 14:35;22/04/2024 11:00;FALSE;
Skykai521;AndroidDeveloperAdvancedManual;Skykai521/AndroidDeveloperAdvancedManual;https://github.com/Skykai521/AndroidDeveloperAdvancedManual;https://api.github.com/repos/Skykai521/AndroidDeveloperAdvancedManual;main;04/11/2021 03:51;18/04/2024 03:36;FALSE;
OWASP;crAPI;OWASP/crAPI;https://github.com/OWASP/crAPI;https://api.github.com/repos/OWASP/crAPI;develop;03/02/2021 22:11;21/04/2024 01:59;TRUE;"name: PR Build

on:
  pull_request:
    paths:
      - 'services/**'
      - 'postman_collections/**'
      - 'deploy/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build-context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo ""$GITHUB_CONTEXT""
  build:
    needs: build-context
    runs-on: ubuntu-latest
    env:
      PLATFORMS: ""linux/amd64,linux/arm64""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Env seen prerun
        run: env

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Current branch name
        run: |
          echo ""Current Branch: ${{ steps.branch-name.outputs.current_branch }}""
          echo ""Target Branch: ${{ steps.branch-name.outputs.base_ref_branch }}""
          echo ""Tag if exist: ${{ steps.branch-name.outputs.tag }}""

      - name: Running on a tag.
        if: steps.branch-name.outputs.is_tag == 'true'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.tag }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=latest"" >> ${GITHUB_ENV}

      - name: Running on a branch and merge.
        if: steps.branch-name.outputs.is_tag != 'true' && github.event_name == 'push' && steps.branch-name.outputs.current_branch != 'main'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.current_branch }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=${{ steps.branch-name.outputs.current_branch }}"" >> ${GITHUB_ENV}

      - name: Running on main branch.
        if: steps.branch-name.outputs.is_tag != 'true' && github.event_name == 'push' && steps.branch-name.outputs.current_branch == 'main'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.current_branch }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=latest"" >> ${GITHUB_ENV}

      - name: Running on a branch and pull req.
        if: steps.branch-name.outputs.is_tag != 'true' && github.event_name != 'push'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.base_ref_branch }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=${{ steps.branch-name.outputs.base_ref_branch }}"" >> ${GITHUB_ENV}

      # setup Docker build action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3

      - name: Build crapi-identity image
        uses: docker/build-push-action@v3
        with:
          context: ./services/identity
          tags: crapi/crapi-identity:${{ env.TAG_LATEST }},crapi/crapi-identity:${{ env.TAG_NAME }}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha,scope=identity-service
          cache-to: type=gha,mode=max,scope=identity-service

      - name: Build crapi-workshop image
        uses: docker/build-push-action@v3
        with:
          context: ./services/workshop
          tags: crapi/crapi-workshop:${{ env.TAG_LATEST }},crapi/crapi-workshop:${{ env.TAG_NAME }}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha,scope=workshop-service
          cache-to: type=gha,mode=max,scope=workshop-service

      - name: Build crapi-community image
        uses: docker/build-push-action@v3
        with:
          context: ./services/community
          tags: crapi/crapi-community:${{ env.TAG_LATEST }},crapi/crapi-community:${{ env.TAG_NAME }}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha,scope=community-service
          cache-to: type=gha,mode=max,scope=community-service

      - name: Build crapi-web image
        uses: docker/build-push-action@v3
        with:
          context: ./services/web
          tags: crapi/crapi-web:${{ env.TAG_LATEST }},crapi/crapi-web:${{ env.TAG_NAME }}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha,scope=web-service
          cache-to: type=gha,mode=max,scope=web-service

      - name: Build gateway-service image
        uses: docker/build-push-action@v3
        with:
          context: ./services/gateway-service
          tags: crapi/gateway-service:${{ env.TAG_LATEST }},crapi/gateway-service:${{ env.TAG_NAME }}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha,scope=gateway-service
          cache-to: type=gha,mode=max,scope=gateway-service

      - name: Build mailhog image
        uses: docker/build-push-action@v3
        with:
          context: ./services/mailhog
          tags: crapi/mailhog:${{ env.TAG_LATEST }},crapi/mailhog:${{ env.TAG_NAME }}
          push: false
          load: true
          platforms: linux/amd64
          cache-from: type=gha,scope=mailhog-service
          cache-to: type=gha,mode=max,scope=mailhog-service

      - name: Show all images built
        run: docker images

      - name: Env seen
        run: env

      - name: Run crAPI using built images
        run: VERSION=${{ env.TAG_NAME }} docker-compose -f deploy/docker/docker-compose.yml --compatibility up -d

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install newman
        run: npm install -g newman

      - name: Run Postman Collection
        run: (newman run ""./postman_collections/crAPI.postman_collection.json"" -e ./postman_collections/crAPI.postman_environment.json --verbose) || true

      - name: Dump docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2

      - name: Cleanup docker
        run:  docker-compose -f deploy/docker/docker-compose.yml down --volumes --remove-orphans


  tests:
    needs: build-context
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Start the database
        run: docker-compose -f services/docker-database.yml up -d

      - name: Run identity tests
        run: |
          cd services/identity
          ./gradlew test

      - name: Run community tests
        run: |
          cd services/community
          go test -v ./...
          mkdir test-results
          go run gotest.tools/gotestsum@latest --format testname --junitfile test-results/unit-tests.xml

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.54
          working-directory: services/community


      - name: Run workshop tests
        run: |
          cd services/workshop
          pip3 install virtualenv
          virtualenv venv
          source venv/bin/activate
          pip3 install -r requirements.txt
          pip3 install -r dev-requirements.txt
          mkdir -p test-results
          source .env
          IS_TESTING=True python3 manage.py test --no-input --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/test-results/**/*.xml
            **/test-results/**/*.json

      - name: Run workshop coverage
        run: |
          cd services/workshop
          source venv/bin/activate
          source .env
          IS_TESTING=True coverage run ./manage.py test --no-input crapi
          coverage report
          coverage xml -o coverage.xml

      - name: Publish Coverage for workshop
        uses: orgoro/coverage@v3.1
        with:
            coverageFile: services/workshop/coverage.xml
            token: ${{ secrets.GITHUB_TOKEN }}

      - name: node prettier
        run: |
          cd services/web
          npm install
          npm run lint
---
name: Publish Images

on:
  push:
    branches:
      - 'develop'
      - 'main'
    tags:
      - 'v*.*.*'
    paths:
      - 'services/**'
      - 'postman_collections/**'
      - 'deploy/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build-context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo ""$GITHUB_CONTEXT""
  build:
    needs: build-context
    runs-on: ubuntu-latest
    env:
      PLATFORMS: ""linux/amd64,linux/arm64""
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Env seen prerun
        run: env

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Current branch name
        run: |
          echo ""Current Branch: ${{ steps.branch-name.outputs.current_branch }}""
          echo ""Target Branch: ${{ steps.branch-name.outputs.base_ref_branch }}""
          echo ""Tag if exist: ${{ steps.branch-name.outputs.tag }}""

      - name: Running on a tag.
        if: steps.branch-name.outputs.is_tag == 'true'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.tag }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=latest"" >> ${GITHUB_ENV}

      - name: Running on a branch and merge.
        if: steps.branch-name.outputs.is_tag != 'true' && github.event_name == 'push' && steps.branch-name.outputs.current_branch != 'main'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.current_branch }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=${{ steps.branch-name.outputs.current_branch }}"" >> ${GITHUB_ENV}

      - name: Running on main branch.
        if: steps.branch-name.outputs.is_tag != 'true' && github.event_name == 'push' && steps.branch-name.outputs.current_branch == 'main'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.current_branch }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=latest"" >> ${GITHUB_ENV}

      - name: Running on a branch and pull req.
        if: steps.branch-name.outputs.is_tag != 'true' && github.event_name != 'push'
        run: |
          echo ""TAG_NAME=${{ steps.branch-name.outputs.base_ref_branch }}"" >> ${GITHUB_ENV}
          echo ""TAG_LATEST=${{ steps.branch-name.outputs.base_ref_branch }}"" >> ${GITHUB_ENV}

      # setup Docker build action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build crapi-identity all platforms and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./services/identity
          tags: crapi/crapi-identity:${{ env.TAG_LATEST }},crapi/crapi-identity:${{ env.TAG_NAME }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=gha,scope=identity-service
          cache-to: type=gha,mode=max,scope=identity-service

      - name: Build crapi-workshop all platforms and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./services/workshop
          tags: crapi/crapi-workshop:${{ env.TAG_LATEST }},crapi/crapi-workshop:${{ env.TAG_NAME }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=gha,scope=workshop-service
          cache-to: type=gha,mode=max,scope=workshop-service

      - name: Build crapi-community all platforms and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./services/community
          tags: crapi/crapi-community:${{ env.TAG_LATEST }},crapi/crapi-community:${{ env.TAG_NAME }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=gha,scope=community-service
          cache-to: type=gha,mode=max,scope=community-service

      - name: Build crapi-web all platforms and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./services/web
          tags: crapi/crapi-web:${{ env.TAG_LATEST }},crapi/crapi-web:${{ env.TAG_NAME }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=gha,scope=web-service
          cache-to: type=gha,mode=max,scope=web-service

      - name: Build gateway-service all platforms and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./services/gateway-service
          tags: crapi/gateway-service:${{ env.TAG_LATEST }},crapi/gateway-service:${{ env.TAG_NAME }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=gha,scope=gateway-service
          cache-to: type=gha,mode=max,scope=gateway-service

      - name: Build mailhog all platforms and push to Docker Hub
        uses: docker/build-push-action@v3
        with:
          context: ./services/mailhog
          tags: crapi/mailhog:${{ env.TAG_LATEST }},crapi/mailhog:${{ env.TAG_NAME }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          cache-from: type=gha,scope=mailhog-service
          cache-to: type=gha,mode=max,scope=mailhog-service


---
"
ZhongFuCheng3y;austin;ZhongFuCheng3y/austin;https://github.com/ZhongFuCheng3y/austin;https://api.github.com/repos/ZhongFuCheng3y/austin;master;06/11/2021 10:36;22/04/2024 12:06;FALSE;
dqzg12300;MikRom;dqzg12300/MikRom;https://github.com/dqzg12300/MikRom;https://api.github.com/repos/dqzg12300/MikRom;main;09/11/2021 11:09;22/04/2024 04:47;FALSE;
SPLWare;esProc;SPLWare/esProc;https://github.com/SPLWare/esProc;https://api.github.com/repos/SPLWare/esProc;master;09/11/2021 16:41;22/04/2024 10:52;FALSE;
shatyuka;Killergram;shatyuka/Killergram;https://github.com/shatyuka/Killergram;https://api.github.com/repos/shatyuka/Killergram;master;09/11/2021 17:38;19/04/2024 08:06;FALSE;
feiniaojin;graceful-response;feiniaojin/graceful-response;https://github.com/feiniaojin/graceful-response;https://api.github.com/repos/feiniaojin/graceful-response;main;14/11/2021 08:36;22/04/2024 09:11;FALSE;
exteraSquad;exteraGram;exteraSquad/exteraGram;https://github.com/exteraSquad/exteraGram;https://api.github.com/repos/exteraSquad/exteraGram;main;23/11/2021 19:16;22/04/2024 12:52;FALSE;
API-Security;APIKit;API-Security/APIKit;https://github.com/API-Security/APIKit;https://api.github.com/repos/API-Security/APIKit;main;24/11/2021 06:55;21/04/2024 15:42;FALSE;
semicons;java_oci_manage;semicons/java_oci_manage;https://github.com/semicons/java_oci_manage;https://api.github.com/repos/semicons/java_oci_manage;main;25/11/2021 06:14;21/04/2024 14:41;FALSE;
amigoscode;microservices;amigoscode/microservices;https://github.com/amigoscode/microservices;https://api.github.com/repos/amigoscode/microservices;main;30/11/2021 15:02;22/04/2024 10:11;FALSE;
niumoo;bing-wallpaper;niumoo/bing-wallpaper;https://github.com/niumoo/bing-wallpaper;https://api.github.com/repos/niumoo/bing-wallpaper;main;08/02/2021 09:40;22/04/2024 12:07;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  schedule:
    - cron:  '2 7 * * *'
    # 每天中国时间0点2分 (UTC时间前一天16点2分)
    - cron:  '2 16 * * *'
    # 每天UTC时间0点2分
    - cron:  '2 0 * * *'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: current date
      run: date
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Run Java Application
      run: java -jar target/bing-wallpaper-jar-with-dependencies.jar
    - name: Commit files
      run: |
         git config --local user.email ""niumoo@126.com""
         git config --local user.name ""niumoo""
         git pull
         git add README.md
         git add bing-wallpaper.md
         git add picture/*
         git add docs/*
         git add zh-cn/*
         git commit -m ""update readme.md""
    - name: Push changes
      uses:  ad-m/github-push-action@master
      with:
         github_token: ${{ secrets.MY_GIT_TOKEN }}
         branch: main

---
"
dromara;easy-es;dromara/easy-es;https://github.com/dromara/easy-es;https://api.github.com/repos/dromara/easy-es;main;01/12/2021 10:05;20/04/2024 16:57;FALSE;
GuhDoy;TiebaTS;GuhDoy/TiebaTS;https://github.com/GuhDoy/TiebaTS;https://api.github.com/repos/GuhDoy/TiebaTS;main;19/02/2021 09:28;22/04/2024 10:24;TRUE;"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Setup JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Build with Gradle
        run: bash ./gradlew assembleRelease

      - name: Sign Android release
        if: success()
        id: sign
        uses: r0adkll/sign-android-release@v1
        env:
          BUILD_TOOLS_VERSION: ""33.0.2""
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Retrieve filename
        if: success()
        run: echo ""FILENAME=$(basename ${{ steps.sign.outputs.signedReleaseFile }})"" >> $GITHUB_ENV
        shell: bash

      - name: Upload built apk
        if: success()
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: ${{ steps.sign.outputs.signedReleaseFile }}

      - name: Write job summary
        if: success()
        run: echo ""### [下载链接](${{ steps.upload.outputs.artifact-url }})"" >> $GITHUB_STEP_SUMMARY

      - name: Send commit to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |+
            New push to github!
            *${{ github.event.head_commit.message }}* by ${{ github.event.head_commit.author.name }}
            See commit detail [here](${{ github.event.head_commit.url }})
            Snapshot apk is attached
          document: ${{ github.workspace }}/${{ steps.sign.outputs.signedReleaseFile }}

  skipped:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Send commit to telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |+
            New push to github!
            *${{ github.event.head_commit.message }}* by ${{ github.event.head_commit.author.name }}
            See commit detail [here](${{ github.event.head_commit.url }})
            This push skipped building

---
"
grishka;Houseclub;grishka/Houseclub;https://github.com/grishka/Houseclub;https://api.github.com/repos/grishka/Houseclub;master;20/02/2021 11:49;23/03/2024 09:53;TRUE;"on:
  issues:
    types: [opened, edited]

jobs:
  auto_close_issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Automatically close issues that don't follow the issue template
        uses: roots/issue-closer@v1.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-close-message: ""@${issue.user.login}, this issue is being automatically closed because it does not follow the issue template.""
          issue-pattern: "".*please make sure that this issue is related to the app itself.*""
---
"
E869120;math-algorithm-book;E869120/math-algorithm-book;https://github.com/E869120/math-algorithm-book;https://api.github.com/repos/E869120/math-algorithm-book;main;08/12/2021 09:20;20/04/2024 17:36;FALSE;
apache;solr;apache/solr;https://github.com/apache/solr;https://api.github.com/repos/apache/solr;main;23/02/2021 01:12;22/04/2024 12:47;TRUE;"name: Solr Script Tests

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - '.github/workflows/bin-solr-test.yml'
      - 'solr/bin/**'
      - 'solr/packaging/**'

jobs:
  test:
    name: Run Solr Script Tests

    runs-on: ubuntu-latest

    env:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

    steps:
    # Setup
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
        java-package: jdk
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
        key: ${{ runner.os }}-gradle-binsolr-${{ hashFiles('versions.lock') }}
        restore-keys: |
          ${{ runner.os }}-gradle-binsolr-
          ${{ runner.os }}-gradle-
    - name: Test the bin/solr script
      run: ./gradlew integrationTests
    - name: Archive logs
      if: ${{ failure() }}
      uses: actions/upload-artifact@v3
      with:
        name: logs
        path: solr/packaging/build/test-output


---
name: Docker Build & Test

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - '.github/workflows/docker-test.yml'
      - 'solr/bin/**'
      - 'solr/prometheus-exporter/bin/**'
      - 'solr/docker/**'
      - 'solr/packaging/**'

jobs:
  test:
    name: Build and test Docker image

    runs-on: ubuntu-latest

    env:
      SOLR_DOCKER_IMAGE_REPO: github-pr/solr
      SOLR_DOCKER_IMAGE_TAG: ${{github.event.number}}
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

    steps:
    # Setup
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
        java-package: jdk
    - name: Install ACL
      run: sudo apt-get install acl
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
        key: ${{ runner.os }}-gradle-docker-${{ hashFiles('versions.lock') }}
        restore-keys: |
          ${{ runner.os }}-gradle-docker-
          ${{ runner.os }}-gradle-
    - name: Build Docker image with Gradle
      run: ./gradlew solr:docker:docker
    - name: Run tests on Docker image
      run: ./gradlew solr:docker:testDocker

---
name: Gradle Precommit

on: 
  pull_request:
    branches:
    - '**'

jobs:
  test:
    name: gradle check w/ Java 11

    runs-on: ubuntu-latest

    env:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

    steps:
    # Setup
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
        java-package: jdk

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
        key: ${{ runner.os }}-gradle-precommit-${{ hashFiles('versions.lock') }}
        restore-keys: |
          ${{ runner.os }}-gradle-precommit-
          ${{ runner.os }}-gradle-

    - name: Run gradle check (without tests)
      run: ./gradlew check -x test -Ptask.times=true

    - uses: gradle/wrapper-validation-action@v1

---
name: ""Pull Request Labeler""
on:
  - pull_request_target

jobs:
  labeler:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v5
        with:
          sync-labels: true
      

---
name: SolrJ Tests

on:
  pull_request:
    branches:
      - 'main'
    paths:
      - '.github/workflows/solrj-test.yml'
      - 'solr/solrj/**'

jobs:
  test:
    name: Run SolrJ Tests

    runs-on: ubuntu-latest

    env:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

    steps:
    # Setup
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
        java-package: jdk
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
        key: ${{ runner.os }}-gradle-solrj-${{ hashFiles('versions.lock') }}
        restore-keys: |
          ${{ runner.os }}-gradle-solrj-
          ${{ runner.os }}-gradle-
    - name: Test the SolrJ Package
      run: ./gradlew solr:solrj:test

---
# This workflow warns of PRs that have had no activity for a specified amount of time.
#
# For more information, see https://github.com/actions/stale
name: Mark stale pull requests

on:
  # Run every day at 00:00 UTC
  schedule:
    - cron: '0 0 * * *'
  # Or run on demand
  workflow_dispatch:

jobs:
  stale:
    if: github.repository == 'apache/solr'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      actions: write
    steps:
      - uses: actions/stale@v9
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

          days-before-pr-stale: 60
          days-before-issue-stale: -1   # we don't use issues
          days-before-close: -1         # don't close stale PRs/issues
          exempt-draft-pr: true         # don't mark draft PRs as stale
          stale-pr-label: ""stale""       # label to use when marking as stale

          stale-pr-message: >
            This PR had no visible activity in the past 60 days, labeling it as stale.
            Any new activity will remove the stale label. To attract more reviewers, please tag
            someone or notify the dev@solr.apache.org mailing list.
            Thank you for your contribution!

          # TODO: Increase budget after initial testing
          operations-per-run: 30        # operations budget

---
name: Solr Tests

on:
  pull_request:
    branches:
      - 'main'

jobs:
  test:
    name: Run Solr Tests using Crave.io resources

    runs-on: self-hosted

    steps:
    - name: Destroy previous clone
      run: crave clone destroy -y /crave-devspaces/pipeline/runs/${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER} || echo ""Clone did not exist""
      continue-on-error: true
    - name: Crave clone sources
      run: crave clone create --projectID 39 /crave-devspaces/pipeline/runs/${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}
    - name: Checkout the correct branch
      run: |
        git -C /crave-devspaces/pipeline/runs/${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER} fetch origin ${GITHUB_REF}:${GITHUB_REF}
        git -C /crave-devspaces/pipeline/runs/${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER} checkout ${GITHUB_REF}
    - name: Initialize, build, test
      run: |
        cd /crave-devspaces/pipeline/runs/${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}
        crave run --clean
    - name: Delete Clone
      run: crave clone destroy -y /crave-devspaces/pipeline/runs/${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}

---
"
apache;lucene;apache/lucene;https://github.com/apache/lucene;https://api.github.com/repos/apache/lucene;main;23/02/2021 18:16;22/04/2024 12:47;TRUE;"# This workflow warns of PRs that have had no activity for a specified amount of time.
#
# For more information, see https://github.com/actions/stale
name: Mark stale pull requests

on:
  # Run every day at 00:00 UTC
  schedule:
  - cron: '0 0 * * *'
  # Or run on demand
  workflow_dispatch:

jobs:
  stale:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write

    steps:
      - uses: actions/stale@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

          days-before-pr-stale: 14
          days-before-issue-stale: -1   # don't mark issues as stale
          exempt-draft-pr: true         # don't mark draft PRs as stale

          days-before-close: -1         # don't close stale PRs/issues

          stale-pr-message: >
            This PR has not had activity in the past 2 weeks, labeling it as stale.
            If the PR is waiting for review, notify the dev@lucene.apache.org list.
            Thank you for your contribution!

          debug-only: false             # turn on to run the action without applying changes
          operations-per-run: 500       # operations budget

# The table shows the cost in operations of all combinations of stale / not-stale for a PR.
# Processing a non-PR issue takes 0 operations, since we don't perform any action on it.
#
#                            +-----------------------+
#            number of       |  state after workflow |
#           operations       +-----------+-----------+
#                            |   stale   | not stale |
#     +----------+-----------+-----------+-----------+
#     |  state   |   stale   |     3     |     4     |
#     |  before  +-----------+-----------+-----------+
#     | workflow | not stale |     5     |     1     |
#     +----------+-----------+-----------+-----------+

---
name: ""Run checks: all modules""

on: 
  workflow_dispatch:

  pull_request:
    branches:
      - '*'

  push:
    branches:
      - 'main'
      - 'branch_9x'

env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

# We split the workflow into two parallel jobs for efficiency:
# one is running all validation checks without tests,
# the other runs all tests without other validation checks.

jobs:

  # This runs all validation checks without tests.
  checks:
    name: checks without tests (JDK ${{ matrix.java }} on ${{ matrix.os }})
    timeout-minutes: 15

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        java: [ '21' ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-for-build

      - name: Run gradle check (without tests)
        run: ./gradlew check -x test -Ptask.times=true --max-workers 2


  # This runs all tests without any other validation checks.
  tests:
    name: tests (JDK ${{ matrix.java }} on ${{ matrix.os }})
    timeout-minutes: 30

    strategy:
      matrix:
        # Operating systems to run on.
        # windows-latest: fairly slow to build and results in odd errors (see LUCENE-10167)
        # macos-latest: a tad slower than ubuntu and pretty much the same (?) so leaving out.
        os: [ ubuntu-latest ]
        java: [ '21' ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-for-build

      - name: Run gradle tests
        run: ./gradlew test ""-Ptask.times=true"" --max-workers 2

      - name: List automatically-initialized gradle.properties
        run: cat gradle.properties

---
name: ""Run checks: module lucene/analysis/common""

on:
  workflow_dispatch:

  pull_request:
    branches:
      - 'main'
      - 'branch_9x'
    paths:
      - '.github/workflows/run-checks-mod-analysis-common.yml'
      - 'lucene/analysis/common/**'

  push:
    branches:
      - 'main'
      - 'branch_9x'
    paths:
      - '.github/workflows/run-checks-mod-analysis-common.yml'
      - 'lucene/analysis/common/**'

env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

jobs:
  test:
    name: Extra regression tests
    timeout-minutes: 15

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-for-build

      - name: Run 'gradlew lucene/analysis/common check testRegressions'
        run: ./gradlew -p lucene/analysis/common check testRegressions

---
name: ""Run checks: module lucene/distribution.tests""

on:
  workflow_dispatch:

  pull_request:
    branches:
      - 'main'
      - 'branch_9x'

  push:
    branches:
      - 'main'
      - 'branch_9x'

env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

jobs:
  test:
    timeout-minutes: 15

    strategy:
      matrix:
        # ubuntu-latest is checked as part of run-checks-everything.yml
        # windows-latest is slow and sometimes flaky.
        os: [ macos-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/prepare-for-build

      - name: Run 'gradlew lucene/distribution.tests test' (on ${{ matrix.os }})
        run: ./gradlew -p lucene/distribution.tests test

---
name: ""Run nightly: buildAndPushRelease and smokeTestRelease.py""

on:
  # Allow manual dispatch.
  workflow_dispatch:

  # run nightly at 2:04am.
  schedule:
    - cron: '4 2 * * *'

jobs:
  smokeTestRelease:
    name: ""Smoke test release on jdk ${{ matrix.java-version }}, ${{ matrix.os }}""

    # only run on schedule in the main Lucene repo (not in forks).
    if: (github.event_name == 'schedule' && github.repository == 'apache/lucene') || (github.event_name != 'schedule')

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        java-version: [ '21', '22-ea' ]

    runs-on: ${{ matrix.os }}

    env:
      LUCENE_RELEASE_DIR: /tmp/lucene-release-dir
      TMP_DIR: /tmp/lucene-tmp-dir

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-package: jdk
          check-latest: true
          # This intentionally lists two versions, the last one is used as the system default (for running gradle).
          java-version: |
            ${{ matrix.java-version }}
            21

      - name: Echo diagnostic paths and locations
        run: |
          echo ""All installed JDKs:""
          set | grep ""JAVA""

          echo ""Gradle's 'RUNTIME_JAVA_HOME' JDK:""
          RUNTIME_JAVA_HOME_VAR=JAVA_HOME_`echo ${{ matrix.java-version }} | egrep --only ""[0-9]+""`_X64
          echo ${RUNTIME_JAVA_HOME_VAR} points at ${!RUNTIME_JAVA_HOME_VAR}

          # This sets the environment variable and makes it available for subsequent job steps.
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          echo ""RUNTIME_JAVA_HOME=${!RUNTIME_JAVA_HOME_VAR}"" >> ""$GITHUB_ENV""

      - name: ""Run buildAndPushRelease.py (--dev-mode)""
        run: |
          # Assemble an unsigned release, in dev mode, publish locally.
          python3 ./dev-tools/scripts/buildAndPushRelease.py --dev-mode --push-local ${{ env.LUCENE_RELEASE_DIR }}

      - name: ""Run smokeTestRelease.py (runtime java: ${{ matrix.java-version }})""
        run: |
          python3 -u dev-tools/scripts/smokeTestRelease.py \
            --not-signed \
            --tmp-dir ${{ env.TMP_DIR }} \
            file://`realpath ${{ env.LUCENE_RELEASE_DIR }}/lucene*` \
            -Ptests.filter=""@skipall""

      - name: ""Store smoke tester logs""
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: smoke-tester-logs-jdk-${{ matrix.java-version }}
          path: |
            ${{ env.TMP_DIR }}/**/*.log

---
"
christophetd;log4shell-vulnerable-app;christophetd/log4shell-vulnerable-app;https://github.com/christophetd/log4shell-vulnerable-app;https://api.github.com/repos/christophetd/log4shell-vulnerable-app;main;10/12/2021 13:38;17/04/2024 19:12;FALSE;
Puliczek;CVE-2021-44228-PoC-log4j-bypass-words;Puliczek/CVE-2021-44228-PoC-log4j-bypass-words;https://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words;https://api.github.com/repos/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words;main;10/12/2021 23:35;17/04/2024 09:04;FALSE;
Cybereason;Logout4Shell;Cybereason/Logout4Shell;https://github.com/Cybereason/Logout4Shell;https://api.github.com/repos/Cybereason/Logout4Shell;main;10/12/2021 23:38;03/04/2024 09:20;FALSE;
f0ng;log4j2burpscanner;f0ng/log4j2burpscanner;https://github.com/f0ng/log4j2burpscanner;https://api.github.com/repos/f0ng/log4j2burpscanner;main;11/12/2021 08:19;17/04/2024 16:24;FALSE;
DTStack;Taier;DTStack/Taier;https://github.com/DTStack/Taier;https://api.github.com/repos/DTStack/Taier;master;02/03/2021 05:49;17/04/2024 21:27;TRUE;"name: Build With Mvnw

on:
  push:
    branches: 
      - master
    paths-ignore:
      - 'taier-ui/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'taier-ui/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build
        run: |
          ./mvnw clean package -DskipTests -T 1C -pl \
          taier-data-develop,\
          taier-common,\
          taier-worker/taier-worker-plugin,\
          taier-datasource/taier-datasource-plugin \
          -am -amd

---
name: Deploy to GitHub Pages

on:
  push:
    branches: [master]
    paths: [website/**]

jobs:
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: yarn
          cache-dependency-path: website/yarn.lock
      - name: Build website
        working-directory: website
        run: |
          yarn install --frozen-lockfile
          yarn build

      # Popular action to deploy to GitHub Pages:
      # Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Build output to publish to the `gh-pages` branch:
          publish_dir: website/build
          # Assign commit authorship to the official GH-Actions bot for deploys to `gh-pages` branch:
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          # The GH actions bot is used by default if you didn't specify the two fields.
          # You can swap them out with your own user credentials.
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
---
name: Test deployment

on:
  pull_request:
    branches: [master]
    paths: [website/**]

jobs:
  test-deploy:
    name: Test deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
          cache: yarn
          cache-dependency-path: website/yarn.lock
      - name: Test build
        working-directory: website
        run: |
          yarn install --frozen-lockfile
          yarn build
---
name: Taier Web CI

on:
  push:
    branches:
      - master
    paths:
      - ""taier-ui/**""
  pull_request:
    branches:
      - master
    paths:
      - ""taier-ui/**""

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      working-directory: ./taier-ui
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: ""https://registry.npmjs.org/""

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo ""STORE_PATH=$(pnpm store path)"" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ${{ env.working-directory }}
        run: pwd && pnpm install

      - name: Lint code
        working-directory: ${{ env.working-directory }}
        run: pnpm lint:es && pnpm lint:css

      - name: Run build
        working-directory: ${{ env.working-directory }}
        run: pnpm build

      - name: Run tests
        working-directory: ${{ env.working-directory }}
        run: pnpm test
        env:
          CI: true
          NODE_ENV: test

---
"
mergebase;log4j-detector;mergebase/log4j-detector;https://github.com/mergebase/log4j-detector;https://api.github.com/repos/mergebase/log4j-detector;master;12/12/2021 01:29;31/03/2024 16:25;FALSE;
Vineflower;vineflower;Vineflower/vineflower;https://github.com/Vineflower/vineflower;https://api.github.com/repos/Vineflower/vineflower;master;10/03/2021 20:15;22/04/2024 05:28;TRUE;"name: Build
on: [push, pull_request]
jobs:
  build:
    strategy:
      matrix:
        java: [11, 17, 19]
    runs-on: ubuntu-22.04
    container:
      image: eclipse-temurin:${{ matrix.java }}
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - name: Build with Gradle
        run: |
         chmod +x gradlew
         ./gradlew build --stacktrace
      - name: Archive test results
        if: ""${{ always() }}""
        uses: actions/upload-artifact@v3
        with:
          name: ""test-results-java${{ matrix.java }}""
          path: |
            build/reports/
            plugins/*/build/reports/
            build/test-results/**/*.xml
  publish-test-results:
    runs-on: ubuntu-22.04
    needs: [build]
    permissions:
      issues: write
      pull-requests: write
      checks: write
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          check_name: Test Results
          files: artifacts/*/build/test-results/**/*.xml

---
name: Release
on:
  workflow_dispatch: # Manual trigger
  push:
    tags:
      - '*'
jobs:
  build:
    runs-on: ubuntu-22.04
    container:
      image: eclipse-temurin:17
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build publish publishToSonatype closeAndReleaseSonatypeStagingRepository -x test --stacktrace
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PASS: ${{ secrets.SONATYPE_PASS }}

---
name: Publish Snapshot
on: [push, pull_request]
jobs:
  publish:
    if: ${{ github.repository_owner == 'Vineflower' && contains(github.ref_name, 'develop') }}
    runs-on: ubuntu-22.04
    container:
      image: eclipse-temurin:17
      options: --user root
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew publish --stacktrace
        env:
          STATUS: snapshot
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_PASSPHRASE: ${{ secrets.SIGNING_KEY_PASSPHRASE }}
          SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
          SONATYPE_PASS: ${{ secrets.SONATYPE_PASS }}
---
"
alibaba;Appactive;alibaba/Appactive;https://github.com/alibaba/Appactive;https://api.github.com/repos/alibaba/Appactive;main;13/12/2021 04:12;21/04/2024 04:17;FALSE;
woodpecker-appstore;log4j-payload-generator;woodpecker-appstore/log4j-payload-generator;https://github.com/woodpecker-appstore/log4j-payload-generator;https://api.github.com/repos/woodpecker-appstore/log4j-payload-generator;master;13/12/2021 14:32;31/03/2024 16:25;FALSE;
CodingGay;BlackObfuscator;CodingGay/BlackObfuscator;https://github.com/CodingGay/BlackObfuscator;https://api.github.com/repos/CodingGay/BlackObfuscator;jar2dex-2.2;13/12/2021 15:02;21/04/2024 08:54;FALSE;
krahets;LeetCode-Book;krahets/LeetCode-Book;https://github.com/krahets/LeetCode-Book;https://api.github.com/repos/krahets/LeetCode-Book;main;17/12/2021 15:16;22/04/2024 11:35;FALSE;
HXSecurity;DongTai-agent-java;HXSecurity/DongTai-agent-java;https://github.com/HXSecurity/DongTai-agent-java;https://api.github.com/repos/HXSecurity/DongTai-agent-java;beta;22/03/2021 05:03;18/04/2024 08:36;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Agent and Upload To OSS

on:
  push:
    branches:
      - main
      - beta
      - develop
  pull_request:
    branches:
      - main
      - beta
      - develop
    paths-ignore:
      - '.github/**'
      - 'changes/**'
      - 'deploy/**'
      - '**.md'
      - '**.yml'
      - '**.xml'
      - 'LICENSE'
      - '.gitignore'
  schedule:
    - cron: '0 10 * * *'

jobs:
  Cache-Dependencies:
    name: Cache dependencies
    if: github.repository == 'HXSecurity/DongTai-agent-java'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5
      - uses: actions/cache@v2
        id: mvn-cache # use this to check for `cache-hit` (`steps.mvn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ~/.m2 # !WARN does not work if running multiple node versions, instead use https://github.com/actions/cache/blob/master/examples.md#node---yarn
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-
      - name: Mvn Install
        if: steps.mvn-cache.outputs.cache-hit != 'true'
        run: mvn -B compile -Dmaven.test.skip=true

  Build-Agent:
    name: Build Java Agent
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    needs: [ Cache-Dependencies ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5

      - name: Restore dependencies from cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-
      - name: Build DongTai-Java-Agent With Maven
        run: |
          mvn -version
          mvn -B package -Dmaven.test.skip=true
      - uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
          auto-start: true
          root-password: yuhjnbGYUI
          user: test
          password: test

#      - name: OpenRASP-Vulns-Test
#        run: bash .github/workflows/scripts/openrasp-test.sh ""OpenRASP"" ""${{ github.event_name }}-${{ github.run_number }}""
#
#      - name: Benchmark-Vulns-Test
#        run: bash .github/workflows/scripts/benchmark-test.sh ""OWASP-Benchmark"" ""${{ github.event_name }}-${{ github.run_number }}""


  Upload-To-OSS:
    name: Upload To TEST OSS
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ Cache-Dependencies ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5

      - name: Get the release version
        id: version
        run: echo ::set-output name=GITHUB_REF::${GITHUB_REF##*/}

      - name: Restore dependencies from cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-
      - name: Build DongTai-Java-Agent With Maven
        run: |
          mvn -version
          mvn -B package -Dmaven.test.skip=true

      - name: Upload Assets
        uses: actions/upload-artifact@v3
        with:
          name: dongtai-agent
          path: |
            dongtai-agent/target/dongtai-agent.jar
            dongtai-agent/src/main/resources/bin/*

      - uses: manyuanrong/setup-ossutil@v2.0
        with:
          endpoint: ${{ secrets.CHART_OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_KEY_SECRET }}

      - name: Upload COS
        if: ${{ steps.version.outputs.GITHUB_REF }} == develop
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload -rs dongtai-agent/target/dongtai-agent.jar /agent_test/java/latest/dongtai-agent.jar && upload -rs dongtai-agent/src/main/resources/bin/ /agent_test/java/latest/
          secret_id: ${{ secrets.TENSECRET_ID }}
          secret_key: ${{ secrets.TENSECRET_KEY }}
          bucket: dongtai-helm-charts-1251882848
          region: ap-hongkong
      - name: Upload COS beta
        if: ${{ steps.version.outputs.GITHUB_REF }} == beta || ${{ steps.version.outputs.GITHUB_REF }} == main
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload -rs dongtai-agent/target/dongtai-agent.jar /agent_${{ steps.version.outputs.GITHUB_REF }}/java/latest/dongtai-agent.jar && upload -rs dongtai-agent/src/main/resources/bin/ /agent_${{ steps.version.outputs.GITHUB_REF }}/java/latest/
          secret_id: ${{ secrets.TENSECRET_ID }}
          secret_key: ${{ secrets.TENSECRET_KEY }}
          bucket: dongtai-helm-charts-1251882848
          region: ap-hongkong
          
      - name: deploy to cluster A
        uses: tscuite/kubectl-helm-action@main
        env:
          MAX: false
          PROJECT: agent
          TOKEN_SCA: ${{ secrets.TOKEN_SCA }}
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_TEST_DATA }}

      - name: deploy to cluster B
        uses: tscuite/kubectl-helm-action@main
        env:
          MAX: true
          PROJECT: agent
          TOKEN_SCA: ${{ secrets.MAX_TOKEN_SCA }}
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_TEST_DATA }}

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches:
      - main
      - beta
    paths-ignore:
      - '.github/**'
      - 'changes/**'
      - 'deploy/**'
      - '**.md'
      - '**.yml'
      - '**.xml'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches:
      - main
      - beta
    paths-ignore:
      - '.github/**'
      - 'changes/**'
      - 'deploy/**'
      - '**.md'
      - '**.yml'
      - '**.xml'
      - 'LICENSE'
      - '.gitignore'
  schedule:
    - cron: '28 6 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    if: github.repository == 'HXSecurity/DongTai-agent-java'
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Dead Link Checker

on:
  pull_request:

concurrency:
  group: dlc-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  CheckDeadLinks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - run: sudo npm install -g markdown-link-check
      - run: |
          for file in $(find . -name ""*.md""); do
            markdown-link-check -c .github/workflows/config/.dlc.json -q ""$file""
          done

---
name: Release Java Agent

on:
  release:
    types: [ created, edited ]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository == 'HXSecurity/DongTai-agent-java'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5

      - id: release
        run: |
          TAG_NAME=${{ github.event.release.tag_name }}
          ID=`echo ${TAG_NAME##v}`
          echo ""::set-output name=VERSION::$ID""

      - name: Build and Publish Maven Package
        run: |
          bash .github/workflows/scripts/version_update.sh ""${{ steps.release.outputs.VERSION }}""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate version file
        run: |
          cd ${{ github.workspace }}/dongtai-agent/src/main/resources/bin/ && \
          echo ""${{ github.event.repository.name }},version,${{ steps.release.outputs.VERSION }}"" >> version.txt && \
          echo ""${{ github.event.repository.name }},commit_hash,${GITHUB_SHA}"" >> version.txt && \
          files=('dongtai-core.jar') && \
          for FILE in ${files[@]};do FILE_HASH=`sha256sum ${FILE} | awk '{print $1}'`; echo ""${{ github.event.repository.name }},${FILE},${FILE_HASH}"" >> version.txt; done \

      - name: Upload COS 1
        if: ${{ steps.version.outputs.GITHUB_REF }} == develop
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload -rs dongtai-agent/src/main/resources/bin/version.txt /iast/release-version/${{ github.event.repository.name }}/${{ steps.release.outputs.VERSION }}/version.txt
          secret_id: ${{ secrets.TENSECRET_ID }}
          secret_key: ${{ secrets.TENSECRET_KEY }}
          bucket: dongtai-helm-charts-1251882848
          region: ap-hongkong
      - name: Upload COS 2
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload -rs dongtai-agent/target/dongtai-agent.jar /agent/java/latest/dongtai-agent.jar && upload -rs dongtai-agent/src/main/resources/bin/ /agent/java/latest/
          secret_id: ${{ secrets.TENSECRET_ID }}
          secret_key: ${{ secrets.TENSECRET_KEY }}
          bucket: dongtai-helm-charts-1251882848
          region: ap-hongkong
      - name: Upload COS 3
        uses: zkqiang/tencent-cos-action@v0.1.0
        with:
          args: upload -rs dongtai-agent/target/dongtai-agent.jar /agent/java/${{ steps.release.outputs.VERSION }}/dongtai-agent.jar && upload -rs dongtai-agent/src/main/resources/bin/ /agent/java/${{ steps.release.outputs.VERSION }}/
          secret_id: ${{ secrets.TENSECRET_ID }}
          secret_key: ${{ secrets.TENSECRET_KEY }}
          bucket: dongtai-helm-charts-1251882848
          region: ap-hongkong

---
"
cisagov;log4j-scanner;cisagov/log4j-scanner;https://github.com/cisagov/log4j-scanner;https://api.github.com/repos/cisagov/log4j-scanner;master;21/12/2021 17:23;18/04/2024 11:07;FALSE;
exp1orer;JNDI-Inject-Exploit;exp1orer/JNDI-Inject-Exploit;https://github.com/exp1orer/JNDI-Inject-Exploit;https://api.github.com/repos/exp1orer/JNDI-Inject-Exploit;master;26/12/2021 06:56;13/04/2024 10:41;FALSE;
Hakky54;certificate-ripper;Hakky54/certificate-ripper;https://github.com/Hakky54/certificate-ripper;https://api.github.com/repos/Hakky54/certificate-ripper;master;28/03/2021 14:10;19/04/2024 01:08;TRUE;"name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        java: [ '8', '11', '17', '21' ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: Build and test
        run: mvn clean verify --no-transfer-progress

  code-quality-and-coverage-scan:
    if: ${{ (github.actor == 'Hakky54') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'maven'

      - name: Build, test and quality scan
        run: mvn clean verify sonar:sonar -Dsonar.organization=hakky54 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} --no-transfer-progress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
jenly1314;MLKit;jenly1314/MLKit;https://github.com/jenly1314/MLKit;https://api.github.com/repos/jenly1314/MLKit;master;02/04/2021 13:00;17/04/2024 08:38;TRUE;"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build with Gradle
        run: ./gradlew build
---
"
kaaass;ZerotierFix;kaaass/ZerotierFix;https://github.com/kaaass/ZerotierFix;https://api.github.com/repos/kaaass/ZerotierFix;master;06/04/2021 17:07;22/04/2024 05:07;TRUE;"name: Build APP

on:
  push:
    branches: [ ""master"", ""old-android"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: sparkfabrik/android-build-action@v1.5.0
        with:
          project-path: .
          output-path: app-debug.apk
          fastlane-env: ""debug""
          ruby-version: ""3.3.0""
      - uses: actions/upload-artifact@v3
        if: github.event_name == 'pull_request'
        name: Upload app APK
        with:
          name: App bundle
          path: app-debug.apk
      # https://github.com/r0adkll/sign-android-release/issues/84#issuecomment-1889636075
      - name: Setup build tool version variable
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo ""BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION"" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION
      - uses: r0adkll/sign-android-release@v1
        if: github.event_name != 'pull_request'
        name: Sign app APK
        id: sign_app
        with:
          releaseDirectory: .
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}
      - uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request'
        name: Upload signed app APK
        with:
          name: Signed app bundle
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

---
"
LSPosed;AndroidHiddenApiBypass;LSPosed/AndroidHiddenApiBypass;https://github.com/LSPosed/AndroidHiddenApiBypass;https://api.github.com/repos/LSPosed/AndroidHiddenApiBypass;main;07/04/2021 13:20;22/04/2024 01:37;TRUE;"name: Build

on: [push, pull_request]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]

    steps:
    - name: Check out
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'gradle'
    - name: Build with Gradle
      run: |
        echo 'org.gradle.caching=true' >> gradle.properties
        echo 'org.gradle.parallel=true' >> gradle.properties
        echo 'org.gradle.vfs.watch=true' >> gradle.properties
        echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
        echo 'android.native.buildOutput=verbose' >> gradle.properties
        ./gradlew publishToMavenLocal
        ./gradlew --stop
      env:
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.maven_pgp_signingKey }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.maven_pgp_signingPassword }}
    - name: Upload library
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-library
        path: ~/.m2

  test:
    name: Test on API ${{ matrix.api-level }} ${{ matrix.arch }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - api-level: 28
            target: default
            arch: x86_64
          - api-level: 28
            target: default
            arch: x86
          - api-level: 29
            target: default
            arch: x86_64
          - api-level: 29
            target: default
            arch: x86
          - api-level: 30
            target: aosp_atd
            arch: x86_64
          - api-level: 30
            target: google_apis
            arch: x86
          - api-level: 31
            target: aosp_atd
            arch: x86_64
          - api-level: 31
            target: android-tv
            arch: x86
          - api-level: 32
            target: aosp_atd
            arch: x86_64
          - api-level: 33
            target: aosp_atd
            arch: x86_64
          - api-level: 33
            target: android-tv
            arch: x86
          - api-level: 34
            target: aosp_atd
            arch: x86_64
          - api-level: 34
            target: android-tv
            arch: x86
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Enable KVM group perms
        run: |
            echo 'KERNEL==""kvm"", GROUP=""kvm"", MODE=""0666"", OPTIONS+=""static_node=kvm""' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
            sudo udevadm control --reload-rules
            sudo udevadm trigger --name-match=kvm
      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.arch }}
          target: ${{ matrix.target }}
          script: ./gradlew connectedCheck
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true

---
name: Maven

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Check out
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Build with Gradle
      run: ./gradlew publish
      env:
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.maven_pgp_signingKey }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.maven_pgp_signingPassword }}
        ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.maven_ossrhUsername }}
        ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.maven_ossrhPassword }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
WhiteHSBG;JNDIExploit;WhiteHSBG/JNDIExploit;https://github.com/WhiteHSBG/JNDIExploit;https://api.github.com/repos/WhiteHSBG/JNDIExploit;master;30/12/2021 10:00;21/04/2024 04:00;FALSE;
twoyi;twoyi;twoyi/twoyi;https://github.com/twoyi/twoyi;https://api.github.com/repos/twoyi/twoyi;main;03/01/2022 06:45;22/04/2024 10:00;FALSE;
LibraryOfCongress;api.congress.gov;LibraryOfCongress/api.congress.gov;https://github.com/LibraryOfCongress/api.congress.gov;https://api.github.com/repos/LibraryOfCongress/api.congress.gov;main;03/01/2022 21:09;22/04/2024 00:24;FALSE;
wgpsec;fofa_viewer;wgpsec/fofa_viewer;https://github.com/wgpsec/fofa_viewer;https://api.github.com/repos/wgpsec/fofa_viewer;master;14/04/2021 07:16;22/04/2024 09:58;TRUE;"name: ""CodeQL""

on:
  push:
    branches: [ 'master' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ 'master' ]
  schedule:
    - cron: '52 12 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        version: [8,11]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - if: ${{ matrix.version == '8' }}
      name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-package: jdk+fx
        java-version: '1.8'
        distribution: 'adopt'

    - if: ${{ matrix.version == '8' }}
      name: Add openjfx FOR JDK8
      run: sudo apt-get install openjfx

    - if: ${{ matrix.version == '11' }}
      name: Set up JDK 11 ${{ matrix.version }}
      uses: actions/setup-java@v2
      with:
        java-package: jdk
        java-version: '11'
        distribution: 'adopt'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - if: ${{ matrix.version == '8' }}
      name: Build FOR JDK8
      run: mvn assembly:assembly -f pom.xml

    - if: ${{ matrix.version == '11' }}
      name: Build FOR JDK11
      run: mvn assembly:assembly -f pom-jdk11.xml

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: ""/language:${{matrix.language}}""

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
# WgpSec For FoFaViewer Build maven Test

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        version: [8,11]
    steps:
      - uses: actions/checkout@v2

      - if: ${{ matrix.version == '8' }}
        name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-package: jdk+fx
          java-version: '1.8'
          distribution: 'adopt'

      - if: ${{ matrix.version == '8' }}
        name: Add openjfx FOR JDK8
        run: sudo apt-get install openjfx

      - if: ${{ matrix.version == '8' }}
        name: Build FOR JDK8
        run: mvn assembly:assembly -f pom.xml

      - if: ${{ matrix.version == '11' }}
        name: Set up JDK 11 ${{ matrix.version }}
        uses: actions/setup-java@v2
        with:
          java-package: jdk
          java-version: '11'
          distribution: 'adopt'

      - if: ${{ matrix.version == '11' }}
        name: Build FOR JDK11
        run: mvn assembly:assembly -f pom-jdk11.xml

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
# WgpSec Team Build For FoFaViewer Build Release

name: Build fofa_viewer release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        version: [8,11]

    steps:
      - uses: actions/checkout@v2


      - if: ${{ matrix.version == '8' }}
        name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-package: jdk+fx
          java-version: '1.8'
          distribution: 'adopt'

      - if: ${{ matrix.version == '8' }}
        name: Build fofa_viewer For JDK 8
        run: mvn -DskipTests assembly:assembly -f pom.xml

      - if: ${{ matrix.version == '11' }}
        name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-package: jdk
          java-version: '11'
          distribution: 'adopt'

      - if: ${{ matrix.version == '11' }}
        name: Build FOR JDK11
        run: mvn assembly:assembly -f pom-jdk11.xml

      - name: Copy out packages fofa_viewer ${{ matrix.version }}
        run: |
          cp target/fofaviewer-jar-with-dependencies.jar .
          mv fofaviewer-jar-with-dependencies.jar fofaviewer.jar
          mv config-example.properties config.properties
          zip ${{ matrix.version }}.zip fofaviewer.jar config.properties

      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.version }}.zip
          path: ${{ matrix.version }}.zip

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: false

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: 8.zip
          path: ./

      - name: Download artifacts11
        uses: actions/download-artifact@v2
        with:
          name: 11.zip
          path: ./

      - name: Upload fofa_viewer JDK8 Version
        id: upload-release-fofa_viewer-JDK8
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 8.zip
          asset_name: FofaViewer_${{ steps.get_version.outputs.VERSION }}_JDK8.zip
          asset_content_type: application/gzip

      - name: Upload fofa_viewer
        id: upload-release-fofa_viewer11
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 11.zip
          asset_name: FofaViewer_${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/gzip

---
"
Acmesec;Sylas;Acmesec/Sylas;https://github.com/Acmesec/Sylas;https://api.github.com/repos/Acmesec/Sylas;main;05/01/2022 11:16;08/04/2024 02:15;FALSE;
microstream-one;microstream;microstream-one/microstream;https://github.com/microstream-one/microstream;https://api.github.com/repos/microstream-one/microstream;master;27/04/2021 15:05;15/04/2024 21:57;TRUE;" 
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Publish package to the Maven Central Repository and GitHub Packages
on:
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e ""${{ secrets.OSSRH_GPG_SECRET_KEY }}"") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG    
      - uses: actions/checkout@v3
      - name: Set up Java for publishing to Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD             
      - name: Make a release
        run: mvn -Pdeploy -Pproduction --no-transfer-progress --batch-mode -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} clean deploy
        env:
          MAVEN_USERNAME: ${{ secrets.REPO_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.REPO_PASSWORD }}

      #java 17 build
      - uses: actions/checkout@v3
      - name: Set up Java 17 for publishing to Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Build with java 17
        run: |
          mvn -pl persistence/binary-jdk17 clean source:jar install -am -B
          mvn -pl integrations/spring-boot3 clean source:jar install -am -B
      - name: Deploy module build with java 17        
        run: |
          mvn -Pdeploy -pl persistence/binary-jdk17 -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} deploy
          mvn -Pdeploy -pl integrations/spring-boot3 -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} deploy
        env:
          MAVEN_USERNAME: ${{ secrets.REPO_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.REPO_PASSWORD }}

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: 
      - '**'
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      #Build with java 11
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    - name: Build with Maven
      run: mvn -B package --file pom.xml

      #Build with java 17
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Build with Maven
      run: mvn -B package --file pom.xml      

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java Converter Fat Jar build

on:
  push:
    branches: 
      - '**'
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      #Build with java 11
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    - name: Build with Maven
      run: mvn -B -Pconverter-standalone -pl storage/embedded-tools/storage-converter -am clean package --file pom.xml


---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Javadock check

on:
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 14
      uses: actions/setup-java@v3
      with:
        java-version: '14'
        distribution: 'adopt'
        cache: 'maven'
    - name: Check Javadoc
      run: mvn -B -Pjavadoc-aggregate clean package -Djavadoc.failed.on.error=true

---
name: Integration Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      #Build with java 11
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'
    - name: Run Integration Tests
      run: mvn -Prun-its -B install --file pom.xml

      #Build with java 17
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
    - name: Run Integration Tests
      run: mvn -Prun-its -B install --file pom.xml

---
"
vaadin;hilla;vaadin/hilla;https://github.com/vaadin/hilla;https://api.github.com/repos/vaadin/hilla;main;27/04/2021 15:25;22/04/2024 11:30;TRUE;"name: Validation

on:
  push:
    branches: [ main, '2.5', '2.4', '2.3', '2.2', '1.4', '1.3' ]
    paths:
      - 'hilla-logo.svg'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'packages/**/README.md'
      - 'scripts/generator/templates/**/*.md'
  pull_request_target:
    paths:
      - 'hilla-logo.svg'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'packages/**/README.md'
      - 'scripts/generator/templates/**/*.md'

jobs:
  test-all:
    name: Tests Summary
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - run: 'echo ""No build required""'

---
name: Validation

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main, '2.5', '2.4', '2.3', '2.2', '1.4', '1.3' ]
    paths-ignore:
      - 'hilla-logo.svg'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'packages/**/README.md'
      - 'scripts/generator/templates/**/*.md'
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - 'hilla-logo.svg'
      - 'README.md'
      - '.github/ISSUE_TEMPLATE/*'
      - 'packages/**/README.md'
      - 'scripts/generator/templates/**/*.md'
  workflow_dispatch:
permissions:
  contents: read
concurrency:
  group: ${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true
jobs:
  init:
    name: Build Java and TypeScript for other tasks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      NX_SKIP_NX_CACHE: true

    steps:
      - uses: actions-cool/check-user-permission@main
        id: checkUser
        with:
          username: ${{github.triggering_actor}}
          require: 'write'
      - name: Fail on external workflow triggering
        if: ${{ steps.checkUser.outputs.require-result != 'true' && github.actor != 'dependabot[bot]' }}
        run: |
          echo ""🚫 **${{ github.actor }}** is an external contributor, a **${{ github.repository }}** team member has to review this changes and re-run this build"" \
            | tee -a $GITHUB_STEP_SUMMARY && exit 1
      - name: Check secrets
        run: |
          [ -z ""${{secrets.TB_LICENSE}}"" ] \
            && echo ""🚫 **TB_LICENSE** is not defined, check that **${{github.repository}}** repo has a valid secret"" \
            | tee -a $GITHUB_STEP_SUMMARY && exit 1 || exit 0
      - name: Checkout Project Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build TypeScript
        run: npm run build
      - name: Build Java
        run: mvn install -B -ntp -DskipTests -Dmaven.test.skip=true -Dmaven.javadoc.skip=true
      - name: Save Workspace
        run: |
          tar cf workspace.tar -C ~/ $( \
            mvn -q -DskipTests \
              -Dexec.executable='echo' \
              -Dexec.args='${project.groupId}:${project.artifactId}' \
              -Dexec.skip='${maven.deploy.skip}' \
              exec:exec \
            | perl -pe 's/\.(?=.*:)/\//g' \
            | sed -e 's/:/\//' \
            | sed -e 's/^/.m2\/repository\//' \
          )
          find packages/java -type d -name target -print0 | xargs -0 tar rf workspace.tar
          tar rf workspace.tar $(find packages/ts -name node_modules -prune -o -print | git check-ignore --stdin)
      - uses: actions/upload-artifact@v4
        with:
          name: saved-workspace
          path: workspace.tar
          retention-days: 1
          if-no-files-found: error

  check-style:
    needs: init
    name: Check style
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v4
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Validate Java Format
        run: mvn -B formatter:validate
      - name: Lint TypeScript
        run: npm run check

  test-java:
    needs: init
    name: Test Java
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v4
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Test
        run: mvn -B -am -P\!it-modules verify -pl '!:hilla-gradle-plugin'
      - name: Collect Coverage
        run: |
          COVFILES=$(find packages/java -wholename 'target/site/jacoco/jacoco.xml' | tr '\n' ',' | sed '$s/,$//')
          echo ""COVFILES=$COVFILES"" >> $GITHUB_ENV
      - name: Send Coverage to Codecov
        if: ${{ env.COVFILES != '' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVFILES }}
          flags: unittests
          fail_ci_if_error: true
          root_dir: ${{ github.workspace }}

  test-typescript:
    needs: init
    name: Test TypeScript
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false

    steps:
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Checkout Project Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v4
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Test
        run: npm run test:coverage
        env:
          CI: true
      - name: Collect Coverage
        run: |
          COVFILES=$(find packages/ts -wholename '*/.coverage/lcov.info' | tr '\n' ',' | sed '$s/,$//')
          echo ""COVFILES=$COVFILES"" >> $GITHUB_ENV
      - name: Send Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.COVFILES }}
          flags: unittests
          fail_ci_if_error: true
          root_dir: ${{ github.workspace }}

  test-it:
    needs:
      - init
    name: ITs
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            it-modules: group-1
          - os: ubuntu-latest
            it-modules: group-2
          - os: windows-latest
            it-modules: some
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v4
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{""username"":""'`echo $TB_LICENSE | cut -d / -f1`'"",""proKey"":""'`echo $TB_LICENSE | cut -d / -f2`'""}' > ~/.vaadin/proKey
      - name: Verify
        run: |
          (
            cd packages/java/tests && \
            mvn -B -am -ntp -fae \
              -Dfailsafe.forkCount=4 \
              -Dcom.vaadin.testbench.Parameters.testsInParallel=5 \
              -Dfailsafe.rerunFailingTestsCount=2 \
              -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 \
              -Dmaven.wagon.http.retryHandler.count=3 \
              -P\!it-modules \
              -Pit-modules-${{ matrix.it-modules }} \
              -Pproduction \
              verify
          )
      - uses: actions/upload-artifact@v4
        if: ${{ failure() || success() }}
        with:
          name: saved-outputs-it-${{ matrix.os }}-${{ matrix.it-modules }}
          path: |
            packages/java/tests/**/target/*-reports/*
            packages/java/tests/**/error-screenshots/*.png

  test-gradle:
    needs:
      - init
    name: Gradle tests
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Project Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - uses: actions/download-artifact@v4
        with:
          name: saved-workspace
      - name: Restore Workspace
        run: |
          set -x
          tar xf workspace.tar
          tar cf - .m2 | (cd ~ && tar xf -)
      - name: Set TB License
        run: |
          TB_LICENSE=${{secrets.TB_LICENSE}}
          mkdir -p ~/.vaadin/
          echo '{""username"":""'`echo $TB_LICENSE | cut -d / -f1`'"",""proKey"":""'`echo $TB_LICENSE | cut -d / -f2`'""}' > ~/.vaadin/proKey
      - name: Test gradle-plugin's functional tests
        run: ./packages/java/gradle-plugin/gradlew --info -p packages/java/gradle-plugin functionalTest
      - name: Gradle ITs
        run: ./packages/java/tests/gradle/single-module-tests/gradlew --info -p packages/java/tests/gradle/single-module-tests test
      - uses: actions/upload-artifact@v4
        if: ${{ failure() || success() }}
        with:
          name: saved-outputs-gradle-${{ matrix.os }}
          path: |
            packages/java/tests/**/target/*-reports/*
            packages/java/tests/**/error-screenshots/*.png
            packages/java/gradle-plugin/build/test-results/*
            packages/java/gradle-plugin/build/reports/*

  test-all:
    name: Tests Summary
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - check-style
      - test-java
      - test-typescript
      - test-it
      - test-gradle
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: saved-outputs
          pattern: saved-outputs-*
      - name: Fail if test jobs did not succeed
        if: ${{ needs.check-style.result != 'success' || needs.test-java.result != 'success' || needs.test-typescript.result != 'success' || needs.test-it.result != 'success' || needs.test-gradle.result != 'success' }}
        run: exit 1

---
"
Pangu-Immortal;KeepAlivePerfect;Pangu-Immortal/KeepAlivePerfect;https://github.com/Pangu-Immortal/KeepAlivePerfect;https://api.github.com/repos/Pangu-Immortal/KeepAlivePerfect;hao;10/05/2021 09:32;20/04/2024 17:38;TRUE;"name: Android CI

on:
  push:
    branches: [ ""hao"" ]
  pull_request:
    branches: [ ""hao"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ ""hao"" ]
  pull_request:
    branches: [ ""hao"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

---
"
dromara;dante-cloud;dromara/dante-cloud;https://github.com/dromara/dante-cloud;https://api.github.com/repos/dromara/dante-cloud;master;19/05/2021 02:14;22/04/2024 09:05;TRUE;"name: CI Create Release

on:
  workflow_dispatch:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Please refer to [CHANGELOG.md](https://www.herodotus.cn/others/log/changelog.html) for details.
          draft: false
          prerelease: false

---
"
zfoo-project;zfoo;zfoo-project/zfoo;https://github.com/zfoo-project/zfoo;https://api.github.com/repos/zfoo-project/zfoo;main;19/05/2021 11:04;22/04/2024 11:45;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

---
"
DataLinkDC;dinky;DataLinkDC/dinky;https://github.com/DataLinkDC/dinky;https://api.github.com/repos/DataLinkDC/dinky;dev;09/06/2021 09:11;22/04/2024 11:27;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Assign Problem To Developer

on:
  issues:
    types: [ opened ]

jobs:
  assign-udf-problem-to-developer:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, 'udf') == true || contains(github.event.issue.title, 'udtf') == true || contains(github.event.issue.body, 'udaf') == true
    steps:
      - name: assign problem to developer of udf
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'add-assignees'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          assignees: gaoyan1998,zackyoungh
      - name: Assign developer Comment
        uses: actions-cool/issues-helper@v1.7
        with:
          actions: 'create-comment'
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, this issue is about UDF, so I assign it to @gaoyan1998 and @zackyoungh. If you have any questions, you can comment and reply.
            
            你好 @${{ github.event.issue.user.login }}, 这个 issue 是关于 UDF 的，所以我把它分配给了 @gaoyan1998 和 @zackyoungh。如有任何问题，可以评论回复。

  assign-k8s-problem-to-developer:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, 'k8s') == true || contains(github.event.issue.title, 'kubernetes') == true || contains(github.event.issue.body, 'kubernetes') == true
    steps:
      - name: assign problem to developer of k8s
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'add-assignees'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          assignees: gaoyan1998,zackyoungh
      - name: Assign developer Comment
        uses: actions-cool/issues-helper@v1.7
        with:
          actions: 'create-comment'
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, this issue is about K8S, so I assign it to @gaoyan1998 and @zackyoungh. If you have any questions, you can comment and reply.
            
            你好 @${{ github.event.issue.user.login }}, 这个 issue 是关于 K8S 的，所以我把它分配给了 @gaoyan1998 和 @zackyoungh。如有任何问题，可以评论回复。

  assign-web-problem-to-developer:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, 'web') == true || contains(github.event.issue.body, 'web') == true
    steps:
      - name: assign problem to developer of web
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'add-assignees'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          assignees: Zzm0809
      - name: Assign developer Comment
        uses: actions-cool/issues-helper@v1.7
        with:
          actions: 'create-comment'
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, this issue is about web, so I assign it to @Zzm0809. If you have any questions, you can comment and reply.
            
            你好 @${{ github.event.issue.user.login }}, 这个 issue 是关于 web 的，所以我把它分配给了 @Zzm0809。如有任何问题，可以评论回复。

  assign-cdc-problem-to-developer:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, 'cdc') == true || contains(github.event.issue.title, 'cdcsource') == true || contains(github.event.issue.body, 'pipeline') == true
    steps:
      - name: assign problem to developer of cdc and cdcsource
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'add-assignees'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          assignees: aiwenmo
      - name: Assign developer Comment
        uses: actions-cool/issues-helper@v1.7
        with:
          actions: 'create-comment'
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, this issue is about CDC/CDCSOURCE, so I assign it to @aiwenmo. If you have any questions, you can comment and reply.
            
            你好 @${{ github.event.issue.user.login }}, 这个 issue 是关于 CDC/CDCSOURCE 的，所以我把它分配给了 @aiwenmo。如有任何问题，可以评论回复。
---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Release Dinky""

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Dinky version'
        required: true
      prerelease:
        type: boolean
        description: 'Is this a pre-release?'
        required: true
      release_notes:
        type: string
        description: 'Release notes'
        required: true

jobs:
  release:
    name: ${{ inputs.prerelease == 'true' && 'Pre Release' || 'Release' }}
    runs-on: ""ubuntu-latest""

    steps:
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'


      - name: ""Checkout Dinky""
        uses: actions/checkout@v3


      - name: ""Build Dinky ${{ inputs.version }} with Fink 1.14 Pre Release/Release Artifact""
        id: build_dinky1_14
        run: |
          ./mvnw -B clean package \
                  -Dmaven.test.skip=false \
                 -Dspotless.check.skip=true \
                 -Denforcer.skip=false \
                 -Dmaven.javadoc.skip=true \
                   -Pprod,scala-2.12,flink-single-version,flink-1.14,maven-central,web,fast \
                 --no-snapshot-updates
      - name: ""Build Dinky ${{ inputs.version }} with Fink 1.15 Pre Release/Release Artifact""
        id: build_dinky1_15
        run: |
          ./mvnw -B clean package \
                  -Dmaven.test.skip=false \
                 -Dspotless.check.skip=true \
                 -Denforcer.skip=false \
                 -Dmaven.javadoc.skip=true \
                   -Pprod,scala-2.12,flink-single-version,flink-1.15,maven-central,web,fast \
                 --no-snapshot-updates

      - name: ""Build Dinky ${{ inputs.version }} with Fink 1.16 Pre Release/Release Artifact""
        id: build_dinky1_16
        run: |
          ./mvnw -B clean package \
                  -Dmaven.test.skip=false \
                 -Dspotless.check.skip=true \
                 -Denforcer.skip=false \
                 -Dmaven.javadoc.skip=true \
                   -Pprod,scala-2.12,flink-single-version,flink-1.16,maven-central,web,fast \
                 --no-snapshot-updates

      - name: ""Build Dinky ${{ inputs.version }} with Fink 1.17 Pre Release/Release Artifact""
        id: build_dinky1_17
        run: |
          ./mvnw -B clean package \
                  -Dmaven.test.skip=false \
                 -Dspotless.check.skip=true \
                 -Denforcer.skip=false \
                 -Dmaven.javadoc.skip=true \
                   -Pprod,scala-2.12,flink-single-version,flink-1.17,maven-central,web,fast \
                 --no-snapshot-updates

      - name: ""Build Dinky ${{ inputs.version }} with Fink 1.18 Pre Release/Release Artifact""
        id: build_dinky1_18
        run: |
          ./mvnw -B clean package \
                  -Dmaven.test.skip=false \
                 -Dspotless.check.skip=true \
                 -Denforcer.skip=false \
                 -Dmaven.javadoc.skip=true \
                   -Pprod,scala-2.12,flink-single-version,flink-1.18,maven-central,web,fast \
                 --no-snapshot-updates

      - name: Automatic Upload Releases to GitHub Releases Page
        uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: false
          draft: false
          upload_url: https://github.com/DataLinkDC/dinky/releases
          title: ""Dinky ${{ inputs.version }} Release""
          body: |
            ${{ inputs.release_notes }}
          files: |
            ./build/dinky-release-*.tar.gz
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Backend

on:
  push:
  pull_request:
    branches:
      - dev
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '**/*.sql'

concurrency:
  group: backend-${{ github.event.pull_request.number || github.ref }}

jobs:
  check:
    name: Check Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check Style
        run: |
          ./mvnw -T 4C -B --no-snapshot-updates clean spotless:check -P flink-all
  build_npm:
    name: Build_NPM
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: check
    env:
      MAVEN_OPTS: -Xmx2G -Xms2G
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'dinky-web/**'
      - uses: actions/setup-node@v3
        if:  steps.filter.outputs.frontend == 'true'
        with:
          node-version: 16
      - name: Get npm cache directory
        id: npm-cache-dir
        if:  steps.filter.outputs.frontend == 'true'
        run: |
          echo ""::set-output name=dir::$(npm config get cache)""
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        if:  steps.filter.outputs.frontend == 'true'
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            dinky-web/dist
          key: ${{ runner.os }}-node-${{ hashFiles('dinky-web/**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        if:  steps.filter.outputs.frontend == 'true'
        run: cd dinky-web && npm install --no-audit --progress=false --legacy-peer-deps
      - name: Npm Web Build
        if:  steps.filter.outputs.frontend == 'true'
        run: cd dinky-web && npm run build
  build_jdk:
    name: Build_JDK
    runs-on: ubuntu-latest
    needs: check
    strategy:
      fail-fast: true
      matrix:
        jdk: [8, 11]
        flink: [1.14, 1.15, 1.16, 1.17, 1.18, 1.19]

    timeout-minutes: 30
    env:
      MAVEN_OPTS: -Xmx2G -Xms2G
    steps:
      - uses: actions/checkout@v3
      # maven编译
      - name: Set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v2
        with:
          java-version:  ${{ matrix.jdk }}
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/*/*/*
            !~/.m2/repository/org/apache/flink
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Cache local Flink repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository/org/apache/flink
          key: ${{ runner.os }}-${{ matrix.flink }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.flink }}-maven-
      - name: Build and Package
        run: |
          ./mvnw -B clean install \
                  -Dmaven.test.skip=false \
                 -Dspotless.check.skip=true \
                 -Denforcer.skip=false \
                 -Dmaven.javadoc.skip=true \
                 -P prod,scala-2.12,flink-single-version,flink-${{ matrix.flink }},maven-central \
                 --no-snapshot-updates

      # 检查打包的大小
      - name: Check package size
        run: |
          ./check_package_size.sh
#      - name: Run Unit tests
#        run: |
#          ./mvnw -T 2C -B clean verify -Dmaven.test.skip=false -Dgpg.skip=true --no-snapshot-updates

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Code Review Robot

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  code-review:
    # if: ${{ contains(github.event.*.labels.*.name, 'gpt review') }} # Optional; to run only when a label is attached
    runs-on: ubuntu-latest
    steps:
      - name: Code Review
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Optional
          LANGUAGE: Chinese
          OPENAI_API_ENDPOINT: https://api.openai.com/v1
          MODEL: gpt-3.5-turbo # https://platform.openai.com/docs/models
          PROMPT: Please check if there are any confusions or irregularities in the following code diffs. If there are, please point them out. If not, please reply with ""No problem"". # https://platform.openai.com/docs/api-reference/completions/create#completions/create-prompt
          top_p: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-top_p
          temperature: 1 # https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature
          max_tokens: 10000
          MAX_PATCH_LENGTH: 10000 # if the patch/diff length is large than MAX_PATCH_LENGTH, will be ignored and won't review. By default, with no MAX_PATCH_LENGTH set, there is also no limit for the patch/diff length.
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Docker Build



on:
  workflow_dispatch:
    inputs:
      version:
        description: 'dinky version'
        required: true

jobs:
  build_releases:
    name: build releases
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # maven编译
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository/*/*/*
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      #      - name: Check Style
      #        run: |
      #          ./mvnw -T 4C -B --no-snapshot-updates clean spotless:check
      - name: Build and Package
        run: |
          ./mvnw -B clean install \
                 -Dmaven.test.skip=true \
                 -Dspotless.check.skip=true \
                 -P prod,scala-2.12,flink-all,web,maven-central,fast \
                 --no-snapshot-updates
      - name: Upload release file
        uses: actions/upload-artifact@v3
        with:
          name: release-file
          path: ./build/dinky-release-*.tar.gz
  dinky_mysql_image:
    name: dinky mysql image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        url: [ registry.cn-hangzhou.aliyuncs.com ,docker.io ]
        include:
          - url: registry.cn-hangzhou.aliyuncs.com
            namespace: dinky
          - url: docker.io
            namespace: dinkydocker
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry,url -> ${{ matrix.url }}
        if: ${{ matrix.url == 'registry.cn-hangzhou.aliyuncs.com'}}
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets.DOCKER_ALIYUN_USER }}
          password: ${{ secrets.DOCKER_ALIYUN_PASS }}
      - name: Log in to the Container registry,url -> ${{ matrix.url }}
        if: ${{ matrix.url == 'docker.io'}}
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets.DOCKER_IO_USER }}
          password: ${{ secrets.DOCKER_IO_PASS }}
      - name: push docker dinky mysql image
        uses: docker/build-push-action@v2
        with:
          file: docker/DockerfileMysql
          context: .
          push: true
          tags: ${{ matrix.url }}/${{ matrix.namespace }}/dinky-mysql-server:${{ inputs.version }}

  dinky_image:
    name: docker dinky image
    runs-on: ubuntu-latest
    needs: [build_releases]
    strategy:
      fail-fast: true
      matrix:
        url: [ registry.cn-hangzhou.aliyuncs.com ,docker.io ]
        include:
          - url: registry.cn-hangzhou.aliyuncs.com
            namespace: dinky
          - url: docker.io
            namespace: dinkydocker
    steps:
      - uses: actions/checkout@v3
      - name: Move Dockerfile
        run: |
          cp -r ./docker/Dockerfile* ./
      - name: Download math result for job 1
        uses: actions/download-artifact@v3
        with:
          name: release-file
          path: ./build/
      - name: Log in to the Container registry,url -> ${{ matrix.url }}
        if: ${{ matrix.url == 'registry.cn-hangzhou.aliyuncs.com'}}
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets.DOCKER_ALIYUN_USER }}
          password: ${{ secrets.DOCKER_ALIYUN_PASS }}
      - name: Log in to the Container registry,url -> ${{ matrix.url }}
        if: ${{ matrix.url == 'docker.io'}}
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets.DOCKER_IO_USER }}
          password: ${{ secrets.DOCKER_IO_PASS }}
      - name: push docker dinky image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            DINKY_VERSION=${{ inputs.version }}
          file: Dockerfile
          context: .
          push: true
          tags: ${{ matrix.url }}/${{ matrix.namespace }}/dinky-standalone-server:${{ inputs.version }}


  dinky_flink_image:
    name: docker dinky flink image
    runs-on: ubuntu-latest
    needs: [ dinky_image ]
    strategy:
      fail-fast: true
      matrix:
        url: [ registry.cn-hangzhou.aliyuncs.com ,docker.io ]
        FLINK_VERSION: [1.14.6 , 1.15.4 , 1.16.3, 1.17.2, 1.18.1, 1.19.0]
        include:
          - url: registry.cn-hangzhou.aliyuncs.com
            namespace: dinky
          - url: docker.io
            namespace: dinkydocker
          - FLINK_VERSION: 1.14.6
            FLINK_BIG_VERSION: 1.14
          - FLINK_VERSION: 1.15.4
            FLINK_BIG_VERSION: 1.15
          - FLINK_VERSION: 1.16.3
            FLINK_BIG_VERSION: 1.16
          - FLINK_VERSION : 1.17.2
            FLINK_BIG_VERSION: 1.17
          - FLINK_VERSION: 1.18.1
            FLINK_BIG_VERSION: 1.18
          - FLINK_VERSION: 1.19.0
            FLINK_BIG_VERSION: 1.19
    steps:
      - uses: actions/checkout@v3
      - name: Move Dockerfile
        run: |
          cp -r ./docker/Dockerfile* ./
      - uses: actions/checkout@v3
      - name: set the flink_big_version
        run: |
          echo FLINK_BIG_VERSION=${FLINK_VERSION%.*} >> $GITHUB_ENV
      - name: Download math result for job 1
        uses: actions/download-artifact@v3
        with:
          name: release-file
          path: ./build/
      - name: Log in to the Container registry,url -> ${{ matrix.url }}
        if: ${{ matrix.url == 'registry.cn-hangzhou.aliyuncs.com'}}
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets.DOCKER_ALIYUN_USER }}
          password: ${{ secrets.DOCKER_ALIYUN_PASS }}
      - name: Log in to the Container registry,url -> ${{ matrix.url }}
        if: ${{ matrix.url == 'docker.io'}}
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.url }}
          username: ${{ secrets.DOCKER_IO_USER }}
          password: ${{ secrets.DOCKER_IO_PASS }}
      - name: push docker dinky image
        uses: docker/build-push-action@v2
        with:
          build-args: |
            FLINK_VERSION=${{ matrix.FLINK_VERSION }}
            DINKY_IMAGE=${{ matrix.url }}/${{ matrix.namespace }}/dinky-standalone-server:${{ inputs.version }}
            FLINK_BIG_VERSION=${{ matrix.FLINK_BIG_VERSION }}
          file: DockerfileDinkyFlink
          context: .
          push: true
          tags: ${{ matrix.url }}/${{ matrix.namespace }}/dinky-standalone-server:${{ inputs.version }}-flink-${{matrix.FLINK_BIG_VERSION }}

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build documentation
on:
  schedule:
    - cron: '0 0 * * *' # Deploy every day
  workflow_dispatch:

jobs:
  build-documentation:
    if: github.repository == 'DataLinkDC/dinky'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build documentation
        run: |
          cd docs && npm install --prefer-offline --no-audit --progress=false --legacy-peer-deps \
          &&  npm run build
      - name: Upload documentation
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: --archive --compress --delete-before
          path: docs/build/
          remote_path: ${{ secrets.RSYNC_PATH }}
          remote_host: ${{ secrets.RSYNC_HOST }}
          remote_port: ${{ secrets.RSYNC_PORT }}
          remote_user: ${{ secrets.RSYNC_USER }}
          remote_key: ${{ secrets.RSYNC_KEY }}
---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Format Code in fork repo

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - '**/*.sql'

concurrency:
  group: backend-${{ github.event.pull_request.number || github.ref }}

jobs:
  format:
    if: github.repository != 'DataLinkDC/dinky' && vars.FORMAT == 'true'
    name: Format Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.TOKEN }}
      - uses: dorny/paths-filter@v2
        id: filter
        with:
         filters: |
           frontend:
             - 'dinky-web/**'
           backend:
             - '!dinky-web/**'           

      - name: Run spotless apply
        if:  steps.filter.outputs.backend == 'true'
        run : ./mvnw -T 4C -B --no-snapshot-updates clean spotless:apply -P flink-all
      - uses: actions/setup-node@v3
        if: steps.filter.outputs.frontend == 'true'
        with:
          node-version: 16
      - name: Get npm cache directory
        id: npm-cache-dir
        if: steps.filter.outputs.frontend == 'true'
        run: |
          echo ""::set-output name=dir::$(npm config get cache)""
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        if: steps.filter.outputs.frontend == 'true'
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            dinky-web/dist
          key: ${{ runner.os }}-node-${{ hashFiles('dinky-web/**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        if: steps.filter.outputs.frontend == 'true'
        run: cd dinky-web && npm install --only=dev --prefer-offline --no-audit --progress=false --legacy-peer-deps
      - name: Run frontend format
        if:  steps.filter.outputs.frontend == 'true'
        run: cd dinky-web && npm run lint:prettier

      - name: Check for modified files
        id: git-check
        run: |
          echo ""modified=$(if git diff-index --quiet HEAD --; then echo ""false""; else echo ""true""; fi)"" >> $GITHUB_OUTPUT
      - uses: stefanzweifel/git-auto-commit-action@v4
        if: steps.git-check.outputs.modified == 'true'
        with:
          commit_message: Spotless Apply

---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Issue Check Inactive

# 定时触发：每月 1 号 UTC 0 点，即北京时间 8 点
# Timed trigger: UTC 0 on the 1st of each month.
on:
  schedule:
    - cron: ""0 0 1 * *""

jobs:
  check-inactive:
    runs-on: ubuntu-latest
    steps:
      - name: check-inactive
        uses: actions-cool/issues-helper@v1.7
        with:
          actions: 'check-inactive'
          token: ${{ secrets.GITHUB_TOKEN }}
          # 为 30 天不活跃的 issues 增加 inactive label，更多参数请参考：https://github.com/actions-cool/issues-helper
          # Add the inactive label to all issues that have not been active for more than 30 days. More see: https://github.com/actions-cool/issues-helper
          inactive-day: 30
          inactive-label: 'Invalid'
          body: |
            Hello @${{ github.event.issue.user.login }}, this issue has not been active for more than 30 days. This issue will be closed in 7 days if there is no response. If you have any questions, you can comment and reply.
            
            你好 @${{ github.event.issue.user.login }}, 这个 issue 30 天内没有活跃，7 天后将关闭，如需回复，可以评论回复。

      - name: Add inactive labels
        if: ${{ success() }} # 代表上边的 check-inactive 成功执行 才会执行本步骤
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'add-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          labels: 'Invalid'
---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Issue Close Require

on:
  schedule:
    - cron: ""0 0 * * *""

permissions:
  contents: read

jobs:
  issue-close-require:
    permissions:
      issues: write  # for actions-cool/issues-helper to update issues
      pull-requests: write  # for actions-cool/issues-helper to update PRs
    runs-on: ubuntu-latest
    steps:
      - name: need reproduce
        uses: actions-cool/issues-helper@v3
        if: >- 
          github.event.issue.number != 66 || 
          github.event.issue.number != 884
        with:
          actions: 'close-issues'
          labels: 'Need Reproduce'
          inactive-day: 10
          body: |
            Hi @${{ github.event.issue.user.login }}, Because this issue was marked as requiring detailed reproduction steps, no response was received for 10 days. The issue is now closed. If you have any questions, please comment and reply.
            
            Hi @${{ github.event.issue.user.login }}, 由于该 issue 被标记为需要提供详细复现步骤，却 10 天未收到回应。现关闭 issue，若有任何问题，可评论回复。

      - name: duplicate issue
        uses: actions-cool/issues-helper@v3
        if: >-
          github.event.issue.number != 66 || 
          github.event.issue.number != 884
        with:
          actions: 'close-issues'
          labels: 'Duplicate'
          inactive-day: 3"
TencentBlueKing;bk-job;TencentBlueKing/bk-job;https://github.com/TencentBlueKing/bk-job;https://api.github.com/repos/TencentBlueKing/bk-job;master;17/06/2021 08:18;22/04/2024 05:25;TRUE;"# This is a basic workflow to help you get started with Actions

name: Backend CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [ master, 3.* ]
    paths:
      - 'src/backend/**'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains two jobs called ""buildCE"" and ""buildEE""
  buildCE:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: init mysql
        run: |
          sudo /etc/init.d/mysql start
          export MYSQL_PWD=root
          for i in */*.sql;do echo $i;mysql -h localhost -uroot < $i;done
        working-directory: support-files/sql
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle Build
        working-directory: src/backend
        # run: ./gradlew clean build -DmysqlURL=127.0.0.1:3306 -DmysqlUser=root -DmysqlPasswd=root -DmavenRepoUrl=""https://maven.aliyun.com/nexus/content/groups/public/""
        run: ./gradlew clean build -DmysqlURL=127.0.0.1:3306 -DmysqlUser=root -DmysqlPasswd=root -DmavenRepoUrl=""https://mirrors.cloud.tencent.com/nexus/repository/maven-public/""

  buildEE:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: init mysql
        run: |
          sudo /etc/init.d/mysql start
          export MYSQL_PWD=root
          for i in */*.sql;do echo $i;mysql -h localhost -uroot < $i;done
        working-directory: support-files/sql
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle Build
        working-directory: src/backend
        # run: ./gradlew clean build -DmysqlURL=127.0.0.1:3306 -DmysqlUser=root -DmysqlPasswd=root -DmavenRepoUrl=""https://maven.aliyun.com/nexus/content/groups/public/"" -Pjob.edition=ee -Pjob.package.type=release
        run: ./gradlew clean build -DmysqlURL=127.0.0.1:3306 -DmysqlUser=root -DmysqlPasswd=root -DmavenRepoUrl=""https://mirrors.cloud.tencent.com/nexus/repository/maven-public/"" -Pjob.edition=ee -Pjob.package.type=release

---
# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Frontend CI

on:
  push:
    branches: [ master ]
    paths:
      - 'src/frontend/**'
  pull_request:
    branches: [ master, 3.* ]
    paths:
      - 'src/frontend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: echo ""npm version=$(npm -v)""
      - name: build
        run: |
          export JOB_VERSION=3.latest
          npm i --legacy-peer-deps && npm run build
        working-directory: src/frontend

---
name: Tag Realse
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build whole project and release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up variables
        id: variables
        run: |
          tag=""$(basename $GITHUB_REF)""
          bkjobVersion=${tag##v}
          echo ""::set-output name=tag::${tag}""
          echo ""::set-output name=bkjobVersion::${bkjobVersion}""
      - name: init mysql
        run: |
          sudo /etc/init.d/mysql start
          export MYSQL_PWD=root
          for i in */*.sql;do echo $i;mysql -h localhost -uroot < $i;done
        working-directory: support-files/sql
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle Build Backend
        working-directory: src/backend
        run: ./gradlew clean build -DbkjobVersion=${{ steps.variables.outputs.bkjobVersion }} -DmysqlURL=127.0.0.1:3306 -DmysqlUser=root -DmysqlPasswd=root -DmavenRepoUrl=""https://maven.aliyun.com/nexus/content/groups/public/""

      - name: Npm Build Frontend
        run: |
          echo ""npm version=$(npm -v)""
          export JOB_VERSION=${{ steps.variables.outputs.bkjobVersion }}
          npm i --legacy-peer-deps && npm run build
          mkdir -p release/job/frontend
          cp -r dist/* release/job/frontend
        working-directory: src/frontend

      - name: Build VersionLogs
        run: python genBundledVersionLog.py
        working-directory: versionLogs

      - name: Create artifact - make package
        id: create_artifact
        run: |
          echo ${{ steps.variables.outputs.bkjobVersion }} > ./VERSION
          chmod 755 ./package.sh
          ./package.sh -m all -v ${{ steps.variables.outputs.bkjobVersion }}
        working-directory: ./

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: bk-job ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/job_ce-${{ steps.variables.outputs.bkjobVersion }}.tgz
          asset_name: job_ce-${{ steps.variables.outputs.bkjobVersion }}.tgz
          asset_content_type: application/gzip

---
"
getActivity;ShapeView;getActivity/ShapeView;https://github.com/getActivity/ShapeView;https://api.github.com/repos/getActivity/ShapeView;master;17/07/2021 09:52;18/04/2024 09:59;TRUE;"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

---
"
line;line-fido2-server;line/line-fido2-server;https://github.com/line/line-fido2-server;https://api.github.com/repos/line/line-fido2-server;main;22/07/2021 02:44;18/04/2024 05:38;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '44 4 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

---
"
open-pdf-sign;open-pdf-sign;open-pdf-sign/open-pdf-sign;https://github.com/open-pdf-sign/open-pdf-sign;https://api.github.com/repos/open-pdf-sign/open-pdf-sign;master;25/07/2021 19:52;21/04/2024 13:56;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""master"" ]
  schedule:
    - cron: '44 23 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo ""Run, Build Application using script""
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: ""/language:${{matrix.language}}""

---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: >
        mvn -B package --file pom.xml
    - name: Build jar
      uses: actions/upload-artifact@v3
      with:
        name: open-pdf-sign
        path: target/openpdfsign-*-jar-with-dependencies.jar
        retention-days: 30

---
"
tom-mohr;particle-life-app;tom-mohr/particle-life-app;https://github.com/tom-mohr/particle-life-app;https://api.github.com/repos/tom-mohr/particle-life-app;main;08/02/2022 23:22;21/04/2024 14:21;FALSE;
smxiazi;xia_sql;smxiazi/xia_sql;https://github.com/smxiazi/xia_sql;https://api.github.com/repos/smxiazi/xia_sql;main;09/02/2022 08:08;21/04/2024 17:18;FALSE;
Tencent;spring-cloud-tencent;Tencent/spring-cloud-tencent;https://github.com/Tencent/spring-cloud-tencent;https://api.github.com/repos/Tencent/spring-cloud-tencent;2022.0;29/07/2021 07:12;20/04/2024 15:52;TRUE;"name: Codecov

on:
  push:
    branches:
      - 2023.0
      - 2022.0
      - 2021.0
      - 2020.0
      - hoxton
      - greenwich
  pull_request:
    branches:
      - 2023.0
      - 2022.0
      - 2021.0
      - 2020.0
      - hoxton
      - greenwich

jobs:
  codecov:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Test with Maven
        run: mvn clean test -B -U -Psonatype
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/target/site/jacoco/jacoco.xml

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Test with Junit

on:
  push:
    branches:
      - hoxton
      - 2021.0
      - 2020.0
      - greenwich
  pull_request:
    branches:
      - hoxton
      - 2021.0
      - 2020.0
      - greenwich

jobs:
  junit:
    strategy:
      matrix:
        java: [ 8, 11, 17 ]
        os: [ 'windows-latest', 'ubuntu-latest' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Test with Maven
        run: mvn clean test -B -U -Psonatype


---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Test with Junit (JDK17)

on:
  push:
    branches:
      - 2023.0
      - 2022.0
  pull_request:
    branches:
      - 2023.0
      - 2022.0

jobs:
  build:
    strategy:
      matrix:
        java: [ 17 ]
        os: [ 'windows-latest', 'ubuntu-latest' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Test with Maven
        run: mvn clean test -f pom.xml -B -P sonatype -U

---
name: License checker

on:
  push:
    branches:
      - 2023.0
      - 2022.0
      - 2021.0
      - 2020.0
      - hoxton
      - greenwich
  pull_request:
    branches:
      - 2023.0
      - 2022.0
      - 2021.0
      - 2020.0
      - hoxton
      - greenwich
jobs:
  check-license:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.4.0

---
name: Release

on:
  release:
    types: [ published ]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: nexus-releases
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Publish package
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          cat <(echo -e ""${{ secrets.OSSRH_GPG_SECRET_KEY }}"") | gpg --batch --import;
          mvn clean deploy -U -P release -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -DskipTests
---
name: Snapshot

on:
  push:
    branches:
      - 2023.0
      - 2022.0
      - 2021.0
      - 2020.0
      - hoxton
      - greenwich

jobs:
  check-snapshot:
    runs-on: ubuntu-latest
    outputs:
      IS_SNAPSHOT: ${{ steps.set_output_1.outputs.IS_SNAPSHOT }}
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
      - name: Check deploy type
        id: set_output_1
        run: |
          line=""$(grep SNAPSHOT pom.xml || true)""
          echo $line
          if [ -n ""$line"" ]; then
            echo ""IS_SNAPSHOT=true"" >> $GITHUB_OUTPUT
          else
            echo ""IS_SNAPSHOT=false"" >> $GITHUB_OUTPUT
          fi
  snapshot:
    runs-on: ubuntu-latest
    needs: check-snapshot
    if: ${{ needs.check-snapshot.outputs.IS_SNAPSHOT == 'true' }}
    steps:
      - name: Checkout codes
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: nexus-snapshots
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish package
        run: mvn clean deploy -B -U -Psonatype
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
---
"
BUAA-BDA;OpenHuFu;BUAA-BDA/OpenHuFu;https://github.com/BUAA-BDA/OpenHuFu;https://api.github.com/repos/BUAA-BDA/OpenHuFu;main;29/07/2021 15:29;31/03/2024 16:25;TRUE;"name: Build CI Workflow
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: ./scripts/build/package.sh
---
name: Deploy CI Workflow
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Deploy
    if: github.repository_owner == 'BUAA-BDA'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: ./scripts/build/package.sh
    - name: Deploy to GitHub Packages
      run: ./scripts/build/deploy.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload Hu-Fu Release Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
        name: OpenHuFu-release
        path: release

---
"
BNYMellon;spring-kata;BNYMellon/spring-kata;https://github.com/BNYMellon/spring-kata;https://api.github.com/repos/BNYMellon/spring-kata;main;02/08/2021 21:09;02/04/2024 03:35;TRUE;"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Spring Katas CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  project-build:
    strategy:
      matrix:
        # os: [macos-latest, ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        java-version: [17]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Set JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}
      - name: Enable Maven Cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Maven
        run: mvn verify -DskipTests=true -Dmaven.javadoc.skip=true -B -V --no-transfer-progress
        env:
          MAVEN_OPTS: ""-Dmaven.repo.local=$HOME/.m2/repository -Xmx1g -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss:SSS""

---
"
SonicCloudOrg;sonic-server;SonicCloudOrg/sonic-server;https://github.com/SonicCloudOrg/sonic-server;https://api.github.com/repos/SonicCloudOrg/sonic-server;main;15/08/2021 16:36;19/04/2024 09:36;TRUE;"name: deploy to dockerHub

on:
  push:
    tags:
      - ""v*.*.*""

jobs:

  build:

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: ""WyriHaximus/github-action-get-previous-tag@v1""
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: replace version
        run: ver=${{ steps.previoustag.outputs.tag }} && new_ver=${ver:1} && sed -i ""s/SONIC_VERSION/${new_ver}/g"" pom.xml
      - name: login docker hub
        run: echo ""${{ secrets.ACCESS_TOKEN }}"" | docker login -u zhouyixun --password-stdin
      - name: Validate and Compile with Maven
        run: mvn package -Dmaven.test.skip=true
      - name: deploy controller
        run: docker build -t sonicorg/sonic-server-controller:${{ steps.previoustag.outputs.tag }} -f sonic-server-controller/src/main/docker/Dockerfile .
      - name: push controller
        run: docker push sonicorg/sonic-server-controller:${{ steps.previoustag.outputs.tag }}
      - name: deploy eureka
        run: docker build -t sonicorg/sonic-server-eureka:${{ steps.previoustag.outputs.tag }} -f sonic-server-eureka/src/main/docker/Dockerfile .
      - name: push eureka
        run: docker push sonicorg/sonic-server-eureka:${{ steps.previoustag.outputs.tag }}
      - name: deploy gateway
        run: docker build -t sonicorg/sonic-server-gateway:${{ steps.previoustag.outputs.tag }} -f sonic-server-gateway/src/main/docker/Dockerfile .
      - name: push gateway
        run: docker push sonicorg/sonic-server-gateway:${{ steps.previoustag.outputs.tag }}
      - name: deploy folder
        run: docker build -t sonicorg/sonic-server-folder:${{ steps.previoustag.outputs.tag }} -f sonic-server-folder/src/main/docker/Dockerfile .
      - name: push folder
        run: docker push sonicorg/sonic-server-folder:${{ steps.previoustag.outputs.tag }}

---
name: maven compile test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - uses: mirromutth/mysql-action@v1.1
        with:
          mysql version: '5.7'
          mysql database: 'sonic'
          mysql root password: 'Sonic!@#123'
          mysql user: 'root'
          mysql password: 'Sonic!@#123'
      - name: Validate and Compile with Maven
        run: mvn test

---
name: release to github

on:
  push:
    tags:
      - ""v*.*.*""

jobs:
  create:
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v1
        with:
          draft: false
          generate_release_notes: true

  build:
    needs: create
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: ""WyriHaximus/github-action-get-previous-tag@v1""
      - name: replace version
        run: sed -i ""s/SONIC_VERSION/${{ steps.previoustag.outputs.tag }}/g"" docker-compose*.yml
      - name: mkdir
        run: mkdir -p sonic-server-${{ steps.previoustag.outputs.tag }}/imageFiles sonic-server-${{ steps.previoustag.outputs.tag }}/keepFiles sonic-server-${{ steps.previoustag.outputs.tag }}/logs sonic-server-${{ steps.previoustag.outputs.tag }}/packageFiles sonic-server-${{ steps.previoustag.outputs.tag }}/recordFiles
      - name: copy
        run: cp .env docker-compose*.yml sonic-server-${{ steps.previoustag.outputs.tag }}/
      - name: zip
        uses: TheDoctor0/zip-release@0.6.2
        with:
          filename: sonic-server-${{ steps.previoustag.outputs.tag }}.zip
          directory: sonic-server-${{ steps.previoustag.outputs.tag }}
      - name: move outside
        run: mv sonic-server-${{ steps.previoustag.outputs.tag }}/sonic-server-${{ steps.previoustag.outputs.tag }}.zip ./sonic-server-${{ steps.previoustag.outputs.tag }}.zip
      - name: Upload To Github Release
        uses: xresloader/upload-to-github-release@v1.3.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: sonic-server-${{ steps.previoustag.outputs.tag }}.zip
          tag_name: ${{ steps.previoustag.outputs.tag }}
          update_latest_release: true
          draft: false

---
"
zinggAI;zingg;zinggAI/zingg;https://github.com/zinggAI/zingg;https://api.github.com/repos/zinggAI/zingg;main;25/08/2021 12:15;21/04/2024 18:19;TRUE;"name: Java CI

on:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        profile: []
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: maven
      - name: Install secondstring and thirdparty
        run: mvn initialize
      - name: Build ${{ matrix.profile }} profile with Maven
        run: mvn --batch-mode ${{ matrix.profile }} clean compile package

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ main, 0.4.0 ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main, 0.4.0 ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
>>>>>>> 0.4.0
  schedule:
    - cron: '22 3 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
    - name: Analyze
      uses: github/codeql-action/analyze@v2
   

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl
  
  
      

---
name: PMD
on:
  push:
   
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
jobs:
  pmd-analyser-check:
    name: PMD Static Code Analysis
    permissions:
      security-events: write
      actions: read
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - uses: pmd/pmd-github-action@v1
        with:
          rulesets: 'ruleset.xml'
          analyzeModifiedFilesOnly: false
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: pmd-report.sarif

---
"
nedlir;OfficerBreaker;nedlir/OfficerBreaker;https://github.com/nedlir/OfficerBreaker;https://api.github.com/repos/nedlir/OfficerBreaker;master;25/02/2022 16:30;16/04/2024 17:36;FALSE;
wyt1215819315;autoplan;wyt1215819315/autoplan;https://github.com/wyt1215819315/autoplan;https://api.github.com/repos/wyt1215819315/autoplan;master;28/08/2021 08:52;22/04/2024 10:51;TRUE;"# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: auto_plan-autobuild
        path: target/auto_plan.jar

---
"
StarRocks;starrocks;StarRocks/starrocks;https://github.com/StarRocks/starrocks;https://api.github.com/repos/StarRocks/starrocks;main;04/09/2021 04:29;22/04/2024 13:24;TRUE;"name: REVIEW CHECKER

on:

  pull_request_review:
    types:
      - submitted

permissions:
  checks: write
  actions: write
  contents: write
  deployments: write
  discussions: write
  issues: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:

  info:
    if: >
      (github.event.pull_request && github.event.requested_team) ||
      (github.event.pull_request.requested_teams && github.event.review && github.event.review.state == 'approved')
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      LABELS: ${{ steps.label_info.outputs.labels }}
      PR_NUMBER: ${{ steps.pr.outputs.PR_NUMBER }}
      HEAD_REF: ${{ steps.pr.outputs.HEAD_REF }}

    steps:
      - name: PR
        id: pr
        run: |
          if [[ ""${{ github.event.number }}"" != """" ]]; then
            echo ""PR_NUMBER=${{ github.event.number }}"" >> $GITHUB_OUTPUT
          else
            echo ""PR_NUMBER=${{ github.event.pull_request.number }}"" >> $GITHUB_OUTPUT
            echo ""HEAD_REF=${{ github.event.pull_request.head.ref }}"" >> $GITHUB_OUTPUT
          fi

      - name: LABELS
        id: label_info
        env:
          PR_NUMBER: ${{ steps.pr.outputs.PR_NUMBER }}
        run: |
          labels=$(gh pr view ${PR_NUMBER} -R ${REPO} --json labels -q '.labels[].name')
          echo ""labels<<EOF"" >> $GITHUB_OUTPUT
          echo ""$labels"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT
          
          cat $GITHUB_OUTPUT

  meta-review:
    needs: info
    runs-on: [ self-hosted, normal ]
    if: github.event_name == 'pull_request_review' && contains(needs.info.outputs.LABELS, 'META-REVIEW') && !contains(needs.info.outputs.LABELS, 'sync') && !startsWith(needs.info.outputs.HEAD_REF, 'mergify/')
    name: META-REVIEW

    env:
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      REPO: ${{ github.repository }}
      TEAM: meta-committer
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: META-REVIEW
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          ./scripts/check-approve.sh

  proto-review:
    needs: info
    runs-on: [ self-hosted, normal ]
    if: github.event_name == 'pull_request_review' && contains(needs.info.outputs.LABELS, 'PROTO-REVIEW') && !contains(needs.info.outputs.LABELS, 'sync') && !startsWith(needs.info.outputs.HEAD_REF, 'mergify/')
    name: PROTO-REVIEW

    env:
      PR_NUMBER: ${{ needs.info.outputs.PR_NUMBER }}
      REPO: ${{ github.repository }}
      TEAM: proto-team
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: PROTO-REVIEW
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          ./scripts/check-approve.sh

---
name: BACKPORT NOTIFICATION
run-name: BACKPORT NOTIFICATION - (#${{ github.event.number }}[${{ github.head_ref }}])

on:
  pull_request_target:
    branches:
      - 'branch-[0-9].[0-9]'
      - 'branch-[0-9].[0-9].[0-9]'
    types:
      - closed

env:
  PR_ID: ${{ github.event.number }}
  BASE_REF: ${{ github.base_ref }}
  HEAD_REF: ${{ github.head_ref }}
  REPO: ${{ github.repository }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
  FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}

jobs:
  backport-close:
    runs-on: [self-hosted, normal]
    if: >
      github.event.pull_request.merged != true &&
      contains(github.event.pull_request.title, 'backport') &&
      (contains(github.event.pull_request.labels.*.name, 'conflicts') ||
      contains(github.event.pull_request.labels.*.name, 'conflict')) &&
      startsWith(github.head_ref, 'mergify/bp')
    env:
      STATUS: CONFLICT

    steps:
      - name: ori pr info
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          python3 ./lib/notify_backport.py ${BASE_REF} ${HEAD_REF} ${STATUS}

      - name: clean
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*
---
name: CI COMMENT TOOLS

on:
  issue_comment:
    types: [ created ]

jobs:

  close:
    name: CLOSE PR
    runs-on: ubuntu-latest
    if: >
      contains(github.event.issue.pull_request.html_url, 'pull') &&
      (contains(github.event.comment.body, '@Mergify close') ||
      contains(github.event.comment.body, '@Mergifyio close'))

    env:
      PR_NUMBER: ${{ github.event.issue.number }}
      GITHUB_TOKEN: ${{ secrets.PAT }}

    steps:
      - name: CLOSE
        run: |
          gh pr close ${PR_NUMBER} -R ${{ github.repository }} -c ""PR was manually closed.""

  automerge:
    name: AutoMerge PR
    runs-on: ubuntu-latest
    if: >
      contains(github.event.issue.pull_request.html_url, 'pull') &&
      contains(github.event.comment.body, '@Mergify automerge')

    env:
      PR_NUMBER: ${{ github.event.issue.number }}

    steps:
      - name: BASE REF
        id: get_base_ref
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          base_ref=$(gh pr view ${PR_NUMBER} -R ${{ github.repository }} --json baseRefName | jq -r '.baseRefName')
          echo ""base_ref=${base_ref}"" >> $GITHUB_OUTPUT

      - name: AutoMerge
        if: startsWith(steps.get_base_ref.outputs.base_ref, 'mergify/bp')
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          gh pr merge ${PR_NUMBER} -R ${{ github.repository }} -s --auto

---
name: CI DOC Checker

on:
  pull_request_target:
    types:
      - opened
      - synchronize
    branches:
      - main
      - 'branch*'

permissions:
  issues: write
  pull-requests: write

jobs:
  doc-checker:
    runs-on: ubuntu-latest
    name: DOC FILTER
    if: >
      !contains(github.event.pull_request.title, '(sync #') &&
      !contains(github.event.pull_request.labels.*.name, 'sync') &&
      (!startsWith(github.head_ref, github.base_ref) || !contains(github.head_ref, '-sync-'))
    outputs:
      output1: ${{ steps.doc-changes-info.outputs.doc }}
    steps:
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            doc:
            - 'docs/**'
      - name: DOC CHECK INFO
        id: doc-changes-info
        run: |
          echo ""doc=${{ steps.changes.outputs.doc }}"" >> $GITHUB_OUTPUT

  remove-doc-label:
    needs: doc-checker
    runs-on: ubuntu-latest
    name: REMOVE DOC LABEL
    if: ${{ needs.doc-checker.outputs.output1 != 'true' }}
    steps:
      - name: remove document label
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: documentation

  add-doc-label:
    needs: doc-checker
    runs-on: ubuntu-latest
    name: ADD DOC LABEL
    if: ${{ needs.doc-checker.outputs.output1 == 'true' }}
    steps:
      - name: add document label
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: documentation

  markdownlint:
    runs-on: ubuntu-latest
    needs: add-doc-label
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}
      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo ""branch=${{github.base_ref}}"" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout PR
        run: |
          BRANCH=${{steps.branch.outputs.branch}}
          git config --global user.name ""wanpengfei-git"";
          git config --global user.email ""wanpengfei91@163.com"";
          git checkout $BRANCH;
          git pull;
          BRANCH_NAME=""${BRANCH}-${PR_NUMBER}"";
          git fetch origin pull/${PR_NUMBER}/head:${BRANCH_NAME};
          git checkout $BRANCH_NAME;
          git checkout -b merge_pr;
          git merge --squash --no-edit ${BRANCH} || (echo ""::error::Merge conflict, please check."" && exit -1);

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: articulate/actions-markdownlint@v1.1.0
        with:
          config: ""docs/.markdownlint.json""
          files: 'docs/**/*.md'
          ignore: node_modules
          version: 0.28.1

      - name: docusaurus-mdx-checker
        if: always()
        run: |
          npx docusaurus-mdx-checker -c docs

      - name: link check
        if: always()
        uses: lycheeverse/lychee-action@v1.8.0
        with:
          fail: true
          args: >
            --config docs/lychee.toml
            --offline ""docs/**/*.md""

      - name: Docusaurus build
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          DISABLE_VERSIONING: true
        working-directory: ./docs/docusaurus
        run: |
          rm -rf ./docs
          rm -rf ./i18n/zh/docusaurus-plugin-content-dos/current
          mkdir -p ./i18n/zh/docusaurus-plugin-content-docs
          mv ../en ./docs
          rm -rf ./docs/release_notes ./docs/ecosystem_release
          mv ../zh ./i18n/zh/docusaurus-plugin-content-docs/current
          rm -rf ./i18n/zh/docusaurus-plugin-content-docs/current/release_notes ./i18n/zh/docusaurus-plugin-content-docs/current/ecosystem_release
          yarn install --frozen-lockfile
          yarn clear
          yarn build

  behavior-unchange:
    runs-on: ubuntu-latest
    needs: add-doc-label
    env:
      PR_NUMBER: ${{ github.event.number }}
      REPO: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set Body
        run: |
          body=$(gh pr view ${PR_NUMBER} -R ${REPO} --json body -q .body)
          body=${body//""[x] Yes, this PR will result in a change in behavior.""/""[ ] Yes, this PR will result in a change in behavior.""}
          body=${body//""[ ] No, this PR will not result in a change in behavior.""/""[x] No, this PR will not result in a change in behavior.""}
          gh pr edit ${PR_NUMBER} -R ${REPO} -b ""$body""

---
name: MERGE SONARCLOUD FE

on:
  push:
    branches:
      - main
    paths:
      - 'fe/**.java'
      - 'fe/**.xml'

jobs:
  sonarcloud-fe:
    runs-on: ubuntu-latest
    if: github.repository == 'StarRocks/starrocks'
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo ""branch=${{github.base_ref}}"" >> $GITHUB_OUTPUT

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Install Apache Thrift 0.13
        run: |
          mkdir -p ./.setup-thrift/oras
          mkdir -p ./.setup-thrift/thrift
          curl -sLO  https://github.com/deislabs/oras/releases/download/v0.7.0/oras_0.7.0_linux_amd64.tar.gz
          tar -xvzf oras_0.7.0_linux_amd64.tar.gz
          ln -sf $(pwd)/oras /usr/local/bin/oras
          oras pull ghcr.io/dodopizza/setup-thrift/binaries:v0.13.0 --media-type application/vnd.unknown.layer.v1+tar.gz
          tar zxf ./thrift.v0.13.0.tar.gz -C .
          ln -sf $(pwd)/thrift /usr/local/bin/thrift

      - name: Analyze FE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: f0fb4d25c03bae90c2e994c45c29c49dc86fc169
        run: |
          thrift --version
          whereis thrift
          export STARROCKS_HOME=${{ github.workspace }}
          source env.sh
          mkdir -p thirdparty/installed/bin/
          cd thirdparty/installed/bin/ && ln -s /usr/local/bin/thrift thrift
          cd ${{ github.workspace }}/fe
          mvn -B -DskipTests verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=StarRocks_starrocks -Dsonar.pullrequest.key=${{ github.event.number }} -Dsonar.pullrequest.base=${{ github.base_ref }} -Dsonar.pullrequest.branch=${{ github.head_ref }}

---
name: MERGE PIPELINE

on:
  pull_request_target:
    branches:
      - main
      - 'branch-[0-9].[0-9]'
    types:
      - closed
permissions:
  pull-requests: write
  issues: write
  actions: write
env:
  PR_NUMBER: ${{ github.event.number }}

jobs:
  backport:
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.merged == true &&
      github.base_ref == 'main' && 
      github.repository == 'StarRocks/starrocks' &&
      !contains(github.event.pull_request.title, 'cherry-pick') &&
      !contains(github.event.pull_request.title, 'backport') && (
      contains(github.event.pull_request.labels.*.name, '3.3') ||
      contains(github.event.pull_request.labels.*.name, '3.2') ||
      contains(github.event.pull_request.labels.*.name, '3.1') ||
      contains(github.event.pull_request.labels.*.name, '3.0') ||
      contains(github.event.pull_request.labels.*.name, '2.5') )
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: backport branch-3.3
        if: contains(github.event.pull_request.labels.*.name, '3.3')
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            @Mergifyio backport branch-3.3
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, '3.3')
        with:
          labels: '3.3'

      - name: backport branch-3.2
        if: contains(github.event.pull_request.labels.*.name, '3.2')
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            @Mergifyio backport branch-3.2
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, '3.2')
        with:
          labels: '3.2'

      - name: backport branch-3.1
        if: contains(github.event.pull_request.labels.*.name, '3.1')
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            @Mergifyio backport branch-3.1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, '3.1')
        with:
          labels: '3.1'

      - name: backport branch-3.0
        if: contains(github.event.pull_request.labels.*.name, '3.0')
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            @Mergifyio backport branch-3.0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, '3.0')
        with:
          labels: '3.0'

      - name: backport branch-2.5
        if: contains(github.event.pull_request.labels.*.name, '2.5')
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            @Mergifyio backport branch-2.5
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, '2.5')
        with:
          labels: '2.5'

  thirdparty-update-image:
    runs-on: [self-hosted, normal]
    name: Thirdparty Update Image
    if: github.event.pull_request.merged == true
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        linux: [ centos7, ubuntu ]
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
      REPO: ${{ github.repository }}
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            thirdparty:
            - 'thirdparty/**'
            - 'docker/dockerfiles/dev-env/dev-env.Dockerfile'

      - name: update image (${{ matrix.linux }})
        if: steps.changes.outputs.thirdparty == 'true'
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/elastic-update-image.sh $BRANCH $PR_NUMBER ${{ matrix.linux }}

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  close_msg:
    runs-on: [self-hosted, normal]
    if: >
      github.event.pull_request.merged == true && 
      github.base_ref == 'main' &&
      github.repository == 'StarRocks/starrocks'
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: commit_sha
        id: commit_sha
        run: |
          set -x
          commit_sha=`curl -L \
            -H ""Accept: application/vnd.github+json"" \
            -H ""Authorization: token ${{ secrets.GITHUB_TOKEN }}"" \
            -H ""X-GitHub-Api-Version: 2022-11-28"" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER} 2>/dev/null \
            | jq .merge_commit_sha`
          commit_sha=$(echo ${commit_sha//\""})
          echo ""commit_sha=${commit_sha}"" >> $GITHUB_OUTPUT

      - name: update merged coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/upload_cov_after_merge.sh --pr ${PR_NUMBER} --commit ${{ steps.commit_sha.outputs.commit_sha }}

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  clean_ci_workflow:
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.merged != true
    env:
      PR_NUMBER: ${{ github.event.number }}
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.base_ref }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: cancel
        run: |
          if [[ ""${BRANCH}"" == ""main"" ]]; then
            yaml=ci-pipeline.yml
          else
            yaml=ci-pipeline-branch.yml
          fi
          
          gh run list --workflow ${yaml} -R ${REPO} -b ${GITHUB_HEAD_REF} --json databaseId -q '.[].databaseId' | xargs gh run cancel -R ${REPO} || true

  update_backport_merged_msg:
    runs-on: [ self-hosted, quick ]
    if: >
      github.base_ref != 'main' && github.event.pull_request.merged == true
    env:
      PR_NUMBER: ${{ github.event.number }}
    outputs:
      VERSION_LABEL: ${{ steps.prepare_version_label.outputs.LABEL }}
    steps:
      - name: prepare merge label
        if: >
          !contains(github.event.pull_request.labels.*.name, 'sync') &&
          contains(github.event.pull_request.title, '(backport #')
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          LABEL=""${GITHUB_BASE_REF##*-}-merged""
          gh label create ""${LABEL}"" -R ${GITHUB_REPOSITORY} -c 98C1D7 -f

      - name: add merge label
        if: >
          always() && !contains(github.event.pull_request.labels.*.name, 'sync') &&
          contains(github.event.pull_request.title, '(backport #')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          LABEL=""${GITHUB_BASE_REF##*-}-merged""
          ORI_PR=$(echo ""${PR_TITLE}"" | grep -oP '\(backport #\K\d+' | tail -n 1)
          gh pr edit ${ORI_PR} -R ${GITHUB_REPOSITORY} --add-label ""${LABEL}""

      - name: prepare version label
        id: prepare_version_label
        if: always()
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          version=$(./scripts/get_next_release_tag.sh)
          version_label=""version:${version}""
          echo ""LABEL=${version_label}"" >> $GITHUB_OUTPUT
          gh label create ""${version_label}"" -R ${GITHUB_REPOSITORY} -c 1d76db -f

      - name: add version label
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_LABEL: ${{ steps.prepare_version_label.outputs.LABEL }}
        run: |
          gh pr edit ${PR_NUMBER} -R ${GITHUB_REPOSITORY} --add-label ""${VERSION_LABEL}""

  update_version_label_for_main_feature:
    runs-on: [ self-hosted, quick ]
    if: >
      github.base_ref == 'main' && github.event.pull_request.merged == true &&
      !contains(github.event.pull_request.labels.*.name, 'sync') &&
      startsWith(github.event.pull_request.title, '[Feature]')
    env:
      PR_NUMBER: ${{ github.event.number }}
    outputs:
      VERSION_LABEL: ${{ steps.prepare_version_label.outputs.LABEL }}
    steps:
      - name: prepare version label
        id: prepare_version_label
        if: always()
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          version=$(./scripts/get_next_release_tag.sh)
          version_label=""version:${version}""
          echo ""LABEL=${version_label}"" >> $GITHUB_OUTPUT
          gh label create ""${version_label}"" -R ${GITHUB_REPOSITORY} -c 1d76db -f

      - name: add version label
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_LABEL: ${{ steps.prepare_version_label.outputs.LABEL }}
        run: |
          gh pr edit ${PR_NUMBER} -R ${GITHUB_REPOSITORY} --add-label ""${VERSION_LABEL}""

  update_feature_issue:
    runs-on: [ self-hosted, quick ]
    needs:
      - update_backport_merged_msg
      - update_version_label_for_main_feature
    if: >
      always() && !contains(github.event.pull_request.labels.*.name, 'sync') && startsWith(github.event.pull_request.title, '[Feature]')
    env:
      BRANCH_VERSION_LABEL: ${{ needs.update_backport_merged_msg.outputs.VERSION_LABEL }}
      MAIN_VERSION_LABEL: ${{ needs.update_version_label_for_main_feature.outputs.VERSION_LABEL }}

    steps:
      - name: Update Issue Body & Label(main)
        if: github.base_ref == 'main' && env.MAIN_VERSION_LABEL != ''
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          python3 scripts/get_pr_issue.py update_issue ${GITHUB_REPOSITORY} ${PR_NUMBER} ${MAIN_VERSION_LABEL}

      - name: Update Issue Body & Label(branch)
        if: always() && github.base_ref != 'main' && env.BRANCH_VERSION_LABEL != ''
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          python3 scripts/get_pr_issue.py update_issue ${GITHUB_REPOSITORY} ${PR_NUMBER} ${BRANCH_VERSION_LABEL}
---
name: CI PIPELINE - BRANCH

on:
  pull_request:
    types:
      - opened
      - synchronize

    branches:
      - 'branch*'

concurrency:
  group: ${{ github.event.number }}
  cancel-in-progress: true


jobs:

  basic-checker:
    runs-on: [ self-hosted, normal ]
    name: RUN CHECKER
    env:
      PR_NUMBER: ${{ github.event.number }}
      GH_TOKEN: ${{ github.token }}
    outputs:
      PASS: ${{ steps.check.outputs.pass }}
    steps:
      - name: Check
        id: check
        if: >
          !contains(github.event.pull_request.title, '(sync #') &&
          !contains(github.event.pull_request.labels.*.name, 'sync') &&
          (!startsWith(github.head_ref, github.base_ref) || !contains(github.head_ref, '-sync-'))
        run: |
          echo ""pass=true"" >> $GITHUB_OUTPUT

      - name: Check Blacklist
        id: check_blacklist
        env:
          NO_SYNC: ${{ steps.check.outputs.pass }}
          AUTHOR: ${{ github.event.pull_request.user.login }}
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull >/dev/null
          ./scripts/check-blacklist.sh

      - name: Check Feature Issue
        id: check_issue
        run: |
          cd ci-tool
          python3 scripts/get_pr_issue.py check_issue ${GITHUB_REPOSITORY} ${PR_NUMBER}

  be-checker:
    runs-on: ubuntu-latest
    needs: basic-checker
    name: BE FILTER
    if: needs.basic-checker.outputs.PASS == 'true'
    outputs:
      output1: ${{ steps.be-changes-info.outputs.be }}
      output2: ${{ steps.be-changes-info.outputs.thirdparty }}
    steps:
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            be:
            - 'be/**'
            - 'gensrc/**'
            - 'run-be-ut.sh'
            - 'build.sh'
            - 'thirdparty/**'
            - 'docker/dockerfiles/dev-env/dev-env.Dockerfile'
            thirdparty:
            - 'thirdparty/**'
            - 'docker/dockerfiles/dev-env/dev-env.Dockerfile'

      - name: BE CHECK INFO
        id: be-changes-info
        run: |
          echo ""be=${{ steps.changes.outputs.be }}"" >> $GITHUB_OUTPUT
          echo ""thirdparty=${{ steps.changes.outputs.thirdparty }}"" >> $GITHUB_OUTPUT

  clang-format:
    runs-on: [self-hosted, light]
    needs: be-checker
    name: Clang-Format
    env:
      PR_NUMBER: ${{ github.event.number }}
    if: ${{ needs.be-checker.outputs.output1 == 'true' }}
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo ""branch=${{github.base_ref}}"" >> $GITHUB_OUTPUT

      - name: Checkout PR
        run: |
          BRANCH=${{steps.branch.outputs.branch}}
          git config --global user.name ""wanpengfei-git"";
          git config --global user.email ""wanpengfei91@163.com"";
          git checkout $BRANCH;
          git pull;
          BRANCH_NAME=""${BRANCH}-${PR_NUMBER}"";
          git fetch origin pull/${PR_NUMBER}/head:${BRANCH_NAME};
          git checkout $BRANCH_NAME;
          git checkout -b merge_pr;
          git merge --squash --no-edit ${BRANCH} || (echo ""::error::Merge conflict, please check."" && exit -1);

      - name: Run Clang-Format
        run: |
          export PATH=/var/lib/llvm/bin:$PATH
          bash build-support/check-format.sh

      - name: Clean ENV
        if: always()
        run: |
          rm -rf ${{ github.workspace }}/*

  thirdparty-update:
    runs-on: [self-hosted, normal]
    needs: [ be-checker, clang-format ]
    name: Thirdparty Update
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
      REPO: ${{ github.repository }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        build_type: [ Release, ASAN ]
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - name: Update Image (${{ matrix.build_type }})
        id: update-image
        if: needs.be-checker.outputs.output2  == 'true'
        env:
          linux_distro: ${{ matrix.build_type }}
        run: |
          cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          ./bin/run-pr-update-image.sh

      - name: Upload Thirdparty Result
        uses: actions/upload-artifact@v4
        with:
          name: THIRDPARTY-RESULT-${{ matrix.build_type }}
          path: image_cache.info
          retention-days: 1
          overwrite: true
          if-no-files-found: ignore

      - name: Clean ENV
        if: always()
        run: |
          if [[ ""${{ needs.be-checker.outputs.output2 }}"" == 'true' ]]; then
              cd ci-tool && source lib/init.sh
              ./bin/elastic-cluster.sh --delete
          fi
          rm -rf ${{ github.workspace }}/*

  thirdparty-info:
    runs-on: [ self-hosted, normal ]
    needs:
      - thirdparty-update
    name: Thirdparty Info
    outputs:
      centos7_image_cache_id: ${{ steps.info.outputs.centos7_image_cache_id }}
      ubuntu_image_cache_id: ${{ steps.info.outputs.ubuntu_image_cache_id }}
    steps:
      - name: Check Result
        run: |
          if [[ ""${{ needs.thirdparty-update.result }}"" == 'failure' ]]; then
            echo ""::error:: Thirdparty Update Error!""
            exit 1
          fi

      - name: Download Thirdparty Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: THIRDPARTY-RESULT-*
          path: outputs

      - name: Read Info
        id: info
        if: needs.thirdparty-update.result == 'success'
        run: |
          image_cache_id=$(cat ""./outputs/THIRDPARTY-RESULT-centos7/image_cache.info"" || echo """")
          echo ""centos7_image_cache_id=${image_cache_id}"" >> $GITHUB_OUTPUT
          image_cache_id=$(cat ""./outputs/THIRDPARTY-RESULT-ubuntu/image_cache.info"" || echo """")
          echo ""ubuntu_image_cache_id=${image_cache_id}"" >> $GITHUB_OUTPUT

  be-ut:
    runs-on: [self-hosted, normal]
    needs: [ be-checker, thirdparty-info ]
    timeout-minutes: 180
    name: BE UT
    env:
      PR_NUMBER: ${{ github.event.number }}
      BRANCH: ${{ github.base_ref }}
    steps:
      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo ""branch=${{github.base_ref}}"" >> $GITHUB_OUTPUT

      - name: UPDATE ECI & RUN UT
        id: run_ut
        shell: bash
        timeout-minutes: 180
        run: |
          rm -rf ./ci-tool && cp -rf /var/lib/ci-tool ./ci-tool && cd ci-tool && git pull && source lib/init.sh
          if [[ ""${{ needs.be-checker.outputs.output2 }}"" == 'true' ]]; then
              export image_cache_id=${{ needs.thirdparty-info.outputs.centos7_image_cache_id }}
              export image_tag=$BRANCH-$PR_NUMBER
          fi
          ./bin/elastic-ut.sh --pr ${PR_NUMBER} --module be --branch ${{ steps.branch.outputs.branch }} --repository ${{ github.repository }}

      - name: clean ECI
        if: always()
        run: |
          echo ${{ steps.run_ut.outputs.ECI_ID }}
          eci rm ${{ steps.run_ut.outputs.ECI_ID }}

      - name: Upload log
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: BE UT LOG
          path: ${{ steps.run_ut.outputs.BE_LOG }}
          retention-days: 1
          overwrite: true

      - name: Clean ENV
        if: always()
        run: |
          rm -f ${{ steps.run_ut.outputs.RES_FILE }}
          rm -f ${{ steps.run_ut.outputs.RES_LOG }}
          rm -rf ${{ steps.run_ut.outputs.BE_LOG }}
          rm -rf ${{ github.workspace }}/*

  fe-checker:
    runs-on: ubuntu-latest
    needs: basic-checker
    name: FE FILTER
    if: needs.basic-checker.outputs.PASS == 'true'
    outputs:
      output1: ${{ steps.fe-changes-info.outputs.fe }}
    steps:
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            fe:
              - 'fe/**'
              - 'gensrc/**'
              - 'run-fe-ut.sh'
              - 'java-extensions/**'
              - 'build.sh'

      - run: echo ${{ steps.changes.outputs.fe }}

      - name: FE CHECK INFO
        id: fe-changes-info
        run: |
          echo ""fe=${{ steps.changes.outputs.fe }}"" >> $GITHUB_OUTPUT

  fe-codestyle-check:
    runs-on: ubuntu-latest
    needs: fe-checker
    if: needs.fe-checker.outputs.output1 == 'true'
    name: FE Code Style Check
    env:
      PR_NUMBER: ${{ github.event.number }}
    steps:
      - name: clean
        run: |
          rm -rf ${{ github.workspace }}
          mkdir -p ${{ github.workspace }}

      - uses: dorny/paths-filter@v3
        id: java-file
        name: JAVA FILE
        with:
          filters: |
            java:
              - '**.java'

      - run: echo ${{ steps.java-file.outputs.java }}

      - name: BRANCH INFO
        id: branch
        run: |
          echo ${{github.base_ref}}
          echo ""branch=${{github.base_ref}}"" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout PR
        run: |
  "
LXYan2333;Fabric-Bedrock-Miner;LXYan2333/Fabric-Bedrock-Miner;https://github.com/LXYan2333/Fabric-Bedrock-Miner;https://api.github.com/repos/LXYan2333/Fabric-Bedrock-Miner;main;04/09/2021 18:23;17/04/2024 15:30;TRUE;"# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          17,    # Current Java LTS & minimum supported by Minecraft
        ]
        # and run on both Linux and Windows
        os: [ubuntu-20.04, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # Only upload artifacts built from latest java on one OS
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: build/libs/

---
"
dromara;gobrs-async;dromara/gobrs-async;https://github.com/dromara/gobrs-async;https://api.github.com/repos/dromara/gobrs-async;master-v2;06/03/2022 08:52;22/04/2024 12:53;FALSE;
jacopotediosi;GAppsMod;jacopotediosi/GAppsMod;https://github.com/jacopotediosi/GAppsMod;https://api.github.com/repos/jacopotediosi/GAppsMod;main;05/09/2021 19:31;21/04/2024 16:01;TRUE;"name: Assemble on push

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - '**.md'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Write keystore parameters
        run: |
          echo keystore.password='${{ secrets.KEYSTORE_PASSWORD }}' >> local.properties
          echo keystore.alias='${{ secrets.KEYSTORE_ALIAS }}' >> local.properties
          echo keystore.alias_password='${{ secrets.KEYSTORE_ALIAS_PASSWORD }}' >> local.properties
          echo keystore.path=`pwd`/keystore.jks >> local.properties
          echo ""${{ secrets.KEYSTORE_KEY }}"" | base64 --decode > keystore.jks

      - name: Gradle Dependency Submission
        uses: mikepenz/gradle-dependency-submission@v0.8.6
        with:
          gradle-build-module: "":app""

      - name: Assemble
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assemble

      - name: Get short commit hash
        run: |
          echo ""LATEST_COMMIT_HASH=$(git rev-parse --short HEAD)"" >> $GITHUB_ENV

      - name: Upload debug
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ env.LATEST_COMMIT_HASH }}-debug.apk
          path: ""app/build/outputs/apk/debug/app-debug.apk""

      - name: Upload release
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}-${{ env.LATEST_COMMIT_HASH }}-release.apk
          path: ""app/build/outputs/apk/release/app-release.apk""

---
"
digitalinnovationone;trilha-java-basico;digitalinnovationone/trilha-java-basico;https://github.com/digitalinnovationone/trilha-java-basico;https://api.github.com/repos/digitalinnovationone/trilha-java-basico;main;09/03/2022 18:56;19/04/2024 04:29;FALSE;
Fox2Code;FoxMagiskModuleManager;Fox2Code/FoxMagiskModuleManager;https://github.com/Fox2Code/FoxMagiskModuleManager;https://api.github.com/repos/Fox2Code/FoxMagiskModuleManager;master;01/10/2021 17:33;20/04/2024 06:19;TRUE;"#file: noinspection SpellCheckingInspection
name: Generate APK Debug

on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Java 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            ${{ github.workspace }}/.gradle/configuration-cache

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # temporary disabled
      # - name: Run tests
      #  run: ./gradlew test

      - name: Build apk debug
        run: ./gradlew app:assembleDefaultDebug

      # will not upload, just build to check if it builds
      - name: Build apk fdroid-debug
        run: ./gradlew app:assembleFdroidDebug

      # UPLOAD ARTIFACT SECTION
      # Will be shorter, when https://github.com/actions/upload-artifact/pull/354 will be merged
      # FoxMMM-default-debug
      - name: Upload FoxMMM-default-arm64-v8a-debug
        uses: actions/upload-artifact@v3
        with:
          name: FoxMMM-default-arm64-v8a-debug
          path: app/build/outputs/apk/default/debug/*-default-arm64-v8a-debug.apk

      - name: Upload FoxMMM-default-armeabi-v7a-debug
        uses: actions/upload-artifact@v3
        with:
          name: FoxMMM-default-armeabi-v7a-debug
          path: app/build/outputs/apk/default/debug/*-default-armeabi-v7a-debug.apk

      - name: Upload FoxMMM-default-universal-debug
        uses: actions/upload-artifact@v3
        with:
          name: FoxMMM-default-universal-debug
          path: app/build/outputs/apk/default/debug/*-default-universal-debug.apk

      - name: Upload FoxMMM-default-x86-debug
        uses: actions/upload-artifact@v3
        with:
          name: FoxMMM-default-x86-debug
          path: app/build/outputs/apk/default/debug/*-default-x86-debug.apk

      - name: Upload FoxMMM-default-x86_64-debug
        uses: actions/upload-artifact@v3
        with:
          name: FoxMMM-default-x86_64-debug
          path: app/build/outputs/apk/default/debug/*-default-x86_64-debug.apk

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""master"" ]
  pull_request: # The branches below must be a subset of the branches above
    branches: [ ""master"" ]
  schedule:
    - cron: '24 17 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality


      - name: Set up Java 19
        uses: actions/setup-java@v3
        with:
            java-version: 19
            distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
            ${{ github.workspace }}/.gradle/configuration-cache

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Build apk debug
        run: ./gradlew app:assembleDefaultDebug

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #     echo ""Run, Build Application using script""
      #     ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: ""/language:${{matrix.language}}""

---
name: Dependencies
on:
  push:
    branches:
      - master # run the action on your projects default branch
  pull_request:
    branches:
      - master # run the action on your projects default branch

jobs:
  build:
    name: Dependencies
    runs-on: ubuntu-latest
    permissions: # The Dependency Submission API requires write permission
      contents: write
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Run snapshot action
        uses: mikepenz/gradle-dependency-submission@v1
        with:
          gradle-project-path: "".""
          gradle-build-module: "":app""
---
"
polardb;polardbx-sql;polardb/polardbx-sql;https://github.com/polardb/polardbx-sql;https://api.github.com/repos/polardb/polardbx-sql;main;16/10/2021 07:49;18/04/2024 08:07;TRUE;"name: Build_Unit_Test
on:
  push:
    branches:
      - ""main""
    paths-ignore:
      - ""README.md""
      - ""docs/**""
  pull_request_target:
    branches:
      - ""main""
    paths-ignore:
      - ""README.md""
      - ""docs/**""

env:
  MAVEN_CUSTOM_OPTS: ""-Xmx4g -XX:+ExitOnOutOfMemoryError""

concurrency: 
  # main branch should complete running
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && format('ci-pull-{0}', github.event.pull_request.number) || format('ci-main-{0}', github.sha) }}
  cancel-in-progress: true

permissions:
  checks: write
  contents: read
  issues: read
  pull-requests: write

jobs:
  Build_Unit_Test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
          submodules: 'true'
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: stCarolas/setup-maven@v4.3
        with:
          maven-version: 3.5.0
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ github.workflow }}-${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ github.workflow }}-${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Build
        run: |
          export MAVEN_OPTS=""${MAVEN_CUSTOM_OPTS}""
          ./mvnw -T 1C clean package install -DskipTests -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true
      - name: Unit Test
        run: |
          export MAVEN_OPTS=""${MAVEN_CUSTOM_OPTS}""
          sudo sed -i 's#.*#Asia/Shanghai#g' /etc/timezone
          ./mvnw test -B -pl '!polardbx-calcite,!polardbx-rule,!polardbx-rpc,!polardbx-test' -Dmaven.test.failure.ignore=true
      - name: Analyze Unit Test Result
        uses: scacap/action-surefire-report@v1
        with:
          check_name: Unit Test Result
          report_paths: polardbx-*/target/surefire-reports/TEST-*.xml
          fail_on_test_failures: true
---
name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  MAVEN_CUSTOM_OPTS: ""-Xmx4g -XX:+ExitOnOutOfMemoryError""
  RETRY: .github/bin/retry

concurrency: 
  # main branch should complete running
  group: ${{ github.ref == 'refs/heads/main' && format('ci-master-{0}', github.sha) || format('ci-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    timeout-minutes: 200
    steps:
      - name: Free Disk Space
        run: |
          df -h
          sudo apt-get clean
          df -h
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Build
        run: |
          export MAVEN_OPTS=""${MAVEN_CUSTOM_OPTS}""
          ./mvnw -T 1C clean package install -DskipTests -Dcheckstyle.skip=true -Dmaven.javadoc.skip=true

---
name: DML_DDL_Test
on:
  push:
    branches:
      - ""main""
    paths-ignore:
      - ""README.md""
      - ""docs/**""
  pull_request_target:
    types: [labeled]
    branches:
      - ""main""
    paths-ignore:
      - ""README.md""
      - ""docs/**""

concurrency: 
  # main branch should complete running
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && format('ci-pull-{0}', github.event.pull_request.number) || format('ci-main-{0}', github.sha) }}
  cancel-in-progress: true

permissions:
  checks: write
  contents: read
  issues: read
  pull-requests: write

env:
  GIT_URL: https://github.com/${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name || github.repository }}
  COMMIT_ID: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
  CODE_REF: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.ref || github.ref }}

jobs:
  DML_Test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ready for test')
    env:
      TEST_UID: ${{ github.run_id }}-${{ github.run_attempt }}-dml
    steps:
      - name: Print ENV
        run: |
          echo ""test_uid: ${TEST_UID}""
          echo ""git_url: ${GIT_URL}""
          echo ""commit_id: ${COMMIT_ID}""
          echo ""code_ref: ${CODE_REF}""
      - name: Deploy PolarDB-X Cluster
        uses: appleboy/ssh-action@master
        id: dml_deploy
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 100m
          script: |
            cd workspace/github
            ./k8s_deploy.sh -u ${TEST_UID} --repository ${GIT_URL} --ref ${CODE_REF} --commit ${COMMIT_ID}
      - name: Load Init Data
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 60m
          script: |
            cd workspace/github
            ./load_data_by_pod.sh -u ${TEST_UID} --parallel
      - name: Test DML Case
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 200m
          script: |
            cd workspace/github
            ./create_test_runner.sh -u ${TEST_UID} -i 1 -t dml
      - name: Get DML Test Report Files
        id: dml_reports
        run: |
          mkdir -p dml
          sshpass -p ${{ secrets.ECS_PASSWORD }} scp -r -o StrictHostKeyChecking=no -P ${{ secrets.ECS_PORT }} ${{ secrets.ECS_USERNAME }}@${{ secrets.ECS_HOST }}:/root/workspace/reports/${TEST_UID}/1/surefire-reports.tar.gz dml/surefire-reports.tar.gz
          ls -R dml
          echo ""tar file:""
          tar -zxvf dml/surefire-reports.tar.gz -C dml
      - name: Analyze DML Test Result
        if: ${{ always() && steps.dml_reports.outcome == 'success' }}
        uses: scacap/action-surefire-report@v1
        with:
          check_name: DML Test Result
          report_paths: dml/surefire-reports/TEST-*.xml
          fail_on_test_failures: true
      - name: Clean up PolarDB-X Cluster
        if: ${{ always() && steps.dml_deploy.outcome == 'success' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 200m
          script: |
            cd workspace/github
            ./cleanup.sh -u ${TEST_UID}
  DDL_TEST:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'ready for test')
    env:
      TEST_UID: ${{ github.run_id }}-${{ github.run_attempt }}-ddl
    steps:
      - name: Print ENV
        run: |
          echo ""test_uid: ${TEST_UID}""
          echo ""git_url: ${GIT_URL}""
          echo ""commit_id: ${COMMIT_ID}""
          echo ""code_ref: ${CODE_REF}""
      - name: Deploy PolarDB-X Cluster
        uses: appleboy/ssh-action@master
        id: ddl_deploy
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 100m
          script: |
            cd workspace/github
            ./k8s_deploy.sh -u ${TEST_UID} --repository ${GIT_URL} --ref ${CODE_REF} --commit ${COMMIT_ID}
      - name: Load Init Data
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 60m
          script: |
            cd workspace/github
            ./load_data_by_pod.sh -u ${TEST_UID} --only_create_database
      - name: Test DDL Case
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 400m
          script: |
            cd workspace/github
            ./create_test_runner.sh -u ${TEST_UID} -i 2 -t ddl
      - name: Get DDL Test Report Files
        id: ddl_reports
        run: |
          mkdir -p ddl
          sshpass -p ${{ secrets.ECS_PASSWORD }} scp -r -o StrictHostKeyChecking=no -P ${{ secrets.ECS_PORT }} ${{ secrets.ECS_USERNAME }}@${{ secrets.ECS_HOST }}:/root/workspace/reports/${TEST_UID}/2/surefire-reports.tar.gz ddl/surefire-reports.tar.gz
          ls -R ddl
          echo ""tar file:""
          tar -zxvf ddl/surefire-reports.tar.gz -C ddl
      - name: Analyze DDL Test Result
        if: ${{ always() && steps.ddl_reports.outcome == 'success' }}
        uses: scacap/action-surefire-report@v1
        with:
          check_name: DDL Test Result
          report_paths: ddl/surefire-reports/TEST-*.xml
          fail_on_test_failures: true
      - name: Clean up PolarDB-X Cluster
        if: ${{ always() && steps.ddl_deploy.outcome == 'success' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USERNAME }}
          key: ${{ secrets.ECS_KEY }}
          port: ${{ secrets.ECS_PORT }}
          envs: TEST_UID,GIT_URL,COMMIT_ID,CODE_REF
          command_timeout: 200m
          script: |
            cd workspace/github
            ./cleanup.sh -u ${TEST_UID}
        

---
"
alibaba;SREWorks;alibaba/SREWorks;https://github.com/alibaba/SREWorks;https://api.github.com/repos/alibaba/SREWorks;main;16/03/2022 09:08;19/04/2024 21:21;FALSE;
czz1233;GBByPass;czz1233/GBByPass;https://github.com/czz1233/GBByPass;https://api.github.com/repos/czz1233/GBByPass;master;16/03/2022 10:14;22/04/2024 11:28;FALSE;
f0ng;captcha-killer-modified;f0ng/captcha-killer-modified;https://github.com/f0ng/captcha-killer-modified;https://api.github.com/repos/f0ng/captcha-killer-modified;main;18/03/2022 13:41;22/04/2024 12:12;FALSE;
elonlit;Genesis;elonlit/Genesis;https://github.com/elonlit/Genesis;https://api.github.com/repos/elonlit/Genesis;master;19/03/2022 05:23;14/04/2024 13:41;FALSE;
lukeaschenbrenner;TxtNet-Browser;lukeaschenbrenner/TxtNet-Browser;https://github.com/lukeaschenbrenner/TxtNet-Browser;https://api.github.com/repos/lukeaschenbrenner/TxtNet-Browser;master;22/03/2022 23:50;18/04/2024 00:16;FALSE;
onthegomap;planetiler;onthegomap/planetiler;https://github.com/onthegomap/planetiler;https://api.github.com/repos/onthegomap/planetiler;main;20/10/2021 03:59;22/04/2024 11:29;TRUE;"---
name: Docs
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  markdown-link-check:
    name: Broken Links
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # don't need to check planetiler-openmaptiles
          submodules: false
      - name: Run link check
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.13
        with:
          use-quiet-mode: 'no'
          use-verbose-mode: 'yes'
          config-file: '.github/workflows/docs_mlc_config.json'

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI

on:
  pull_request:
    branches: [ main ]

jobs:
  # When spotless:apply fails, the error message is a bit cryptic, so try to make it obvious that
  # is the problem by putting the check into a standalone job
  lint:
    name: Check formatting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'
    - name: Ensure code formatted with mvn spotless:apply
      run: ./mvnw -DskipTests --batch-mode -no-transfer-progress spotless:check

  build:
    name: Java ${{ matrix.jdk }} / ${{ matrix.os }} ${{ matrix.args }}
    # Wait until after we check that you ran mvn spotless:apply, otherwise will fail with a cryptic error message
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        jdk: [ 21 ]
        include:
        - os: ubuntu-latest
          jdk: 21
          args: ""-DargLine='-Duser.language=fr -Duser.country=FR'""
        - os: ubuntu-latest
          jdk: 21
          args: """"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up JDK ${{ matrix.jdk }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.jdk }}
        distribution: 'temurin'
        cache: 'maven'
    # Skip spotless since that gets checked in a separate task
    - name: Build with mvnw (linux/mac)
      if: ${{ !contains(matrix.os, 'windows') }}
      run: ./mvnw ${{matrix.args}} -Dspotless.check.skip --batch-mode -no-transfer-progress package verify jib:buildTar --file pom.xml
    - name: Build with mvnw.cmd (windows)
      if: ${{ contains(matrix.os, 'windows') }}
      run: mvnw.cmd ${{matrix.args}} -Dspotless.check.skip --batch-mode -no-transfer-progress package verify jib:buildTar --file pom.xml
      shell: cmd

  examples:
    name: Example project
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
    - name: Build and test
      run: mvn --batch-mode -no-transfer-progress package --file standalone.pom.xml
      working-directory: planetiler-examples
    - name: Find jar
      run: mv target/*with-deps.jar ./run.jar
      working-directory: planetiler-examples
    - name: Run
      run: java -jar run.jar --osm-path=../planetiler-core/src/test/resources/monaco-latest.osm.pbf --output=data/out.mbtiles
      working-directory: planetiler-examples
    - name: Verify
      run: java -cp run.jar com.onthegomap.planetiler.mbtiles.Verify data/out.mbtiles
      working-directory: planetiler-examples

  run:
    name: Build / Run
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Cache data/sources
      uses: ./.github/cache-sources-action
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'

    - name: Build this branch
      run: ./mvnw -DskipTests -Dimage.version=CI_ONLY --batch-mode -no-transfer-progress package jib:dockerBuild --file pom.xml

    - name: 'Upload artifact'
      uses: actions/upload-artifact@v4
      with:
        name: planetiler-build
        path: planetiler-dist/target/*with-deps.jar

    - name: Download data (java)
      run: java -jar planetiler-dist/target/*with-deps.jar --only-download --area=monaco

    - name: Download wikidata (java)
      run: java -jar planetiler-dist/target/*with-deps.jar --only-fetch-wikidata --area=monaco

    - name: Verify build
      run: ./scripts/test-release.sh CI_ONLY
      env:
        SKIP_EXAMPLE_PROJECT: true

  quickstart:
    name: Quickstart script
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Cache data/sources
      uses: ./.github/cache-sources-action
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'

    - name: quickstart.sh --build
      run: rm -rf data/output.mbtiles data/tmp && ./quickstart.sh monaco --build && ./scripts/check-monaco.sh data/output.mbtiles
    - name: quickstart.sh --jar
      run: rm -rf data/output.mbtiles data/tmp && ./quickstart.sh monaco --jar && ./scripts/check-monaco.sh data/output.mbtiles
    # run docker last since it creates temp dirs with root user
    - name: quickstart.sh --docker
      run: rm -rf data/output.mbtiles data/tmp && ./quickstart.sh monaco --docker && ./scripts/check-monaco.sh data/output.mbtiles

---
# This workflow builds a map using the base and branch commit of a PR and uploads
# the logs as an artifact that update-pr.yml uses to add back as a comment.

name: Performance

on:
  pull_request:
    branches: [ main ]

env:
  # For performance tests, run this branch against main with:
  AREA: rhode island
  RAM: 4g
  # Also pick up a good chunk of the atlantic ocean to catch any regressions in repeated tile performance
  # Omit to infer from .osm.pbf bounds
  BOUNDS_ARG: ""--bounds=-74.07,21.34,-17.84,43.55""

jobs:
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true
    steps:
    - name: 'Cancel previous runs'
      uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}
    - name: 'Checkout branch'
      uses: actions/checkout@v4
      with:
        path: branch
        submodules: true
    - name: 'Checkout base'
      uses: actions/checkout@v4
      with:
        path: base
        ref: ${{ github.event.pull_request.base.sha }}
        submodules: true
    - name: Cache data/sources
      uses: ./branch/.github/cache-sources-action
      with:
        basedir: branch
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'
    - uses: actions/setup-node@v4
      with:
        node-version: '14'
    - run: npm install -g strip-ansi-cli@3.0.2

    - name: 'Build branch'
      run: ./scripts/build.sh
      working-directory: branch
    - name: 'Build base'
      run: ./scripts/build.sh
      working-directory: base

    - name: 'Download data'
      run: |
        set -eo pipefail
        cp base/planetiler-dist/target/*with-deps.jar run.jar && java -jar run.jar --only-download --area=""${{ env.AREA }}""
        cp branch/planetiler-dist/target/*with-deps.jar run.jar && java -jar run.jar --only-download --area=""${{ env.AREA }}""

    - name: 'Store build info'
      run: |
        mkdir build-info
        echo ""${{ github.event.pull_request.base.sha }}"" > build-info/base_sha
        echo ""${{ github.sha }}"" > build-info/branch_sha
        echo ""${{ github.event.number }}"" > build-info/pull_request_number

    - name: 'Run branch'
      run: |
        rm -rf data/out.mbtiles data/tmp
        cp branch/planetiler-dist/target/*with-deps.jar run.jar
        java -Xms${{ env.RAM }} -Xmx${{ env.RAM }} -jar run.jar --area=""${{ env.AREA }}"" ""${{ env.BOUNDS_ARG }}"" --output=data/out.mbtiles --keep-unzipped 2>&1 | tee log
        ls -alh run.jar | tee -a log
        cat log | strip-ansi > build-info/branchlogs.txt
    - name: 'Run base'
      run: |
        rm -rf data/out.mbtiles data/tmp
        cp base/planetiler-dist/target/*with-deps.jar run.jar
        java -Xms${{ env.RAM }} -Xmx${{ env.RAM }} -jar run.jar --area=""${{ env.AREA }}"" ""${{ env.BOUNDS_ARG }}"" --output=data/out.mbtiles --keep-unzipped 2>&1 | tee log
        ls -alh run.jar | tee -a log
        cat log | strip-ansi > build-info/baselogs.txt

    - name: 'Upload build-info'
      uses: actions/upload-artifact@v4
      with:
        name: build-info
        path: ./build-info

---
name: Publish a Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version without leading ""v"" (1.0, 2.3.4, 0.1.0-pre1)'
        required: true
        default: ''
      image_tags:
        description: 'Extra docker image tags (""latest,test"")'
        required: true
        default: 'latest,release'
jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      packages: write
    steps:
    - name: Ensure version does not start with 'v'
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          version = context.payload.inputs.version;
          if (/^v/.test(version)) throw new Error(""Bad version number: "" + version)
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Cache data/sources
      uses: ./.github/cache-sources-action
    - uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD

    - name: Check tag does not exist yet
      run: if git rev-list ""v${{ github.event.inputs.version }}""; then echo ""Tag already exists. Aborting the release process.""; exit 1; fi

    - run: ./scripts/set-versions.sh ""${{ github.event.inputs.version }}""
    - run: ./scripts/build-release.sh
    - run: ./scripts/test-release.sh ""${{ github.event.inputs.version }}""
    - name: Create tag
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: ""refs/tags/v${{ github.event.inputs.version }}"",
            sha: context.sha
          })
    - run: mv planetiler-dist/target/*with-deps.jar planetiler.jar
    - run: sha256sum planetiler.jar > planetiler.jar.sha256
    - run: md5sum planetiler.jar > planetiler.jar.md5
    - name: Install GPG Private Key
      run: |
        echo -n ""${{ secrets.OSSRH_GPG_SECRET_KEY }}"" | base64 --decode | gpg --batch --import
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        fail_on_unmatched_files: true
        tag_name: v${{ github.event.inputs.version }}
        draft: true
        files: |
          planetiler.jar*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - run: ./scripts/push-release.sh ${{ github.event.inputs.version }}
      env:
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_TAGS: ${{ github.event.inputs.image_tags }}
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        OSSRH_GPG_SECRET_KEY_PASSWORD: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}

---
# This workflow builds a map using the base and branch commit of a PR and uploads
# the logs as an artifact that update-pr.yml uses to add back as a comment.

name: Publish a Snapshot

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image_tags:
        description: 'Extra docker image tags (""latest,test"")'
        required: true
        default: 'latest,snapshot'

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Cache data/sources
      uses: ./.github/cache-sources-action
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    - run: ./scripts/build-release.sh
    - run: ./scripts/test-release.sh
    - run: sha256sum planetiler-dist/target/*with-deps.jar
    - run: md5sum planetiler-dist/target/*with-deps.jar
    - name: 'Upload artifact'
      uses: actions/upload-artifact@v4
      with:
        name: planetiler-build
        path: planetiler-dist/target/*with-deps.jar
    - name: Install GPG Private Key
      run: |
        echo -n ""${{ secrets.OSSRH_GPG_SECRET_KEY }}"" | base64 --decode | gpg --batch --import
    - run: ./scripts/push-release.sh
      env:
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_TAGS: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.image_tags || 'latest,snapshot' }}
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        OSSRH_GPG_SECRET_KEY_PASSWORD: ${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Analyze

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar:
    name: Analyze with Sonar
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: true
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: 'maven'
    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Analyze with SonarCloud
      run: |
        mvn -Dspotless.check.skip -Pcoverage -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      env:
        # Needed to get some information about the pull request, if any
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Read-only user, use this token to link SonarLint to SonarCloud as well
        SONAR_TOKEN: c2cfe8bd7368ced07e84a620b7c2487846e220eb
    - name: Wait for SonarCloud API to update...
      run: ""sleep 10""
    - name: Upload annotations on PRs
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const pr = context.payload.pull_request.number;
          const url = `https://sonarcloud.io/api/issues/search?pullRequest=${pr}&s=FILE_LINE&resolved=false&sinceLeakPeriod=true&ps=100&facets=severities%2Ctypes&componentKeys=onthegomap_planetiler&organization=onthegomap&additionalFields=_all`;
          console.log(""Fetching "" + url);
          const response = await github.request(url);
          console.log(""Got "" + JSON.stringify(response.data));
          response.data.issues.forEach(issue => {
            try {
              if (issue.severity === 'INFO') return;
              const textRange = issue.textRange;
              const rule = encodeURIComponent(issue.rule);
              const message = [
                issue.message,
                '',
                `rule: ${issue.rule} (https://sonarcloud.io/organizations/onthegomap/rules?open=${rule}&rule_key=${rule})`,
                `issue url: https://sonarcloud.io/project/issues?pullRequest=${pr}&open=${encodeURIComponent(issue.key)}&id=onthegomap_planetiler`
              ].join('\n');
              const args = {
                title: `${issue.severity} ${issue.type}`,
                file: issue.component.replace(/^[^:]*:/, ''),
                startLine: textRange.startLine,
                endLine: textRange.endLine,
                startColumn: textRange.startOffset,
                endColumn: textRange.endOffset
              };
              core.warning(message, args);
              console.log(args);
            } catch (e) {
              core.error(`Unable to parse sonar issue: ${JSON.stringify(issue)}`);
            }
          });

---
# This workflow posts the result of a performance test back to the pull request as a comment.
# Needs to be separate from CI because it has elevated privileges so only runs from main branch.

name: Update PR

on:
  workflow_run:
    workflows: [ ""Performance"" ]
    types:
      - completed

jobs:
  updatepr:
    runs-on: ubuntu-latest
    continue-on-error: true
    if: ${{ github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success' }}
    timeout-minutes: 5
    steps:
      # report status back to pull request
      - uses: haya14busa/action-workflow_run-status@v1
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: 'Download branch build info'
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          run_id: ${{ github.event.workflow_run.id }}
          name: build-info
          path: build-info
      - name: 'Get build info'
        id: build_info
        run: echo ""::set-output name=pr_number::$(cat build-info/pull_request_number)""
      - name: 'Build comment-body'
        run: |
          cat build-info/branchlogs.txt | sed -n '/^.*Tile stats/,$p' > branchsummary.txt
          cat build-info/branchlogs.txt | sed -n '/^.*Exception in thread/,$p' >> branchsummary.txt
          cat build-info/baselogs.txt | sed -n '/^.*Tile stats:/,$p' > basesummary.txt
          cat build-info/baselogs.txt | sed -n '/^.*Exception in thread/,$p' >> basesummary.txt

          cat << EOF > comment-body.txt
          <table>
          <thead>
          <tr>
          <th>Base $(cat build-info/base_sha)</th>
          <th>This Branch $(cat build-info/branch_sha)</th>
          </tr>
          </thead>
          <tr>
          <td>

          \`\`\`
          $(cat basesummary.txt)
          \`\`\`
          </td>
          <td>

          \`\`\`
          $(cat build-info/branchlogs.txt | sed -n '/^.*Tile stats:/,$p')
          \`\`\`
          </td>
          </tr>
          </table>

          https://github.com/onthegomap/planetiler/actions/runs/${{ github.event.workflow_run.id }}

          <details><summary>ℹ️ <strong>Base Logs $(cat build-info/base_sha)</strong></summary>

          \`\`\`
          $(cat build-info/baselogs.txt)
          \`\`\`
          </details>

          <details><summary>ℹ️ <strong>This Branch Logs $(cat build-info/branch_sha)</strong></summary>

          \`\`\`
          $(cat build-info/branchlogs.txt)
          \`\`\`
          </details>
          EOF

      - name: 'Dump comment body'
        run: cat comment-body.txt

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: comment-body.txt
          header: performance-tests
          number: ${{ steps.build_info.outputs.pr_number }}

---
"
0x727;SpringBootExploit;0x727/SpringBootExploit;https://github.com/0x727/SpringBootExploit;https://api.github.com/repos/0x727/SpringBootExploit;main;22/10/2021 05:11;21/04/2024 23:14;TRUE;"name: Release Maven



on:
  push:
    tags:
      - '*'
# on: [push]



jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          distribution: ""Liberica""
          java-version: 1.8
          java-package: jdk+fx
      - name: Build with Maven
        run:
          mvn clean package -DskipTests=true -Dmaven.javadoc.skip=true -B -V 
      - name: Create Release
        id: create_release
        uses: SummerSec/create-release@master
        with:
          tag_name: ${{ github.ref }}
          release-name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE }}


      - name: Upload a Build Artifact
        id: upload-build-artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          # Artifact name
          name: # optional, default is artifact
            SPATool-${{steps.create_release.outputs.tag}}-SNAPSHOT-all.jar
          # A file, directory or wildcard pattern that describes what to upload
          path:
            target/*-SNAPSHOT-all.jar
          # The desired behavior if no files are found using the provided path.

      - name: Auto Upload Release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{secrets.RELEASE}}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /home/runner/work/SpringBootExploit/SpringBootExploit/target/SpringBootExploit-${{ steps.create_release.outputs.tag }}-SNAPSHOT-all.jar
          asset_name: SpringBootExploit-${{ steps.create_release.outputs.tag }}-SNAPSHOT-all.jar
          asset_content_type: application/java-archive

---
"
f0ng;autoDecoder;f0ng/autoDecoder;https://github.com/f0ng/autoDecoder;https://api.github.com/repos/f0ng/autoDecoder;main;26/03/2022 11:13;22/04/2024 10:24;FALSE;
digitalinnovationone;dio-springboot;digitalinnovationone/dio-springboot;https://github.com/digitalinnovationone/dio-springboot;https://api.github.com/repos/digitalinnovationone/dio-springboot;main;26/03/2022 12:54;21/04/2024 02:18;FALSE;
Mino260806;MessengerPro;Mino260806/MessengerPro;https://github.com/Mino260806/MessengerPro;https://api.github.com/repos/Mino260806/MessengerPro;master;27/03/2022 01:03;21/04/2024 07:27;FALSE;
mahonelau;-kykms;mahonelau/-kykms;https://github.com/mahonelau/-kykms;https://api.github.com/repos/mahonelau/-kykms;main;27/03/2022 09:23;20/04/2024 18:48;FALSE;
Cap-go;capacitor-updater;Cap-go/capacitor-updater;https://github.com/Cap-go/capacitor-updater;https://api.github.com/repos/Cap-go/capacitor-updater;main;24/10/2021 18:49;22/04/2024 08:28;TRUE;"name: Build source code and check lint

on:
  push:
    tags:
      - ""*""

jobs:
  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'
          cache-dependency-path: | # optional
            android/.gradle/*.gradle*
            android/**/gradle-wrapper.properties
      - name: Build
        id: build_code
        run: npm run verify:android
  build_ios:
    runs-on: macOS-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - uses: actions/cache@v4
        id: cocoapods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Build
        id: build_code
        run: pnpm verify:ios
  deploy:
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    name: ""Build code and npm release""
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Lint
        id: lint_code
        run: pnpm lint
      - name: Build
        id: build_code
        run: pnpm build
      - name: Verify
        id: verify_code
        run: pnpm verify:web
      - uses: JS-DevTools/npm-publish@v3
        if: ${{ !contains(github.ref, '-alpha.') }}
        with:
          token: ${{ secrets.NPM_TOKEN }}
          provenance: true
      - uses: JS-DevTools/npm-publish@v3
        if: ${{ contains(github.ref, '-alpha.') }}
        with:
          token: ${{ secrets.NPM_TOKEN }}
          tag: next
          provenance: true

---
name: Bump version

on:
  push:
    branches:
      - main
      - development

jobs:
  bump-version:
    if: ${{ !startsWith(github.event.head_commit.message, 'chore(release):') }}
    runs-on: ubuntu-latest
    name: ""Bump version and create changelog with standard version""
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: '${{ secrets.PERSONAL_ACCESS_TOKEN }}'
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Git config
        run: |
          git config --local user.name ""github-actions[bot]""
          git config --local user.email ""github-actions[bot]@users.noreply.github.com""
      - name: Update Doc
        run: pnpm docgen
      - name: Update Doc
        run: pnpm docgen:api
      - name: Add doc to github
        run: |
          git add README.md
          git add api.md
          git commit --m ""docs: update doc"" || true
      - name: Create bump and changelog main
        if: github.ref == 'refs/heads/main'
        run: pnpm dlx capacitor-plugin-standard-version@latest
      - name: Create bump and changelog development
        if: github.ref != 'refs/heads/main'
        run: pnpm dlx capacitor-plugin-standard-version@latest --prerelease alpha
      - name: Push to origin
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          remote_repo=""https://${GITHUB_ACTOR}:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git""
          git pull $remote_repo $CURRENT_BRANCH
          git push $remote_repo HEAD:$CURRENT_BRANCH --follow-tags --tags
      - name: Push generated doc to doc repo
        uses: nkoppel/push-files-to-another-repository@v1.1.2
        env:
          API_TOKEN_GITHUB: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          source-files: api.md
          destination-username: Cap-go
          destination-repository: website
          destination-directory: src/content/docs/docs/plugin
          destination-branch: main
          commit-email: martindonadieu@gmail.com
  create-cache:
    if: ${{ !startsWith(github.event.head_commit.message, 'chore(release):') }}
    runs-on: ubuntu-latest
    name: ""Create global cache on main branch""
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: CLI capacitor-standard-version install
        run: pnpm dlx capacitor-standard-version@latest --version

---
name: Build source code and test it

on:
  push:
    branches:
      - renovate/**
  pull_request:
    branches: [ main ]

jobs:
  build_android:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Build
        id: build_code
        run: npm run verify:android
  build_ios:
    runs-on: macOS-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Build
        id: build_code
        run: pnpm verify:ios
  web:
    runs-on: ubuntu-latest
    name: 'Build code and test'
    steps:
      - name: Check out
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Lint
        id: lint_code
        run: pnpm lint
      - name: Build
        id: build_code
        run: pnpm build
      - name: Verify
        id: verify_code
        run: pnpm verify:web

---
"
redis;redis-om-spring;redis/redis-om-spring;https://github.com/redis/redis-om-spring;https://api.github.com/repos/redis/redis-om-spring;main;29/10/2021 06:36;15/04/2024 18:29;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '17 4 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'zulu'
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: Integration

on:
  pull_request:
    branches: [""main""]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v3
    - name: cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.mv2/repository
        key: om-${{hashFiles('**/pom.xml')}}

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'zulu'
    - run: mvn dependency:go-offline
    - name: Build
      run: mvn clean process-test-classes verify
    - name: codecov
      run: |
        curl -s https://raw.githubusercontent.com/codecov/codecov-bash/master/codecov

---
name: Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into ""master""
      - uses: release-drafter/release-drafter@v5
        with:
          # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
           config-name: release-drafter-config.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
---

name: Publish Snapshot

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - '[0-9].[0-9]'

jobs:

  snapshot:
    name: Deploy Snapshot
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.mv2/repository
          key: om-${{hashFiles('**/pom.xml')}}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - run: mvn dependency:go-offline
      - run: mvn clean process-test-classes verify
      - name: codecov
        run: |
          curl -s https://raw.githubusercontent.com/codecov/codecov-bash/master/codecov
      - name: deploy
        working-directory: redis-om-spring
        run: |
          mvn --no-transfer-progress \
            -DskipTests\
            -Dgpg.passphrase='${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}' \
            deploy
        env:
          MAVEN_USERNAME: ${{secrets.OSSRH_USERNAME}}
          MAVEN_PASSWORD: ${{secrets.OSSRH_TOKEN}}

---
name: spellcheck
on:
  pull_request:
jobs:
  check-spelling:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check Spelling
        uses: rojopolis/spellcheck-github-actions@0.35.0
        with:
          config_path: .github/spellcheck-settings.yml
          task_name: Markdown

---
name: Release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: get version from tag
        id: get_version
        run: |
          realversion=""${GITHUB_REF/refs\/tags\//}""
          realversion=""${realversion//v/}""
          echo ""VERSION=$realversion"" >> ""$GITHUB_OUTPUT""

      - name: Set up publishing to maven central
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: mvn versions
        run: mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}

      - name: Install gpg key
        run: |
          cat <(echo -e ""${{ secrets.OSSRH_GPG_SECRET_KEY }}"") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Publish
        working-directory: redis-om-spring
        run: |
          mvn --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase='${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}' \
            -DskipTests deploy -P release
        env:
          MAVEN_USERNAME: ${{secrets.OSSRH_USERNAME}}
          MAVEN_PASSWORD: ${{secrets.OSSRH_TOKEN}}

---
"
SuperMonster003;AutoJs6;SuperMonster003/AutoJs6;https://github.com/SuperMonster003/AutoJs6;https://api.github.com/repos/SuperMonster003/AutoJs6;master;01/12/2021 06:27;21/04/2024 18:54;TRUE;"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (assembleInrtRelease)
        run: ./gradlew assembleInrtRelease

      - name: Build with Gradle (assembleAppRelease)
        run: ./gradlew assembleAppRelease

      - name: Upload arm64 artifacts
        id: upload-arm64-apk
        uses: actions/upload-artifact@v3
        with:
          name: release-arm64-apk
          path: app/build/outputs/apk/app/release/*-arm64-v8a.apk
        continue-on-error: true

      - name: Upload armv7 artifacts
        id: upload-armv7-apk
        uses: actions/upload-artifact@v3
        with:
          name: release-armv7-apk
          path: app/build/outputs/apk/app/release/*-v7a.apk
        continue-on-error: true

      - name: Upload universal artifacts
        id: upload-universal-apk
        uses: actions/upload-artifact@v3
        with:
          name: release-universal-apk
          path: app/build/outputs/apk/app/release/*-universal.apk
        continue-on-error: true

---
"
DerekYRC;mini-spring-cloud;DerekYRC/mini-spring-cloud;https://github.com/DerekYRC/mini-spring-cloud;https://api.github.com/repos/DerekYRC/mini-spring-cloud;main;01/04/2022 12:57;21/04/2024 16:44;FALSE;
zhangchuangiie;SimpleMybatis;zhangchuangiie/SimpleMybatis;https://github.com/zhangchuangiie/SimpleMybatis;https://api.github.com/repos/zhangchuangiie/SimpleMybatis;main;07/04/2022 03:55;03/04/2024 19:28;FALSE;
metaStor;SpringScan;metaStor/SpringScan;https://github.com/metaStor/SpringScan;https://api.github.com/repos/metaStor/SpringScan;main;09/04/2022 06:51;04/04/2024 21:21;FALSE;
JannsenYang;dingdong-helper;JannsenYang/dingdong-helper;https://github.com/JannsenYang/dingdong-helper;https://api.github.com/repos/JannsenYang/dingdong-helper;main;09/04/2022 14:34;19/04/2024 17:38;FALSE;
ZCShou;GoGoGo;ZCShou/GoGoGo;https://github.com/ZCShou/GoGoGo;https://api.github.com/repos/ZCShou/GoGoGo;master;03/12/2021 07:59;21/04/2024 23:07;TRUE;"# name 字段用于指定 Workflow 的名字
name: Build Check

# 在 on 字段下列举触发条件（事件），可以有多种
on:
  # 手动使用 Github WebUI 触发
  workflow_dispatch:
  # 仓库收到 Push 时触发
  push:
    branches:
      - master
  # 仓库收到 pull_request 时触发
  pull_request:
    branches:
      - master

# 一个 workflow 执行一个或多个 job，这些 job 被组织在 jobs 字段下
jobs:
  # 一个名为 build 的 job。每一个Job都是并发执行的并不是按照申明的先后顺序执行的，
  # 如果多个job 之间存在依赖关系，需要使用 needs，例如
  # job1:
  #   xxx
  # job2:
  #   needs: job1
  #   xxx
  build:
    # 该 job 运行的系统环境，支持 ubuntu 、windows、macOS
    runs-on: ubuntu-latest
    
    # 该 job 的一系列步骤。每个以“-”开头
    steps:
      # 检出我们的源代码
      - uses: actions/checkout@v4

      # 设置 JDK
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle
      
      # 给 gradlew 增加执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # 启动构建
      - name: Build with Gradle
        run: ./gradlew build

---
name: Build Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'Release*'

permissions:
  contents: write

jobs:
  Build:
    name: Release APK
    runs-on: ubuntu-latest
    steps:
      # https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v4

      # 设置 JDK
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle

      - name: Get Tag
        id: var
        run: echo ""tag=${GITHUB_REF#refs/*/}"" >> $GITHUB_OUTPUT

      - name: Build APK
        run: bash ./gradlew assembleRelease

      - name: Get Build Tool Version
        shell: bash
        run: |
          BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
          echo ""BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION"" >> $GITHUB_ENV
          echo Last build tool version is: $BUILD_TOOL_VERSION

      # https://github.com/marketplace/actions/sign-android-release
      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

      # https://github.com/marketplace/actions/auto-changelog
      # require commit format are ""type(category): description [flag]""
      - name: Make Changelog
        uses: ardalanamini/auto-changelog@v4.0.1
        id  : changelog
        with:
          github-token            : ${{ github.token }}
          commit-types            : |
            feat: New Features
            fix: Bug Fixes
            build: Build System & Dependencies
            perf: Performance Improvements
            docs: Documentation
            test: Tests
            refactor: Refactors
            chore: Chores
            ci: CI
            style: Code Style
            revert: Reverts
          default-commit-type     : Other Changes
          release-name            : v1.0.0
          release-name-prefix     : """"
          mention-authors         : true
          mention-new-contributors: true
          include-compare-link    : true
          #include-pr-lints        : true
          #include-commit-lints    : true
          semver                  : true
          use-github-autolink     : true

      # https://github.com/marketplace/actions/gh-release
      - name: Release APK
        uses: softprops/action-gh-release@v2.0.4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ github.token }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: false
          files: ${{steps.sign_apk.outputs.signedReleaseFile}}

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  # 手动使用 Github WebUI 触发
  workflow_dispatch:
  # 仓库收到 Push 时触发
  push:
    tags:
      - 'Release*'
  # 仓库收到 pull_request 时触发
  pull_request:
    branches:
      - master
  schedule:
    - cron: '36 23 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@49819abfb41bd9b44fb781159c033dba90353a7c # v1.0
        with:
          swap-size-gb: 10
      - name: Initialize CodeQL
        uses: github/codeql-action/init@c7f9125735019aa87cfc361530512d50ea439c71 # v3.25.1
        with:
          languages: ${{ matrix.language }}
      - name: Set up JDK 17
        uses: actions/setup-java@9704b39bf258b59bc04b50fa2dd55e9ed76b47a8 # v4.1.0
        with:
          distribution: ""temurin""
          java-version: 17
      - name: Assemble
        run: |
          mkdir -p ""$HOME/.gradle""
          echo ""org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError"" > ""$HOME/.gradle/gradle.properties""
          ./gradlew assembleDebug
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@c7f9125735019aa87cfc361530512d50ea439c71 # v3.25.1
---
name: Issue Check

on:
  schedule:
    - cron: ""0 0 * * *""

permissions:
  contents: read

jobs:
  issue-close-require:
    permissions:
      issues: write  # for actions-cool/issues-helper to update issues
      pull-requests: write  # for actions-cool/issues-helper to update PRs
    runs-on: ubuntu-latest
    steps:
      - name: check-inactive
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'check-inactive'
          inactive-label: 'inactive'
          inactive-day: 15
          body: |
            The issue has not received any updates for 15 consecutive days. Please follow the progress of this issue in time.

            该 issue 已经连续 15 天未收到任何更新。请及时关注该 ISSUE 进展。

      - name: inactive
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'close-issues'
          labels: 'inactive'
          inactive-day: 7
          body: |
            Since the issue do not response in 7 days after be added inactive tag. This issue will be closed. If you have any questions, you can comment and reply.

            由于该 issue 在被标记为 inactive 后 7 天仍未收到回应。现关闭 issue，若有任何问题，可评论回复。
---
name: Issue Comment

on:
  issues:
    types: [labeled]

permissions:
  contents: read

jobs:
  issue-labeled:
    permissions:
      issues: write  # for actions-cool/issues-helper to update issues
      pull-requests: write  # for actions-cool/issues-helper to update PRs
    runs-on: ubuntu-latest
    steps:
      - name: Comment Feature
        if: github.event.label.name == 'feature'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, thanks for your suggestions. We will have someone to follow up your suggestions. 

            你好 @${{ github.event.issue.user.login }}，感谢提交建议！我们会有专人来跟踪该建议。

      - name: Comment Bug
        if: github.event.label.name == 'bug'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, thanks for your feedback. We will have someone to follow up your feedback. 

            你好 @${{ github.event.issue.user.login }}，感谢提交反馈！我们会有专人来跟踪该反馈。

      - name: Comment Help Wanted
        if: github.event.label.name == 'help wanted'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Sorry @${{ github.event.issue.user.login }}, we do not have a good solution now. welcome to [send us a Pull Request](https://help.github.com/en/articles/creating-a-pull-request) for it. Make sure CI passed, we will review it soon. We appreciate your effort in advance and looking forward to your contribution!

            抱歉 @${{ github.event.issue.user.login }}，目前，我们并没有很好地解决方法！欢迎直接在此仓库 [创建一个 Pull Request](https://help.github.com/en/articles/creating-a-pull-request) 来帮助我们解决这个问题。确保 CI 通过，我们会尽快进行 Review，提前感谢和期待您的贡献。

      - name: Comment Reproduce
        if: github.event.label.name == 'reproduce'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}， we can not reproduce you feedback.Please provide a reproduction in order to address the issue.

            你好 @${{ github.event.issue.user.login }}, 我们未能复现你的反馈。请提供一个复现步骤以便于我们排查问题。

      - name: Comment Usage
        if: github.event.label.name == 'usage' || github.event.label.name == 'question'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, Thanks for your using GoGoGo. It is recommended that you first check whether the corresponding document can solve your feedback.

            你好 @${{ github.event.issue.user.login }}，感谢您使用影梭，建议您首先查看对应的文档是否可以解决您的反馈。

      - name: Comment Invalid
        if: github.event.label.name == 'invalid'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment,close-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hello @${{ github.event.issue.user.login }}, your issue has been closed because it does not conform to our issue requirements. Please use the issue template to create an issue, thank you!

            你好 @${{ github.event.issue.user.login }}，为了能够进行高效沟通，我们对 issue 有一定的格式要求，你的 issue 因为不符合要求而被自动关闭。请务必根据 issue 模板来创建 issue，以方便我们定位问题，谢谢！

---
"
aklivity;zilla;aklivity/zilla;https://github.com/aklivity/zilla;https://api.github.com/repos/aklivity/zilla;develop;07/12/2021 23:10;21/04/2024 20:01;TRUE;"name: build

on:
  push:
    branches: [ develop, 'feature/**'  ]
  pull_request:
    branches: [ develop, 'feature/**' ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11, 17, 20 ]

    steps:
    - name: Checkout GitHub sources
      uses: actions/checkout@v4
    - name: Setup JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: ${{ matrix.java }}
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/io/aklivity/zilla
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      run: ./mvnw -B -U -nsu -Ddocker.logStdout -Dfailsafe.skipAfterFailureCount=1 -Ddocker.verbose install jacoco:report-aggregate
    - name: Conditional Artifact Upload
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: zilla-build-${{ github.event.number }}
        path: |
          **/hs_err_pid*.log
          **/target/surefire-reports/
          **/target/zilla-itests/
          **/target/failsafe-reports/

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: CodeQL

on:
  push:
    branches: [ ""develop"", ""main"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""develop"" ]
  schedule:
    - cron: '27 10 * * 4'

jobs:
  analyze:
    name: Analyze
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners
    # Consider using larger runners for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # Cache downloaded Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/io/aklivity/zilla
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo ""Run, Build Application using script""
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: ""/language:${{matrix.language}}""

---
"
whwlsfb;Log4j2Scan;whwlsfb/Log4j2Scan;https://github.com/whwlsfb/Log4j2Scan;https://api.github.com/repos/whwlsfb/Log4j2Scan;master;10/12/2021 07:16;21/04/2024 09:31;TRUE;"name: Java CI

on:
  watch:
    types: started
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - run: mkdir release && cp target/Log4j2Scan-*.jar release
      - run: echo ""NOW=$(date +'%Y%m%dT%H%M%S')"" >> $GITHUB_ENV

      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: dev-${{ env.NOW }}
          prerelease: true
          title: Auto Build - ${{ env.NOW }}
          files: release/*.jar
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: Log4j2Scan_${{ env.NOW }}
          # Directory containing files to upload
          path: release

---
"
apache;celeborn;apache/celeborn;https://github.com/apache/celeborn;https://api.github.com/repos/apache/celeborn;main;10/12/2021 09:57;20/04/2024 17:17;TRUE;"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Celeborn Benchmark

on:
  repository_dispatch:
    types: [ benchmark-command ]

jobs:
  regression:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Build
        run: |
          build/make-distribution.sh -Pspark-3.2
          rm -rf /home/hadoop/celeborn-toolkit/dist/*
          mv apache-celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/

      - name: Benchmark
        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark

      - name: Upload Result
        uses: actions/upload-artifact@v3
        with:
          name: benchmark result
          path: /home/hadoop/celeborn-toolkit/result/

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Celeborn User Triggered Benchmark

on:
  workflow_dispatch:
    inputs:
      benchmark:
        description: 'benchmark'
        required: true
        default: 'default-benchmark'

jobs:
  regression:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          build/make-distribution.sh -Pspark-3.2
          rm -rf /home/hadoop/celeborn-toolkit/dist/*
          mv apache-celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/

      - name: Benchmark
        run: /home/hadoop/celeborn-toolkit/reg.sh benchmark

      - name: Upload Result
        uses: actions/upload-artifact@v3
        with:
          name: benchmark result
          path: /home/hadoop/celeborn-toolkit/result/

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.
#
# You can adjust the behavior by modifying this file.
# For more information, see: https://github.com/actions/stale
#

name: Mark stale issues and pull requests

on:
  schedule:
  - cron: '30 8 * * *'

jobs:
  stale:
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write
    steps:
      - uses: actions/stale@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          days-before-pr-stale: 20
          days-before-pr-close: 10
          stale-pr-message: 'This PR is stale because it has been open 20 days with no activity. Remove stale label or comment or this will be closed in 10 days.'
          close-pr-message: 'This issue was closed because it has been staled for 10 days with no activity.'

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Dependency

on:
  pull_request:
    branches:
      - main
      - branch-*
    paths:
      - '**/pom.xml'
      - 'project/**'
      - '.github/workflows/deps.yml'
      - 'dev/dependencies.sh'
      - 'dev/deps/**'

concurrency:
  group: deps-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  sbt:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        module:
          - 'service'
          - 'spark-2.4'
          - 'spark-3.0'
          - 'spark-3.1'
          - 'spark-3.2'
          - 'spark-3.3'
          - 'spark-3.4'
          - 'spark-3.5'
          - 'flink-1.14'
          - 'flink-1.15'
          - 'flink-1.17'
          - 'flink-1.18'
          - 'flink-1.19'
          - 'mr'
    steps:
    - uses: actions/checkout@v2
    - name: Setup JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: 8
        check-latest: false
    - name: SBT Check dependency list
      run: |
        ./dev/dependencies.sh --sbt --module ${{ matrix.module }} --check

  maven:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        module:
          - 'service'
          - 'spark-2.4'
          - 'spark-3.0'
          - 'spark-3.1'
          - 'spark-3.2'
          - 'spark-3.3'
          - 'spark-3.4'
          - 'spark-3.5'
          - 'flink-1.14'
          - 'flink-1.15'
          - 'flink-1.17'
          - 'flink-1.18'
          - 'flink-1.19'
          - 'mr'
    steps:
    - uses: actions/checkout@v2
    - name: Setup JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: 8
        cache: maven
        check-latest: false
    - name: Maven Check dependency list
      run: |
        ./dev/dependencies.sh --module ${{ matrix.module }} --check

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Integration Test

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:
    branches:
      - main
      - branch-*
env:
  MINIKUBE_VERSION: v1.29.0
  KUBERNETES_VERSION: v1.26.1

jobs:
  celeborn_integration_test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        name: Setup JDK with Maven
        with:
          distribution: zulu
          java-version: 8
          cache: maven
          check-latest: false
      - name: Build Celeborn Binary
        run:
          ./build/make-distribution.sh -Pspark-3.3 -Pgoogle-mirror
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Celeborn Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ./dist
          file: ./docker/Dockerfile
          load: true
          tags: apache/celeborn:latest
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      - name: Setup Minikube
        run: |
          # https://minikube.sigs.k8s.io/docs/start/
          curl -LO https://github.com/kubernetes/minikube/releases/download/${MINIKUBE_VERSION}/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --cpus 2 --memory 4096 --kubernetes-version=${KUBERNETES_VERSION} --force
      - name: Deploy Celeborn
        run: |
          # https://minikube.sigs.k8s.io/docs/handbook/pushing/#7-loading-directly-to-in-cluster-container-runtime
          minikube image load apache/celeborn:latest
          helm install celeborn charts/celeborn -f ./tests/kubernetes-it/docker/helm/values.yaml
      - name: Wait Celeborn Ready
        run: >-
          ./build/mvn clean install 
          -Pkubernetes-it 
          -Pspark-3.3
          -Dtest=none 
          -DwildcardSuites=org.apache.celeborn.integration.DeploySuite

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: License check

# This GitHub workflow checks Apache License v2.0 Header is added if needed

on:
  pull_request:
    branches:
      - main
      - branch-*

concurrency:
  group: license-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rat:
    name: License
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
          cache: 'maven'
          check-latest: false
      - run: |
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,flink-1.14
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,flink-1.15
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,flink-1.17
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,flink-1.18
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,spark-2.4
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,spark-3.3
          build/mvn org.apache.rat:apache-rat-plugin:check -Pgoogle-mirror,mr
      - name: Upload rat report
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: rat-report
          path: ""**/target/rat*.txt""

---
# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Celeborn CI

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:
    branches:
      - main
      - branch-*

jobs:
  service:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
          - 17
    steps:
    - uses: actions/checkout@v2
    - name: Setup JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: ${{ matrix.java }}
        cache: maven
        check-latest: false
    - name: Test Service with Maven
      run: build/mvn -Pgoogle-mirror test
    - name: Upload test log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: service-unit-test-log
        path: |
          **/target/unit-tests.log
    - name: Upload coverage to Codecov
      if: matrix.java == 8
      uses: codecov/codecov-action@v3

  spark2:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
        spark:
          - '2.4'
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          cache: maven
          check-latest: false
      - name: Test with Maven
        run: |
          SPARK_BINARY_VERSION=${{ matrix.spark }}
          SPARK_MAJOR_VERSION=${SPARK_BINARY_VERSION%%.*}
          PROFILES=""-Pgoogle-mirror,spark-${{ matrix.spark }}""
          TEST_MODULES=""client-spark/common,client-spark/spark-${SPARK_MAJOR_VERSION},client-spark/spark-${SPARK_MAJOR_VERSION}-shaded,tests/spark-it""
          build/mvn $PROFILES -pl $TEST_MODULES -am clean install -DskipTests
          build/mvn $PROFILES -pl $TEST_MODULES test
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: spark-${{ matrix.spark }}-unit-test-log
          path: |
            **/target/unit-tests.log

  spark3:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
          - 17
        spark:
          - '3.0'
          - '3.1'
          - '3.2'
          - '3.3'
          - '3.4'
          - '3.5'
        shuffle-plugin-class:
          - 'org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO'
          - 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
        exclude:
          # SPARK-33772: Spark supports JDK 17 since 3.3.0
          - java: 17
            spark: '3.0'
          - java: 17
            spark: '3.1'
          - java: 17
            spark: '3.2'
          # ShuffleDriverComponents#supportsReliableStorage was introduced in 3.5.0
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.0'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.1'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.2'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.3'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.4'
    steps:
    - uses: actions/checkout@v2
    - name: Setup JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: ${{ matrix.java }}
        cache: maven
        check-latest: false
    - name: Test with Maven
      run: |
        SPARK_BINARY_VERSION=${{ matrix.spark }}
        SPARK_MAJOR_VERSION=${SPARK_BINARY_VERSION%%.*}
        PROFILES=""-Pgoogle-mirror,spark-${{ matrix.spark }}""
        TEST_MODULES=""client-spark/common,client-spark/spark-${SPARK_MAJOR_VERSION},client-spark/spark-${SPARK_MAJOR_VERSION}-shaded,tests/spark-it""
        build/mvn $PROFILES -pl $TEST_MODULES -am clean install -DskipTests
        build/mvn $PROFILES -pl $TEST_MODULES -Dspark.shuffle.sort.io.plugin.class=${{ matrix.shuffle-plugin-class }} test
    - name: Upload test log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: spark-${{ matrix.spark }}-unit-test-log
        path: |
          **/target/unit-tests.log

  flink:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
        flink:
          - '1.14'
          - '1.15'
          - '1.17'
          - '1.18'
          - '1.19'
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          cache: maven
          check-latest: false
      - name: Test with Maven
        run: |
          PROFILES=""-Pgoogle-mirror,flink-${{ matrix.flink }}""
          TEST_MODULES=""client-flink/common,client-flink/flink-${{ matrix.flink }},client-flink/flink-${{ matrix.flink }}-shaded,tests/flink-it""
          build/mvn $PROFILES -pl $TEST_MODULES -am clean install -DskipTests
          build/mvn $PROFILES -pl $TEST_MODULES test
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: flink-${{ matrix.flink }}-unit-test-log
          path: |
            **/target/unit-tests.log

  mr:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          cache: maven
          check-latest: false
      - name: Test with Maven
        run: |
          PROFILES=""-Pgoogle-mirror,mr""
          TEST_MODULES=""client-mr/mr,client-mr/mr-shaded,tests/mr-it""
          build/mvn $PROFILES -pl $TEST_MODULES -am clean install -DskipTests
          build/mvn $PROFILES -pl $TEST_MODULES test
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: mr-unit-test-log
          path: |
            **/target/test/

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Celeborn Regression

on:
  repository_dispatch:
    types: [ regression-command ]

jobs:
  regression:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
          token: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Build
        run: |
          build/make-distribution.sh -Pspark-3.2
          rm -rf /home/hadoop/celeborn-toolkit/dist/*
          mv apache-celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/

      - name: Regression
        run: /home/hadoop/celeborn-toolkit/reg.sh regression

      - name: Upload Result
        uses: actions/upload-artifact@v3
        with:
          name: regression result
          path: /home/hadoop/celeborn-toolkit/result/

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Celeborn User Triggered Regression

on:
  workflow_dispatch:
    inputs:
      regression:
        description: ""regression""
        required: true
        default: ""default-regression""

jobs:

  regression:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          build/make-distribution.sh -Pspark-3.2
          rm -rf /home/hadoop/celeborn-toolkit/dist/*
          mv apache-celeborn-*.tgz /home/hadoop/celeborn-toolkit/dist/

      - name: Regression
        run: /home/hadoop/celeborn-toolkit/reg.sh regression

      - name: Upload Result
        uses: actions/upload-artifact@v3
        with:
          name: regression result
          path: /home/hadoop/celeborn-toolkit/result/

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


name: Celeborn SBT CI

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:
    branches:
      - main
      - branch-*

jobs:
  service:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
          - 17
        scala:
          - '2.12.15'
          - '2.13.5'
    steps:
    - uses: actions/checkout@v2
    - name: Setup JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: ${{ matrix.java }}
        check-latest: false
    - name: Test Service with SBT
      run: |
        build/sbt ++${{ matrix.scala }} ""clean; test""
    - name: Upload test log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
          name: service-java-${{ matrix.java }}-scala-${{ matrix.scala }}-unit-test-log
          path: |
              **/target/test-reports/**

  spark2:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
        spark:
          - '2.4'
        scala:
          - '2.11.12'
          - '2.12.10'
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          check-latest: false
      - name: Test with SBT
        run: |
          build/sbt -Pspark-${{ matrix.spark }} ++${{ matrix.scala }} ""clean; celeborn-spark-group/test""
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
            name: spark-${{ matrix.spark }}-unit-test-log
            path: |
                **/target/test-reports/**

  spark3:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        spark:
          - '3.0'
          - '3.1'
          - '3.2'
          - '3.3'
          - '3.4'
          - '3.5'
        java:
          - 8
          - 11
          - 17
        scala-binary:
          - '2.12'
          - '2.13'
        shuffle-plugin-class:
          - 'org.apache.spark.shuffle.sort.io.LocalDiskShuffleDataIO'
          - 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
        exclude:
          # SPARK-33772: Spark supports JDK 17 since 3.3.0
          - java: 17
            spark: '3.0'
          - java: 17
            spark: '3.1'
          - java: 17
            spark: '3.2'
          # Spark supports scala 2.13 since 3.2.0
          - scala-binary: '2.13'
            spark: '3.0'
          - scala-binary: '2.13'
            spark: '3.1'
          # ShuffleDriverComponents#supportsReliableStorage was introduced in 3.5.0
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.0'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.1'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.2'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.3'
          - shuffle-plugin-class: 'org.apache.spark.shuffle.celeborn.CelebornShuffleDataIO'
            spark: '3.4'
        include:
          # Spark 3.0
          - spark: '3.0'
            scala-binary: '2.12'
            scala: '2.12.10'
          # Spark 3.1
          - spark: '3.1'
            scala-binary: '2.12'
            scala: '2.12.10'
          - spark: '3.1'
          # Spark 3.2
          - spark: '3.2'
            scala-binary: '2.12'
            scala: '2.12.15'
          - spark: '3.2'
            scala-binary: '2.13'
            scala: '2.13.5'
          # Spark 3.3
          - spark: '3.3'
            scala-binary: '2.12'
            scala: '2.12.15'
          - spark: '3.3'
            scala-binary: '2.13'
            scala: '2.13.5'
          # Spark 3.4
          - spark: '3.4'
            scala-binary: '2.12'
            scala: '2.12.17'
          - spark: '3.4'
            scala-binary: '2.13'
            scala: '2.13.5'
          # Spark 3.5
          - spark: '3.5'
            scala-binary: '2.12'
            scala: '2.12.18'
          - spark: '3.5'
            scala-binary: '2.13'
            scala: '2.13.5'
    steps:
    - uses: actions/checkout@v2
    - name: Setup JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        distribution: zulu
        java-version: ${{ matrix.java }}
        check-latest: false
    - name: Test with SBT
      run: |
        build/sbt -Dspark.shuffle.plugin.class=${{ matrix.shuffle-plugin-class }} -Pspark-${{ matrix.spark }} ++${{ matrix.scala }} ""clean; celeborn-spark-group/test""
    - name: Upload test log
      if: failure()
      uses: actions/upload-artifact@v3
      with:
          name: spark-${{ matrix.spark }}-scala-${{ matrix.scala }}-unit-test-log
          path: |
              **/target/test-reports/**

  flink:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
        flink:
          - '1.14'
          - '1.15'
          - '1.17'
          - '1.18'
          - '1.19'
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          check-latest: false
      - name: Test with SBT
        run: |
          build/sbt -Pflink-${{ matrix.flink }} ""clean; celeborn-flink-group/test""
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
            name: flink-${{ matrix.flink }}-unit-test-log
            path: |
                **/target/test-reports/**

  mr:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        java:
          - 8
          - 11
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java }}
          check-latest: false
      - name: Test with SBT
        run: |
          build/sbt -Pmr ""clean; celeborn-mr-group/test""
      - name: Upload test log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: mr-unit-test-log
          path: |
            **/target/test/

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Style check

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:
    branches:
      - main
      - branch-*

concurrency:
  group: style-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rat:
    name: License
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 8
          cache: 'maven'
          check-latest: false
      - run: |
          build/mvn spotless:check -Pgoogle-mirror,flink-1.14
          build/mvn spotless:check -Pgoogle-mirror,flink-1.15
          build/mvn spotless:check -Pgoogle-mirror,flink-1.17
          build/mvn spotless:check -Pgoogle-mirror,flink-1.18
          build/mvn spotless:check -Pgoogle-mirror,flink-1.19
          build/mvn spotless:check -Pgoogle-mirror,spark-2.4
          build/mvn spotless:check -Pgoogle-mirror,spark-3.3
          build/mvn spotless:check -Pgoogle-mirror,mr

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Lint Check for Web

on:
  push:
    branches:
      - main
      - branch-*
  pull_request:
    branches:
      - main
      - branch-*

concurrency:
  group: style-web-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Checkout code
      uses: actions/checkout@v4

    # When updating node and pnpm version, also need to update the version in `web/pom.xml`
    - name: Use Node.js v20.11.0
      uses: actions/setup-node@v4
      with:
        node-version: 20.11.0

    - name: Use pnpm v8.14.3
      uses: pnpm/action-setup@v2
      with:
        version: 8.14.3

    - name: Install dependencies
      run: pnpm install
      worki"
Bl0omZ;JNDIEXP;Bl0omZ/JNDIEXP;https://github.com/Bl0omZ/JNDIEXP;https://api.github.com/repos/Bl0omZ/JNDIEXP;main;21/04/2022 04:10;03/04/2024 08:44;FALSE;
SaiUpadhyayula;spring-boot-microservices;SaiUpadhyayula/spring-boot-microservices;https://github.com/SaiUpadhyayula/spring-boot-microservices;https://api.github.com/repos/SaiUpadhyayula/spring-boot-microservices;master;22/04/2022 21:55;21/04/2024 03:36;FALSE;
pascal-lab;Tai-e-assignments;pascal-lab/Tai-e-assignments;https://github.com/pascal-lab/Tai-e-assignments;https://api.github.com/repos/pascal-lab/Tai-e-assignments;main;23/04/2022 04:40;20/04/2024 16:14;FALSE;
zzzzzzzzyt;zeng-rpc-framework;zzzzzzzzyt/zeng-rpc-framework;https://github.com/zzzzzzzzyt/zeng-rpc-framework;https://api.github.com/repos/zzzzzzzzyt/zeng-rpc-framework;master;24/04/2022 14:55;10/04/2024 16:28;FALSE;
Getshell;Mshell;Getshell/Mshell;https://github.com/Getshell/Mshell;https://api.github.com/repos/Getshell/Mshell;main;27/04/2022 09:35;22/04/2024 11:48;FALSE;
logpresso;CVE-2021-44228-Scanner;logpresso/CVE-2021-44228-Scanner;https://github.com/logpresso/CVE-2021-44228-Scanner;https://api.github.com/repos/logpresso/CVE-2021-44228-Scanner;main;11/12/2021 12:18;21/04/2024 08:27;TRUE;"name: GraalVM native-image build

on:
  push:
    paths:
      - ""src/**""
      - ""pom.xml""
      - "".github/workflows/graalVM.yml""

jobs:
  buildOnLinux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.3.0
          native-image: true
      - name: Build with Maven
        run: mvn -B clean package -Pnative --file pom.xml
      - name: Copy artifacts
        run: mkdir -p staging && cp target/log4j2-scanner staging/log4j2-scanner-linux-amd64 && cp target/*.jar staging
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: staging/
      - name: Clean staging
        run: rm -fr staging

  buildOnMacOS:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.3.0
          native-image: true
      - name: Build with Maven
        run: mvn -B clean package -Pnative --file pom.xml
      - name: Copy artifacts
        run: mkdir -p staging && cp target/log4j2-scanner staging/log4j2-scanner-mac-amd64
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: staging
      - name: Clean staging
        run: rm -fr staging

  buildOnWindows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1.5.0
      - uses: microsoft/setup-msbuild@v1
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.3.0
          native-image: true
      - name: Build with Maven
        run: mvn -B clean package -Pnative --file pom.xml
        shell: powershell
      - name: Copy artifacts
        run: cp target/log4j2-scanner.exe log4j2-scanner-win-amd64.exe
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          if-no-files-found: warn
          name: package
          path: target/*.exe
---
---
name: Java Build CI

on:
  push:
    paths:
      - ""**.java""
      - ""pom.xml""
      - "".github/workflows/java-build.yaml""

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: true
      matrix:
        # 8 is the lowest java version for github runners
        version: ['8', '17']

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.version }}
          distribution: 'temurin'
          architecture: x64
      - name: Download Maven
        # this step is only needed for running locally through `act`
        if: ${{ env.ACT }}
        run: |
          curl -sL https://www-eu.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip -o maven.zip
          apt-get -y install unzip
          unzip -d /usr/share maven.zip
          rm maven.zip
          ln -s /usr/share/apache-maven-3.6.3/bin/mvn /usr/bin/mvn
          echo ""M2_HOME=/usr/share/apache-maven-3.6.3"" | tee -a /etc/environment
      - name: Build with Maven
        run: mvn -e --batch-mode --update-snapshots verify

---
"
babyfish-ct;jimmer;babyfish-ct/jimmer;https://github.com/babyfish-ct/jimmer;https://api.github.com/repos/babyfish-ct/jimmer;main;03/05/2022 11:52;16/04/2024 13:58;FALSE;
Weik1;Artillery;Weik1/Artillery;https://github.com/Weik1/Artillery;https://api.github.com/repos/Weik1/Artillery;master;12/05/2022 08:36;20/04/2024 10:00;FALSE;
KikiLetGo;CyberController;KikiLetGo/CyberController;https://github.com/KikiLetGo/CyberController;https://api.github.com/repos/KikiLetGo/CyberController;main;13/05/2022 06:25;21/04/2024 04:11;FALSE;
Raray-chuan;xichuan_note;Raray-chuan/xichuan_note;https://github.com/Raray-chuan/xichuan_note;https://api.github.com/repos/Raray-chuan/xichuan_note;main;20/05/2022 07:41;03/04/2024 13:18;FALSE;
corretto;hotpatch-for-apache-log4j2;corretto/hotpatch-for-apache-log4j2;https://github.com/corretto/hotpatch-for-apache-log4j2;https://api.github.com/repos/corretto/hotpatch-for-apache-log4j2;main;12/12/2021 02:24;31/03/2024 16:25;TRUE;"# Run a Gradle build and test against Corretto LTS versions
name: Gradle CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
          sudo add-apt-repository 'deb https://apt.corretto.aws stable main'
          sudo apt-get update
          sudo apt-get install -y java-1.8.0-amazon-corretto-jdk

      - name: Run Gradle build
        run: |
          cd $GITHUB_WORKSPACE
          ./gradlew build

      - name: Run Corretto 8 tests
        run: |
          cd $GITHUB_WORKSPACE
          ./build-tools/bin/run_tests.sh $GITHUB_WORKSPACE/build/libs/Log4jHotPatch.jar /usr/lib/jvm/java-1.8.0-amazon-corretto

      - name: Run Corretto 11 tests
        run: |
          cd $GITHUB_WORKSPACE
          sudo apt-get install -y java-11-amazon-corretto-jdk
          ./build-tools/bin/run_tests.sh $GITHUB_WORKSPACE/build/libs/Log4jHotPatch.jar /usr/lib/jvm/java-11-amazon-corretto

      - name: Run Corretto 17 tests
        run: |
          cd $GITHUB_WORKSPACE
          sudo apt-get install -y java-17-amazon-corretto-jdk
          ./build-tools/bin/run_tests.sh $GITHUB_WORKSPACE/build/libs/Log4jHotPatch.jar /usr/lib/jvm/java-17-amazon-corretto
---
# Run a Maven build and test against Corretto LTS versions
name: Maven CI

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add -
          sudo add-apt-repository 'deb https://apt.corretto.aws stable main'
          sudo apt-get update
          sudo apt-get install -y maven java-1.8.0-amazon-corretto-jdk

      - name: Run Maven build
        run: |
          cd $GITHUB_WORKSPACE
          mvn clean package

      - name: Run Corretto 8 tests
        run: |
          cd $GITHUB_WORKSPACE
          ./build-tools/bin/run_tests.sh $GITHUB_WORKSPACE/target/Log4jHotPatch.jar /usr/lib/jvm/java-1.8.0-amazon-corretto

      - name: Run Corretto 11 tests
        run: |
          cd $GITHUB_WORKSPACE
          sudo apt-get install -y java-11-amazon-corretto-jdk
          ./build-tools/bin/run_tests.sh $GITHUB_WORKSPACE/target/Log4jHotPatch.jar /usr/lib/jvm/java-11-amazon-corretto

      - name: Run Corretto 17 tests
        run: |
          cd $GITHUB_WORKSPACE
          sudo apt-get install -y java-17-amazon-corretto-jdk
          ./build-tools/bin/run_tests.sh $GITHUB_WORKSPACE/target/Log4jHotPatch.jar /usr/lib/jvm/java-17-amazon-corretto
---
"
PointRider;open-java;PointRider/open-java;https://github.com/PointRider/open-java;https://api.github.com/repos/PointRider/open-java;main;26/05/2022 03:40;21/04/2024 15:15;FALSE;
FJ-OMS;oms-erp;FJ-OMS/oms-erp;https://github.com/FJ-OMS/oms-erp;https://api.github.com/repos/FJ-OMS/oms-erp;main;27/05/2022 07:36;22/04/2024 09:27;FALSE;
MonwF;customiuizer;MonwF/customiuizer;https://github.com/MonwF/customiuizer;https://api.github.com/repos/MonwF/customiuizer;main;28/05/2022 10:41;22/04/2024 09:35;FALSE;
Igalia;wolvic;Igalia/wolvic;https://github.com/Igalia/wolvic;https://api.github.com/repos/Igalia/wolvic;main;21/12/2021 11:58;22/04/2024 09:38;TRUE;"# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle?learn=continuous_integration&learnProduct=actions

name: Build

on:
  workflow_call:
    inputs:
      flavour:
        description: 'Build flavour'
        required: true
        type: string
      internal:
        description: 'Internal build'
        required: false
        type: boolean
        default: false
      jdk_version:
        description: 'JDK version'
        required: false
        type: string
        default: ""17""
      jdk_distribution:
        description: 'JDK distribution'
        required: false
        type: string
        default: ""adopt""
      gradle_version:
        description: 'Gradle version'
        required: false
        type: string
        default: ""8.2""

jobs:
  build:
    name: Build Wolvic ${{ inputs.flavour }} Flavour
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Wolvic
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      # Inspired by https://stackoverflow.com/questions/60679609/github-action-to-simply-cat-a-file-to-an-output
      - name: Read wolvic third parties SHA
        if: inputs.internal == true
        run: echo ""third_party_sha=$(cat third_party_hash)"" >> $GITHUB_ENV

      - name: Checkout third parties
        if: inputs.internal == true
        uses: actions/checkout@v4
        with:
          ref: ${{ env.third_party_sha }}
          repository: Igalia/wolvic-third-parties
          token: ${{ secrets.THIRD_PARTY_PAT }}
          submodules: 'true'
          path: 'third_party'

      - name: Set up JDK ${{ inputs.jdk_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.jdk_version }}
          distribution: ${{ inputs.jdk_distribution }}

      - name: Setup Gradle ${{ inputs.gradle_version }}
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: ${{ inputs.gradle_version }}

      - name: Build ${{ inputs.flavour }} Flavour
        run: ./gradlew ${{ inputs.flavour }}

      - name: Upload APK (without WebXR support) to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.flavour }}_no_webxr
          path: app/build/outputs/apk/

---
name: CI External

on:
  workflow_dispatch:  # Allow manual triggers
  pull_request:

jobs:
  build-external:
    name: External Build
    uses: ./.github/workflows/build.yml
    with:
      flavour: ${{ matrix.flavour }}
    strategy:
      fail-fast: false
      matrix:
        flavour: [
          assembleNoapiArm64GeckoGeneric,
          assembleNoapiX64GeckoGeneric,
        ]
    secrets: inherit

---
name: CI Internal

on:
  workflow_dispatch:  # Allow manual triggers
  pull_request:
  push:

jobs:
  check-secret:
    name: secret-validator
    runs-on: ubuntu-latest
    outputs:
      is-secret-set: ${{ steps.check-secret-set.outputs.is-secret-set }}

    steps:
      - name: check if the necessary secrets are set in github secrets
        id: check-secret-set
        env:
          THIRD_PARTY_PAT: ${{ secrets.THIRD_PARTY_PAT }}
        run: ""echo \""is-secret-set=${{ env.THIRD_PARTY_PAT != '' }}\"" >> $GITHUB_OUTPUT\n""

  build-internal:
    name: Internal Build
    needs: [check-secret]
    if: needs.check-secret.outputs.is-secret-set == 'true'
    uses: ./.github/workflows/build.yml
    with:
      flavour: ${{ matrix.flavour }}
      internal: true
    strategy:
      fail-fast: false
      matrix:
        flavour: [
          assembleOculusvrArm64GeckoMetaStore,
          assembleHvrArm64GeckoGeneric,
          assembleHvrArm64GeckoMainlandChina,
          assemblePicoxrArm64GeckoGeneric,
          assembleLynxArm64GeckoGeneric,
          assembleSpacesArm64GeckoGeneric,
          assembleAospX64GeckoGeneric,
          assembleVisionGlassArm64GeckoGeneric,
        ]
    secrets: inherit

---
"
Jinxqq;OutSiderAPM;Jinxqq/OutSiderAPM;https://github.com/Jinxqq/OutSiderAPM;https://api.github.com/repos/Jinxqq/OutSiderAPM;master;31/05/2022 09:20;11/04/2024 05:30;FALSE;
F6JO;RouteVulScan;F6JO/RouteVulScan;https://github.com/F6JO/RouteVulScan;https://api.github.com/repos/F6JO/RouteVulScan;main;01/06/2022 09:07;22/04/2024 13:06;FALSE;
whwlsfb;JDumpSpider;whwlsfb/JDumpSpider;https://github.com/whwlsfb/JDumpSpider;https://api.github.com/repos/whwlsfb/JDumpSpider;master;05/01/2022 08:30;22/04/2024 10:25;TRUE;"name: Java CI

on:
  watch:
    types: started
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Import netbeans dependency
        run: mvn install:install-file -Dfile=lib/netbeans-lib-profiler.jar -DgroupId=netbeans -DartifactId=netbeans-lib-profiler -Dversion=1.0 -Dpackaging=jar
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - run: mkdir release && cp target/*-full.jar release
      - run: echo ""NOW=$(date +'%Y%m%dT%H%M%S')"" >> $GITHUB_ENV
      
      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: dev-${{ env.NOW }}
          prerelease: true
          title: Auto Build - ${{ env.NOW }}
          files: release/*.jar
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: JDumpSpider_${{ env.NOW }}
          # Directory containing files to upload
          path: release

---
"
dromara;dynamic-tp;dromara/dynamic-tp;https://github.com/dromara/dynamic-tp;https://api.github.com/repos/dromara/dynamic-tp;master;07/01/2022 17:35;22/04/2024 11:02;TRUE;"name: build jvmti

on: [push]

jobs:
  linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: |
          cd ${{ github.workspace }}/jvmti/jvmti-build
          mvn package
      - uses: actions/upload-artifact@v3
        with:
          name: lib
          path: jvmti/jvmti-build/target/classes/lib*
          if-no-files-found: error

  mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: |
          cd ${{ github.workspace }}/jvmti/jvmti-build
          mvn package
      - uses: actions/upload-artifact@v3
        with:
          name: lib
          path: jvmti/jvmti-build/target/classes/lib*
          if-no-files-found: error

  windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: |
          cd ${{ github.workspace }}/jvmti/jvmti-build
          mvn package
      - uses: actions/upload-artifact@v3
        with:
          name: lib
          path: jvmti/jvmti-build/target/classes/*.dll
          if-no-files-found: error

---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

---
"
apache;paimon;apache/paimon;https://github.com/apache/paimon;https://api.github.com/repos/apache/paimon;master;12/01/2022 04:13;22/04/2024 13:08;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Check licensing

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MVN_COMMON_OPTIONS: -U -B --no-transfer-progress
      MVN_BUILD_OUTPUT_FILE: ""/tmp/mvn_build_output.out""
      MVN_VALIDATION_DIR: ""/tmp/paimon-validation-deployment""

    steps:
      - uses: actions/checkout@v2

      - name: Set JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
      - name: Build
        run: |
          set -o pipefail

          mvn clean deploy ${{ env.MVN_COMMON_OPTIONS }} -DskipTests \
            -DaltDeploymentRepository=validation_repository::default::file:${{ env.MVN_VALIDATION_DIR }} \
            | tee ${{ env.MVN_BUILD_OUTPUT_FILE }}

      - name: Check licensing
        run: |
          mvn ${{ env.MVN_COMMON_OPTIONS }} exec:java@check-licensing -N \
            -Dexec.args=""${{ env.MVN_BUILD_OUTPUT_FILE }} $(pwd) ${{ env.MVN_VALIDATION_DIR }}"" \
            -Dlog4j.configurationFile=file://$(pwd)/tools/ci/log4j.properties
        env:
          MAVEN_OPTS: -Xmx4096m
---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: docs-tests
on:
  push:
  pull_request:
    paths:
      - 'docs/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.124.1'
          extended: true

      - name: Build
        run: |
          cd docs
          # Fetch the theme submodule
          git submodule update --init --recursive
          hugo

---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.15 on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.15
        run: mvn -T 1C -B clean install -DskipTests -Pflink-1.15
      - name: Test Flink 1.15
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.15
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.15

on:
  push:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.15
        run: mvn -T 1C -B clean install -DskipTests -Pflink-1.15
      - name: Test Flink 1.15
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.15
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.16 on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.16
        run: mvn -T 1C -B clean install -DskipTests -Pflink-1.16
      - name: Test Flink 1.16
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.16
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.16

on:
  push:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.16
        run: mvn -T 1C -B clean install -DskipTests -Pflink-1.16
      - name: Test Flink 1.16
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.16
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.17 on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.17
        run: mvn -T 1C -B clean install -DskipTests -Pflink-1.17
      - name: Test Flink 1.17
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.17
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.17

on:
  push:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.17
        run: mvn -T 1C -B clean install -DskipTests -Pflink-1.17
      - name: Test Flink 1.17
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.17
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.18 on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.18
        run: mvn -T 1C -B clean install -DskipTests
      - name: Test Flink 1.18
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.18
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.18

on:
  push:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.18
        run: mvn -T 1C -B clean install -DskipTests
      - name: Test Flink 1.18
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone -Pflink-1.18
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.19 on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.19
        run: mvn -T 1C -B clean install -DskipTests
      - name: Test Flink 1.19
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: End to End Tests Flink 1.19

on:
  push:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink 1.19
        run: mvn -T 1C -B clean install -DskipTests
      - name: Test Flink 1.19
        timeout-minutes: 60
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B test -pl paimon-e2e-tests -Duser.timezone=$jvm_timezone
        env:
          MAVEN_OPTS: -Xmx4096m
---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################
name: Flink CDC Tests on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink CDC
        run:  mvn -T 1C -B clean install -DskipTests
      - name: Test Flink CDC
        timeout-minutes: 60
        run: |
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B clean install -pl 'org.apache.paimon:paimon-flink-cdc' -Duser.timezone=$jvm_timezone
        env:
          MAVEN_OPTS: -Xmx4096m

---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################
name: Flink CDC Tests

on:
  push:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink CDC
        run:  mvn -T 1C -B clean install -DskipTests
      - name: Test Flink CDC
        timeout-minutes: 60
        run: |
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          mvn -T 1C -B clean install -pl 'org.apache.paimon:paimon-flink-cdc' -Duser.timezone=$jvm_timezone
        env:
          MAVEN_OPTS: -Xmx4096m

---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: Publish Snapshot

on:
  schedule:
    # At the end of every day
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  JDK_VERSION: 8

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.number || github.run_id }}
  cancel-in-progress: true

jobs:
  publish-snapshot:
    if: github.repository == 'apache/paimon'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # temporarily publish the jdk8 version to maven
      # lately when jdk is deprecated, we need update it to jdk11
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: snapshot-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            snapshot-maven-
      - name: Publish snapshot
        env:
          ASF_USERNAME: ${{ secrets.NEXUS_USER }}
          ASF_PASSWORD: ${{ secrets.NEXUS_PW }}
          MAVEN_OPTS: -Xmx4096m
        run: |
          tmp_settings=""tmp-settings.xml""
          echo ""<settings><servers><server>"" > $tmp_settings
          echo ""<id>apache.snapshots.https</id><username>$ASF_USERNAME</username>"" >> $tmp_settings
          echo ""<password>$ASF_PASSWORD</password>"" >> $tmp_settings
          echo ""</server></servers></settings>"" >> $tmp_settings
          
          mvn --settings $tmp_settings clean deploy -Dgpg.skip -Drat.skip -DskipTests -Papache-release

          rm $tmp_settings

---
################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  ""License""); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

name: UTCase and ITCase Flink on JDK 11

on:
  issue_comment:
    types: [created, edited, deleted]

  # daily run
  schedule:
    - cron: ""0 0 * * *""

env:
  JDK_VERSION: 11

jobs:
  build:
    if: |
      github.event_name == 'schedule' ||
      (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, '/jdk11'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK ${{ env.JDK_VERSION }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JDK_VERSION }}
          distribution: 'adopt'
      - name: Build Flink
        run:  mvn -T 1C -B clean install -DskipTests
      - name: Test Flink
        run: |
          # run tests with random timezone to find out timezone related bugs
          . .github/workflows/utils.sh
          jvm_timezone=$(random_timezone)
          echo ""JVM timezone is set to $jvm_timezone""
          test_modules=""""
          for suffix"
mastodon;mastodon-android;mastodon/mastodon-android;https://github.com/mastodon/mastodon-android;https://api.github.com/repos/mastodon/mastodon-android;master;14/01/2022 11:44;21/04/2024 17:11;TRUE;"name: Build and deploy
 
on:
  push:
    branches:
      - 'ci_setup'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 21
          distribution: temurin

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Decode keystore
        uses: timheuer/base64-to-file@v1
        id: android_keystore
        with:
          fileName: ""release.jks""
          encodedString: ${{ secrets.KEYSTORE_FILE }}

      - name: Prepare Gradle environment
        run: |
          echo ""apply from: 'ci_signing.gradle'"" >> mastodon/build.gradle
          echo ""sdk.dir=$ANDROID_SDK_ROOT"" > local.properties

      - name: Build and deploy to Google Play
        run: bundle exec fastlane deploy
        env:
          KEYSTORE_FILE: ${{ steps.android_keystore.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          SUPPLY_JSON_KEY_DATA: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          SUPPLY_SKIP_UPLOAD_METADATA: true
          SUPPLY_SKIP_UPLOAD_CHANGELOGS: true

      - name: Build release apk
        run: ./gradlew assembleRelease
        env:
          KEYSTORE_FILE: ${{ steps.android_keystore.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      - name: Upload release apk
        uses: actions/upload-artifact@v4
        with:
          name: mastodon-release.apk
          path: mastodon/build/outputs/apk/release/mastodon-release.apk

      - name: Build githubRelease apk
        run: ./gradlew assembleGithubRelease
        env:
          KEYSTORE_FILE: ${{ steps.android_keystore.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      - name: Upload githubRelease apk
        uses: actions/upload-artifact@v4
        with:
          name: mastodon-githubRelease.apk
          path: mastodon/build/outputs/apk/githubRelease/mastodon-githubRelease.apk

      - name: Upload mappings
        uses: actions/upload-artifact@v4
        with:
          name: mappings
          path: mastodon/build/outputs/mapping/*/mapping.txt
---
"
NextAlone;Nagram;NextAlone/Nagram;https://github.com/NextAlone/Nagram;https://api.github.com/repos/NextAlone/Nagram;main;21/01/2022 16:47;22/04/2024 08:12;TRUE;"name: Debug build

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/debug.yml'

jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: ""Check access""
        uses: ""lannonbr/repo-permission-check-action@2.0.0""
        with:
          permission: ""write""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install yasm -y
          ./run init libs libvpx
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - armeabi-v7a
          - arm64-v8a
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET=""${{ matrix.flavor }}""
          ./run libs native
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
      - name: Install NDK
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Configure Gradle
        run: |
          sed -i -e ""s/16384/6144/g"" gradle.properties
          echo ""sdk.dir=${ANDROID_HOME}"" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Debug Build
        run: |
          export LOCAL_PROPERTIES=""${{ secrets.LOCAL_PROPERTIES }}""
          ./gradlew TMessagesProj:assembleRelease

          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo ""APK=$APK"" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: Release
          path: ${{ env.APK }}
  upload:
    name: Upload debug
    if: github.event.inputs.upload != 'y'
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Send to Telegram
        run: |
          # send release via telegram bot api
          export mini64=$(find artifacts -name ""*arm64-v8a.apk"")
          export mini32=$(find artifacts -name ""*armeabi-v7a.apk"")

          echo $mini64
          echo $mini32

          python -m pip install -r bin/scripts/requirements.txt
          git log -1 --pretty=format:""%s%n%n%b"" > artifacts/caption.txt
          python bin/scripts/upload.py ${{ secrets.HELPER_BOT_TOKEN }} ${{ secrets.HELPER_BOT_TARGET }} test

---
name: Pull request

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - '**.md'
      - '**.xml'

jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: ""Check access""
        uses: ""lannonbr/repo-permission-check-action@2.0.0""
        with:
          permission: ""write""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install yasm -y
          ./run init libs libvpx
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - armeabi-v7a
          - arm64-v8a
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET=""${{ matrix.flavor }}""
          ./run libs native
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
      - name: Install NDK
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Configure Gradle
        run: |
          sed -i -e ""s/16384/6144/g"" gradle.properties
          echo ""sdk.dir=${ANDROID_HOME}"" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Debug Build
        run: |
          export LOCAL_PROPERTIES=""${{ secrets.LOCAL_PROPERTIES }}""
          export DEBUG_BUILD=true
          sed -i 's/signingConfig signingConfigs.release//g' TMessagesProj/build.gradle
          ./gradlew TMessagesProj:assembleRelease

          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo ""APK=$APK"" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: Debug
          path: ${{ env.APK }}

---
name: Release Build
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload: If want ignore'
        required: false
jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: ""Check access""
        uses: ""lannonbr/repo-permission-check-action@2.0.0""
        with:
          permission: ""write""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install yasm -y
          ./run init libs libvpx
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - armeabi-v7a
          - arm64-v8a
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET=""${{ matrix.flavor }}""
          ./run libs native
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v3
      - name: Install NDK
        run: |
          echo ""y"" | sdkmanager --install ""ndk;21.4.7075529"" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo ""sdk.dir=${ANDROID_HOME}"" > local.properties
          echo ""ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529"" >> local.properties
      - name: Fetch Status
        run: |
          sed -i 's/\/\///g' settings.gradle
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Configure Gradle
        run: |
          sed -i -e ""s/16384/6144/g"" gradle.properties
          echo ""sdk.dir=${ANDROID_HOME}"" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Release Build
        run: |
          export LOCAL_PROPERTIES=""${{ secrets.LOCAL_PROPERTIES }}""
          ./gradlew TMessagesProj:assembleRelease

          APK=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo ""APK=$APK"" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: Release
          path: ${{ env.APK }}
  upload:
    name: Upload release
    if: github.event.inputs.upload != 'y'
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      - name: Send to Telegram
        run: |
          # send release via telegram bot api
          export mini64=$(find artifacts -name ""*arm64-v8a.apk"")
          export mini32=$(find artifacts -name ""*armeabi-v7a.apk"")

          echo $mini64
          echo $mini32

          python -m pip install -r bin/scripts/requirements.txt
          git log -1 --pretty=format:""%s%n%n%b"" > artifacts/caption.txt
          python bin/scripts/upload.py ${{ secrets.HELPER_BOT_TOKEN }} ${{ secrets.HELPER_BOT_TARGET }} release

---
"
MineDojo;MineDojo;MineDojo/MineDojo;https://github.com/MineDojo/MineDojo;https://api.github.com/repos/MineDojo/MineDojo;main;18/06/2022 17:44;22/04/2024 10:54;FALSE;
liaoguobao;TweakMe;liaoguobao/TweakMe;https://github.com/liaoguobao/TweakMe;https://api.github.com/repos/liaoguobao/TweakMe;master;19/06/2022 03:03;20/04/2024 14:35;FALSE;
achuna33;MYExploit;achuna33/MYExploit;https://github.com/achuna33/MYExploit;https://api.github.com/repos/achuna33/MYExploit;master;19/06/2022 15:29;19/04/2024 20:43;FALSE;
FongMi;TV;FongMi/TV;https://github.com/FongMi/TV;https://api.github.com/repos/FongMi/TV;release;22/06/2022 11:10;22/04/2024 11:47;FALSE;
sleeyax;burp-awesome-tls;sleeyax/burp-awesome-tls;https://github.com/sleeyax/burp-awesome-tls;https://api.github.com/repos/sleeyax/burp-awesome-tls;main;24/01/2022 01:30;21/04/2024 14:38;TRUE;"# To test this workflow locally, run the following command:
# act --use-gitignore=false
name: Release binaries

on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build and release binaries
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Execute CGO builds using XGO
        uses: crazy-max/ghaction-xgo@v3
        # docs: https://github.com/marketplace/actions/golang-cgo-cross-compiler#inputs
        with:
          xgo_version: latest
          go_version: 1.20.0
          dest: build
          pkg: cmd
          prefix: server
          targets: windows/386,windows/amd64,linux/386,linux/amd64,linux/arm,linux/arm64,darwin/amd64,darwin/arm64
          # Prints the build commands as compilation progresses (default false)
          x: true
          ldflags: -w
          buildmode: c-shared
          working_dir: ./src-go/server
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build cross-platform jar files
        shell: sh
        run: ./build.sh
      - name: Upload binaries
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: ""./build/libs/*.jar""
          tags: true
          draft: true

---
"
maliangnansheng;bbs-springboot;maliangnansheng/bbs-springboot;https://github.com/maliangnansheng/bbs-springboot;https://api.github.com/repos/maliangnansheng/bbs-springboot;master;27/06/2022 09:22;22/04/2024 09:32;FALSE;
deltazefiro;Amarok-Hider;deltazefiro/Amarok-Hider;https://github.com/deltazefiro/Amarok-Hider;https://api.github.com/repos/deltazefiro/Amarok-Hider;main;31/01/2022 07:46;22/04/2024 04:43;TRUE;"name: Build on push

on: 
  - push
  - pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Build with Gradle
        run: |
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          ./gradlew assembleFossDebug \
          -Pandroid.injected.signing.store.file=""${{ github.workspace }}/debug.keystore"" \
          -Pandroid.injected.signing.store.password=""android"" \
          -Pandroid.injected.signing.key.alias=""androiddebugkey"" \
          -Pandroid.injected.signing.key.password=""android""
      - name: Upload built apk
        if: success()
        uses: actions/upload-artifact@v3
        with:
          path: |
            ${{ github.workspace }}/app/build/outputs/apk/foss/debug/*.apk

---
name: Release

on:
  workflow_dispatch:
  release:
    types: [published, edited]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Inject signing key
        run: |
          echo 'RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}' >> ~/.gradle/gradle.properties
          echo 'RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}' >> ~/.gradle/gradle.properties
          echo 'RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}' >> ~/.gradle/gradle.properties
          echo 'RELEASE_STORE_FILE=${{ github.workspace }}/keystore.jks' >> ~/.gradle/gradle.properties
          echo '${{ secrets.KEY_STORE }}' | base64 --decode > ${{ github.workspace }}/keystore.jks
      - name: Build with Gradle
        run: |
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          ./gradlew assembleRelease
      - name: Upload built apk
        if: success()
        uses: actions/upload-artifact@v3
        with:
          path: |
              ${{ github.workspace }}/app/build/outputs/apk/**/*.apk
      - name: Upload release asset
        if: success()
        uses: shogo82148/actions-upload-release-asset@v1
        with:
         upload_url: ${{ github.event.release.upload_url }}
         asset_path: ${{ github.workspace }}/app/build/outputs/apk/**/*.apk

---
"
veo;wsMemShell;veo/wsMemShell;https://github.com/veo/wsMemShell;https://api.github.com/repos/veo/wsMemShell;main;30/06/2022 10:05;22/04/2024 04:42;FALSE;
qi4L;JYso;qi4L/JYso;https://github.com/qi4L/JYso;https://api.github.com/repos/qi4L/JYso;master;04/07/2022 04:52;22/04/2024 06:52;FALSE;
apache;hertzbeat;apache/hertzbeat;https://github.com/apache/hertzbeat;https://api.github.com/repos/apache/hertzbeat;master;04/02/2022 15:48;22/04/2024 13:42;TRUE;"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Backend CI

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - 'home/**'
      - 'web-app/**'
      - 'script/**'
      - 'material/**'
  pull_request:
    branches: [ master, dev ]
    paths-ignore:
      - '**.md'
      - 'home/**'
      - 'web-app/**'
      - 'script/**'
      - 'material/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Build with Maven
      run: mvn clean -B package --file pom.xml
    - name: Build Image
      env:
        IMAGE_PUSH: false
        IMAGE_LOAD: true
        IMAGE_PLATFORM: linux/amd64
      run: |
        docker buildx create --use --name mybuilder --driver docker-container
        docker buildx use mybuilder

        ./script/docker/server/build.sh
    - name: Run E2E
      run: |
        sudo curl -L https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
        sudo chmod u+x /usr/local/bin/docker-compose

        cd e2e && ./start.sh

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  schedule:
    - cron: '21 13 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        language: [ 'java', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Auto build attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Auto build fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: 'HertzBeat Doc Pdf Builder'
on:
  page_build

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Install Prince
        run: |
          LANG=""zh_CN.UTF-8""
          export LANG=""zh_CN.UTF-8""
          curl https://www.princexml.com/download/prince-15.1-macos.zip -O
          tar zxf prince-15.1-macos.zip
          cd prince-15.1-macos
          yes """" | sudo ./install.sh
  
      - name: Build CN PDF
        run: npx docusaurus-prince-pdf -u https://hertzbeat.apache.org/zh-cn/docs --output docs-cn.pdf

      - name: Build EN PDF
        run: npx docusaurus-prince-pdf -u https://hertzbeat.apache.org/docs --output docs-en.pdf
  
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: docs-cn-pdf
          path: docs-cn.pdf
          if-no-files-found: error
          retention-days: 1
          
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: docs-en-pdf
          path: docs-en.pdf
          if-no-files-found: error
          retention-days: 1
  

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Frontend CI 

on:
  push:
    branches: [ master, dev ]
    paths:
      - 'web-app/**'
  pull_request:
    branches: [ master, dev ]
    paths:
      - 'web-app/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Yarn Install
      working-directory: web-app
      run: yarn
    - name: EsLint Test
      working-directory: web-app
      run: yarn lint:ts

---
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: License Checker

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  check-license-header:
    name: check-license-header
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Check license header
        uses: apache/skywalking-eyes@v0.6.0

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: ""Pull Request Robot""
on:
  - pull_request_target

jobs:
  labeler:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Label pull request
        uses: actions/labeler@v5
        with:
          repo-token: ""${{ secrets.GITHUB_TOKEN }}""
          configuration-path: .github/labeler.yml
          sync-labels: true

---
"
bigintpro;csdn_downloader;bigintpro/csdn_downloader;https://github.com/bigintpro/csdn_downloader;https://api.github.com/repos/bigintpro/csdn_downloader;master;06/07/2022 03:00;22/04/2024 09:08;FALSE;
itwanger;paicoding;itwanger/paicoding;https://github.com/itwanger/paicoding;https://api.github.com/repos/itwanger/paicoding;main;06/07/2022 14:43;22/04/2024 06:50;FALSE;
iSoftStoneGroup;EazyBuilder;iSoftStoneGroup/EazyBuilder;https://github.com/iSoftStoneGroup/EazyBuilder;https://api.github.com/repos/iSoftStoneGroup/EazyBuilder;master;07/07/2022 04:31;31/03/2024 16:25;FALSE;
Drun1baby;JavaSecurityLearning;Drun1baby/JavaSecurityLearning;https://github.com/Drun1baby/JavaSecurityLearning;https://api.github.com/repos/Drun1baby/JavaSecurityLearning;main;11/07/2022 12:06;20/04/2024 05:51;FALSE;
wangjs96;A-tutorial-compiler-written-in-Java;wangjs96/A-tutorial-compiler-written-in-Java;https://github.com/wangjs96/A-tutorial-compiler-written-in-Java;https://api.github.com/repos/wangjs96/A-tutorial-compiler-written-in-Java;main;11/07/2022 13:52;19/04/2024 20:10;FALSE;
ebarlas;microhttp;ebarlas/microhttp;https://github.com/ebarlas/microhttp;https://api.github.com/repos/ebarlas/microhttp;main;12/02/2022 00:14;20/04/2024 08:15;TRUE;"on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn verify -B -V --no-transfer-progress

---
"
cckuailong;JNDI-Injection-Exploit-Plus;cckuailong/JNDI-Injection-Exploit-Plus;https://github.com/cckuailong/JNDI-Injection-Exploit-Plus;https://api.github.com/repos/cckuailong/JNDI-Injection-Exploit-Plus;master;18/07/2022 05:43;22/04/2024 03:32;FALSE;
siavash79;PixelXpert;siavash79/PixelXpert;https://github.com/siavash79/PixelXpert;https://api.github.com/repos/siavash79/PixelXpert;canary;20/02/2022 13:02;22/04/2024 04:40;TRUE;"name: Crowdin Synchronization

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:

  synchronize-with-crowdin:
    name: Synchronize with Crowdin
    if: github.repository_owner == 'siavash79'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync Translations
        uses: crowdin/github-action@v1
        with:
          upload_translations: false
          upload_sources: true
          download_translations: true
          localization_branch_name: canary-localization
          create_pull_request: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
---
name: Crowdin Download

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:

  synchronize-with-crowdin:
    name: Download translations from Crowdin
    if: github.repository_owner == 'siavash79'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download translations
        uses: crowdin/github-action@v1
        with:
          upload_translations: false
          upload_sources: false
          download_translations: true
          localization_branch_name: canary
          create_pull_request: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

---
name: Crowdin Upload

on:
  push:
    branches: [ ""canary"" ]
    paths:
      - 'app/src/main/res/values/strings.xml'
  workflow_dispatch:

jobs:
  synchronize-with-crowdin:
    name: Upload strings to Crowdin
    if: github.repository_owner == 'siavash79'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Strings
        uses: crowdin/github-action@v1
        with:
          upload_translations: false
          upload_sources: true
          download_translations: false
          localization_branch_name: canary-localization
          create_pull_request: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

---
name: Make Test Package

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - run: git clone -b ${GITHUB_REF_NAME} --recurse-submodules https://github.com/siavash79/PixelXpert.git .
        name: Grab source code
        
      - name: Setup JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
          cache: gradle

      - name: Grant permission shell scripts
        run: chmod +x .github/*.sh

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK

        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/debug
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ""33.0.0""

      - uses: actions/upload-artifact@v2
        name: Upload APK file
        with:
          name: PixelXpert.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

      - name: Run the zip script
        run: .github/make_debug_zip.sh

      - name: Upload Zip
        uses: actions/upload-artifact@v2
        with:
          name: PixelXpert.zip
          path: output

---
name: Make Canary Release

on:
  push:
    branches:
      - 'canary'
    paths:
      - '.github/edit2MakeNewCanary'

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Source Code Download
      run: git clone --branch canary --single-branch --recurse-submodules https://github.com/siavash79/PixelXpert.git .
      
    - name: JDK 17 Setup
      uses: actions/setup-java@v4.1.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Shell Scripts Permissions
      run: chmod +x .github/*.sh

    - name: Changelog Generation
      run: .github/extractChanges.sh

    - name: Version Bump
      run: .github/bumpVersion.sh ${{ github.run_id }}

    - name: Gradlew Permissions
      run: chmod +x gradlew

    - name: Signature files preparation
      run: |
          if [ ! -z ""${{ secrets.SIGNING_KEY }}"" ]; then
            echo storePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> ReleaseKey.properties
            echo keyAlias='${{ secrets.ALIAS }}' >> ReleaseKey.properties
            echo keyPassword='${{ secrets.KEY_PASSWORD }}' >> ReleaseKey.properties
            echo storeFile='${{ github.workspace }}/ReleaseKey.jks' >> ReleaseKey.properties
            echo ${{ secrets.SIGNING_KEY }} | base64 --decode > ${{ github.workspace }}/ReleaseKey.jks
          fi
      
    - name: Gradle Build
      run: ./gradlew assembleRelease

    - name: Magisk Module Generation
      run: .github/make_zip.sh

    - name: Upload Xposed Artifact to Actions
      uses: actions/upload-artifact@v4.3.1
      with: 
        name: PixelXpert.zip
        path: output

#    - name: Previous Release Deletion
#      continue-on-error: true
#      run: gh release delete canary_builds -y -R siavash79/PixelXpert
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Canary Binary Release
      uses: ncipollo/release-action@v1.14.0
      with:
        tag: 'canary_builds'
        name: 'Latest Canary'
        omitBodyDuringUpdate: true
        prerelease: true
        allowUpdates: true
        replacesArtifacts: true
        draft: false
        artifacts: 'output/*.*'

    - name: Version Bump Commit
      uses: github-actions-x/commit@v2.9
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        push-branch: 'canary'
        commit-message: 'Version update: Release'
        force-add: 'true'
        files: MagiskModBase/module.prop app/build.gradle latestVersion.json CanaryChangelog.md latestCanary.json MagiskModuleUpdate_Xposed.json MagiskModuleUpdate_Full.json
        name: GitHub
        email: PixelXpert@siava.sh

    - name: Telegram Channel Post
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.AOSPMODS_CHANNEL_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ env.TMessage }}
        format: markdown

    - name: Telegram File Attachment
      run: |
        curl -v ""https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMediaGroup?chat_id=${{ secrets.AOSPMODS_CHANNEL_ID }}&media=%5B%7B%22type%22%3A%22document%22%2C%20%22media%22%3A%22attach%3A%2F%2FXposed%22%7D%5D"" -F Xposed=""@output/PixelXpert.zip""

---
name: Make Xposed Test Package

on:
  workflow_dispatch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - run: git clone -b ${GITHUB_REF_NAME} --recurse-submodules https://github.com/siavash79/PixelXpert.git .
        name: Grab source code
        
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant permission shell scripts
        run: chmod +x .github/*.sh

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK

        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/debug
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: ""33.0.0""
          
      - name: Magisk Module Generation
        run: .github/make_debug_zip.sh

      - name: Upload APK file
        uses: actions/upload-artifact@v2
        with:
          name: PixelXpert_Xposed.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}
        
      - name: Upload Xposed Artifact to Actions
        uses: actions/upload-artifact@v2
        with: 
          name: PixelXpert_Xposed.zip
          path: output

---
"
qiutiandefeng;yfexam-exam;qiutiandefeng/yfexam-exam;https://github.com/qiutiandefeng/yfexam-exam;https://api.github.com/repos/qiutiandefeng/yfexam-exam;main;27/07/2022 08:53;22/04/2024 13:21;FALSE;
queer;utt;queer/utt;https://github.com/queer/utt;https://api.github.com/repos/queer/utt;mistress;28/02/2022 03:08;06/04/2024 05:22;TRUE;"name: ""Build and upload release""

on:
  push:
    tags:
      - '*'

jobs:
  build_release:
    name: build_release
    runs-on: ubuntu-latest
    steps:
      - name: ""Checkout repo""
        uses: actions/checkout@v2
      - name: ""Install Java""
        uses: ""actions/setup-java@v1""
        with:
          java-version: ""17""
      - name: ""Run build""
        run: |
          bash build.sh
      - name: ""Create release""
        uses: ""softprops/action-gh-release@v1""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/utt

---
name: Run all tests
on:
  push:
    branches:
      - ""*""
  pull_request:
    branches:
      - ""mistress""

jobs:
  run-tests:
    runs-on: ""ubuntu-latest""
    steps:
      - name: ""Checkout Repo""
        uses: ""actions/checkout@v2""
      - name: ""Install Java""
        uses: ""actions/setup-java@v1""
        with:
          java-version: ""17""
      - name: ""Run tests""
        run: ""mvn clean test""

---
"
alibaba;AGEIPort;alibaba/AGEIPort;https://github.com/alibaba/AGEIPort;https://api.github.com/repos/alibaba/AGEIPort;master;01/08/2022 08:33;22/04/2024 07:55;FALSE;
InterviewReady;Low-Level-Design;InterviewReady/Low-Level-Design;https://github.com/InterviewReady/Low-Level-Design;https://api.github.com/repos/InterviewReady/Low-Level-Design;main;16/08/2022 12:30;21/04/2024 14:08;FALSE;
maxiaof;github-hosts;maxiaof/github-hosts;https://github.com/maxiaof/github-hosts;https://api.github.com/repos/maxiaof/github-hosts;master;02/03/2022 06:56;22/04/2024 11:57;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Github-Hosts

on:
  push:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Run jar Create hosts
      run: java -jar target/github-hosts-1.0.jar
    - name: Clear target
      run: rm -rf target/
      
    - name: Commit
      id: commit
      run: |
        git config --global user.email ""github-actions[bot]@users.noreply.github.com""
        git config --global user.name ""GitHub Actions [Bot]""
        git add .
        git commit -m ""update hosts and readme""
      continue-on-error: true
    - name: Check on failures
      if: steps.commit.outputs.status == 'failure'
      run: exit 1
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}

---
"
Helium314;HeliBoard;Helium314/HeliBoard;https://github.com/Helium314/HeliBoard;https://api.github.com/repos/Helium314/HeliBoard;main;09/03/2022 09:38;22/04/2024 09:39;TRUE;"name: Build debug APK

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: HeliBoard-debug
          path: app/build/outputs/apk/debug/*-debug*.apk

      - name: Archive reports for failed job
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: '*/build/reports'
        if: ${{ failure() }}

---
name: Test build
# builds only for a single abi and does not produce an APK

on:
  push:
    # don't run on main. I noticed I often don't push commits to avoid unnecessary workflow runs
    branches-ignore: [ main ]
    paths:
      - 'app/**'
  pull_request:
    paths:
      - 'app/**'
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew assembleDebug

      - name: Archive reports for failed job
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: '*/build/reports'
        if: ${{ failure() }}

---
"
ReVanced;revanced-integrations;ReVanced/revanced-integrations;https://github.com/ReVanced/revanced-integrations;https://api.github.com/repos/ReVanced/revanced-integrations;main;15/03/2022 21:37;21/04/2024 03:50;TRUE;"name: Build pull request

on:
  workflow_dispatch:
  pull_request:
    branches:
      - dev

jobs:
  release:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Gradle
        uses: burrunan/gradle-cache-action@v1

      - name: Setup Java
        run: echo ""JAVA_HOME=$JAVA_HOME_17_X64"" >> $GITHUB_ENV

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew build --no-daemon

---
name: Open a PR to main

on:
  push:
    branches:
      - dev
  workflow_dispatch:

env:
  MESSAGE: Merge branch `${{ github.head_ref || github.ref_name }}` to `main`

jobs:
  pull-request:
    name: Open pull request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Open pull request
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: 'main'
          pr_title: 'chore: ${{ env.MESSAGE }}'
          pr_body: |
            This pull request will ${{ env.MESSAGE }}.
            
            ## Dependencies before merge

            - [ ] https://github.com/revanced/revanced-patches
          pr_draft: true

---
name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Make sure the release step uses its own credentials:
          # https://github.com/cycjimmy/semantic-release-action#private-packages
          persist-credentials: false
          fetch-depth: 0

      - name: Cache Gradle
        uses: burrunan/gradle-cache-action@v1

      - name: Setup Java
        run: echo ""JAVA_HOME=$JAVA_HOME_17_X64"" >> $GITHUB_ENV

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew build clean

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ""lts/*""
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: ${{ env.GPG_FINGERPRINT }}

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.REPOSITORY_PUSH_ACCESS }}
        run: npm exec semantic-release

---
"
FongMi;CatVodSpider;FongMi/CatVodSpider;https://github.com/FongMi/CatVodSpider;https://api.github.com/repos/FongMi/CatVodSpider;main;22/08/2022 09:01;22/04/2024 06:44;FALSE;
Y4er;ysoserial;Y4er/ysoserial;https://github.com/Y4er/ysoserial;https://api.github.com/repos/Y4er/ysoserial;main;24/03/2022 18:55;21/04/2024 09:49;TRUE;"name: run

on:
  push:
    branches: [ ""main"" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -DskipTests=true package

      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.TOKEN }}""
          automatic_release_tag: ""latest""
          title: ""Github action auto release""
          prerelease: false
          files: |
            target/ysoserial*-all.jar

---
"
CyrilFeng;Q-calculator;CyrilFeng/Q-calculator;https://github.com/CyrilFeng/Q-calculator;https://api.github.com/repos/CyrilFeng/Q-calculator;master;02/09/2022 10:30;08/04/2024 08:27;FALSE;
KeenSecurityLab;BinAbsInspector;KeenSecurityLab/BinAbsInspector;https://github.com/KeenSecurityLab/BinAbsInspector;https://api.github.com/repos/KeenSecurityLab/BinAbsInspector;main;26/03/2022 04:13;19/04/2024 09:47;TRUE;"name: CheckStyle

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run java checkstyle
        uses: nikitasavinov/checkstyle-action@0.5.1
        with:
          checkstyle_version: '8.32'
          checkstyle_config: './.github/workflows/checks_rules.xml'
          fail_on_error: false
          level: error
          reporter: 'github-pr-check'

---
name: Integration test

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            /opt/hostedtoolcache/z3
            /opt/hostedtoolcache/ghidra
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Setup Ghidra
        uses: er28-0652/setup-ghidra@0.0.6
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          version: '10.4'
      - name: Download Z3
        uses: pavpanchekha/setup-z3@0.2.0
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          version: '4.8.15'
          architecture: 'x64'
          distribution: 'glibc-2.31'
      - name: Setup Environment variables if use cache
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo ""CPATH=/opt/hostedtoolcache/z3/4.8.15/x64/z3-4.8.15-x64-glibc-2.31/include"" >> $GITHUB_ENV
          echo ""GHIDRA_INSTALL_DIR=/opt/hostedtoolcache/ghidra/10.4/x64"" >> $GITHUB_ENV
      - name: Setup Z3
        run: |
          cp $CPATH/../bin/com.microsoft.z3.jar $GITHUB_WORKSPACE/lib/com.microsoft.z3.jar
          sudo cp $CPATH/../bin/*.so  /lib
      - name: Checkout binaries
        uses: actions/checkout@v3
        with:
          repository: KeenSecurityLab/BinAbsInspector-binaries
          path: src/integration/resources/binaries
      - name: Integration test
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          gradle-version: 7.4
          arguments: integrationTest

---
name: Unit test

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            /opt/hostedtoolcache/z3
            /opt/hostedtoolcache/ghidra
          key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      - name: Setup Ghidra
        uses: er28-0652/setup-ghidra@0.0.6
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          version: '10.4'
      - name: Download Z3
        uses: pavpanchekha/setup-z3@0.2.0
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          version: '4.8.15'
          architecture: 'x64'
          distribution: 'glibc-2.31'
      - name: Setup Environment variables if use cache
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          echo ""CPATH=/opt/hostedtoolcache/z3/4.8.15/x64/z3-4.8.15-x64-glibc-2.31/include"" >> $GITHUB_ENV
          echo ""GHIDRA_INSTALL_DIR=/opt/hostedtoolcache/ghidra/10.4/x64"" >> $GITHUB_ENV
      - name: Setup Z3
        run: |
          cp $CPATH/../bin/com.microsoft.z3.jar $GITHUB_WORKSPACE/lib/com.microsoft.z3.jar
          sudo cp $CPATH/../bin/*.so  /lib
      - name: Unit test
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          gradle-version: 7.4
          arguments: test

---
"
mkpaz;atlantafx;mkpaz/atlantafx;https://github.com/mkpaz/atlantafx;https://api.github.com/repos/mkpaz/atlantafx;master;30/03/2022 06:23;21/04/2024 18:27;TRUE;"name: docs
on:
  push:
    paths:
      - docs/**
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: |
          pip install mkdocs-material==8.5.11  mkdocs-redirects
          cd docs
          mkdocs gh-deploy --force

---
name: Tagged Release
on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
    - name: Prepare | Checkout
      uses: actions/checkout@v2

    - name: Prepare | Java
      uses: ./.github/actions/prepare-java

    - name: Extract release notes
      id: extract-release-notes
      uses: ffurrer2/extract-release-notes@v1
      with:
        release_notes_file: RELEASE_NOTES.md

    - name: Build | Package styles
      run: mvn clean install -B --file styles/pom.xml

    - name: Build | Package other modules (Unix)
      # some tests won't start without X11
      run: xvfb-run mvn clean install -B -pl '!styles' --file pom.xml
      if: matrix.os == 'ubuntu-latest'

    - name: Build | Package other modules (Windows)
      run: mvn clean install -B -pl '!styles' --file pom.xml
      if: matrix.os == 'windows-latest'

    - name: Build | List artifacts (Unix)
      shell: sh
      run: ls -l ./sampler/target/release
      if: matrix.os == 'ubuntu-latest'

    - name: Build | List artifacts (Windows)
      shell: pwsh
      run: ls sampler\target\release
      if: matrix.os == 'windows-latest'

    - name: Build | Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: binaries
        path: ./sampler/target/release/*
        retention-days: 1

    - name: Build | Upload resources
      uses: actions/upload-artifact@v2
      with:
        name: resources
        path: |
          ./styles/**/*-themes.zip
          RELEASE_NOTES.md
        retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Release | Download files
      uses: actions/download-artifact@v2

    - name: Release | List content
      run: ls -R

    - name: Release | Publish to Github
      uses: softprops/action-gh-release@v1
      with:
        files: |
          binaries/*
          resources/**/*-themes.zip
        body_path: resources/RELEASE_NOTES.md

---
"
mandiant;Ghidrathon;mandiant/Ghidrathon;https://github.com/mandiant/Ghidrathon;https://api.github.com/repos/mandiant/Ghidrathon;main;01/04/2022 00:36;22/04/2024 11:51;TRUE;"name: build

on:
  release:
    types: [published]

jobs:

  release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - jep-jar-release-url: ""https://github.com/ninia/jep/releases/download/v4.2.0/jep-4.2.0.jar""
            ghidra-release-url: ""https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_11.0_build/ghidra_11.0_PUBLIC_20231222.zip""
    steps:
    - name: Checkout Ghidrathon
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: ""temurin""
        java-version: ""17""
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: ""7.3""
    - name: Configure temp folder
      run: mkdir ../tmp
    - name: Download Ghidra
      run: |
        wget ${{ matrix.ghidra-release-url }} -O ../tmp/ghidra.zip
        unzip ../tmp/ghidra.zip -d ../tmp/ghidra
        mv ../tmp/ghidra/$(ls ../tmp/ghidra) ../tmp/ghidra/ghidra_PUBLIC
    - name: Download Jep
      run: wget ${{ matrix.jep-jar-release-url }} -O ./lib/jep-4.2.0.jar
    - name: Set zip name
      run: echo ""zip_name=Ghidrathon-${GITHUB_REF#refs/tags/}.zip"" >> $GITHUB_ENV
    - name: Build Ghidrathon
      run: gradle -PGHIDRA_INSTALL_DIR=${{ github.workspace }}/../tmp/ghidra/ghidra_PUBLIC
    - name: Configure and zip
      run: |
        mv ./dist/$(ls ./dist) ./dist/${{ env.zip_name }}
        cp ./util/* ./dist
        (cd ./dist && zip -r ../${{ env.zip_name }} .)
    - name: Upload ${{ env.zip_name }} to GH Release
      uses: svenstaro/upload-release-action@2728235f7dc9ff598bd86ce3c274b74f802d2208 # v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN}}
        file: ${{ env.zip_name }}
        tag: ${{ github.ref }}

---
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  code_style:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Ghidrathon
      uses: actions/checkout@v4
    - name: Configure Java
      uses: actions/setup-java@v4
      with:
        distribution: ""temurin""
        java-version: ""17""
    - name: Configure Python
      uses: actions/setup-python@v2
      with:
        python-version: ""3.12""
    - name: Lint with isort
      run: |
        pip install isort
        isort --profile black --length-sort --line-width 120 -c .
    - name: Lint with black
      run: |
        pip install black
        black -l 120 --check .
    - name: Lint with google-java-format
      run: |
        mkdir ../tmp
        wget https://github.com/google/google-java-format/releases/download/v1.19.2/google-java-format-1.19.2-all-deps.jar -O ../tmp/google-java-format.jar
        find . -name ""*.java"" -type f -print | xargs java -jar ../tmp/google-java-format.jar --dry-run --set-exit-if-changed

  tests:
    name: Tests in ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: code_style
    strategy:
      fail-fast: false
      matrix:
        ghidra-release-url: [""https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.3.2_build/ghidra_10.3.2_PUBLIC_20230711.zip"", ""https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_11.0_build/ghidra_11.0_PUBLIC_20231222.zip""]
        jep-jar-release-url: [""https://github.com/ninia/jep/releases/download/v4.2.0/jep-4.2.0.jar""]
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [""3.8"", ""3.12""]
    steps:
    - name: Checkout Ghidrathon
      uses: actions/checkout@v4
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: ""temurin""
        java-version: ""17""
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: ""7.3""
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Configure temp folder
      run: mkdir ../tmp
    - name: Install Python requirements
      run: |
        pip install -r util/requirements.txt
        pip install -r data/python/tests/requirements.txt
        python -c ""import importlib.util;import pathlib;print(pathlib.Path(importlib.util.find_spec('jep').origin).parent)""
    - name: Download dependencies Linux/macOS
      if : ${{ matrix.os != 'windows-latest' }}
      run: |
        wget ${{ matrix.ghidra-release-url }} -O ../tmp/ghidra.zip
        unzip ../tmp/ghidra.zip -d ../tmp/ghidra
        mv ../tmp/ghidra/$(ls ../tmp/ghidra) ../tmp/ghidra/ghidra_PUBLIC
        wget ${{ matrix.jep-jar-release-url }} -O ./lib/jep-4.2.0.jar
    - name: Download dependencies Windows
      if : ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      run: |
        Invoke-WebRequest -URI ""${{ matrix.ghidra-release-url }}"" -OutFile ""../tmp/ghidra.zip""
        mkdir ../tmp/ghidra
        tar -xf ../tmp/ghidra.zip -C ../tmp/ghidra
        Rename-Item -Path ""../tmp/ghidra/$((Get-ChildItem -Path ""../tmp/ghidra"").Name)"" -NewName ""ghidra_PUBLIC""
        Invoke-WebRequest -URI ""${{ matrix.jep-jar-release-url }}"" -OutFile ""./lib/jep-4.2.0.jar""
    - name: Build Ghidrathon
      run: gradle -PGHIDRA_INSTALL_DIR=${{ github.workspace }}/../tmp/ghidra/ghidra_PUBLIC
    - name: Install Ghidrathon Linux/macOS
      if : ${{ matrix.os != 'windows-latest' }}
      run: |
        unzip ./dist/$(ls ./dist) -d ../tmp/ghidra/ghidra_PUBLIC/Ghidra/Extensions/
    - name: Install Ghidrathon Windows
      if : ${{ matrix.os == 'windows-latest' }}
      shell: pwsh
      run: |
        Rename-Item -Path ""./dist/$((Get-ChildItem -Path ""./dist"").Name)"" -NewName ""Ghidrathon.zip""
        tar -xf ./dist/Ghidrathon.zip -C ../tmp/ghidra/ghidra_PUBLIC/Ghidra/Extensions/
    - name: Set Ghidrathon Python interpreter
      run: python util/ghidrathon_configure.py ../tmp/ghidra/ghidra_PUBLIC -d
    - name: Run tests
      run: |
        ../tmp/ghidra/ghidra_PUBLIC/support/analyzeHeadless ${{ github.workspace }}/../tmp/ghidra test -Import ${{ github.workspace }}/../tmp/ghidra/ghidra_PUBLIC/GPL/DemanglerGnu/os/linux_x86_64/demangler_gnu_v2_24 -PostScript ${{ github.workspace }}/data/python/tests/hello.py -PostScript ${{ github.workspace }}/data/python/tests/runall.py > ../tmp/log.txt
    - name: Check tests
      run: |
        python -c ""import pathlib, sys;log_text=pathlib.Path('../tmp/log.txt').read_text(encoding='utf-8');print(log_text);sys.exit(0 if 'runall.py called exit with code 0' in log_text else -1)""
        python -c ""import pathlib, sys; sys.exit(0 if pathlib.Path('hello.txt').exists() else -1)""

---
"
White-hua;Apt_t00ls;White-hua/Apt_t00ls;https://github.com/White-hua/Apt_t00ls;https://api.github.com/repos/White-hua/Apt_t00ls;master;02/10/2022 16:14;19/04/2024 09:19;FALSE;
Katana-Official;SPatch-Update;Katana-Official/SPatch-Update;https://github.com/Katana-Official/SPatch-Update;https://api.github.com/repos/Katana-Official/SPatch-Update;master;07/10/2022 09:12;22/04/2024 12:12;FALSE;
valarchie;AgileBoot-Back-End;valarchie/AgileBoot-Back-End;https://github.com/valarchie/AgileBoot-Back-End;https://api.github.com/repos/valarchie/AgileBoot-Back-End;main;08/10/2022 07:30;22/04/2024 11:10;FALSE;
xCollateral;VulkanMod;xCollateral/VulkanMod;https://github.com/xCollateral/VulkanMod;https://api.github.com/repos/xCollateral/VulkanMod;1.20.x;15/04/2022 00:08;21/04/2024 07:21;TRUE;"# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          17,    # Current Java LTS & minimum supported by Minecraft
        ]
        # and run on both Linux and Windows
        os: [ubuntu-20.04, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v2
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: make gradle wrapper executable
        if: ${{ runner.os != 'Windows' }}
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        if: ${{ runner.os == 'Linux' && matrix.java == '17' }} # Only upload artifacts built from latest java on one OS
        uses: actions/upload-artifact@v2
        with:
          name: Artifacts
          path: build/libs/

---
"
AbdurRKhalid;Design-Patterns;AbdurRKhalid/Design-Patterns;https://github.com/AbdurRKhalid/Design-Patterns;https://api.github.com/repos/AbdurRKhalid/Design-Patterns;main;14/10/2022 11:33;06/04/2024 15:01;FALSE;
liyupi;sql-father-backend-public;liyupi/sql-father-backend-public;https://github.com/liyupi/sql-father-backend-public;https://api.github.com/repos/liyupi/sql-father-backend-public;master;19/10/2022 07:33;22/04/2024 04:01;FALSE;
microsoft;HydraLab;microsoft/HydraLab;https://github.com/microsoft/HydraLab;https://api.github.com/repos/microsoft/HydraLab;main;28/04/2022 11:18;22/04/2024 08:51;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""main"" ]
  schedule:
    - cron: '37 2 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        
        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

        
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines. 
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo ""Run, Build Application using script""
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: ""/language:${{matrix.language}}""

---
"
iohao;ioGame;iohao/ioGame;https://github.com/iohao/ioGame;https://api.github.com/repos/iohao/ioGame;dev;23/05/2022 13:33;21/04/2024 06:47;TRUE;"name: Deploy Javadoc

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # if you have a protection rule on your repository, you'll need to give write permission to the workflow.
    steps:
      - name: Deploy JavaDoc 🚀
        uses: MathieuSoysal/Javadoc-publisher.yml@v2.5.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          javadoc-branch: javadoc
          java-version: 21
          target-folder: javadoc # url will be https://<username>.github.io/<repo>/javadoc, This can be left as nothing to generate javadocs in the root folder.
          project: maven # or gradle
          # subdirectories: moduleA moduleB #for subdirectories support, needs to be run with custom command
---
"
in28minutes;master-spring-and-spring-boot;in28minutes/master-spring-and-spring-boot;https://github.com/in28minutes/master-spring-and-spring-boot;https://api.github.com/repos/in28minutes/master-spring-and-spring-boot;main;27/10/2022 10:18;22/04/2024 10:08;FALSE;
savior-only;Spring_All_Reachable;savior-only/Spring_All_Reachable;https://github.com/savior-only/Spring_All_Reachable;https://api.github.com/repos/savior-only/Spring_All_Reachable;main;29/10/2022 05:28;18/04/2024 16:16;FALSE;
wechatpay-apiv3;wechatpay-java;wechatpay-apiv3/wechatpay-java;https://github.com/wechatpay-apiv3/wechatpay-java;https://api.github.com/repos/wechatpay-apiv3/wechatpay-java;main;30/05/2022 09:51;22/04/2024 11:26;TRUE;"name: Gradle Build

on:
  pull_request:

jobs:
  # pr时校验gradle build是否通过
  build:
    strategy:
      matrix:
        java-version: [ 8, 11, 17 ]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          cache: 'gradle'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Build with Gradle
        run: ./gradlew build
---
name: Gradle Publish

on:
  release:
    types: published
jobs:

  # 校验tag是否满足语义化版本格式
  check-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Regex Match
        id: regex-match
        run: |
          result=$(printf ${{github.ref_name}} | perl -ne 'printf if /^v(?P<major>0|[1-9]\d*)\.(?P<minor>0|[1-9]\d*)\.(?P<patch>0|[1-9]\d*)(?:-(?P<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/')
          echo ""::set-output name=result::$result""
      - name: Check Tag
        if: ${{ steps.regex-match.outputs.result != github.ref_name }}
        uses: actions/github-script@v4
        with:
          script: core.setFailed('Invalid Tag:${{github.ref_name}}')

  # Push Tag时自动发布新版本到Maven中央仓库
  publish:
    needs: [check-tag]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      # 发布项目
      - name: Publish
        run: ./gradlew publish
        env:
          SONATYPE_NEXUS_USERNAME: ${{secrets.SONATYPE_NEXUS_USERNAME}}
          SONATYPE_NEXUS_PASSWORD: ${{secrets.SONATYPE_NEXUS_PASSWORD}}
          SIGNING_KEY: ${{secrets.SIGNING_KEY}}
          SIGNING_PASSWORD: ${{secrets.SIGNING_PASSWORD}}
---
name: Sonarcloud Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - 'feat_*'
      - 'fix_*'
      - 'refactor_*'
    
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        if: env.SONAR_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build test jacocoTestReport sonarqube --info

---
"
OpenNative;open-native;OpenNative/open-native;https://github.com/OpenNative/open-native;https://api.github.com/repos/OpenNative/open-native;main;05/11/2022 16:58;18/04/2024 23:50;FALSE;
open-job;openjob;open-job/openjob;https://github.com/open-job/openjob;https://api.github.com/repos/open-job/openjob;main;13/06/2022 15:37;20/04/2024 08:27;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""main"" ]
  schedule:
    - cron: '23 11 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality


      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo ""Run, Build Application using script""
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
name: Java CI with Maven

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 8, 11 ]
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --no-transfer-progress --update-snapshots test --file pom.xml
---
name: Tag-release

on:
  push:
    tags:
      - v*

jobs:
  release:
    name: Release new version
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup ENV
        # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
        run: |
          echo ""RELEASE_TAG=${GITHUB_REF:10}"" >> $GITHUB_ENV
          echo ""RELEASE_NAME=$GITHUB_WORKFLOW"" >> $GITHUB_ENV

      - name: Generate changelog
        run: |
          curl https://github.com/gookit/gitw/releases/latest/download/chlog-linux-amd64 -o /usr/local/bin/chlog
          chlog -config .github/changelog.yml -output changelog.md prev last

      # https://github.com/softprops/action-gh-release
      - name: Create release and upload assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.RELEASE_TAG }}
          tag_name: ${{ env.RELEASE_TAG }}
          body_path: changelog.md
          token: ${{ secrets.GITHUB_TOKEN }}
#          files: macos-chlog.exe

---
"
nandorojo;burnt;nandorojo/burnt;https://github.com/nandorojo/burnt;https://api.github.com/repos/nandorojo/burnt;master;16/11/2022 20:03;22/04/2024 10:57;FALSE;
aws;event-ruler;aws/event-ruler;https://github.com/aws/event-ruler;https://api.github.com/repos/aws/event-ruler;main;17/06/2022 18:10;21/04/2024 23:03;TRUE;"name: Java Build
permissions: {}

on:
  push:
    branches: [""main""]

  pull_request:
    branches: [""main"", ""release-*""]

concurrency:
  group: java-build-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-20.04 ]
        java: [ ""8"", ""11"", ""17"" ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'
      - name: Verify with Maven
        run: mvn --batch-mode --errors --update-snapshots verify
      - name: Run benchmarks
        run: mvn test '-Dtest=Benchmarks#CL2*'

---
"
plantegg;programmer_case;plantegg/programmer_case;https://github.com/plantegg/programmer_case;https://api.github.com/repos/plantegg/programmer_case;main;19/11/2022 04:36;19/04/2024 11:23;FALSE;
CatVodTVOfficial;TVBoxOSC;CatVodTVOfficial/TVBoxOSC;https://github.com/CatVodTVOfficial/TVBoxOSC;https://api.github.com/repos/CatVodTVOfficial/TVBoxOSC;main;23/06/2022 02:40;22/04/2024 10:11;TRUE;"name: Test Build

on:
#  push:
#    branches:
#      - main
#  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build With Gradle
        run: |
          chmod +x gradlew
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all
      - name: Prepare App
        run: |
          mkdir -p ${{ github.workspace }}/apk/
          for file in `find ~ -name ""*.apk"" -print`; do
            mv ""$file"" ${{ github.workspace }}/apk/
          done
      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: com.github.tvbox.osc
          path: ${{ github.workspace }}/apk/*

---
"
4ra1n;jar-analyzer-gui;4ra1n/jar-analyzer-gui;https://github.com/4ra1n/jar-analyzer-gui;https://api.github.com/repos/4ra1n/jar-analyzer-gui;master;27/11/2022 12:36;19/04/2024 10:23;FALSE;
spring-projects;spring-modulith;spring-projects/spring-modulith;https://github.com/spring-projects/spring-modulith;https://api.github.com/repos/spring-projects/spring-modulith;main;05/07/2022 19:46;22/04/2024 03:41;TRUE;"name: PR Build

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build project
    runs-on: ubuntu-latest

    steps:

    - name: Check out sources
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: Build with Maven
      run: ./mvnw -B

---
name: CI Build

on:
  push:
    branches: [ main, hacking/* ]

jobs:
  build:
    name: Build project
    runs-on: ubuntu-latest

    steps:

    - name: Check out sources
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: Build with Maven
      env:
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: ./mvnw -B

    - name: Deploy to Artifactory
      env:
        ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: ./mvnw -B clean deploy -Pci,artifactory

---
name: Deploy Docs
on:
  push:
    branches-ignore: [ gh-pages ]
    tags: '**'
  repository_dispatch:
    types: request-build-reference # legacy
  #schedule:
  #- cron: '0 10 * * *' # Once per day at 10am UTC
  workflow_dispatch:
permissions:
  actions: write
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'spring-projects'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: docs-build
        fetch-depth: 1
    - name: Dispatch (partial build)
      if: github.ref_type == 'branch'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}
    - name: Dispatch (full build)
      if: github.ref_type == 'tag'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)

---
name: Compatibility Build

on:
  workflow_dispatch:
  schedule:
    - cron: '5 6 * * *'

jobs:
  integration:
    strategy:
      matrix:
        version:
        - '3.1.10'
        - '3.1.11-SNAPSHOT'
        - '3.2.4'
        - '3.2.5-SNAPSHOT'
        - '3.3.0-SNAPSHOT'
    name: Build against Boot ${{ matrix.version }}
    runs-on: ubuntu-latest

    steps:

    - name: Check out sources
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: Build with Maven
      env:
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: |
        cd spring-modulith-examples
        ../mvnw -B versions:update-parent -DskipResolution=true -DparentVersion=${{ matrix.version }}
        ../mvnw -B clean verify -Pwith-preview-repos -Dspring-boot.version=${{ matrix.version }}

---
name: Release Milestones

on:
  push:
    branches: [ release/milestone ]

jobs:
  build:
    name: Release project
    runs-on: ubuntu-latest

    steps:

    - name: Check out sources
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: Build with Maven
      env:
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: ./mvnw -B

    - name: Deploy to Artifactory
      env:
        ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: ./mvnw -B clean deploy -Pci,artifactory

    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v1

    - name: Deploy documentation
      env:
        ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: ./mvnw -B clean deploy -Pdocumentation

---
name: Release to Maven Central

on:
  push:
    branches: [ release/release ]

jobs:
  build:
    name: Release project
    runs-on: ubuntu-latest

    steps:

    - name: Check out sources
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'maven'

    - name: Install GPG key
      run: |
        echo ""${{ secrets.GPG_PRIVATE_KEY }}"" > gpg.asc
        echo ""${{ secrets.GPG_PASSPHRASE }}"" | gpg --batch --yes --passphrase-fd 0 --import gpg.asc

    - name: Release to Sonatype OSSRH
      env:
          SONATYPE_USER: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: |
        ./mvnw -B clean install -DskipTests
        ./mvnw -B clean deploy -Pci,sonatype -s settings.xml

    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v1

    - name: Deploy documentation
      env:
        ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
        ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
        GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
      run: ./mvnw -B clean deploy -Pdocumentation

---
"
obiscr;ChatGPT;obiscr/ChatGPT;https://github.com/obiscr/ChatGPT;https://api.github.com/repos/obiscr/ChatGPT;main;08/12/2022 15:42;10/04/2024 12:57;FALSE;
apache;amoro;apache/amoro;https://github.com/apache/amoro;https://api.github.com/repos/apache/amoro;master;14/07/2022 03:54;22/04/2024 09:54;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Core/hadoop2 CI with Maven

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - ""master""
      - ""0.**""

  pull_request:
    branches:
      - ""master""
      - ""0.**""
    paths:
      - ""amoro-ams/**""
      - ""amoro-core/**""
      - ""amoro-mixed-format/amoro-mixed-format-flink/**""
      - ""amoro-mixed-format/amoro-mixed-format-hive/**""
      - ""amoro-mixed-format/amoro-mixed-format-spark/**""
      - ""pom.xml""
      - ""tools/maven/**""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Validate checkstyle first
        run: mvn validate

      - name: Build all module with Maven
        run: mvn clean install -pl '!amoro-mixed-format/amoro-mixed-format-trino' -Djacoco.flink.skip=true -B -ntp -Dhadoop=v2

      - name: Code coverage
        uses: codecov/codecov-action@v3
        with:
          verbose: true
          flags: core

---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Core/hadoop3 CI with Maven

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - ""master""
      - ""0.**""

  pull_request:
    branches:
      - ""master""
      - ""0.**""
    paths:
      - ""amoro-ams/**""
      - ""amoro-core/**""
      - ""amoro-mixed-format/amoro-mixed-format-flink/**""
      - ""amoro-mixed-format/amoro-mixed-format-hive/**""
      - ""amoro-mixed-format/amoro-mixed-format-spark/**""
      - ""pom.xml""
      - ""tools/maven/**""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Validate checkstyle first
        run: mvn validate

      - name: Build all module with Maven
        run: mvn clean install -pl '!amoro-mixed-format/amoro-mixed-format-trino' -Djacoco.flink.skip=true -B -ntp

      - name: Code coverage
        uses: codecov/codecov-action@v3
        with:
          verbose: true
          flags: core

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


# This workflow will build docker images when commit merged or pushed to master.
# or tags pushed.

name: Publish Docker Image

on:
  push:
    branches:
      - ""master""
    tags:
      - ""v*""


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-amoro:
    name: Push Amoro Docker Image to Docker Hub
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.repository, 'NetEase/') }}
    strategy:
      matrix:
        hadoop: [ ""v3"" ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          flavor: |
            latest=auto
          images: |
            name=arctic163/amoro
          tags: |
            type=ref,event=branch,enable=${{ matrix.hadoop == 'v3' }},suffix=-snapshot
            type=ref,event=branch,enable=${{ matrix.hadoop == 'v3' }},suffix=-snapshot-hadoop3
            type=ref,event=branch,enable=${{ matrix.hadoop == 'v2' }},suffix=-snapshot-hadoop2
            type=semver,event=tag,enable=${{ matrix.hadoop == 'v3' }},pattern={{version}}
            type=semver,event=tag,enable=${{ matrix.hadoop == 'v2' }},pattern={{version}}-hadoop2

      - name: Print tags
        run: echo '${{ steps.meta.outputs.tags }}'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Maven Build Properties
        if: ${{ matrix.hadoop != 'v3' }}
        run: |
          echo ""MVN_HADOOP=-Dhadoop=${{ matrix.hadoop }}"" >> $GITHUB_ENV

      - name: Build dist module with Maven
        run: mvn clean install -pl 'ams/dist' -am -e ${MVN_HADOOP} -DskipTests -B -ntp

      - name: Build and Push Amoro Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: docker/amoro/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}

  docker-optimizer-flink:
    name: Push Amoro Optimizer-Flink Docker Image to Docker Hub
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.repository, 'NetEase/') }}
    strategy:
      matrix:
        flink: [ ""1.14.6"", ""1.18.1"" ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          flavor: |
            latest=auto
          images: |
            name=arctic163/optimizer-flink
          tags: |
            type=ref,event=branch,enable=${{ matrix.flink == '1.14.6' }},suffix=-snapshot
            type=ref,event=branch,enable=${{ matrix.flink == '1.14.6' }},suffix=-snapshot-flink1.14
            type=ref,event=branch,enable=${{ matrix.flink == '1.18.1' }},suffix=-snapshot-flink1.18
            type=semver,enable=${{ matrix.flink == '1.14.6' }},pattern={{version}}
            type=semver,enable=${{ matrix.flink == '1.14.6' }},pattern={{version}}-flink1.14
            type=semver,enable=${{ matrix.flink == '1.18.1' }},pattern={{version}}-flink1.18

      - name: Print tags
        run: echo '${{ steps.meta.outputs.tags }}'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set optimizer flink version
        run: |
          OPTIMIZER_FLINK=${{ matrix.flink }} && \
          echo ""OPTIMIZER_FLINK=-Dflink-optimizer.flink-version${OPTIMIZER_FLINK}"" >> $GITHUB_ENV
          if [[ ""$OPTIMIZER_FLINK"" < ""1.15"" ]]; then
            echo ""Adding -Pflink-pre-1.15 for Flink version less than 1.15""
            echo ""OPTIMIZER_FLINK=-Pflink-pre-1.15 -Dflink-optimizer.flink-version=${OPTIMIZER_FLINK}"" >> $GITHUB_ENV
          fi

      - name: Set ENV Amoro version
        id: version
        run: |
          AMORO_VERSION=`cat pom.xml | grep 'amoro-parent' -C 3 | grep -Eo '<version>.*</version>' | awk -F'[><]' '{print $3}'` \
          && echo ""$AMORO_VERSION"" \
          && echo ""AMORO_VERSION=${AMORO_VERSION}"" >> $GITHUB_ENV \
          && echo ""AMORO_VERSION=${AMORO_VERSION}"" >> $GITHUB_OUTPUT

      - name: Build optimizer module with Maven
        run: mvn clean package -pl 'ams/optimizer/flink-optimizer' -am -e ${OPTIMIZER_FLINK} -DskipTests -B -ntp

      - name: Build and Push Flink Optimizer Docker Image
        uses: docker/build-push-action@v4
        env:
          AMORO_VERSION: ${{ steps.version.outputs.AMORO_VERSION }}
        with:
          context: .
          push: true
          file: docker/optimizer-flink/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            FLINK_VERSION=${{ matrix.flink }}
            OPTIMIZER_JOB=ams/optimizer/flink-optimizer/target/flink-optimizer-${{ env.AMORO_VERSION }}-jar-with-dependencies.jar

  docker-optimizer-spark:
    name: Push Amoro Optimizer-Spark Docker Image to Docker Hub
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.repository, 'NetEase/') }}
    strategy:
      matrix:
        spark: [ ""3.3.3"" ]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          flavor: |
            latest=auto
          images: |
            name=arctic163/optimizer-spark
          tags: |
            type=ref,event=branch,enable=${{ matrix.spark == '3.3.3' }},suffix=-snapshot-spark3.3
            type=semver,enable=${{ matrix.spark == '3.3.3' }},pattern={{version}}-spark3.3

      - name: Print tags
        run: echo '${{ steps.meta.outputs.tags }}'

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set optimizer spark version
        run: |
          OPTIMIZER_SPARK=${{ matrix.spark }} && \
          echo ""OPTIMIZER_SPARK=-Dspark-optimizer.spark-version${OPTIMIZER_SPARK}"" >> $GITHUB_ENV

      - name: Set ENV Amoro version
        id: version
        run: |
          AMORO_VERSION=`cat pom.xml | grep 'amoro-parent' -C 3 | grep -Eo '<version>.*</version>' | awk -F'[><]' '{print $3}'` \
          && echo ""$AMORO_VERSION"" \
          && echo ""AMORO_VERSION=${AMORO_VERSION}"" >> $GITHUB_ENV \
          && echo ""AMORO_VERSION=${AMORO_VERSION}"" >> $GITHUB_OUTPUT

      - name: Build optimizer module with Maven
        run: mvn clean package -pl 'ams/optimizer/spark-optimizer' -am -e ${OPTIMIZER_SPARK} -DskipTests -B -ntp

      - name: Build and Push Spark Optimizer Docker Image
        uses: docker/build-push-action@v4
        env:
          AMORO_VERSION: ${{ steps.version.outputs.AMORO_VERSION }}
        with:
          context: .
          push: true
          file: docker/optimizer-spark/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            SPARK_VERSION=${{ matrix.spark }}
            OPTIMIZER_JOB=ams/optimizer/spark-optimizer/target/spark-optimizer-${{ env.AMORO_VERSION }}-jar-with-dependencies.jar


  docker-quickdemo:
    name: Push Amoro Quick-Demo Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: docker-amoro
    if: ${{ startsWith(github.repository, 'NetEase/') && startsWith(github.ref, 'refs/tags/' )}}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker tags
        uses: docker/metadata-action@v5
        id: meta
        with:
          flavor: |
            latest=auto
          images: |
            name=arctic163/quickdemo
          tags: |
            type=ref,event=branch,suffix=-snapshot
            type=semver,pattern={{version}}

      - name: Print tags
        run: echo '${{ steps.meta.outputs.tags }}'

      - name: Set Amoro Tag
        id: tag
        run: |
          AMORO_TAG=$(echo ""${{ steps.meta.outputs.tags }}"" | head -n 1) && echo ""AMORO_TAG=${AMORO_TAG#*:}"" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build optimizer module with Maven
        run: mvn clean package -pl 'mixed/flink/v1.17/flink-runtime' -am -e -DskipTests -B -ntp

      - name: Build and Push Flink Optimizer Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: docker/quickdemo/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            AMORO_TAG=${{ steps.tag.outputs.AMORO_TAG }}
            FLINK_VERSION=1.18.1
            ICEBERG_VERSION=1.3.1

---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: ""Pull Request Labeler""
on: pull_request_target

permissions:
  contents: read
  pull-requests: write

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ""${{ secrets.GITHUB_TOKEN }}""
          sync-labels: true
---
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Trino CI with Maven

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - ""master""
      - ""0.**""

  pull_request:
    branches:
      - ""master""
      - ""0.**""
    paths:
      - ""amoro-ams/**""
      - ""amoro-core/**""
      - ""amoro-mixed-format/amoro-mixed-format-hive/**""
      - ""amoro-mixed-format/amoro-mixed-format-trino/**""
      - ""pom.xml""
      - ""tools/maven/**""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Validate checkstyle first
        run: mvn validate -P trino-spotless

      - name: Install dependency with Maven
        run: mvn clean install -DskipTests -pl 'amoro-ams/amoro-ams-api,amoro-core,amoro-mixed-format/amoro-mixed-format-hive' -Dhadoop=v2 -am -B -P trino-spotless

      - name: Build with Maven
        run: mvn clean test -pl 'amoro-mixed-format/amoro-mixed-format-trino' -B -ntp -Dhadoop=v2 -P trino-spotless

      - name: Code coverage
        uses: codecov/codecov-action@v3
        with:
          verbose: true
          flags: trino

---
"
ali-bouali;spring-boot-3-jwt-security;ali-bouali/spring-boot-3-jwt-security;https://github.com/ali-bouali/spring-boot-3-jwt-security;https://api.github.com/repos/ali-bouali/spring-boot-3-jwt-security;main;29/12/2022 14:21;22/04/2024 08:52;FALSE;
devSquad-study;2023-CS-Study;devSquad-study/2023-CS-Study;https://github.com/devSquad-study/2023-CS-Study;https://api.github.com/repos/devSquad-study/2023-CS-Study;main;29/12/2022 16:41;19/04/2024 10:48;FALSE;
pascal-lab;Tai-e;pascal-lab/Tai-e;https://github.com/pascal-lab/Tai-e;https://api.github.com/repos/pascal-lab/Tai-e;master;22/07/2022 13:08;19/04/2024 20:10;TRUE;"name: Release

on:
  workflow_dispatch: # add manual trigger button

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Publish
        run: |
          ./gradlew docs:all publish
        env:
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.ORG_GRADLE_PROJECT_signingKeyId }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralUsername }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.ORG_GRADLE_PROJECT_mavenCentralPassword }}

      - uses: manyuanrong/setup-ossutil@v2.0
        with:
          endpoint: ${{ secrets.OSS_ACCESS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

      - name: Deploy documentation website
        run: |
          unzip -q -d docs/build/all docs/build/tai-e-docs.zip
          ossutil cp docs/build/all oss://${{ secrets.OSS_BUCKET_NAME }}/docs -rf

---
name: Test

on:
  push:
  pull_request:
  workflow_dispatch: # add manual trigger button

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Test
        run: |
          ./gradlew test jacocoTestReport --scan

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

---
"
fuzhengwei;chatbot-api;fuzhengwei/chatbot-api;https://github.com/fuzhengwei/chatbot-api;https://api.github.com/repos/fuzhengwei/chatbot-api;main;19/01/2023 03:10;17/04/2024 09:49;FALSE;
xpipe-io;xpipe;xpipe-io/xpipe;https://github.com/xpipe-io/xpipe;https://api.github.com/repos/xpipe-io/xpipe;master;27/01/2023 03:25;22/04/2024 08:01;FALSE;
HMCL-dev;HMCL-PE;HMCL-dev/HMCL-PE;https://github.com/HMCL-dev/HMCL-PE;https://api.github.com/repos/HMCL-dev/HMCL-PE;main;18/08/2022 12:50;20/04/2024 09:59;TRUE;"name: Android CI

on:
  pull_request:
    branches-ignore:
      - ''
  push:
    branches-ignore:
      - ''
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    
    - name: Build debug.apk
      run: |
        chmod +x gradlew
        ./gradlew assembleRelease
        
    - name : upload apk
      uses: actions/upload-artifact@v3
      with:
        name: app-debug
        path: HMCLPE/build/outputs/apk/release/*

---
"
entropy-cloud;nop-entropy;entropy-cloud/nop-entropy;https://github.com/entropy-cloud/nop-entropy;https://api.github.com/repos/entropy-cloud/nop-entropy;master;19/08/2022 00:43;22/04/2024 03:50;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    #- name: Update dependency graph
    #  uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

---
name: Sync Docs to Nop Community

on:
  push:
    branches:
      - master
    paths:
      - docs/**
  workflow_dispatch:
  
jobs:
  sync-docs-to-community:
    uses: nop-platform/.github/.github/workflows/sync-project-docs.yml@main
    with:
      repo: nop-entropy-docs
    secrets:
      token: ${{ secrets.NOP_PROJECT_DOCS_PAT }}

---
"
shixinzhang;AndroidBitmapMonitor;shixinzhang/AndroidBitmapMonitor;https://github.com/shixinzhang/AndroidBitmapMonitor;https://api.github.com/repos/shixinzhang/AndroidBitmapMonitor;master;31/01/2023 17:52;15/04/2024 10:58;FALSE;
MinaMichita;AntiAntiDefraud;MinaMichita/AntiAntiDefraud;https://github.com/MinaMichita/AntiAntiDefraud;https://api.github.com/repos/MinaMichita/AntiAntiDefraud;main;01/02/2023 07:51;21/04/2024 07:46;FALSE;
Grt1228;chatgpt-java;Grt1228/chatgpt-java;https://github.com/Grt1228/chatgpt-java;https://api.github.com/repos/Grt1228/chatgpt-java;develop;11/02/2023 09:54;22/04/2024 09:35;FALSE;
vaycore;OneScan;vaycore/OneScan;https://github.com/vaycore/OneScan;https://api.github.com/repos/vaycore/OneScan;main;14/02/2023 02:59;21/04/2024 05:37;FALSE;
devlive-community;datacap;devlive-community/datacap;https://github.com/devlive-community/datacap;https://api.github.com/repos/devlive-community/datacap;dev;17/09/2022 08:24;22/04/2024 02:53;TRUE;"name: Before checker with maven

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ ""dev"" ]

jobs:
  before_checker_loading:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: echo 'Before checker loading'

  before_checker_ui:
    runs-on: ubuntu-latest
    needs:
      - before_checker_loading
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - run: cd core/datacap-ui && npm install && npm run build

  before_checker_style:
    runs-on: ubuntu-latest
    needs:
      - before_checker_ui
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Maven Checker Style
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - run: chmod 755 ./mvnw
      - run: ./mvnw clean install checkstyle:checkstyle -Dfindbugs.skip -Dgpg.skip -Dskip.yarn -DskipTests=true

  before_checker_bugs:
    runs-on: ubuntu-latest
    needs:
      - before_checker_ui
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Maven Checker Bugs
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - run: chmod 755 ./mvnw
      - run: ./mvnw clean install findbugs:findbugs -Dcheckstyle.skip -Dgpg.skip -Dskip.yarn -DskipTests=true

  before_checker_package:
    runs-on: ubuntu-latest
    needs:
      - before_checker_style
      - before_checker_bugs
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Maven Checker Package
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - run: chmod 755 ./mvnw
      - run: ./mvnw -T 1C clean install package -Dfindbugs.skip -Dgpg.skip -Dcheckstyle.skip -DskipTests=true

---
name: ""Analysis java code""

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ ""dev"" ]
  schedule:
    - cron: '41 18 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - run: |
          ./mvnw -T 1C clean install package -Dfindbugs.skip -Dgpg.skip -Dcheckstyle.skip -DskipTests=true -Dskip.npm -q

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: ""/language:${{matrix.language}}""

---
name: Greetings

on: [pull_request_target, issues]

jobs:
  greeting:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/first-interaction@v1
        with:
          repo-token: ${{ secrets.TOKEN }}
          issue-message: ""Message that will be displayed on users' first issue""
          pr-message: ""Message that will be displayed on users' first pull request""

---
name: 'issue-translator'
on: 
  issue_comment: 
    types: [created]
  issues: 
    types: [opened]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: tomsun28/issues-translate-action@v2.6
        with:
          IS_MODIFY_TITLE: false
          # not require, default false, . Decide whether to modify the issue title
          # if true, the robot account @Issues-translate-bot must have modification permissions, invite @Issues-translate-bot to your project or use your custom bot.
          CUSTOM_BOT_NOTE: Bot detected the issue body's language is not English, translate it automatically. 👯👭🏻🧑‍🤝‍🧑👫🧑🏿‍🤝‍🧑🏻👩🏾‍🤝‍👨🏿👬🏿
          # not require. Customize the translation robot prefix message.

---
name: Publish images via Docker

on:
  release:
    types: [ published ]

env:
  APP_NAME: datacap
  GITHUB_REGISTRY: ghcr.io
  APP_GITHUB_GROUP: devlive-community
  APP_DOCKER_GROUP: qianmoq

jobs:
  before-compile:
    runs-on: ubuntu-latest

    outputs:
      APP_VERSION: ${{ steps.apply_version.outputs.APP_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Generate app version
        run: echo APP_VERSION=`./mvnw -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN -Dorg.slf4j.simpleLogger.log.org.apache.maven.plugins.help=INFO | tail -1` >> ""$GITHUB_OUTPUT""
        id: apply_version

      - name: Compile from source
        run: |
          chmod 755 ./mvnw
          ./mvnw clean install package -Dfindbugs.skip -Dgpg.skip -Dcheckstyle.skip -DskipTests=true -q

      - name: Cache binary
        id: cache-binary
        uses: actions/cache@v3
        env:
          cache-name: cache-binary
        with:
          path: |
            ./Dockerfile
            ./dist/datacap-release.tar.gz
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}

  publish-github-ghcr:
    runs-on: ubuntu-latest
    needs:
      - before-compile
    steps:
      - name: Get cache binary
        id: cache-binary
        uses: actions/cache@v3
        env:
          cache-name: cache-binary
        with:
          path: |
            ./Dockerfile
            ./dist/datacap-release.tar.gz
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: qianmoq
          password: ${{ secrets.PACKAGES_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.GITHUB_REGISTRY }}/${{ env.APP_GITHUB_GROUP }}/${{ env.APP_NAME }}:${{ needs.before-compile.outputs.APP_VERSION }}
            ${{ env.GITHUB_REGISTRY }}/${{ env.APP_GITHUB_GROUP }}/${{ env.APP_NAME }}:latest

  publish-docker-hub:
    runs-on: ubuntu-latest
    needs:
      - before-compile
    steps:
      - name: Get cache binary
        id: cache-binary
        uses: actions/cache@v3
        env:
          cache-name: cache-binary
        with:
          path: |
            ./Dockerfile
            ./dist/datacap-release.tar.gz
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ env.APP_DOCKER_GROUP }}/${{ env.APP_NAME }}:${{ needs.before-compile.outputs.APP_VERSION }}
            ${{ env.APP_DOCKER_GROUP }}/${{ env.APP_NAME }}:latest

---
name: Publish docs via GitHub Pages

on:
  release:
    types: [ published ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: cd docs/ && pip install -r requirements.txt
      - run: cd docs/ && mkdocs gh-deploy --force

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

---
name: Publish via Maven Central

on:
  release:
    types: [ published ]

jobs:
  publish-maven-central:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Publish to the Maven Central Repository
        uses: samuelmeuli/action-maven-publish@v1
        with:
          maven_profiles: 'deploy'
          maven_goals_phases: 'clean deploy'
          maven_args: '-DskipTests'
          gpg_private_key: ${{ secrets.GPG_SECRET }}
          gpg_passphrase: ${{ secrets.GPG_PASSWORD }}
          nexus_username: ${{ secrets.OSSRH_USERNAME }}
          nexus_password: ${{ secrets.OSSRH_TOKEN }}

---
# This workflow warns and then closes issues and PRs that have had no activity for a specified amount of time.
#
# You can adjust the behavior by modifying this file.
# For more information, see:
# https://github.com/actions/stale
name: Mark stale issues and pull requests

on:
  schedule:
    - cron: '35 13 * * *'

jobs:
  stale:

    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
      - uses: actions/stale@v5
        with:
          repo-token: ${{ secrets.TOKEN }}
          stale-issue-message: 'Stale issue message'
          stale-pr-message: 'Stale pull request message'
          stale-issue-label: 'no-issue-activity'
          stale-pr-label: 'no-pr-activity'

---
"
weishen250;npscrack;weishen250/npscrack;https://github.com/weishen250/npscrack;https://api.github.com/repos/weishen250/npscrack;main;16/02/2023 15:11;21/04/2024 17:46;FALSE;
omnilaboratory;OBAndroid;omnilaboratory/OBAndroid;https://github.com/omnilaboratory/OBAndroid;https://api.github.com/repos/omnilaboratory/OBAndroid;master;30/09/2022 20:59;31/03/2024 16:26;TRUE;"name: Android Autobuild

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""master"",""v1.0.0-merge-branch"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""master"",""v1.0.0-merge-branch"" ]
  schedule:
    - cron: '24 11 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo ""Run, Build Application using script""
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: ""/language:${{matrix.language}}""

---
# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Microsoft Security DevOps (MSDO) is a command line application which integrates static analysis tools into the development cycle.
# MSDO installs, configures and runs the latest versions of static analysis tools
# (including, but not limited to, SDL/security and compliance tools).
#
# The Microsoft Security DevOps action is currently in beta and runs on the windows-latest queue,
# as well as Windows self hosted agents. ubuntu-latest support coming soon.
#
# For more information about the action , check out https://github.com/microsoft/security-devops-action

name: ""Microsoft Defender For Devops""

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]
  schedule:
    - cron: '38 9 * * 3'

jobs:
  MSDO:
    # currently only windows latest is supported
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          5.0.x
          6.0.x
    - name: Run Microsoft Security DevOps
      uses: microsoft/security-devops-action@v1.6.0
      id: msdo
    - name: Upload results to Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.msdo.outputs.sarifFile }}

---
# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request, surfacing known-vulnerable versions of the packages declared or updated in the PR. Once installed, if the workflow run is marked as required, PRs introducing known-vulnerable packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
name: 'Dependency Review'
on: [pull_request]

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v2

---
"
mybatis-flex;mybatis-flex;mybatis-flex/mybatis-flex;https://github.com/mybatis-flex/mybatis-flex;https://api.github.com/repos/mybatis-flex/mybatis-flex;main;27/02/2023 04:14;22/04/2024 10:59;FALSE;
alan-eu;react-native-fast-shadow;alan-eu/react-native-fast-shadow;https://github.com/alan-eu/react-native-fast-shadow;https://api.github.com/repos/alan-eu/react-native-fast-shadow;main;19/10/2022 10:39;19/04/2024 23:48;TRUE;"name: Publish to NPM
on:
  release:
    types: [created]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies 🔧
        run: yarn install --frozen-lockfile
      - name: Publish package on NPM 📦
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

---
"
darbyluv2code;spring-boot-3-spring-6-hibernate-for-beginners;darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners;https://github.com/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners;https://api.github.com/repos/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners;main;04/03/2023 15:06;22/04/2024 05:47;FALSE;
davinci1012;pinduoduo_backdoor_unpacker;davinci1012/pinduoduo_backdoor_unpacker;https://github.com/davinci1012/pinduoduo_backdoor_unpacker;https://api.github.com/repos/davinci1012/pinduoduo_backdoor_unpacker;main;10/03/2023 15:25;15/04/2024 12:21;FALSE;
FCL-Team;FoldCraftLauncher;FCL-Team/FoldCraftLauncher;https://github.com/FCL-Team/FoldCraftLauncher;https://api.github.com/repos/FCL-Team/FoldCraftLauncher;main;19/10/2022 12:12;22/04/2024 07:08;TRUE;"name: Android CI

on:
  pull_request:
    branches-ignore:
      - ''
  push:
    tags:
      - '*'
    branches-ignore:
      - ''
  workflow_dispatch:

jobs:
  FCLTeamBuild:
    if: github.repository_owner == 'FCL-Team' && !startsWith(github.ref, 'refs/pull/')
    strategy:
      matrix:
        arch: [ ""all"", ""arm"", ""arm64"", ""x86"", ""x64"" ]
      fail-fast: false
    env:
      FCL_KEYSTORE_PASSWORD: ${{ secrets.FCL_KEYSTORE_PASSWORD }}
      CURSE_API_KEY: ${{ secrets.CURSE_API_KEY }}
      OAUTH_API_KEY: ${{ secrets.OAUTH_API_KEY }}
    name: Build for ${{matrix.arch}}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Build ${{matrix.arch}} .apk
        run: |
          chmod +x gradlew
          ./gradlew assemblerelease -Darch=${{matrix.arch}}

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          token: ""${{ secrets.TOKEN }}""
          files: |
            FCL/build/outputs/apk/release/*.apk

      - name: Upload apk
        if: startsWith(github.ref, 'refs/heads/')
        uses: actions/upload-artifact@v4
        with:
          name: app-${{matrix.arch}}
          path: FCL/build/outputs/apk/release/*
        #  retention-days: 1

#only for fork
  DebugBuild:
    if: github.repository_owner != 'FCL-Team' || startsWith(github.ref, 'refs/pull/')
    name: Build Debug
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Build debug apk
        run: |
          chmod +x gradlew
          ./gradlew assemblefordebug -Darch=all

      - name: Upload debug apk
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-all
          path: FCL/build/outputs/apk/fordebug/*

---
"
Kamilahsantos;Java-week-LinuxTips;Kamilahsantos/Java-week-LinuxTips;https://github.com/Kamilahsantos/Java-week-LinuxTips;https://api.github.com/repos/Kamilahsantos/Java-week-LinuxTips;main;15/03/2023 17:36;06/04/2024 17:10;FALSE;
zongzibinbin;MallChat;zongzibinbin/MallChat;https://github.com/zongzibinbin/MallChat;https://api.github.com/repos/zongzibinbin/MallChat;main;16/03/2023 16:04;22/04/2024 10:00;FALSE;
power721;alist-tvbox;power721/alist-tvbox;https://github.com/power721/alist-tvbox;https://api.github.com/repos/power721/alist-tvbox;master;06/11/2022 08:36;22/04/2024 09:47;TRUE;"name: 'release base new'

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Extract Spring Boot layers
        working-directory: ./target
        run: java -Djarmode=layertools -jar alist-tvbox-1.0.jar extract
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-base-new
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/alist-base-new:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: TAG=latest
      - name: Build hostmode docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-base-new
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/alist-base-new:hostmode
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: TAG=hostmode

---
name: 'release base'

on:
  workflow_run:
    workflows: [ ""release java"" ]
    types:
      - completed
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Extract Spring Boot layers
        working-directory: ./target
        run: java -Djarmode=layertools -jar alist-tvbox-1.0.jar extract
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-base
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/alist-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: TAG=latest
      - name: Build hostmode docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-base
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/alist-base:hostmode
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: TAG=hostmode

---
name: 'release dev docker'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The git branch to build.'
        required: true
        default: 'dev'
      tag:
        description: 'The docker tag to build.'
        required: true
        default: 'dev'
      publish:
        description: 'Publish the notification.'
        required: true
        type: boolean
        default: true
      release:
        description: 'Release the app.'
        required: true
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - name: show info
        run: |
          echo ""git branch: ${{ inputs.branch }}""
          echo ""docker tag: ${{ inputs.tag }}""
          echo ""publish: ${{ inputs.publish }}""
          echo ""release: ${{ inputs.release }}""
          echo ""HEAD_MESSAGE=$(git log -1 --pretty=%B)"" >> $GITHUB_ENV
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.x
          cache: npm
          cache-dependency-path: ./web-ui
      - name: Install npm
        working-directory: ./web-ui
        run: npm ci
      - name: Build web UI
        working-directory: ./web-ui
        run: npm run build
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Extract Spring Boot layers
        working-directory: ./target
        run: java -Djarmode=layertools -jar alist-tvbox-1.0.jar extract
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set APP version
        run: |
          [ -d data ] || mkdir data
          export TZ=Asia/Shanghai
          echo $((($(date +%Y) - 2023) * 366 + $(date +%j | sed 's/^0*//'))).$(date +%H%M)-dev > data/version
          echo ${{ github.event.head_commit.message }} >> data/version
          cp data/version data/app_version
          cat data/version
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-xiaoya
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build host mode docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-host
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:hostmode-${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build standalone docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/alist-tvbox:${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - if: ${{ inputs.publish }}
        name: send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.CHANNEL_ID }}
          token: ${{ secrets.BOT_TOKEN }}
          message: |
            一键部署(开发版)： wget https://d.har01d.cn/update_xiaoya.sh -O update_xiaoya.sh && sh ./update_xiaoya.sh -t ${{ inputs.tag }}

            ${{ github.actor }} created commit on ${{ inputs.branch }} branch:
            Commit message: ${{ env.HEAD_MESSAGE }}

            Repository: ${{ github.repository }}:${{ inputs.branch }}
            Branch: ${{ inputs.branch }}
            Docker Image: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:${{ inputs.tag }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

---
name: 'release java'

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - 'pom.xml'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-jre
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/java:17
          cache-from: type=gha
          cache-to: type=gha,mode=max
---
name: 'release native base docker'

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-native-base
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/native-base:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

---
name: 'release native dev docker'

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The git branch to build.'
        required: true
        default: 'dev'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.x
          cache: npm
          cache-dependency-path: ./web-ui
      - name: Install npm
        working-directory: ./web-ui
        run: npm ci
      - name: Build web UI
        working-directory: ./web-ui
        run: npm run build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set APP version
        run: |
          mkdir data
          export TZ=Asia/Shanghai
          num1=$(date +%Y)
          num2=$(date +%j)
          sum=$((($num1 - 2023) * 366 + $num2))
          echo $sum.$(date +%H%M)-dev > data/version
          echo ${{ github.event.head_commit.message }} >> data/version
          cp data/version data/app_version
          cat data/version
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-native
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:native-dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

---
name: 'release native docker'

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.x
          cache: npm
          cache-dependency-path: ./web-ui
      - name: Install npm
        working-directory: ./web-ui
        run: npm ci
      - name: Build web UI
        working-directory: ./web-ui
        run: npm run build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set APP version
        run: |
          mkdir data
          export TZ=Asia/Shanghai
          echo $((($(date +%Y) - 2023) * 366 + $(date +%j | sed 's/^0*//'))).$(date +%H%M) > data/version
          echo ${{ github.event.head_commit.message }} >> data/version
          cp data/version data/app_version
          cat data/version
      - name: Build native with Maven
        run: |
          export TOOLCHAIN_DIR=/opt/x86_64-linux-musl-native/
          export CC=$TOOLCHAIN_DIR/bin/gcc
          export PATH=""$TOOLCHAIN_DIR/bin:$PATH""
          sudo apt update
          sudo apt install build-essential libz-dev zlib1g-dev zlib1g -y
          wget https://more.musl.cc/10.2.1/x86_64-linux-musl/x86_64-linux-musl-native.tgz
          tar xf x86_64-linux-musl-native.tgz -C /opt
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar xf zlib-1.3.1.tar.gz
          cd zlib-1.3.1
          ./configure --prefix=$TOOLCHAIN_DIR --static
          make
          sudo make install
          cd ..
          mvn -B -Pnative package --file pom.xml
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-native
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:native
          cache-from: type=gha
          cache-to: type=gha,mode=max

---
name: 'release arm v7'

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.x
          cache: npm
          cache-dependency-path: ./web-ui
      - name: Install npm
        working-directory: ./web-ui
        run: npm ci
      - name: Build web UI
        working-directory: ./web-ui
        run: npm run build
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Extract Spring Boot layers
        working-directory: ./target
        run: java -Djarmode=layertools -jar alist-tvbox-1.0.jar extract
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set APP version
        run: |
          mkdir data
          export TZ=Asia/Shanghai
          num1=$(date +%Y)
          num2=$(date +%j)
          sum=$((($num1 - 2023) * 366 + $num2))
          echo $sum.$(date +%H%M) > data/version
          cp data/version data/app_version
          cat data/version
      - name: Build docker and push - arm v7
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-v7
          platforms: linux/arm/v7
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:arm-v7
          cache-from: type=gha
          cache-to: type=gha,mode=max

---
name: 'release docker'

on:
  workflow_run:
    workflows: [ ""release base"" ]
    types:
      - completed
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - 'build*'
      - 'release*'
      - 'config/**'
      - 'doc/**'
      - 'README.md'
      - 'pom.xml'
      - 'Dockerfile-v7'
      - 'Dockerfile'
      - 'Dockerfile-base'
      - 'Dockerfile-base-new'
      - 'Dockerfile-native-base'
      - 'Dockerfile-jre'
      - 'scripts/install.sh'
      - '.github/workflows/build-base.yaml'
      - '.github/workflows/build-base-new.yaml'
      - '.github/workflows/build-native-dev.yaml'
      - '.github/workflows/build-native-base.yaml'
      - '.github/workflows/build-dev.yaml'
      - '.github/workflows/build-java.yaml'
      - '.github/workflows/build-v7.yaml'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.x
          cache: npm
          cache-dependency-path: ./web-ui
      - name: Install npm
        working-directory: ./web-ui
        run: npm ci
      - name: Build web UI
        working-directory: ./web-ui
        run: npm run build
      - name: setup graalvm
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17.0.7'
          distribution: 'graalvm' # See 'Options' for all available distributions
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Extract Spring Boot layers
        working-directory: ./target
        run: java -Djarmode=layertools -jar alist-tvbox-1.0.jar extract
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set APP version
        run: |
          [ -d data ] || mkdir data
          export TZ=Asia/Shanghai
          echo $((($(date +%Y) - 2023) * 366 + $(date +%j | sed 's/^0*//'))).$(date +%H%M) > data/version
          echo ""${{ github.event.head_commit.message }}"" >> data/version
          cp data/version data/app_version
          cat data/version
      - name: Build docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-xiaoya
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build host mode docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-host
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:hostmode
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build standalone docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/alist-tvbox:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build native with Maven
        run: |
          export TOOLCHAIN_DIR=/opt/x86_64-linux-musl-native/
          export CC=$TOOLCHAIN_DIR/bin/gcc
          export PATH=""$TOOLCHAIN_DIR/bin:$PATH""
          sudo apt update
          sudo apt install build-essential libz-dev zlib1g-dev zlib1g -y
          wget https://more.musl.cc/10.2.1/x86_64-linux-musl/x86_64-linux-musl-native.tgz
          tar xf x86_64-linux-musl-native.tgz -C /opt
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar xf zlib-1.3.1.tar.gz
          cd zlib-1.3.1
          ./configure --prefix=$TOOLCHAIN_DIR --static
          make
          sudo make install
          cd ..
          mvn -B -Pnative package --file pom.xml
      - name: Build native docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-native
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:native
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build host native docker and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile-native-host
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xiaoya-tvbox:native-host
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Send version file
        env:
          ssh_host: ${{ secrets.SSH_HOST }}
        if: ${{ env.ssh_host != '' }}
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          port: 22
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: ""data/app_version,scripts/update_new.sh,scripts/update_xiaoya.sh,scripts/update_hostmode.sh,scripts/update_native.sh,scripts/update_native_host.sh""
          strip_components: 1
          target: /var/www/alist/
      - name: send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.CHANNEL_ID }}
          token: ${{ secrets.BOT_TOKEN }}
          message: |
            ${{ github.actor }} created commit:
            Commit message: ${{ github.event.commits[0].message }}

            Repository: ${{ github.repository }}

            See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

---
"
nageoffer;congomall;nageoffer/congomall;https://github.com/nageoffer/congomall;https://api.github.com/repos/nageoffer/congomall;main;22/03/2023 04:22;19/04/2024 07:32;FALSE;
hncboy;ai-beehive;hncboy/ai-beehive;https://github.com/hncboy/ai-beehive;https://api.github.com/repos/hncboy/ai-beehive;main;22/03/2023 16:23;22/04/2024 09:24;FALSE;
dromara;SMS4J;dromara/SMS4J;https://github.com/dromara/SMS4J;https://api.github.com/repos/dromara/SMS4J;master;24/03/2023 04:06;22/04/2024 09:32;FALSE;
liyupi;yu-auto-reply;liyupi/yu-auto-reply;https://github.com/liyupi/yu-auto-reply;https://api.github.com/repos/liyupi/yu-auto-reply;master;24/03/2023 15:36;19/04/2024 01:24;FALSE;
zema1;suo5;zema1/suo5;https://github.com/zema1/suo5;https://api.github.com/repos/zema1/suo5;main;22/11/2022 12:45;22/04/2024 08:09;TRUE;"name: Run linters
on:
  push:
    branches:
    - main
  pull_request:
permissions:
  contents: read
jobs:
  lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - run: go mod download
      - uses: golangci/golangci-lint-action@v3
        with:
          skip-cache: true
          skip-pkg-cache: true

---
name: Release suo5

on:
  push:
    branches:
      - 'release**'
      - 'main'
  release:
    types: [ published ]

permissions:
  contents: read

jobs:
  build-binary:
    name: Build cli
    strategy:
      fail-fast: true
      matrix:
        include:
          - os: windows
            arch: amd64
            output: suo5-windows-amd64.exe
          - os: darwin
            arch: amd64
            output: suo5-darwin-amd64
          - os: darwin
            arch: arm64
            output: suo5-darwin-arm64
          - os: linux
            arch: amd64
            output: suo5-linux-amd64
          - os: linux
            arch: arm64
            output: suo5-linux-arm64
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - run: go build -trimpath -ldflags ""-w -s -extldflags '-static' -X main.Version=${{ github.ref_name }}"" -o target/${{ matrix.output }}
      - uses: actions/upload-artifact@v3
        with:
          name: target
          path: target/*

  build-gui:
    name: Build gui
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows/amd64
            output: suo5-gui-windows.exe
          - os: macos-latest
            platform: darwin/universal
            # wails bug, mac 的 output file 不生效, 先用这个保证能用
            output: suo5
          - os: ubuntu-latest
            platform: linux/amd64
            output: suo5-gui-linux
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Bump manifest version
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: gui
        run: node version.js ${{ github.ref_name }}
      - run: npm install && npm run build
        working-directory: gui/frontend
      - uses: dAppServer/wails-build-action@v2
        with:
          build-name: ${{ matrix.output }}
          build-platform: ${{ matrix.platform }}
          app-working-directory: gui
          go-version: '1.21'
          package: false
      - if: runner.os == 'macOS'
        shell: bash
        working-directory: gui
        run: |
          rm -rf ./build/bin/${{ matrix.output }}.app.zip
          ditto -c -k --keepParent ./build/bin/${{matrix.output}}.app ./build/bin/${{matrix.output}}.app.zip
          rm -rf ./build/bin/${{ matrix.output }}.app

      - uses: actions/upload-artifact@v2
        with:
          name: target
          path: gui/build/bin/*

  collect-release:
    name: Collect and release
    needs: [ build-binary, build-gui ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: target
          path: target
      - run: ls -al target && ls -R target/
      - working-directory: target
        run: |
          rm -rf suo5-amd64-installer.exe
          rm -rf suo5.pkg
          mv suo5.app.zip suo5-gui-darwin.app.zip
      - run: ls -al target && ls -R target/ && file target/
      - uses: actions/upload-artifact@v3
        with:
          name: target-release
          path: target/*

      # release assets
      - uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/*

---
name: Run go tests
on:
  push:
permissions:
  contents: read
jobs:
  go-test:
    name: Go Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - run: go mod download
      - run: go test $(go list ./... | grep -v /gui/ | grep -v /tests/)

  build-binary:
    name: Build Test Binary
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - run: go build -trimpath -ldflags ""-w -s -extldflags '-static'"" -o suo5
      - uses: actions/upload-artifact@v3
        with:
          name: test-target
          path: suo5

  resin-test:
    name: Resin
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: expertsystems/resin
            mount: /var/resin/webapps/ROOT/assets
    env:
      SUO5_JSP_URL: http://127.0.0.1:8080/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:8080/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
      - run: |
          set -ex
          docker run -it --rm -d -p8080:8080 -v ${{ github.workspace }}/assets:${{ matrix.mount }} ${{ matrix.image }}
          bash ./.github/workflows/ready.sh ${{ env.SUO5_JSP_URL }} 30
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half

  jetty-test:
    name: Jetty
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - jetty:9.4.30-jdk8
          - jetty:9.4.30-jdk11
          - jetty:9.4-jdk8
          - jetty:9.4-jdk11
          - jetty:9.4-jdk17
          - jetty:9.4-jdk21
          - jetty:10.0.1-jdk11
          - jetty:10.0-jdk11
          - jetty:10.0-jdk17
          - jetty:10.0-jdk21
          - jetty:11.0.1-jdk11
          - jetty:11.0-jdk11
          - jetty:11.0-jdk17
          - jetty:11.0-jdk21
        mount:
          - /var/lib/jetty/webapps/ROOT/assets
    env:
      SUO5_JSP_URL: http://127.0.0.1:8080/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:8080/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
      - run: |
          set -ex
          docker run -it --rm -d -p8080:8080 -v ${{ github.workspace }}/assets:${{ matrix.mount }} ${{ matrix.image }}
          bash ./.github/workflows/ready.sh ${{ env.SUO5_JSP_URL }} 30
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half 
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half 

  jboss-test:
    name: JBoss
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: vulhub/jboss:as-4.0.5
            mount: /opt/jboss/jboss4/server/default/deploy/jbossweb-tomcat55.sar/ROOT.war/assets
          - image: vulhub/jboss:as-6.1.0
            mount: /jboss-6.1.0.Final/server/default/deploy/ROOT.war/assets
    env:
      SUO5_JSP_URL: http://127.0.0.1:8080/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:8080/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
      - run: |
          set -ex
          docker run -it --rm -d -p8080:8080 -v ${{ github.workspace }}/assets:${{ matrix.mount }} ${{ matrix.image }}
          bash ./.github/workflows/ready.sh ${{ env.SUO5_JSP_URL }} 30
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half

  websphere-test:
    name: WebSphere
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - websphere-liberty:23.0.0.3-full-java8-ibmjava
          - websphere-liberty:23.0.0.4-full-java11-openj9
          - websphere-liberty:22.0.0.9-full-java11-openj9
          - websphere-liberty:22.0.0.12-full-java17-openj9
        deploy:
          - /config/dropins
    env:
      SUO5_JSP_URL: http://127.0.0.1:9080/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:9080/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
        with:
          jar: true
      - run: |
          set -ex
          docker run -it --rm -d -p9080:9080 --name webshpere-test \
            -v ${{ github.workspace }}/assets:${{ matrix.deploy }} \
            ${{ matrix.image }}
          docker ps -a
          bash ./.github/workflows/ready.sh http://127.0.0.1:9080 60
          sleep 10
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half

  tongweb-test:
    name: TongWeb
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: boyingking/tongweb-auto
            deploy: /home/tw6/tongweb6/applications/console/assets
    env:
      SUO5_JSP_URL: http://127.0.0.1:9060/console/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:9060/console/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
        with:
          jar: true
      - run: |
          set -ex
          docker run -it --rm -d -p9060:9060 --name tongweb-test \
            -v ${{ github.workspace }}/assets:${{ matrix.deploy }} \
            ${{ matrix.image }}
          docker ps -a
          bash ./.github/workflows/ready.sh http://127.0.0.1:9060 30
          sleep 10
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -no-gzip
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full -no-gzip
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half -no-gzip
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -no-gzip
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full -no-gzip
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half -no-gzip
  

  weblogic-test:
    name: Weblogic
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - container-registry.oracle.com/middleware/weblogic:12.2.1.3
          - container-registry.oracle.com/middleware/weblogic:12.2.1.3-ol8-210214
          - container-registry.oracle.com/middleware/weblogic:12.2.1.4
          - container-registry.oracle.com/middleware/weblogic:12.2.1.4-ol8-210214
          - container-registry.oracle.com/middleware/weblogic:14.1.1.0-11
          - container-registry.oracle.com/middleware/weblogic:14.1.1.0-11-ol8
        deploy:
          - /u01/oracle/user_projects/domains/base_domain/autodeploy/
        include:
          - image: vulhub/weblogic:10.3.6.0-2017
            deploy: /root/Oracle/Middleware/user_projects/domains/base_domain/autodeploy/
    env:
      SUO5_JSP_URL: http://127.0.0.1:7001/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:7001/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
        with:
          jar: true
      - run: |
          echo ${password} | docker login -u ${username} --password-stdin container-registry.oracle.com
        env:
          username: ${{ secrets.OCR_USERNAME }}
          password: ${{ secrets.OCR_PASSWORD }}
      - run: |
          set -ex
          mkdir properties
          printf ""username=weblogic\npassword=weblogic123\n"" > ./properties/domain.properties
          docker run -it --rm -d -p7001:7001 --name weblogic-test \
            -e PRODUCTION_MODE=dev \
            -v ${{ github.workspace }}/properties:/u01/oracle/properties \
            ${{ matrix.image }}
          docker ps -a
          bash ./.github/workflows/ready.sh http://127.0.0.1:7001 60
          docker cp ./assets/assets.war weblogic-test:${{ matrix.deploy }}
          sleep 10
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half

  tomcat-test:
    name: Tomcat
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - andreptb/tomcat:6.0.45-jdk6
          - andreptb/tomcat:6.0.48-jdk6
          - andreptb/tomcat:6.0.44-jdk7
          - andreptb/tomcat:7.0.64-jdk7
          - andreptb/tomcat:7.0.64-jdk8
          - andreptb/tomcat:8.0.26-jdk7
          - andreptb/tomcat:9.0.10
          - tomcat:6.0.41-jre7
          - tomcat:6.0-jre7
          - tomcat:6.0-jre8
          - tomcat:7.0.56-jre7
          - tomcat:7.0-jre7
          - tomcat:7.0-jre8
          - tomcat:8.0.14-jre7
          - tomcat:8.0-jre7
          - tomcat:8.0-jre8
          - tomcat:8.5.0-jre8
          - tomcat:8.5.0-jre8
          - tomcat:8.5-jre8
          - tomcat:8.5-jre11
          - tomcat:8.5-jre17
          - tomcat:8.5-jre21
          - tomcat:9.0.1-jre8
          - tomcat:9.0-jre8
          - tomcat:9.0-jre11
          - tomcat:9.0-jre17
          - tomcat:9.0-jre21
          - tomcat:10.0.0-jdk8
          - tomcat:10.0-jre8
          - tomcat:10.0-jre11
          - tomcat:10.0-jre17
          - tomcat:10.1.0-jre11
          - tomcat:10.1-jre11
          - tomcat:10.1-jre17
          - tomcat:10.1-jre21
        mount:
          - /usr/local/tomcat/webapps/ROOT/assets
        jspx:
          - true
        include:
          - image: nortthon/tomcat5
            mount: /opt/tomcat/webapps/ROOT/assets
            jspx: true
          - image: consol/tomcat-4.1
            mount: /opt/tomcat/webapps/ROOT/assets
            jspx: false
    env:
      SUO5_JSP_URL: http://127.0.0.1:8080/assets/suo5.jsp
      SUO5_JSPX_URL: http://127.0.0.1:8080/assets/suo5.jspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
      - run: |
          set -ex
          docker run -it --rm -d -p8080:8080 -v ${{ github.workspace }}/assets:${{ matrix.mount }} ${{ matrix.image }}
          bash ./.github/workflows/ready.sh ${{ env.SUO5_JSP_URL }} 30
          curl -v ${{ env.SUO5_JSP_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode full
          ./suo5 -debug -t ${{ env.SUO5_JSP_URL }} -T https://www.bing.com -mode half
          if [ ""${{ matrix.jspx }}"" = ""true"" ]; then
            ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com
            ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode full
            ./suo5 -debug -t ${{ env.SUO5_JSPX_URL }} -T https://www.bing.com -mode half
          fi

  donet-test:
    name: DoNet
    needs: build-binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: junalmeida/mono-web:latest
            mount: /var/www/sample-app
    env:
      SUO5_ASPX_URL: http://127.0.0.1:8080/suo5.aspx
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions
      - run: |
          set -ex
          mkdir -p config
          cat << EOF > ./config/sample.webapp
          <?xml version=""1.0"" encoding=""UTF-8""?>
          <apps>
            <web-application>
            <name>root</name>
            <vhost>*</vhost>
            <vport>-1</vport>
            <vpath>/</vpath>
            <path>/var/www/sample-app/</path>
            </web-application> 
          </apps>
          EOF
          cat config/sample.webapp
          cp ./assets/.net/suo5.aspx ./assets/suo5.aspx
          docker run -it --rm -d -p8080:80 -v ${{ github.workspace }}/config:/etc/mono/pools -v ${{ github.workspace }}/assets:${{ matrix.mount }} ${{ matrix.image }}
          bash ./.github/workflows/ready.sh ${{ env.SUO5_ASPX_URL }} 30
          curl -v ${{ env.SUO5_ASPX_URL }}
          chmod +x ./suo5
          ./suo5 -debug -t ${{ env.SUO5_ASPX_URL }} -T https://www.bing.com
          ./suo5 -debug -t ${{ env.SUO5_ASPX_URL }} -T https://www.bing.com -mode half

---
"
coderabbit214;bibliothecarius;coderabbit214/bibliothecarius;https://github.com/coderabbit214/bibliothecarius;https://api.github.com/repos/coderabbit214/bibliothecarius;main;26/03/2023 11:26;19/04/2024 14:45;FALSE;
a616567126;GPT-WEB-JAVA;a616567126/GPT-WEB-JAVA;https://github.com/a616567126/GPT-WEB-JAVA;https://api.github.com/repos/a616567126/GPT-WEB-JAVA;Mj-plus;28/03/2023 02:26;22/04/2024 09:15;FALSE;
vivo;MoonBox;vivo/MoonBox;https://github.com/vivo/MoonBox;https://api.github.com/repos/vivo/MoonBox;main;05/01/2023 04:03;21/04/2024 15:37;TRUE;"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""main"" ]
  schedule:
    - cron: '43 23 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo ""Run, Build Application using script""
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: ""/language:${{matrix.language}}""

---
"
0x727;BypassPro;0x727/BypassPro;https://github.com/0x727/BypassPro;https://api.github.com/repos/0x727/BypassPro;main;06/04/2023 12:22;18/04/2024 11:05;FALSE;
Stirling-Tools;Stirling-PDF;Stirling-Tools/Stirling-PDF;https://github.com/Stirling-Tools/Stirling-PDF;https://api.github.com/repos/Stirling-Tools/Stirling-PDF;main;27/01/2023 19:22;22/04/2024 13:41;TRUE;"name: ""Build repo""

on:
  push:
    branches: [""main""]
    paths-ignore:
      - "".github/**""
      - ""**/*.md""
  pull_request:
    branches: [""main""]
    paths-ignore:
      - "".github/**""
      - ""**/*.md""

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ""17""
          distribution: ""temurin""

      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.6

      - name: Build with Gradle
        run: ./gradlew build --no-build-cache

---
name: License Report Workflow

on:
  push:
    branches:
      - main
    paths:
      - ""build.gradle""

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-license-report:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ""17""
          distribution: ""adopt""

      - uses: gradle/actions/setup-gradle@v3

      - name: Run Gradle Command
        run: ./gradlew clean generateLicenseReport

      - name: Move and Rename License File
        run: |
          mv build/reports/dependency-license/index.json src/main/resources/static/3rdPartyLicenses.json

      - name: Set up git config
        run: |
          git config --global user.email ""GitHub Action <action@github.com>""
          git config --global user.name ""GitHub Action <action@github.com>""

      - name: Run git add
        run: |
          git add src/main/resources/static/3rdPartyLicenses.json
          git diff --staged --quiet || echo ""CHANGES_DETECTED=true"" >> $GITHUB_ENV

      - name: Create Pull Request
        if: env.CHANGES_DETECTED == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: ""Update 3rd Party Licenses""
          committer: GitHub Action <action@github.com>
          author: GitHub Action <action@github.com>
          signoff: true
          branch: update-3rd-party-licenses
          title: ""Update 3rd Party Licenses""
          body: |
            Auto-generated by [create-pull-request][1]
            [1]: https://github.com/peter-evans/create-pull-request
          draft: false
          delete-branch: true

---
name: Push Docker Image with VersionNumber

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main

permissions:
  contents: read
  packages: write
jobs:
  push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ""17""
          distribution: ""temurin""

      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.6

      - name: Run Gradle Command
        run: ./gradlew clean build
        env:
          DOCKER_ENABLE_SECURITY: false

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version number
        id: versionNumber
        run: echo ""versionNumber=$(./gradlew printVersion --quiet | tail -1)"" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_API }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Convert repository owner to lowercase
        id: repoowner
        run: echo ""lowercase=$(echo ${{ github.repository_owner }} | awk '{print tolower($0)}')"" >> $GITHUB_OUTPUT

      - name: Generate tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/s-pdf
            ghcr.io/${{ steps.repoowner.outputs.lowercase }}/s-pdf
          tags: |
            type=raw,value=${{ steps.versionNumber.outputs.versionNumber }},enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=alpha,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push main Dockerfile
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: VERSION_TAG=${{ steps.versionNumber.outputs.versionNumber }}
          platforms: linux/amd64,linux/arm64/v8

      - name: Generate tags ultra-lite
        id: meta2
        uses: docker/metadata-action@v5
        if: github.ref != 'refs/heads/main'
        with:
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/s-pdf
            ghcr.io/${{ steps.repoowner.outputs.lowercase }}/s-pdf
          tags: |
            type=raw,value=${{ steps.versionNumber.outputs.versionNumber }}-ultra-lite,enable=${{ github.ref == 'refs/heads/master' }}
            type=raw,value=latest-ultra-lite,enable=${{ github.ref == 'refs/heads/master' }}

      - name: Build and push Dockerfile-ultra-lite
        uses: docker/build-push-action@v5
        if: github.ref != 'refs/heads/main'
        with:
          context: .
          file: ./Dockerfile-ultra-lite
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta2.outputs.tags }}
          labels: ${{ steps.meta2.outputs.labels }}
          build-args: VERSION_TAG=${{ steps.versionNumber.outputs.versionNumber }}
          platforms: linux/amd64,linux/arm64/v8

---
name: Release Artifacts

on:
  workflow_dispatch:
  release:
    types: [created]
permissions:
  contents: write
  packages: write
jobs:
  push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        enable_security: [true, false]
        include:
          - enable_security: true
            file_suffix: ""-with-login""
          - enable_security: false
            file_suffix: """"
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ""17""
          distribution: ""temurin""

      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 7.6

      - name: Generate jar (With Security=${{ matrix.enable_security }})
        run: ./gradlew clean createExe
        env:
          DOCKER_ENABLE_SECURITY: ${{ matrix.enable_security }}

      - name: Get version number
        id: versionNumber
        run: echo ""versionNumber=$(./gradlew printVersion --quiet | tail -1)"" >> $GITHUB_OUTPUT

      - name: Rename binarie
        if: matrix.file_suffix != ''
        run: cp ./build/launch4j/Stirling-PDF.exe ./build/launch4j/Stirling-PDF${{ matrix.file_suffix }}.exe

      - name: Upload Assets binarie
        uses: actions/upload-artifact@v4
        with:
          path: ./build/launch4j/Stirling-PDF${{ matrix.file_suffix }}.exe
          name: Stirling-PDF${{ matrix.file_suffix }}.exe
          overwrite: true
          retention-days: 1
          if-no-files-found: error
      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: ./build/launch4j/Stirling-PDF${{ matrix.file_suffix }}.exe

      - name: Rename jar binaries
        run: cp ./build/libs/Stirling-PDF-${{ steps.versionNumber.outputs.versionNumber }}.jar ./build/libs/Stirling-PDF${{ matrix.file_suffix }}.jar

      - name: Upload Assets jar binaries
        uses: actions/upload-artifact@v4
        with:
          path: ./build/libs/Stirling-PDF${{ matrix.file_suffix }}.jar
          name: Stirling-PDF${{ matrix.file_suffix }}.jar
          overwrite: true
          retention-days: 1
          if-no-files-found: error

      - name: Upload jar binaries to release
        uses: softprops/action-gh-release@v2
        with:
          files: ./build/libs/Stirling-PDF${{ matrix.file_suffix }}.jar

---
name: Update Swagger

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: ""17""
          distribution: ""temurin""

      - uses: gradle/actions/setup-gradle@v3

      - name: Generate Swagger documentation
        run: ./gradlew generateOpenApiDocs

      - name: Upload Swagger Documentation to SwaggerHub
        run: ./gradlew swaggerhubUpload
        env:
          SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}

      - name: Get version number
        id: versionNumber
        run: echo ""versionNumber=$(./gradlew printVersion --quiet | tail -1)"" >> $GITHUB_OUTPUT

      - name: Set API version as published and default on SwaggerHub
        run: |
          curl -X PUT -H ""Authorization: ${SWAGGERHUB_API_KEY}"" ""https://api.swaggerhub.com/apis/Frooodle/Stirling-PDF/${{ steps.versionNumber.outputs.versionNumber }}/settings/lifecycle"" -H  ""accept: application/json"" -H  ""Content-Type: application/json"" -d ""{\""published\"":true,\""default\"":true}""
        env:
          SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}

---
name: Sync Files

on:
  push:
    branches:
      - main
    paths:
      - ""build.gradle""
      - ""src/main/resources/messages_*.properties""

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ""3.x""
      - name: Install dependencies
        run: pip install pyyaml
      - name: Sync versions
        run: python .github/scripts/gradle_to_chart.py
      - name: Set up git config
        run: |
          git config --global user.email ""GitHub Action <action@github.com>""
          git config --global user.name ""GitHub Action <action@github.com>""
      - name: Run git add
        run: |
          git add .
          git diff --staged --quiet || git commit -m "":floppy_disk: Sync Versions
          > Made via sync_files.yml"" || echo ""no changes""
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update files
          committer: GitHub Action <action@github.com>
          author: GitHub Action <action@github.com>
          signoff: true
          branch: sync_version
          title: "":floppy_disk: Update Version""
          body: |
            Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          draft: false
          delete-branch: true
  sync-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ""3.x""
      - name: Sync README
        run: python scripts/counter_translation.py
      - name: Set up git config
        run: |
          git config --global user.email ""GitHub Action <action@github.com>""
          git config --global user.name ""GitHub Action <action@github.com>""
      - name: Run git add
        run: |
          git add .
          git diff --staged --quiet || git commit -m "":memo: Sync README
          > Made via sync_files.yml"" || echo ""no changes""
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Update files
          committer: GitHub Action <action@github.com>
          author: GitHub Action <action@github.com>
          signoff: true
          branch: sync_readme
          title: "":memo: Update README: Translation Progress Table""
          body: |
            Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          draft: false
          delete-branch: true

---
name: Docker Compose Tests

on:
  pull_request:
    paths:
      - ""src/**""
      - ""**.gradle""
      - ""!src/main/java/resources/messages*""
      - ""exampleYmlFiles/**""
      - ""Dockerfile""
      - ""Dockerfile**""

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          java-version: ""17""
          distribution: ""adopt""

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo curl -SL ""https://github.com/docker/compose/releases/download/v2.26.1/docker-compose-$(uname -s)-$(uname -m)"" -o /usr/local/bin/docker-compose
          # sudo chmod +x /usr/local/bin/docker-compose

      - name: Run Docker Compose Tests
        run: |
          chmod +x ./test.sh
          ./test.sh

---
"
MCRcortex;nvidium;MCRcortex/nvidium;https://github.com/MCRcortex/nvidium;https://api.github.com/repos/MCRcortex/nvidium;dev;13/04/2023 03:04;19/04/2024 01:49;FALSE;
akto-api-security;akto;akto-api-security/akto;https://github.com/akto-api-security/akto;https://api.github.com/repos/akto-api-security/akto;master;31/01/2023 10:07;22/04/2024 11:26;TRUE;"name: Akto Inventory

on:
  push:
    branches: [ flash-inventory-swagger ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - uses: actions/checkout@v2
      - name: Generate Akto OpenAPI specication file
        working-directory: ./.github/scripts
        env:
            AKTO_DASHBOARD_URL: https://flash.staging.akto.io
            AKTO_API_KEY: ${{secrets.AKTO_API_KEY}}
        run: |
          npm install axios
          node akto-inventory.js
      - name: Archive open_api spec
        uses: actions/upload-artifact@v3
        with:
          name: Akto OpenAPI Specification
          path: ./.github/scripts/akto_open_api.json

---
name: Push Release Notes to Beamer

on:
  workflow_dispatch

jobs:
  push-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get Latest Release
        id: get_latest_release
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests
          python3 - <<EOF
          import os
          import requests
          
          github_token = os.getenv('GITHUB_TOKEN')
          repo_owner = 'akto-api-security'
          repo_name = 'akto'
          headers = {'Authorization': f'Bearer {github_token}'}
          url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest'
          response = requests.get(url, headers=headers)
          data = response.json()

          tag_name = data.get('tag_name')
          description = data.get('body')
          description_lines = description.split('\n') if description else []
          description_lines = [line.strip() for line in description_lines if line.strip()]

          release_notes = '<ul>'
          if description_lines:
              first_line = description_lines[0].lstrip('#').strip()
              release_notes += f'<h3>{first_line}</h3>'
              for line in description_lines[1:-1]:  # Exclude the last line
                  release_notes += f'<li>{line[1:]}</li>'
          release_notes += '</ul>'
          release_notes2 = '<p>More...</p>'
          release_notes2 += '<ul></ul>'
          release_notes2 += '<p>'
          release_notes2 += '<a href=https://discord.com/invite/Wpc6xVME4s >'
          release_notes2 += '</a>'
          release_notes2 += '</p>'
          release_notes2 += '<ul>'
          release_notes2 += '<a href=https://discord.com/invite/Wpc6xVME4s ></a>'
          release_notes2 += '<li><a href=https://discord.com/invite/Wpc6xVME4s ></a><a href=https://discord.com/invite/Wpc6xVME4s >Join Discord </a>to know more</li>'
          release_notes2 += '<li>Star Akto on <a href=https://github.com/akto-api-security/akto>Github</a></li>'
          release_notes2 += '</ul>'
          release_notes = release_notes+release_notes2
      
          
          print(f""::set-output name=tag_name::{tag_name}"")
          print(f""::set-output name=release_notes::{release_notes}"")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Tag Name and Description
        run: |
          echo ""Tag Name: ${{ steps.get_latest_release.outputs.tag_name }}""
          echo ""Description: ${{ steps.get_latest_release.outputs.release_notes }}""

      - name: Push Release Notes to Beamer
        env:
          BEAMER_API_TOKEN: ${{ secrets.BEAMER_API_KEY }}
          RELEASE_TAG: ${{ steps.get_latest_release.outputs.tag_name }}
          RELEASE_NOTES: ${{ steps.get_latest_release.outputs.release_notes}}
        run: |
          # Push release notes to Beamer
          curl --request POST \
            --url https://api.getbeamer.com/v0/posts \
            --header ""Content-Type: application/json"" \
            --header ""Beamer-Api-Key: $BEAMER_API_TOKEN"" \
            --data ""{
              \""title\"": [ \""Release $RELEASE_TAG\"" ],
              \""content\"": [ \""$RELEASE_NOTES\"" ],
              \""category\"": \""new\"",
              \""publish\"": true
            }""
---
name: Push Release Notes to Beamer and Discord

on:
  workflow_dispatch

jobs:
  push-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Get Latest Release
        id: get_latest_release
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests
          python3 - <<EOF
          import os
          import requests
          
          github_token = os.getenv('GITHUB_TOKEN')
          repo_owner = 'akto-api-security'
          repo_name = 'akto'
          headers = {'Authorization': f'Bearer {github_token}'}
          url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest'
          response = requests.get(url, headers=headers)
          data = response.json()

          tag_name = data.get('tag_name')
          description = data.get('body')
          description_lines = description.split('\n') if description else []
          description_lines = [line.strip() for line in description_lines if line.strip()]

          release_notes = '<ul>'
          if description_lines:
              first_line = description_lines[0].lstrip('#').strip()
              release_notes += f'<h3>{first_line}</h3>'
              for line in description_lines[1:-1]:  # Exclude the last line
                  if 'by' in line:
                      line = line.split('by', 1)[0].strip()
                  release_notes += f'<li>{line[1:]}</li>'
          release_notes += '</ul>'
          release_notes2 = '<p></p>Have questions? Ask on <a href=https://discord.com/invite/Wpc6xVME4s >Discord</a> or our <a href=https://community.akto.io >Community page</a>'
          release_notes = release_notes+release_notes2
      
          
          print(f""::set-output name=tag_name::{tag_name}"")
          print(f""::set-output name=release_notes::{release_notes}"")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Tag Name and Description
        run: |
          echo ""Tag Name: ${{ steps.get_latest_release.outputs.tag_name }}""
          echo ""Description: ${{ steps.get_latest_release.outputs.release_notes }}""

      - name: Push Release Notes to Beamer
        env:
          BEAMER_API_TOKEN: ${{ secrets.BEAMER_API_KEY }}
          RELEASE_TAG: ${{ steps.get_latest_release.outputs.tag_name }}
          RELEASE_NOTES: ${{ steps.get_latest_release.outputs.release_notes}}
        run: |
          # Push release notes to Beamer
          curl --request POST \
            --url https://api.getbeamer.com/v0/posts \
            --header ""Content-Type: application/json"" \
            --header ""Beamer-Api-Key: $BEAMER_API_TOKEN"" \
            --data ""{
              \""title\"": [ \""Release $RELEASE_TAG\"" ],
              \""content\"": [ \""$RELEASE_NOTES\"" ],
              \""category\"": \""new\"",
              \""publish\"": true
            }""
            
  notify_discord:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Get Latest Release
        id: get_latest_release
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests
          python3 - <<EOF
          import os
          import requests
          import json

          github_token = os.getenv('GITHUB_TOKEN')
          repo_owner = 'akto-api-security'
          repo_name = 'akto'
          headers = {'Authorization': f'Bearer {github_token}'}
          url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest'
          response = requests.get(url, headers=headers)
          data = response.json()
          tag = data.get('tag_name')
          description = data.get('body')
          # Replace anything after ""by"" in each line with a "".""
          if description:
              description_lines = description.split('\n')
              for i in range(len(description_lines)):
                  if 'by' in description_lines[i]:
                      description_lines[i] = description_lines[i].split('by', 1)[0].strip() + '.'
                  if ""'"" in description_lines[i]:
                      description_lines[i] = description_lines[i].replace(""'"", ""''"")
              # Remove the last line from the description
              description_lines = description_lines[:-1]
              description = '\n'.join(description_lines) 
          print(f""::set-output name=tag::{tag}"")
          print(f""::set-output name=description::{json.dumps(description)}"")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send release message to Discord
        run: |
          curl -X POST -H ""Content-Type: application/json"" -d '{
            ""content"": """",
            ""embeds"": [
              {
                ""title"": ""Release ${{ steps.get_latest_release.outputs.tag }}"",
                ""description"": ${{ steps.get_latest_release.outputs.description }}
              }
            ]
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}
          
  notify_slack:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Get Latest Release
        id: get_latest_release
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests
          python3 - <<EOF
          import os
          import requests
          import json
          
          github_token = os.getenv('GITHUB_TOKEN')
          repo_owner = 'akto-api-security'
          repo_name = 'akto'
          headers = {'Authorization': f'Bearer {github_token}'}
          url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest'
          response = requests.get(url, headers=headers)
          data = response.json()

          tag_name = data.get('tag_name')
          description = data.get('body').replace(""'"", """")
          print(""description"", description)
          description_lines = description.split('\n') if description else []
          description_lines = [line.strip() for line in description_lines if line.strip()]
          
          slack_message_body = ""{ 'blocks': [ { 'type': 'header', 'text': { 'type': 'plain_text', 'text': '""
          slack_message_body += repo_name
          slack_message_body += ""' } }, { 'type': 'section', 'text': { 'type': 'mrkdwn', 'text': '""
          slack_message_body += tag_name
          slack_message_body += ""' } }, { 'type': 'section', 'text': { 'type': 'mrkdwn', 'text': '""
          slack_message_body += ('%0A'.join(description_lines))[:2000]
          slack_message_body += ""' } } ] }""
          slack_message_body = slack_message_body.replace(""'"", ""\"""")

          print(""slack_message_body"", slack_message_body)
          
          print(f""::set-output name=tag_name::{tag_name}"")
          print(f""::set-output name=slack_message_body::{slack_message_body}"")
          EOF
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send to Slack
        run: |
          echo ""Tag Name: ${{ steps.get_latest_release.outputs.tag_name }}""
          payload=`echo ${{ toJSON(steps.get_latest_release.outputs.slack_message_body) }}`
          curl -X POST -H ""Content-Type: application/json"" -d ""${payload}"" ${{secrets.SLACK_WEBHOOK_URL}}          

---
# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ ""master"" ]
  schedule:
    - cron: '22 0 * * 1'

jobs:
  analyze:
    name: Analyze
    runs-on: 'ubuntu-latest'
    timeout-minutes: ${{ (matrix.language == 'java' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Setup Bolt
      uses: koalalab-inc/bolt@v1
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo ""Run, Build Application using script""
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: ""/language:${{matrix.language}}""

---
name: Python Script Runner with CSV Report

on:
  workflow_dispatch

jobs:
  csv-update:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run script
        id: run_script
        run: |
          python3 -m pip install --upgrade pip

          python3 -m pip install requests==2.31.0
          python3 -m pip install requests-oauthlib==1.3.1
          python3 -m pip install requests-toolbelt==1.0.0
          python3 -m pip install PyYAML==6.0
          python3 -m pip install gitdb==4.0.10
          python3 -m pip install github3.py==4.0.1
          python3 -m pip install GitPython==3.1.31
          python3 -m pip install PyGithub==1.59.0
          python3 -m pip install aiohttp==3.8.1

          python3 - <<EOF

          import os
          import csv
          import requests
          import yaml
          import smtplib
          from github import Github
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          from email.mime.application import MIMEApplication


          REPOSITORY_OWNER = 'akto-api-security'
          REPOSITORY_NAME = 'akto'
          BRANCH_NAME = '${{ github.ref_name }}'
          FOLDER_PATH = 'apps/dashboard/src/main/resources/inbuilt_test_yaml_files'
          FILE_EXTENSION = '.yaml'

          EMAIL_RECIPIENT = os.getenv(""EMAIL_RECIPIENT"")
          EMAIL_SUBJECT = f'CSV Report of {REPOSITORY_OWNER}/{REPOSITORY_NAME}'

          CSV_FILE_PATH = f'{REPOSITORY_OWNER}__{REPOSITORY_NAME}.csv'


          def fetch_yaml_data(access_token, yaml_url):
              g = Github(access_token)

              repository_parts = yaml_url.replace(""https://github.com/"", """").split(""/"")
              file_path = f""{FOLDER_PATH}/{repository_parts[-1]}""

              repository = g.get_repo(f""{REPOSITORY_OWNER}/{REPOSITORY_NAME}"")

              try:
                  print(""trying to download: "", yaml_url)
                  rr = requests.get(yaml_url, allow_redirects=True)
                  data = rr.content
                  print(""received: "", data)
                  yaml_data = yaml.safe_load(data)
                  
                  print(f""Successfully fetched the template: {repository_parts[-1]}"")
                  return yaml_data, data
              except Exception as e:
                  print(f""Failed to fetch YAML data for {repository_parts[-1]}"")
                  print(f""Error: {str(e)}"")
                  return None, None


          def write_to_csv(csv_writer, yaml_data, yaml_content):
              column = []
              column.append(yaml_data['info']['name'])
              column.append(yaml_data['info']['name'])
              column.append(yaml_data['info']['description'])
              column.append(yaml_data['info']['details'])
              column.append(yaml_data['info']['impact'])
              column.append(yaml_data['info']['category']['displayName'])
              column.append(yaml_data['info']['severity'])
              print(""column: "", column)
              references = []
  
              if 'references' in yaml_data['info']:
                  column.append(yaml_data['info']['references'])
                  references = yaml_data['info']['references']
                  if references is None:
                    references = []
                  
              else:
                  column.append("""")

              print(""references: "", references)
              column.append(yaml_content)

              url_path = ''
              column.append(url_path)
              column.append(yaml_data['id'])
              
              rlink1 = """" 
              
              if len(references) >= 1:
                  rlink1 = references[0]
              
              print(""rlink1"", rlink1)


              rlink2 = """" 
              
              if len(references) >= 2:
                  rlink2 = references[1]
              
              print(""rlink2"", rlink2)


              rlink3 = """" 
              
              if len(references) >= 3:
                  rlink3 = references[2]
              
              print(""rlink3"", rlink3)


              column.append(rlink1)
              column.append(rlink2)
              column.append(rlink3)
              
              csv_writer.writerow(column)


          def fetch_yaml_files(api_url, access_token):
              try:
                  response = requests.get(api_url, headers={'Authorization': f'Bearer {access_token}'})
                  if response.status_code == 200:
                      return response.json()
                  else:
                      print(response.status_code)
                      print(""Failed to retrieve the repository contents."")
              except requests.exceptions.RequestException as e:
                  print(""Error occurred while fetching repository contents."")
                  print(f""Error: {str(e)}"")
              return None


          def fetch_all_yaml(api_url, access_token, csv_file_path):
              yaml_files = fetch_yaml_files(api_url, access_token)
              if yaml_files:
                  with open(csv_file_path, 'w', newline='') as csv_file:
                      writer = csv.writer(csv_file)
                      writer.writerow(['Name', 'Slug', 'Description', 'Details', 'Impact', 'OWASP Category', 'Severity', 'References', 'Content', 'URL Path', 'Test_ID', 'RLink1', 'RLink2', 'RLink3'])

                      for yaml_file in yaml_files:
                          yaml_url = yaml_file['download_url']
                          yaml_data, yaml_content = fetch_yaml_data(access_token, yaml_url)
                          if yaml_data:
                              write_to_csv(writer, yaml_data, yaml_content)
                  print(f""CSV file '{csv_file_path}' has been generated successfully."")
                  send_email(csv_file_path)


          def send_email(csv_file_path):
              msg = MIMEMultipart()
              msg['From'] = os.getenv(""SMTP_USERNAME"")
              msg['To'] = EMAIL_RECIPIENT
              msg['Subject'] = EMAIL_SUBJECT

              body = 'Please find the attached CSV report.'
              msg.attach(MIMEText(body, 'plain'))

              with open(csv_file_path, 'rb') as attachment:
                  part = MIMEApplication(attachment.read())
                  part.add_header('Content-Disposition', 'attachment', filename=csv_file_path)
                  msg.attach(part)

              smtp_server = 'smtp.gmail.com'
              smtp_port = 587
              smtp_username = os.getenv(""SMTP_USERNAME"")
              smtp_password = os.getenv(""SMTP_PASSWORD"")

              with smtplib.SMTP(smtp_server, smtp_port) as server:
                  server.starttls()
                  server.login(smtp_username, smtp_password)
                  server.send_message(msg)

              print(""Email sent successfully."")


          def main():
              access_token = os.getenv(""GITHUB_ACCESS_TOKEN"")
              api_url = f'https://api.github.com/repos/{REPOSITORY_OWNER}/{REPOSITORY_NAME}/contents/{FOLDER_PATH}?ref={BRANCH_NAME}'
              fetch_all_yaml(api_url, access_token, CSV_FILE_PATH)


          if __name__ == ""__main__"":
              main()

          EOF
        env:
          EMAIL_RECIPIENT: ${{ secrets.EMAIL_RECIPIENT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.MY_TOKEN }}
   

---

name: Release messages to discord announcement channel

on: 
  release:
    types:
      - published

jobs:
  run_main:
    runs-on: ubuntu-18.04
    name: Sends message
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Sending message
        uses: nhevia/discord-styled-releases@main
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}

---
name: End to end tests

on:
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      - name: Checkout e2e_tests tools
        uses: actions/checkout@v4
        with:
          repository: akto-api-security/e2e_testing
          token: ${{ secrets.MY_TOKEN }}
          path: e2e_testing
      - name: switch to testing 
        run: cd e2e_testing && ls

---
name: Production

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release_version:
        required: true  
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          architecture: x64

      - uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Download Akto templates zip and PII files
        working-directory: ./apps/dashboard/src/main/resources
        run: |
          wget -O tests-library-master.zip https://github.com/akto-api-security/tests-library/archive/refs/heads/master.zip
          wget -O general.json https://raw.githubusercontent.com/akto-api-security/pii-types/master/general.json
          wget -O fintech.json https://raw.githubusercontent.com/akto-api-security/akto/master/pii-types/fintech.json
          wget -O filetypes.json https://raw.githubusercontent.com/akto-api-security/akto/master/pii-types/filetypes.json

      - name: Prepare Dashboard polaris UI
        working-directory: ./apps/dashboard/web/polaris_web
        run: npm install && export RELEASE_VERSION=${{github.event.inputs.release_version}} && npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-south-1

      - name: Deploy polaris site to S3 bucket
        run: aws s3 sync ./apps/dashboard/web/polaris_web/web/dist s3://dashboard-on-cdn/polaris_web/${{github.event.inputs.release_version}}/dist --delete
      - run: mvn package -Dakto-image-tag=${{ github.event.inputs.release_version }} -Dakto-build-time=$(eval ""date +%s"") -Dakto-release-version=${{github.event.inputs.release_version}}
      - name: DockerHub login
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 

      - name: Build, tag, and push the image to DockerHub
        id: build-image-dockerhub
        env:
          ECR_REGISTRY: aktosecurity
          ECR_REPOSITORY: akto-api-security
          IMAGE_TAG_1: local
          IMAGE_TAG_2: ${{ github.event.inputs.release_version }}_local
        run: |
          docker buildx create --use
          # Build a docker container and push it to DockerHub 
          cd apps/dashboard
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG_1 -t $ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG_2 . --push
          echo ""::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY-dashboard:$IMAGE_TAG""   
          cd ../testing
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-api-testing:$IMAGE_TAG_1 -t $ECR_REGISTRY/akto-api-testing:$IMAGE_TAG_2 . --push
          echo ""::set-output name=image::$ECR_REGISTRY/akto-api-testing:$IMAGE_TAG""       
          cd ../testing-cli
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-api-testing-cli:$IMAGE_TAG_1 -t $ECR_REGISTRY/akto-api-testing-cli:$IMAGE_TAG_2 . --push
          echo ""::set-output name=image::$ECR_REGISTRY/akto-api-testing-cli:$IMAGE_TAG""
          cd ../billing
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-billing:$IMAGE_TAG_1 -t $ECR_REGISTRY/akto-billing:$IMAGE_TAG_2 . --push
          echo ""::set-output name=image::$ECR_REGISTRY/akto-billing:$IMAGE_TAG""
          cd ../internal
          docker buildx build --platform linux/arm64/v8,linux/amd64 -t $ECR_REGISTRY/akto-internal:$IMAGE_TAG_1 -t $ECR_REGISTRY/akto-internal:$IMAGE_TAG_2 . --push
          echo ""::set-output name=image::$ECR_REGISTRY/akto-internal:$IMAGE_TAG""
      - name: Push git tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ github.event.inputs.release_version }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1.12.0
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          omitBody: true
      - name: Send Github release notification to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              ""text"": ""Akto Open Source v${{ github.event.inputs.release_version }} released!""
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

---
name: Release only dashboard UI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      release_version:
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          architecture: x64

      - uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Prepare Dashboard polaris UI
        working-directory: ./apps/dashboard/web/polaris_web
        run: npm install && export RELEASE_VERSION=${{github.event.inputs.release_version}} && npm run build
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-south-1

      - name: Deploy polaris site to S3 bucket
        run: aws s3 sync ./apps/dashboard/web/polaris_web/web/dist s3://dashboard-on-cdn/polaris_web/${{github.event.inputs.release_version}}/dist --delete

---
# Name of this GitHub Actions workflow.
name: Semgrep

on:
  # Scan changed files in PRs (diff-aware scanning):
  pull_request: {}
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Scan mainline branches and report all findings:
  push:
    branches: [""master""]
  # Schedule the CI job (this method uses cron syntax):
  schedule:
    - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.
    # It is recommended to change the schedule to a random time.

jobs:
  semgrep:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci 
    # If you are self-hosting, change the following `runs-on` value: 
    runs-on: ubuntu-latest

    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      - name: Setup Bolt
        uses: koalalab-inc/bolt@v1
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v3
      # Run the ""semgrep ci"" command on the command line of the docker image.
      - run: semgrep ci
        env:
          # Connect to Semgrep Cloud Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep Cloud Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

---
name: Staging

# Controls when the workflow will run
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          architecture: x64
      - uses: actions/setup-node@v2
        with:
          node-version: '17'
      - name: Convert github branch name to be compatible with docker tag name convention and generate tag name
        id: docker_tag
        run: echo ""IMAGE_TAG=a-$(echo ${{ github.ref_name }} | sed 's/[^a-zA-"
inotia00;mMicroG;inotia00/mMicroG;https://github.com/inotia00/mMicroG;https://api.github.com/repos/inotia00/mMicroG;main;22/04/2023 01:11;19/04/2024 15:57;FALSE;
novicezk;midjourney-proxy;novicezk/midjourney-proxy;https://github.com/novicezk/midjourney-proxy;https://api.github.com/repos/novicezk/midjourney-proxy;main;24/04/2023 15:43;22/04/2024 13:33;FALSE;
Geniusay;ChopperBot;Geniusay/ChopperBot;https://github.com/Geniusay/ChopperBot;https://api.github.com/repos/Geniusay/ChopperBot;master;27/04/2023 20:55;21/04/2024 07:47;FALSE;
carlrobertoh;CodeGPT;carlrobertoh/CodeGPT;https://github.com/carlrobertoh/CodeGPT;https://api.github.com/repos/carlrobertoh/CodeGPT;master;15/02/2023 12:27;22/04/2024 12:37;TRUE;"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ '**' ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Tests
        run: ./gradlew check

      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  verify:
    name: Verify Plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier

      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

---
"
huangPengL;ChatGPT-Java-FunAi;huangPengL/ChatGPT-Java-FunAi;https://github.com/huangPengL/ChatGPT-Java-FunAi;https://api.github.com/repos/huangPengL/ChatGPT-Java-FunAi;master;28/04/2023 08:33;21/04/2024 17:18;FALSE;
LaurieWired;JADXecute;LaurieWired/JADXecute;https://github.com/LaurieWired/JADXecute;https://api.github.com/repos/LaurieWired/JADXecute;main;14/03/2023 01:01;22/04/2024 04:52;TRUE;"name: Build Artifacts

on:
  push:
    branches: [ master, build-test ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 8

      - name: Set jadx version
        run: |
          JADX_LAST_TAG=$(git describe --abbrev=0 --tags)
          JADX_VERSION=""${JADX_LAST_TAG:1}.$GITHUB_RUN_NUMBER-${GITHUB_SHA:0:8}""
          echo ""JADX_VERSION=$JADX_VERSION"" >> $GITHUB_ENV

      - uses: burrunan/gradle-cache-action@v1
        name: Build with Gradle
        env:
          TERM: dumb
        with:
          arguments: clean dist copyExe

      - name: Save bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('jadx-{0}', env.JADX_VERSION) }}
          # Waiting fix for https://github.com/actions/upload-artifact/issues/39 to upload zip file
          # Upload unpacked files for now
          path: build/jadx/**/*
          if-no-files-found: error
          retention-days: 30

      - name: Save exe artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('jadx-gui-{0}-no-jre-win.exe', env.JADX_VERSION) }}
          path: build/*.exe
          if-no-files-found: error
          retention-days: 30

  build-win-bundle:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: oracle-actions/setup-java@v1
        with:
          release: 17

      - name: Print Java version
        shell: bash
        run: java -version

      - name: Set jadx version
        shell: bash
        run: |
          JADX_LAST_TAG=$(git describe --abbrev=0 --tags)
          JADX_VERSION=""${JADX_LAST_TAG:1}.$GITHUB_RUN_NUMBER-${GITHUB_SHA:0:8}""
          echo ""JADX_VERSION=$JADX_VERSION"" >> $GITHUB_ENV

      - uses: gradle/gradle-build-action@v2
        name: Build with Gradle
        env:
          TERM: dumb
        with:
          arguments: clean dist -PbundleJRE=true

      - name: Save exe bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ format('jadx-gui-{0}-with-jre-win', env.JADX_VERSION) }}
          path: jadx-gui/build/*-with-jre-win/*
          if-no-files-found: error
          retention-days: 30

---
name: Build Test

on:
  push:
    branches: [ master, build-test ]
  pull_request:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 8

      - uses: burrunan/gradle-cache-action@v1
        name: Build with Gradle
        env:
          TERM: dumb
        with:
          arguments: clean build dist copyExe --warning-mode=all

---
name: ""CodeQL""

on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    - cron: '0 9 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['java']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        queries: +security-extended
        languages: ${{ matrix.language }}

    # Don't build tests in jadx-core also skip tests execution and checkstyle tasks
    - run: |
        ./gradlew clean build -x checkstyleTest -x checkstyleMain -x test -x ':jadx-core:testClasses'

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

---
name: ""Validate Gradle Wrapper""
on: [push]

jobs:
  validation:
    name: ""Validation""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

---
"
274056675;springboot-openai-chatgpt;274056675/springboot-openai-chatgpt;https://github.com/274056675/springboot-openai-chatgpt;https://api.github.com/repos/274056675/springboot-openai-chatgpt;master;06/05/2023 04:46;22/04/2024 09:29;FALSE;
amnesica;KryptEY;amnesica/KryptEY;https://github.com/amnesica/KryptEY;https://api.github.com/repos/amnesica/KryptEY;master;13/05/2023 13:46;22/04/2024 07:07;FALSE;
knuddelsgmbh;jtokkit;knuddelsgmbh/jtokkit;https://github.com/knuddelsgmbh/jtokkit;https://api.github.com/repos/knuddelsgmbh/jtokkit;main;19/03/2023 21:52;22/04/2024 12:55;TRUE;"name: Deploy to GitHub Pages

on:
  push:
    branches:
      - main

defaults:
  run:
    working-directory: docs

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: docs/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build docs
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/build
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
---
name: Build Docs

on:
  pull_request:
    branches:
      - main

defaults:
  run:
    working-directory: docs

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: docs/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build docs
        run: npm run build
---
name: Build & Publish

on:
  push:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 8 and JDK 21 with Gradle Cache
      uses: actions/setup-java@v4
      with:
          distribution: 'temurin'
          java-version: |
            8
            21
          cache: 'gradle'
    - name: Build
      uses: gradle/gradle-build-action@v3
      with:
        arguments: :lib:build
    - name: Publish
      uses: gradle/gradle-build-action@v3
      with:
        arguments: |
          -PmavenCentralUsername=${{ secrets.MAVEN_CENTRAL_USERNAME }}
          -PmavenCentralPassword=${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          -PsigningPassword=${{ secrets.MAVEN_CENTRAL_SIGNING_PASSWORD }}
          -PsigningKey=${{ secrets.MAVEN_CENTRAL_SIGNING_KEY }}
          :lib:publish

---
name: Build

on:
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 8 and JDK 21 with Gradle Cache
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: |
            8
            21
          cache: 'gradle'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          arguments: :lib:build
---
"
nickm980;smallville;nickm980/smallville;https://github.com/nickm980/smallville;https://api.github.com/repos/nickm980/smallville;main;17/05/2023 18:11;20/04/2024 19:11;FALSE;
wendy512;stream;wendy512/stream;https://github.com/wendy512/stream;https://api.github.com/repos/wendy512/stream;master;18/05/2023 05:08;16/04/2024 14:41;FALSE;
HamburgChimps;apple-notes-liberator;HamburgChimps/apple-notes-liberator;https://github.com/HamburgChimps/apple-notes-liberator;https://api.github.com/repos/HamburgChimps/apple-notes-liberator;main;26/03/2023 01:54;17/04/2024 00:01;TRUE;"name: CI
on:
  push:
    branches:
      - '**'
  pull_request:
  workflow_call:
    inputs:
      uploadJar:
        description: 'Whether or not to upload a release jar to GitHub'
        type: boolean
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build and test
        run: mvn --batch-mode verify
      - name: Upload jar if needed
        if: ${{ inputs.uploadJar }}
        uses: actions/upload-artifact@v3
        with:
          name: jar
          path: target/apple-notes-liberator*.jar


---
name: Compute Nix Hash
on: workflow_dispatch
jobs:
  compute-nix-hash:
    runs-on: ubuntu-latest
    name: Compute Nix Hash
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - uses: cachix/install-nix-action@v19
      - run: mvn --batch-mode verify
      - run: nix-hash --type sha256 --sri target/*.jar

---
name: Create Release
on:
  push:
    tags:
      - '*'
jobs:
  ci:
    uses: ./.github/workflows/ci.yml
    with:
      uploadJar: true
  create-release:
    needs: ci
    runs-on: ubuntu-latest
    name: Create release
    steps:
      - uses: actions/checkout@v3
      - name: Download release jar
        uses: actions/download-artifact@v3
        with:
          name: jar
          path: release
      - name: Create release
        uses: eloquent/github-release-action@v3
        with:
          assets: |
            - path: release
              name: apple-notes-liberator.jar

---
"
TimefoldAI;timefold-solver;TimefoldAI/timefold-solver;https://github.com/TimefoldAI/timefold-solver;https://api.github.com/repos/TimefoldAI/timefold-solver;main;28/03/2023 16:33;22/04/2024 09:17;TRUE;"name: Downstream - Integration Tests

on:
  # Enables the workflow to run on PRs from forks;
  # token sharing is safe here, because enterprise is a private repo and therefore fully under our control.
  pull_request_target:
    branches: [main] # Benchmarks aren't branched, so they will only ever work against current main.
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - 'LICENSE*'
      - '.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: pr-${{ github.event_name }}-${{ github.head_ref }}
      cancel-in-progress: true
    timeout-minutes: 120
    steps:
      # Clone timefold-solver
      # No need to check for stale repo, as Github merges the main repo into the fork automatically.
      - name: Checkout timefold-solver
        uses: actions/checkout@v4
        with:
          path: ./timefold-solver
          ref: ${{ github.event.pull_request.head.sha }} # The GHA event will pull the main branch by default, and we must specify the PR reference version

      - name: Setup Temurin 21 and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Quickly build timefold-solver
        working-directory: ./timefold-solver
        shell: bash
        run: mvn -B -Dquickly clean install

      # Clone timefold-solver-enterprise
      - name: Checkout timefold-solver-enterprise (PR) # Checkout the PR branch first, if it exists
        id: checkout-solver-enterprise
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: TimefoldAI/timefold-solver-enterprise
          ref: ${{ github.head_ref }}
          token: ${{ secrets.JRELEASER_GITHUB_TOKEN }} # Safe; only used to clone the repo and not stored in the fork.
          path: ./timefold-solver-enterprise
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.
      - name: Checkout timefold-solver-enterprise (main) # Checkout the main branch if the PR branch does not exist
        if: steps.checkout-solver-enterprise.outcome != 'success'
        uses: actions/checkout@v4
        with:
          repository: TimefoldAI/timefold-solver-enterprise
          ref: main
          token: ${{ secrets.JRELEASER_GITHUB_TOKEN }} # Safe; only used to clone the repo and not stored in the fork.
          path: ./timefold-solver-enterprise
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.

      - name: Quickly build timefold-solver-enterprise
        working-directory: ./timefold-solver-enterprise
        shell: bash
        run: mvn -B -Dquickly clean install

      # Clone timefold-solver-benchmarks
      - name: Checkout timefold-solver-benchmarks (PR) # Checkout the PR branch first, if it exists
        if: github.head_ref # Only true if this is a PR.
        id: checkout-solver-benchmarks-pr
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: TimefoldAI/timefold-solver-benchmarks
          ref: ${{ github.head_ref }}
          path: ./timefold-solver-benchmarks
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.
      - name: Checkout timefold-solver-benchmarks (main) # Checkout the main branch if the PR branch does not exist
        if: ${{ steps.checkout-solver-benchmarks-pr.outcome != 'success' }}
        uses: actions/checkout@v4
        with:
          repository: TimefoldAI/timefold-solver-benchmarks
          ref: main
          path: ./timefold-solver-benchmarks
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.
      - name: Prevent stale fork of timefold-solver-benchmarks
        if: ${{ steps.checkout-solver-benchmarks-pr.outcome == 'success' }}
        env:
          BLESSED_REPO: ""timefold-solver-benchmarks""
          BLESSED_BRANCH: ${{ endsWith(github.head_ref, '.x') && github.head_ref || 'main' }}
        shell: bash
        working-directory: ./timefold-solver-benchmarks
        run: ../timefold-solver/.github/scripts/prevent_stale_fork.sh

      - name: Build and test timefold-solver-benchmarks
        working-directory: ./timefold-solver-benchmarks
        shell: bash
        run: mvn -B -DskipJMH clean verify
---
name: Downstream - Timefold Solver Enterprise Edition

on:
  # Enables the workflow to run on PRs from forks;
  # token sharing is safe here, because enterprise is a private repo and therefore fully under our control.
  pull_request_target:
    branches: [main, '*.x']
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - 'LICENSE*'
      - '.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: downstream-enterprise-${{ github.event_name }}-${{ github.head_ref }}
      cancel-in-progress: true
    timeout-minutes: 120
    steps:
      # Clone timefold-solver
      # No need to check for stale repo, as Github merges the main repo into the fork automatically.
      - name: Checkout timefold-solver
        uses: actions/checkout@v4
        with:
          path: ./timefold-solver
          ref: ${{ github.event.pull_request.head.sha }} # The GHA event will pull the main branch by default, and we must specify the PR reference version

      # Clone timefold-solver-enterprise
      # Need to check for stale repo, since Github is not aware of the build chain and therefore doesn't automate it.
      - name: Checkout timefold-solver-enterprise (PR) # Checkout the PR branch first, if it exists
        id: checkout-solver-enterprise
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: TimefoldAI/timefold-solver-enterprise
          ref: ${{ github.head_ref }}
          token: ${{ secrets.JRELEASER_GITHUB_TOKEN }} # Safe; only used to clone the repo and not stored in the fork.
          path: ./timefold-solver-enterprise
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.
      - name: Checkout timefold-solver-enterprise (main) # Checkout the main branch if the PR branch does not exist
        if: steps.checkout-solver-enterprise.outcome != 'success'
        uses: actions/checkout@v4
        with:
          repository: TimefoldAI/timefold-solver-enterprise
          ref: main
          token: ${{ secrets.JRELEASER_GITHUB_TOKEN }} # Safe; only used to clone the repo and not stored in the fork.
          path: ./timefold-solver-enterprise
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.

      # Build and test
      - name: Setup Temurin 17 and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      - name: Quickly build timefold-solver
        working-directory: ./timefold-solver
        shell: bash
        run: mvn -B -Dquickly clean install
      - name: Build and test timefold-solver-enterprise
        working-directory: ./timefold-solver-enterprise
        shell: bash
        run: mvn -B clean verify

---
name: Downstream - Timefold Quickstarts

on:
  pull_request:
    branches: [main, '*.x']
    paths-ignore:
      - 'LICENSE*'
      - '.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: downstream-quickstarts-${{ github.event_name }}-${{ github.head_ref }}
      cancel-in-progress: true
    timeout-minutes: 120
    steps:
      # Clone timefold-solver
      # No need to check for stale repo, as Github merges the main repo into the fork automatically.
      - name: Checkout timefold-solver
        uses: actions/checkout@v4
        with:
          path: ./timefold-solver

      # Clone timefold-quickstarts
      # Need to check for stale repo, since Github is not aware of the build chain and therefore doesn't automate it.
      - name: Checkout timefold-quickstarts (PR) # Checkout the PR branch first, if it exists
        if: github.head_ref # Only true if this is a PR.
        id: checkout-quickstarts-pr
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          repository: ${{ github.actor }}/timefold-quickstarts
          ref: ${{ github.head_ref }}
          path: ./timefold-quickstarts
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.
      - name: Checkout timefold-quickstarts (development) # Checkout the development branch if the PR branch does not exist
        if: ${{ steps.checkout-quickstarts-pr.outcome != 'success' }}
        uses: actions/checkout@v4
        with:
          repository: TimefoldAI/timefold-quickstarts
          ref: development
          path: ./timefold-quickstarts
          fetch-depth: 0 # Otherwise merge will fail on account of not having history.
      - name: Prevent stale fork of quickstarts
        if: ${{ steps.checkout-quickstarts-pr.outcome == 'success' }}
        env:
          BLESSED_REPO: ""timefold-quickstarts""
          BLESSED_BRANCH: ${{ endsWith(github.head_ref, '.x') && github.head_ref || 'development' }}
        shell: bash
        working-directory: ./timefold-quickstarts
        run: ../timefold-solver/.github/scripts/prevent_stale_fork.sh

      # Build and test
      - name: Setup Temurin 17 and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      - name: Quickly build timefold-solver
        working-directory: ./timefold-solver
        shell: bash
        run: mvn -B -Dquickly clean install
      - name: Build and test timefold-quickstarts
        working-directory: ./timefold-quickstarts
        shell: bash
        run: mvn -B clean verify

---
name: JVM and OS matrix

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths-ignore:
      - 'LICENSE*'
      - '.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'

jobs:
  build:
    concurrency:
      group: pull_request-${{ github.event_name }}-${{ github.head_ref }}-${{ matrix.os }}-${{ matrix.java-version }}
      cancel-in-progress: true
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        java-version: [ 17, 21, 22 ] #Latest two LTS + latest non-LTS.
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java-version}}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test timefold-solver
        run: mvn -B -Dfull verify
---
name: GraalVM Native

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - 'LICENSE*'
      - '.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'

jobs:
  native:
    concurrency:
      group: pull_request_native-${{ github.event_name }}-${{ github.head_ref }}-${{ matrix.module }}-${{ matrix.java-version }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [""spring-integration"", ""quarkus-integration""]
        java-version: [ 17, 21, 22 ] #Latest two LTS + latest non-LTS.
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{matrix.java-version}}
          distribution: 'graalvm-community'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'

      - name: Quickly build timefold-solver
        run: mvn -B -Dquickly clean install

      - name: Test timefold-solver in Native mode
        run: |
          cd ${{matrix.module}}
          mvn -B -Dnative verify
---
# Axioms of the release pipeline:
# - Each release starts from timefold-solver by running this Github Action.
# - Each individual repository can only start its own release when its dependencies are fully released.
#   timefold-solver-enterprise depends on timefold-solver
#   timefold-quickstarts depends on timefold-solver
#   timefold-website releases last
# - Each individual repository uses 999-SNAPSHOT as its development version, even on micro branches.
#
# Should any of these axioms change, the release pipeline will need to be (significantly) refactored.
# 0.8.x releases existed before this pipeline; they are done differently, similarities are coincidental.

name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.0.0)'
        required: true
      sourceBranch:
        description: 'Branch to cut the release from'
        default: main
        required: true
      releaseBranch:
        description: 'Release branch to create (e.g. 1.0.x for version 1.0.0; once created, branch protection rules apply)'
        default: dry_run
        required: true
      dryRun:
        description: 'Do a dry run? (true or false)'
        default: true
        required: true
jobs:
  build:
    env:
      MAVEN_ARGS: ""--no-transfer-progress --batch-mode""
    runs-on: ubuntu-latest
    steps:
      - name: Checkout timefold-solver
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.sourceBranch }}

      - name: Create release branch and switch to it
        run: |
          git config user.name ""Timefold Release Bot""
          git config user.email ""release@timefold.ai""
          git checkout -b ${{ github.event.inputs.releaseBranch }}

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Need Maven 3.9.0+ to recognize MAVEN_ARGS.
      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.3

      # We skip tests in dry run, to make the process faster.
      # Technically, this goes against the main reason for doing a dry run; to eliminate potential problems.
      # But unless something catastrophic happened, PR checks on source branch already ensured that all tests pass.
      - name: Set release version and build release
        run: |
          mvn -Dfull versions:set -DnewVersion=${{ github.event.inputs.version }}
          mvn -Dfull deploy -DskipTests=${{ github.event.inputs.dryRun }} -DaltDeploymentRepository=local::default::file://`pwd`/target/staging-deploy
          cp docs/target/antora-template.yml docs/src/antora.yml
          git add docs/src/antora.yml
          find . -name 'pom.xml' | xargs git add
          git commit -m ""build: release version ${{ github.event.inputs.version }}""
          git push origin ${{ github.event.inputs.releaseBranch }}

      - name: Run JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_DRY_RUN: ${{ github.event.inputs.dryRun }}
          JRELEASER_PROJECT_VERSION: ${{ github.event.inputs.version }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_USERNAME: ${{ secrets.JRELEASER_NEXUS2_USERNAME }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_PASSWORD: ${{ secrets.JRELEASER_NEXUS2_PASSWORD }}

      - name: JReleaser release output
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jreleaser-release
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties

      # Pull Request will be created with the changes and a summary of next steps.
      - name: Put back the 999-SNAPSHOT version on the release branch
        run: |
          git checkout -B ${{ github.event.inputs.releaseBranch }}-put-back-999-snapshot
          mvn -Dfull versions:set -DnewVersion=999-SNAPSHOT
          git commit -am ""build: move back to 999-SNAPSHOT""
          git push origin ${{ github.event.inputs.releaseBranch }}-put-back-999-snapshot
          gh pr create --reviewer triceo --base ${{ github.event.inputs.releaseBranch }} --head ${{ github.event.inputs.releaseBranch }}-put-back-999-snapshot --title ""build: move back to 999-SNAPSHOT"" --body-file .github/workflows/release-pr-body.md
        env:
          GITHUB_TOKEN: ${{ secrets.JRELEASER_GITHUB_TOKEN }}
---
name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request_target: # This workflow will be triggered by the opening, reopening, or updating of a PR, and the first run will not require approval.
    types:
      - opened
      - reopened
      - synchronize
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          ref: ${{ github.event.pull_request.head.sha }} # The GHA event will pull the main branch by default, and we must specify the PR reference version
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build with Maven to measure code coverage # The ENV variables are limited to the scope of the current step. Avoid adding sensitive ENV variables here as the tests could leak them.
        run: mvn -B clean install -Prun-code-coverage
      - name: Run analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Needed to run the SonarCloud analysis
        run: mvn -B -Psonarcloud-analysis validate org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.organization=timefold -Dsonar.projectKey=ai.timefold:timefold-solver -Dsonar.host.url=https://sonarcloud.io -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}
---
"
aress31;burpgpt;aress31/burpgpt;https://github.com/aress31/burpgpt;https://api.github.com/repos/aress31/burpgpt;main;08/04/2023 19:58;22/04/2024 12:18;TRUE;"name: Java CI with Gradle

on:
  push:
    branches: [main]
    paths:
      - ""lib/**""
  pull_request:
    branches: [main]
    paths:
      - ""lib/**""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: ""11""
          distribution: ""adopt""

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew shadowJar

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: |
            lib/build/libs

---
"
linyimin0812;spring-startup-analyzer;linyimin0812/spring-startup-analyzer;https://github.com/linyimin0812/spring-startup-analyzer;https://api.github.com/repos/linyimin0812/spring-startup-analyzer;main;01/05/2023 19:45;22/04/2024 08:58;TRUE;"# COPY FROM https://raw.githubusercontent.com/alibaba/arthas/master/.github/workflows/build-async-profiler.yml
name: build async-profiler

on:
  workflow_dispatch:
    inputs:
      async-profiler-tag-name:
        description: 'Enter the async-profiler tag name in https://github.com/linyimin0812/async-profiler/tags(e.g. v2.9) please.'
        type: string
        required: true
jobs:
  build-mac:
    runs-on: macos-12
    if: ${{ inputs.async-profiler-tag-name }}
    steps:
      # 检出 linyimin0812/async-profiler 项目指定的 tag
      - uses: actions/checkout@v3
        with:
          repository: linyimin0812/async-profiler
          fetch-depth: 0
      - name: Checkout the async-profiler repository by input tag name ${{ inputs.async-profiler-tag-name }}
        run: git checkout ${{ inputs.async-profiler-tag-name }}
      # 安装 Liberica JDK 11
      - uses: actions/setup-java@v3
        with:
          distribution: ""liberica""
          java-version: ""11""
      # 从 async-profiler 源码编译出 libasyncProfiler-mac.so(兼容 arthas-core 中 ProfilerCommand.java 固定的 so 文件名称未使用 libasyncProfiler.dylib)
      # grep -m1 PROFILER_VERSION Makefile 用于输出 async-profiler 版本, 下同
      - name: Execute compile inside macOS 12 environment
        run: |
          grep -m1 PROFILER_VERSION Makefile
          echo ""JAVA_HOME=${JAVA_HOME}""
          java -version
          echo ""FAT_BINARY variable that make libasyncProfiler-mac.so works both on macOS x86-64 and arm64""
          make FAT_BINARY=true
          LIB_PROFILER_PATH=$(find build -type f \( -name libasyncProfiler.so -o -name libasyncProfiler.dylib \) 2>/dev/null)
          [ -z ""${LIB_PROFILER_PATH}"" ] && echo ""Can not find libasyncProfiler.so or libasyncProfiler.dylib file under build directory."" && exit 1
          echo ""LIB_PROFILER_PATH=${LIB_PROFILER_PATH}""
          file ${LIB_PROFILER_PATH}
          otool -L ${LIB_PROFILER_PATH}
          cp ${LIB_PROFILER_PATH} libasyncProfiler-mac.so
      # 暂存编译出来的 libasyncProfiler-mac.so 文件
      - uses: actions/upload-artifact@v3
        with:
          name: async-profiler
          path: libasyncProfiler-mac.so
          if-no-files-found: error

  build-generic-linux-x64:
    runs-on: ubuntu-20.04
    if: ${{ inputs.async-profiler-tag-name }}
    steps:
      # 检出 linyimin0812/async-profiler 项目指定的 tag
      - uses: actions/checkout@v3
        with:
          repository: linyimin0812/async-profiler
          fetch-depth: 0
      - name: Checkout the async-profiler repository by input tag name ${{ inputs.async-profiler-tag-name }}
        run: git checkout ${{ inputs.async-profiler-tag-name }}
      # 从 async-profiler 源码编译出适用于 glibc-based Linux 主机的 libasyncProfiler-linux-x64.so
      - name: Execute compile inside CentOS 6 x86_64 docker container environment
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: none
          distro: none
          base_image: amd64/centos:6.10
          run: |
            cat /etc/system-release
            uname -m
            minorver=6.10
            sed -e ""s|^mirrorlist=|#mirrorlist=|g"" \
            -e ""s|^#baseurl=http://mirror.centos.org/centos/\$releasever|baseurl=https://mirrors.aliyun.com/centos-vault/$minorver|g"" \
            -i.bak /etc/yum.repos.d/CentOS-*.repo
            yum -y update && yum install -y wget
            wget --no-check-certificate https://people.centos.org/tru/devtools-1.1/devtools-1.1.repo -O /etc/yum.repos.d/devtools-1.1.repo
            yum install -y devtoolset-1.1-gcc devtoolset-1.1-gcc-c++ devtoolset-1.1-binutils
            export CC=/opt/centos/devtoolset-1.1/root/usr/bin/gcc
            export CPP=/opt/centos/devtoolset-1.1/root/usr/bin/cpp
            export CXX=/opt/centos/devtoolset-1.1/root/usr/bin/c++
            ln -sf /opt/centos/devtoolset-1.1/root/usr/bin/* /usr/local/bin/
            hash -r
            wget https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.2_linux-x64_bin.tar.gz -O openjdk-11.tar.gz
            tar zxf openjdk-11.tar.gz
            mv jdk-11.0.2 /usr/local/
            export JAVA_HOME=/usr/local/jdk-11.0.2
            export PATH=${JAVA_HOME}/bin:${PATH}
            java -version
            which java
            grep -m1 PROFILER_VERSION Makefile
            make
            LIB_PROFILER_PATH=$(find build -type f -name libasyncProfiler.so 2>/dev/null)
            [ -z ""${LIB_PROFILER_PATH}"" ] && echo ""Can not find libasyncProfiler.so file under build directory."" && exit 1
            echo ""LIB_PROFILER_PATH=${LIB_PROFILER_PATH}""
            file ${LIB_PROFILER_PATH}
            ldd ${LIB_PROFILER_PATH}
            cp ${LIB_PROFILER_PATH} libasyncProfiler-linux-x64.so
      # 暂存编译出来的 libasyncProfiler-linux-x64.so 文件
      - uses: actions/upload-artifact@v3
        with:
          name: async-profiler
          path: libasyncProfiler-linux-x64.so
          if-no-files-found: error

  build-generic-linux-arm64:
    runs-on: ubuntu-20.04
    if: ${{ inputs.async-profiler-tag-name }}
    steps:
      # 检出 linyimin0812/async-profiler 项目指定的 tag
      - uses: actions/checkout@v3
        with:
          repository: linyimin0812/async-profiler
          fetch-depth: 0
      - name: Checkout the async-profiler repository by input tag name ${{ inputs.async-profiler-tag-name }}
        run: git checkout ${{ inputs.async-profiler-tag-name }}
      # 从 async-profiler 源码编译出适用于 glibc-based Linux 主机的 libasyncProfiler-linux-arm64.so
      - name: Execute compile inside CentOS 7 aarch64 docker container environment via QEMU
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: none
          distro: none
          base_image: arm64v8/centos:7
          run: |
            cat /etc/system-release
            uname -m
            yum -y update && yum install -y java-11-openjdk-devel gcc-c++ make which file
            JAVA_HOME=/usr/lib/jvm/java-11-openjdk
            java -version
            which java
            grep -m1 PROFILER_VERSION Makefile
            make
            LIB_PROFILER_PATH=$(find build -type f -name libasyncProfiler.so 2>/dev/null)
            [ -z ""${LIB_PROFILER_PATH}"" ] && echo ""Can not find libasyncProfiler.so file under build directory."" && exit 1
            echo ""LIB_PROFILER_PATH=${LIB_PROFILER_PATH}""
            file ${LIB_PROFILER_PATH}
            ldd ${LIB_PROFILER_PATH}
            cp ${LIB_PROFILER_PATH} libasyncProfiler-linux-arm64.so
      # 暂存编译出来的 libasyncProfiler-linux-arm64.so 文件
      - uses: actions/upload-artifact@v3
        with:
          name: async-profiler
          path: libasyncProfiler-linux-arm64.so
          if-no-files-found: error


  build-alpine-linux-x64:
    runs-on: ubuntu-20.04
    if: ${{ inputs.async-profiler-tag-name }}
    steps:
      # 检出 linyimin0812/async-profiler 项目指定的 tag
      - uses: actions/checkout@v3
        with:
          repository: linyimin0812/async-profiler
          fetch-depth: 0
      - name: Checkout the async-profiler repository by input tag name ${{ inputs.async-profiler-tag-name }}
        run: git checkout ${{ inputs.async-profiler-tag-name }}
      - name: Setup Alpine Linux x86-64 environment
        uses: jirutka/setup-alpine@v1
        with:
          arch: x86_64
          branch: v3.15
          shell-name: alpine-x86_64.sh
          packages: >
            build-base linux-headers openjdk11
      # 从 async-profiler 源码编译出适用于 musl-based Linux 主机的 libasyncProfiler-linux-musl-x64.so
      # grep -m1 PROFILER_VERSION Makefile 用于输出 async-profiler 版本, 下同
      - name: Run script inside Alpine Linux x86-64 environment
        run: |
          grep -m1 PROFILER_VERSION Makefile
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk
          java -version
          which java
          echo ""Append -static-libgcc -static-libstdc++ options to CXXFLAGS for user no need to install libstdc++ and libgcc manually.""
          sed -i 's/CXXFLAGS=/CXXFLAGS=-static-libgcc -static-libstdc++ /' Makefile && make
          LIB_PROFILER_PATH=$(find build -type f -name libasyncProfiler.so 2>/dev/null)
          [ -z ""${LIB_PROFILER_PATH}"" ] && echo ""Can not find libasyncProfiler.so file under build directory."" && exit 1
          echo ""LIB_PROFILER_PATH=${LIB_PROFILER_PATH}""
          file ${LIB_PROFILER_PATH}
          ldd ${LIB_PROFILER_PATH}
          cp ${LIB_PROFILER_PATH} libasyncProfiler-linux-musl-x64.so
        shell: alpine-x86_64.sh {0}
      - uses: actions/upload-artifact@v3
        with:
          name: async-profiler
          path: libasyncProfiler-linux-musl-x64.so
          if-no-files-found: error

  build-alpine-linux-arm64:
    runs-on: ubuntu-20.04
    if: ${{ inputs.async-profiler-tag-name }}
    steps:
      # 检出 linyimin0812/async-profiler 项目指定的 tag
      - uses: actions/checkout@v3
        with:
          repository: linyimin0812/async-profiler
          fetch-depth: 0
      - name: Checkout the async-profiler repository by input tag name ${{ inputs.async-profiler-tag-name }}
        run: git checkout ${{ inputs.async-profiler-tag-name }}
      - name: Setup Alpine Linux aarch64 environment
        uses: jirutka/setup-alpine@v1
        with:
          arch: aarch64
          branch: v3.15
          shell-name: alpine-aarch64.sh
          packages: >
            build-base linux-headers openjdk11
      # 从 async-profiler 源码编译出适用于 musl-based Linux 主机的 libasyncProfiler-linux-musl-arm64.so
      # grep -m1 PROFILER_VERSION Makefile 用于输出 async-profiler 版本, 下同
      - name: Run script inside Alpine Linux aarch64 environment
        run: |
          grep -m1 PROFILER_VERSION Makefile
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk
          java -version
          which java
          echo ""Append -static-libgcc -static-libstdc++ options to CXXFLAGS for user no need to install libstdc++ and libgcc manually.""
          sed -i 's/CXXFLAGS=/CXXFLAGS=-static-libgcc -static-libstdc++ /' Makefile && make
          LIB_PROFILER_PATH=$(find build -type f -name libasyncProfiler.so 2>/dev/null)
          [ -z ""${LIB_PROFILER_PATH}"" ] && echo ""Can not find libasyncProfiler.so file under build directory."" && exit 1
          echo ""LIB_PROFILER_PATH=${LIB_PROFILER_PATH}""
          file ${LIB_PROFILER_PATH}
          ldd ${LIB_PROFILER_PATH}
          cp ${LIB_PROFILER_PATH} libasyncProfiler-linux-musl-arm64.so
        shell: alpine-aarch64.sh {0}
      - uses: actions/upload-artifact@v3
        with:
          name: async-profiler
          path: libasyncProfiler-linux-musl-arm64.so
          if-no-files-found: error

  upload-libasyncProfiler-files:
    runs-on: ubuntu-20.04
    needs: [build-mac, build-generic-linux-x64, build-generic-linux-arm64, build-alpine-linux-x64, build-alpine-linux-arm64]
    steps:
      # 检出当前 arthas 代码仓库
      - name: Checkout arthas upstream repo
        uses: actions/checkout@v3
      # 将上面编译任务暂存的 libasyncProfiler 动态链接库文件上传到此工作流的 artifact 包中
      - uses: actions/download-artifact@v3
        with:
          name: async-profiler
          path: tmp-async-profiler
      # 查看上面编译任务暂存的 libasyncProfiler 动态链接库文件
      - name: Modify permissions and Display structure of downloaded files
        run: |
          chmod 755 libasyncProfiler-*
          ls -lrt
        working-directory: tmp-async-profiler
      # 将编译好的 libasyncProfiler 动态链接库文件 push 到 arthas 代码仓库的 master 分支 async-profiler/ 目录下
      - name: Add libasyncProfiler files
        run: mv tmp-async-profiler/* spring-profiler-extension/async-profiler/
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: build and update libasyncProfiler files
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: build/update_async_profiler_${{ inputs.async-profiler-tag-name }}_1
          delete-branch: false
          title: 'Update async profiler'
          body: build and update async profiler tag ${{ inputs.async-profiler-tag-name }}
          draft: false

---
name: Release

on:
  push:
    tags: [ v\d+\.\d+\.\d+ ]

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_body: ""${{ steps.tag.outputs.message }}""

    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Get tag message
        id: tag
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          echo ""message<<EOF"" >> $GITHUB_OUTPUT
          echo ""$(git tag -l --format='%(contents)' ${{ steps.get_version.outputs.version }})"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          name: release ${{ steps.get_version.outputs.version }}
          tag: ${{ steps.get_version.outputs.version }}
          body: ""${{ steps.tag.outputs.message }}""

  build:
    needs: create-release
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Get version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Import GPG secret key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build spring-startup-analyzer
        run: make all

      - name: Package plugin and create userscript
        run: |
          mkdir -p release
          mv $HOME/spring-startup-analyzer/spring-startup-analyzer.tar.gz release/spring-startup-analyzer.tar.gz
          
          mkdir -p build
          cp -r $HOME/spring-startup-analyzer/* ./build/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Build and push with latest tag
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spring-startup-analyzer:latest

      - name: Docker Build and push with actual tag
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platform: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/spring-startup-analyzer:${{ steps.get_version.outputs.version }}

      - name: Upload extensions to release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: release/spring-startup-analyzer.tar.gz
          asset_name: spring-startup-analyzer.tar.gz
          asset_content_type: application/tar+gzip

  build-graalvm-native-image:
    needs: create-release
    name: build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            name: 'linux'
            binaryExt: ''
          - os: macos-12
            name: 'macos'
            binaryExt: ''
          - os: windows-latest
            name: 'windows'
            binaryExt: '.exe'
    steps:
      - uses: actions/checkout@v3

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Build native image
        run: |
          cd ./spring-startup-cli
          mvn clean package
          java -agentlib:native-image-agent=config-output-dir=./target/native/agent-output/main/ -jar ./target/spring-startup-cli.jar exec:exec@java-agent
          mvn -DskipTests=true -Pnative -Dagent package
          cp ./target/spring-startup-cli${{ matrix.binaryExt }} ./target/spring-startup-cli-${{ matrix.name }}${{ matrix.binaryExt }}

      - name: Upload native image binary
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release_upload_url }}
          asset_path: spring-startup-cli/target/spring-startup-cli-${{ matrix.name }}${{ matrix.binaryExt }}
          asset_name: spring-startup-cli-${{ matrix.name }}${{ matrix.binaryExt }}
          asset_content_type: application/octet-stream

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build, build-graalvm-native-image]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })

---
name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Import GPG secret key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B install verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=linyimin0812_spring-startup-analyzer
---
name: Test Push
on:
  push:
    paths:
      - '**.java'
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Import GPG secret key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          make all
          curl -#Lkf \
            -o /home/runner/spring-startup-analyzer/spring-boot-demo.jar \
            https://github.com/linyimin0812/spring-startup-analyzer/releases/download/v2.0.0/spring-boot-demo.jar
          ls -lrt

      - uses: actions/upload-artifact@v3
        with:
          name: spring-startup-analyzer
          path: /home/runner/spring-startup-analyzer/
          if-no-files-found: error

  test-mac:
    runs-on: macos-12
    needs: [build]
    steps:
      # 安装 Liberica JDK 11
      - uses: actions/setup-java@v3
        with:
          distribution: ""liberica""
          java-version: ""11""

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spring-startup-analyzer
          path: /Users/runner/spring-startup-analyzer

      - name: Execute spring-boot-demo.jar
        run: |
          ls -lrt
          nohup java -javaagent:/Users/runner/spring-startup-analyzer/lib/spring-profiler-agent.jar \
            -Dproject.name=mac-demo \
            -Dspring-startup-analyzer.admin.http.server.port=8066 \
            -jar /Users/runner/spring-startup-analyzer/spring-boot-demo.jar &
                    
          sleep 30
          
          file_count=$(ls -al /Users/runner/spring-startup-analyzer/output/ | grep -c ""mac-demo"")
          if [ ""$file_count"" -eq 2 ]; then
            echo ""mac-test success""
            echo ""================startup log================""
            cat /Users/runner/spring-startup-analyzer/logs/startup.log
            exit 0
          fi
          exit 1
        working-directory: /Users/runner/
  test-generic-linux-x64:
    runs-on: ubuntu-20.04
    needs: [ build ]
    steps:
      # 安装 Liberica JDK 11
      - uses: actions/setup-java@v3
        with:
          distribution: ""liberica""
          java-version: ""11""

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spring-startup-analyzer
          path: /home/runner/spring-startup-analyzer

      - name: Execute spring-boot-demo.jar
        run: |
          ls -lrt
          nohup java -javaagent:/home/runner/spring-startup-analyzer/lib/spring-profiler-agent.jar \
            -Dproject.name=generic-linux-x64-demo \
            -Dspring-startup-analyzer.admin.http.server.port=8066 \
            -jar /home/runner/spring-startup-analyzer/spring-boot-demo.jar &

          sleep 30

          file_count=$(ls -al /home/runner/spring-startup-analyzer/output/ | grep -c ""generic-linux-x64-demo"")
          if [ ""$file_count"" -eq 2 ]; then
            echo ""mac-test success""
            echo ""================startup log================""
            cat /home/runner/spring-startup-analyzer/logs/startup.log
            exit 0
          fi
          exit 1
        working-directory: /home/runner/spring-startup-analyzer

  test-generic-windows-x64:
    runs-on: windows-latest
    needs: [ build ]
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: ""liberica""
          java-version: ""11""

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spring-startup-analyzer
          path: C:\runner\spring-startup-analyzer

      - name: Execute spring-boot-demo.jar
        run: |
          dir
          
          Start-Process java `
            ""-javaagent:C:\runner\spring-startup-analyzer\lib\spring-profiler-agent.jar"", `
            ""-Dproject.name=generic-windows-x64-demo"", `
            ""-Dspring-startup-analyzer.admin.http.server.port=8066"", `
            ""-jar"", `
            ""C:\runner\spring-startup-analyzer\spring-boot-demo.jar""
          
          Start-Sleep -Seconds 30
          
          $file_count = (Get-ChildItem -Path C:\runner\spring-startup-analyzer\output\*).Count
          
          if ($file_count -eq 4) {
            Write-Host ""windows-test success""
            Write-Host ""================startup log================""
            Get-Content C:\runner\spring-startup-analyzer\logs\startup.log
            exit 0
          }
          exit 1
        shell: powershell
        working-directory: C:\runner\spring-startup-analyzer


  test-generic-linux-arm64:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spring-startup-analyzer
          path: /home/runner/spring-startup-analyzer
      - name: Execute test inside CentOS 7 aarch64 docker container environment via QEMU
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: none
          distro: none
          base_image: arm64v8/centos:7
          dockerRunArgs: |
            --volume ""/home/runner/spring-startup-analyzer:/home/runner/spring-startup-analyzer""
          run: |
            cat /etc/system-release
            uname -m
            yum -y update && yum install -y java-11-openjdk-devel which
            JAVA_HOME=/usr/lib/jvm/java-11-openjdk
            java -version
            which java
            echo $HOME
            ls -lrt
            nohup java -javaagent:/home/runner/spring-startup-analyzer/lib/spring-profiler-agent.jar \
            -Dproject.name=generic-linux-arm64-demo \
            -Dspring-startup-analyzer.linux.and.mac.profiler=async_profiler \
            -Dspring-startup-analyzer.admin.http.server.port=8066 \
            -jar /home/runner/spring-startup-analyzer/spring-boot-demo.jar &
  
            sleep 60
  
            file_count=$(ls -al /home/runner/spring-startup-analyzer/output/ | grep -c ""generic-linux-arm64-demo"")
            if [ ""$file_count"" -eq 2 ]; then
            echo ""mac-test success""
            echo ""================startup log================""
            cat /home/runner/spring-startup-analyzer/logs/startup.log
            exit 0
            fi
            exit 1
          working-directory: /home/runner/spring-startup-analyzer

  test-alpine-linux-x64:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Setup Alpine Linux x86-64 environment
        uses: jirutka/setup-alpine@v1
        with:
          arch: x86_64
          branch: v3.15
          shell-name: alpine-x86_64.sh
          packages: >
            build-base linux-headers openjdk11

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spring-startup-analyzer
          path: /home/runner/rootfs/alpine-v3.15-x86_64/home/runner/spring-startup-analyzer

      - name: Run test inside Alpine Linux x86-64 environment
        run: |
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk
          java -version
          which java
          ls -lrt
          nohup java -javaagent:/home/runner/spring-startup-analyzer/lib/spring-profiler-agent.jar \
          -Dproject.name=alpine-linux-x64-demo \
          -Dspring-startup-analyzer.admin.http.server.port=8066 \
          -Dspring-startup-analyzer.linux.and.mac.profiler=async_profiler \
          -jar /home/runner/spring-startup-analyzer/spring-boot-demo.jar &

          sleep 30

          file_count=$(ls -al /home/runner/spring-startup-analyzer/output/ | grep -c ""alpine-linux-x64-demo"")
          if [ ""$file_count"" -eq 2 ]; then
            echo ""mac-test success""
            echo ""================startup log================""
            cat /home/runner/spring-startup-analyzer/logs/startup.log
            ps | grep java | grep spring-startup-analyzer | grep -v grep | awk '{print $1}' | xargs kill -9
            exit 0
          fi
          exit 1
        shell: alpine-x86_64.sh {0}

  test-alpine-linux-arm64:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:

      - name: Setup Alpine Linux aarch64 environment
        uses: jirutka/setup-alpine@v1
        with:
          arch: aarch64
          branch: v3.15
          shell-name: alpine-aarch64.sh
          packages: >
            build-base linux-headers openjdk11

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spring-startup-analyzer
          path: /home/runner/rootfs/alpine-v3.15-aarch64/home/runner/spring-startup-analyzer

      - name: Run test inside Alpine Linux aarch64 environment
        run: |
          JAVA_HOME=/usr/lib/jvm/java-11-openjdk
          java -version
          which java
          ls -lrt
          nohup java -javaagent:/home/runner/spring-startup-analyzer/lib/spring-profiler-agent.jar \
          -Dproject.name=alpine-linux-arm64-demo \
          -Dspring-startup-analyzer.admin.http.server.port=8066 \
          -Dspring-startup-analyzer.linux.and.mac.profiler=async_profiler \
          -jar /home/runner/spring-startup-analyzer/spring-boot-demo.jar &

          sleep 120

          file_count=$(ls -al /home/runner/spring-startup-analyzer/output/ | grep -c ""alpine-linux-arm64-demo"")
          if [ ""$file_count"" -eq 2 ]; then
            echo ""mac-test success""
            echo ""================startup log================""
            cat /home/runner/spring-startup-analyzer/logs/startup.log
            ps | grep java | grep spring-startup-analyzer | grep -v grep | awk '{print $1}' | xargs kill -9
            exit 0
          fi
          exit 1
        working-directory: /home/runner/
        shell: alpine-aarch64.sh {0}

---
"
nageoffer;12306;nageoffer/12306;https://github.com/nageoffer/12306;https://api.github.com/repos/nageoffer/12306;main;30/05/2023 06:08;22/04/2024 12:24;FALSE;
4ra1n;mysql-fake-server;4ra1n/mysql-fake-server;https://github.com/4ra1n/mysql-fake-server;https://api.github.com/repos/4ra1n/mysql-fake-server;master;15/05/2023 11:06;18/04/2024 13:05;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

---
"
cami-la;collections-java-api-2023;cami-la/collections-java-api-2023;https://github.com/cami-la/collections-java-api-2023;https://api.github.com/repos/cami-la/collections-java-api-2023;master;02/06/2023 22:45;19/04/2024 17:47;FALSE;
ThePrimeagen;ts-rust-zig-deez;ThePrimeagen/ts-rust-zig-deez;https://github.com/ThePrimeagen/ts-rust-zig-deez;https://api.github.com/repos/ThePrimeagen/ts-rust-zig-deez;master;18/05/2023 21:44;21/04/2024 22:44;TRUE;"##
# This workflow assumes that there are valid Makefiles
#  in the root of the each language affected,
#  which have docker-build and docker-ready targets
##

name: Test if the language in PR passes corresponding checks

on:
  pull_request:
    # for new PRs, or those who are ready and/or request a review
    types: [edited, opened, reopened, synchronize, ready_for_review, review_requested]
    branches: [master]  # only run the workflow on merging into the master branch

defaults:
  run:
    shell: bash

jobs:
  pr-worthy:
    runs-on: ubuntu-latest
    steps:
      - name: Checking out the repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # to retrieve all commits       
        
      - name: Get changed files
        id: changed-files-dir-names
        uses: tj-actions/changed-files@v36.1.0
        with:
          #since_last_remote_commit: true
          dir_names: true
          dir_names_exclude_current_dir: true
          dir_names_max_depth: 1

      - name: Build docker images for every language affected
        #if: steps.changed-files-dir-names.outputs.any_changed == 'true'
        run: |
          for i in ${{ steps.changed-files-dir-names.outputs.all_changed_and_modified_files }}; do if [[ $i != .* ]]; then pushd ""$i""; make docker-build; popd; fi; done

      - name: Run docker containers for built images
        #if: steps.changed-files-dir-names.outputs.any_changed == 'true'
        run: |
          for i in ${{ steps.changed-files-dir-names.outputs.all_changed_and_modified_files }}; do if [[ $i != .* ]]; then pushd ""$i""; make docker-ready; popd; fi; done

---
"
SimonHalvdansson;Harmonic-HN;SimonHalvdansson/Harmonic-HN;https://github.com/SimonHalvdansson/Harmonic-HN;https://api.github.com/repos/SimonHalvdansson/Harmonic-HN;main;23/05/2023 18:36;22/04/2024 09:50;TRUE;"on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'
      - name: Build with Gradle
        run: ./gradlew build --warning-mode all --no-daemon --parallel
      - uses: actions/upload-artifact@v4
        with:
          name: apks
          path: app/build/outputs/apk

---
name: tag

on:
  push:
    tags:
      - 'v*.*.*'

permissions: write-all

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - uses: gradle/gradle-build-action@v2
        with:
          arguments: build --warning-mode all
      - uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: app/build/outputs/apk/release/app-release-unsigned.apk
          draft: false
          prerelease: false

---
"
fractureiser-investigation;fractureiser;fractureiser-investigation/fractureiser;https://github.com/fractureiser-investigation/fractureiser;https://api.github.com/repos/fractureiser-investigation/fractureiser;main;07/06/2023 17:59;20/04/2024 01:46;FALSE;
linux-china;chatgpt-spring-boot-starter;linux-china/chatgpt-spring-boot-starter;https://github.com/linux-china/chatgpt-spring-boot-starter;https://api.github.com/repos/linux-china/chatgpt-spring-boot-starter;main;17/06/2023 12:28;18/04/2024 16:51;FALSE;
bifromqio;bifromq;bifromqio/bifromq;https://github.com/bifromqio/bifromq;https://api.github.com/repos/bifromqio/bifromq;main;29/05/2023 09:27;22/04/2024 02:28;TRUE;"name: Manual-Cov-Build

on:
  workflow_dispatch:
    branches:
      - 'main'
      - 'release-**'
      - 'feat-**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean verify -P build-coverage
      - name: Coveralls
        uses: coverallsapp/github-action@v2
        with:
          format: jacoco


---
name: Cov-Build

on:
  pull_request:
    branches:
      - 'main'
      - 'release-**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean verify -P build-coverage
      - name: Coveralls
        uses: coverallsapp/github-action@v2
        with:
          format: jacoco

---
name: Dev-Build

on:
  push:
    branches:
      - 'main'
      - 'release-**'
      - 'feat-**'
      - 'hotfix-**'
      - 'bugfix-**'
      - 'fix-**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean verify -P build

---
name: Build docker image
on:
  push:
    tags:
      - v[0-9].[0-9].[0-9]**
  workflow_dispatch:

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      NEED_BUILD_DOCKER: ${{ steps.check.outputs.NEED_BUILD_DOCKER }}
      TAG: ${{ steps.check.outputs.TAG }}
      VERSION: ${{ steps.check.outputs.VERSION }}
      MARK_LATEST: ${{ steps.check.outputs.MARK_LATEST }}
    steps:
      - name: check tag version
        id: check
        run: |
          REF=${{ github.ref }}
          if [[ ""${{github.event.created}}"" == ""false"" ]]; then
              NEED_BUILD_DOCKER=false
          else
            if [[ ""$REF"" =~ refs/tags/v[0-9]+.[0-9]+.[0-9]+.* ]]; then
                NEED_BUILD_DOCKER=true
                MARK_LATEST=false
                TAG=${REF:10}
                VERSION=${REF:11}
            else
              MARK_LATEST=false
              echo ""Expected refs of the form 'refs/tags/v<major-version>.<minor-version>.<patch-version>' but got '$REF'""
              NEED_BUILD_DOCKER=false
            fi
          fi
          echo ""MARK_LATEST=$MARK_LATEST, NEED_BUILD_DOCKER=$NEED_BUILD_DOCKER, TAG=$TAG, VERSION=$VERSION""
          echo ""NEED_BUILD_DOCKER=$NEED_BUILD_DOCKER"" >> ""$GITHUB_OUTPUT""
          echo ""TAG=$TAG"" >> ""$GITHUB_OUTPUT""
          echo ""VERSION=$VERSION"" >> ""$GITHUB_OUTPUT""
          echo ""MARK_LATEST=$MARK_LATEST"" >> ""$GITHUB_OUTPUT""
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: prebuild
    if: needs.prebuild.outputs.NEED_BUILD_DOCKER
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Post build package
        run: |
          rm -rf output
          mkdir output
          cp build/build-bifromq-starters/target/bifromq-* output
          cp Dockerfile output
      - name: Upload build package
        uses: actions/upload-artifact@v4
        with:
          name: prerelease-${{ needs.prebuild.outputs.VERSION }}
          path: output
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: bifromq/bifromq
          tags: |
            type=raw,value=${{ needs.prebuild.outputs.VERSION }}
            type=raw,value=latest,enable=${{ needs.prebuild.outputs.MARK_LATEST }}
      - uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: output
          push: true
          # Path to the Dockerfile
          file: Dockerfile
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64
          # List of tags s
          tags: ${{ steps.meta.outputs.tags }}

---
name: Build latest docker image
on:
  workflow_dispatch:

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      NEED_BUILD_DOCKER: ${{ steps.check.outputs.NEED_BUILD_DOCKER }}
      TAG: ${{ steps.check.outputs.TAG }}
      VERSION: ${{ steps.check.outputs.VERSION }}
    steps:
      - name: check tag version
        id: check
        run: |
          REF=${{ github.ref }}
          if [[ ""$REF"" =~ refs/tags/v[0-9]+.[0-9]+.[0-9]+.* ]]; then
              NEED_BUILD_DOCKER=true
              TAG=${REF:10}
              VERSION=${REF:11}
          else
            echo ""Expected refs of the form 'refs/tags/v<major-version>.<minor-version>.<patch-version>' but got '$REF'""
            NEED_BUILD_DOCKER=false
          fi
          echo ""NEED_BUILD_DOCKER=$NEED_BUILD_DOCKER, TAG=$TAG, VERSION=$VERSION""
          echo ""NEED_BUILD_DOCKER=$NEED_BUILD_DOCKER"" >> ""$GITHUB_OUTPUT""
          echo ""VERSION=$VERSION"" >> ""$GITHUB_OUTPUT""
  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: prebuild
    if: needs.prebuild.outputs.NEED_BUILD_DOCKER
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - name: Post build package
        run: |
          rm -rf output
          mkdir output
          cp build/build-bifromq-starters/target/bifromq-* output
          cp Dockerfile output
      - name: Upload build package
        uses: actions/upload-artifact@v4
        with:
          name: prerelease-${{ needs.prebuild.outputs.VERSION }}
          path: output
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: bifromq/bifromq
          tags: |
            type=raw,value=latest
      - uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: output
          push: true
          # Path to the Dockerfile
          file: Dockerfile
          # List of target platforms for build
          platforms: linux/amd64,linux/arm64
          # List of tags s
          tags: ${{ steps.meta.outputs.tags }}

---
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: main push maven deploy

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up BoS maven repo
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          java-version: '17'
          distribution: 'temurin'
          server-id: bos-repo # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: BOS_REPO_AK # env variable for username in deploy
          server-password: BOS_REPO_SK # env variable for token in deploy

      - name: Publish to BoS maven repo
        run: mvn clean deploy -P bos-repo-deploy -pl :bifromq-plugin-auth-provider,:bifromq-plugin-event-collector,:bifromq-plugin-resource-throttler,:bifromq-plugin-sub-broker,:bifromq-plugin-setting-provider,:base-env-provider-spi,:base-kv-store-balance-spi,:bifromq-dist-spi -am -DskipTests -Dbos.repo.release=$BOS_REPO_RELEASE -Dbos.repo.snapshot=$BOS_REPO_SNAPSHOT
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          BOS_REPO_AK: ${{ secrets.BOS_REPO_AK }}
          BOS_REPO_SK: ${{ secrets.BOS_REPO_SK }}
          BOS_REPO_RELEASE: ${{ secrets.BOS_REPO_RELEASE }}
          BOS_REPO_SNAPSHOT: ${{ secrets.BOS_REPO_SNAPSHOT }}

---
name: Release assets
permissions: write-all
on:
  release:
    types: [ prereleased, published ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      IS_VALID_TAG: ${{ steps.check.outputs.IS_VALID_TAG }}
    steps:
      - name: check tag version
        id: check
        run: |
          REF=${{ github.ref }}
          if [[ ""$REF"" =~ refs/tags/v[0-9]+.[0-9]+.[0-9]+.* ]]; then
            IS_VALID_TAG=true
          else
              echo ""Expected refs of the form 'refs/tags/v-<major-version>.<minor-version>.<patch-version>' but got '$REF'""
              IS_VALID_TAG=false
          fi
          echo ""IS_VALID_TAG=$IS_VALID_TAG""
          echo ""IS_VALID_TAG=$IS_VALID_TAG"" >> ""$GITHUB_OUTPUT""
  build-and-upload:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.IS_VALID_TAG
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean package -DskipTests
      - uses: AButler/upload-release-assets@v3.0
        with:
          files: 'build/build-bifromq-starters/target/bifromq-*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

---
# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: tag push maven deploy

on:
  push:
    tags:
      - v[0-9].[0-9].[0-9]**
  workflow_dispatch:

jobs:
  publish-maven-central:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          java-version: '17'
          distribution: 'temurin'
          server-id: sonatype-nexus-repository # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Publish to Apache Maven Central
        run: mvn clean deploy -P maven-central-deploy -pl :bifromq-plugin-auth-provider,:bifromq-plugin-event-collector,:bifromq-plugin-resource-throttler,:bifromq-plugin-setting-provider -am -DskipTests
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

  publish-bos-repo:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up BoS maven repo
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          java-version: '17'
          distribution: 'temurin'
          server-id: bos-repo # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: BOS_REPO_AK # env variable for username in deploy
          server-password: BOS_REPO_SK # env variable for token in deploy

      - name: Publish to BoS maven repo
        run: mvn clean deploy -P bos-repo-deploy -pl :bifromq-plugin-auth-provider,:bifromq-plugin-event-collector,:bifromq-plugin-resource-throttler,:bifromq-plugin-sub-broker,:bifromq-plugin-setting-provider,:base-env-provider-spi,:base-kv-store-balance-spi,:bifromq-dist-spi -am -DskipTests -Dbos.repo.release=$BOS_REPO_RELEASE -Dbos.repo.snapshot=$BOS_REPO_SNAPSHOT
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          BOS_REPO_AK: ${{ secrets.BOS_REPO_AK }}
          BOS_REPO_SK: ${{ secrets.BOS_REPO_SK }}
          BOS_REPO_RELEASE: ${{ secrets.BOS_REPO_RELEASE }}
          BOS_REPO_SNAPSHOT: ${{ secrets.BOS_REPO_SNAPSHOT }}

---
"
getmoneynote;moneynote-api;getmoneynote/moneynote-api;https://github.com/getmoneynote/moneynote-api;https://api.github.com/repos/getmoneynote/moneynote-api;main;31/05/2023 07:33;22/04/2024 11:26;TRUE;"name: api acr image

# 触发条件：在 push 到 main 分支后
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build
        run: chmod +x ./gradlew && ./gradlew bootJar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Aliyun Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          #          region-id: cn-hangzhou  # 3
          username: ""${{ secrets.ACR_USERNAME }}""
          password: ""${{ secrets.ACR_PASSWORD }}""
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/moneynote/moneynote-api:latest
---
name: all acr image

# 触发条件：在 push 到 main 分支后
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to ""true"" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # ""false"" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build
        run: chmod +x ./gradlew && ./gradlew bootJar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Aliyun Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          #          region-id: cn-hangzhou  # 3
          username: ""${{ secrets.ACR_USERNAME }}""
          password: ""${{ secrets.ACR_PASSWORD }}""
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile2
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/moneynote/moneynote-all:latest
---
name: all no mysql acr image

# 触发条件：在 push 到 main 分支后
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build
        run: chmod +x ./gradlew && ./gradlew bootJar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Aliyun Container Registry (ACR)
        uses: docker/login-action@v3
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          #          region-id: cn-hangzhou  # 3
          username: ""${{ secrets.ACR_USERNAME }}""
          password: ""${{ secrets.ACR_PASSWORD }}""
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile3
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x
          push: true
          tags: registry.cn-hangzhou.aliyuncs.com/moneynote/moneynote-all-no-mysql:latest
---
name: all no mysql hub image

# 触发条件：在 push 到 main 分支后
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build
        run: chmod +x ./gradlew && ./gradlew bootJar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile3
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x
          push: true
          tags: markliu2018/moneynote-all-no-mysql:latest
---
name: all hub image

# 触发条件：在 push 到 main 分支后
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Free Disk space
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to ""true"" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # ""false"" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build
        run: chmod +x ./gradlew && ./gradlew bootJar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile2
          platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
          push: true
          tags: markliu2018/moneynote-all:latest
---
name: api docker hub image

# 触发条件：在 push 到 main 分支后
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build
        run: chmod +x ./gradlew && ./gradlew bootJar
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x
          push: true
          tags: markliu2018/moneynote-api:latest
---
"
TuGraph-family;tugraph-analytics;TuGraph-family/tugraph-analytics;https://github.com/TuGraph-family/tugraph-analytics;https://api.github.com/repos/TuGraph-family/tugraph-analytics;master;05/06/2023 04:52;21/04/2024 10:59;TRUE;"name: Java CI with Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  JAVA_TOOL_OPTIONS: -Xmx3g

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Print available memory
        run: free -m

      - name: Set time zone
        run: sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Setup Protoc
        uses: arduino/setup-protoc@v2
        with:
          version: ""21.7""

      - name: Setup Rust
        run: |
          rustup toolchain install nightly-2023-08-15
          rustup component add rustfmt --toolchain nightly-2023-08-15
          rustup component add clippy --toolchain nightly-2023-08-15

      - name: Build CStore
        run: |
          cd geaflow-cstore
          touch ~/.cstore_buildrc && make features mod=0 && source ~/.cstore_buildrc
          cd java && ./build.sh
        env:
          OSTYPE: Linux

      - name: CStore Test
        run: |
          cd geaflow-cstore
          make all

      - name: Build and Test
        run: mvn -B -e clean test -Duser.timezone=Asia/Shanghai

---
"
MCRcortex;nekodetector;MCRcortex/nekodetector;https://github.com/MCRcortex/nekodetector;https://api.github.com/repos/MCRcortex/nekodetector;master;07/06/2023 12:01;20/04/2024 09:17;TRUE;"name: Build on push or pull request

on: [ push, pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}
          arguments: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: build/libs

---
name: Release

on:
  push:
    tags:
      - '*'

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Grab and store version
        run: |
          tag_name=$(echo ${{ github.ref }} | grep -oE ""[^/]+$"")
          echo ""VERSION=$tag_name"" >> $GITHUB_ENV

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}
          # specify the build version, overrides whatever is in the build.gradle file
          arguments: build -PoverrideVersion=${{ env.VERSION }}

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          name: Neko Detector ${{ env.VERSION }}
          draft: true
          prerelease: false
          files: |
            jarscanner-${{ env.VERSION }}.jar

---
"
tgscan-dev;tgscan;tgscan-dev/tgscan;https://github.com/tgscan-dev/tgscan;https://api.github.com/repos/tgscan-dev/tgscan;main;19/06/2023 11:29;18/04/2024 06:41;TRUE;"name: Deploy to Custom Host

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Connect to custom host and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /opt/tgscan/
            sh startup.sh
            echo ""Done!""

---
"
c0olw;NacosRce;c0olw/NacosRce;https://github.com/c0olw/NacosRce;https://api.github.com/repos/c0olw/NacosRce;main;29/06/2023 03:35;21/04/2024 10:48;FALSE;
digitalinnovationone;santander-dev-week-2023-api;digitalinnovationone/santander-dev-week-2023-api;https://github.com/digitalinnovationone/santander-dev-week-2023-api;https://api.github.com/repos/digitalinnovationone/santander-dev-week-2023-api;main;06/07/2023 14:18;22/04/2024 03:06;FALSE;
langchain4j;langchain4j;langchain4j/langchain4j;https://github.com/langchain4j/langchain4j;https://api.github.com/repos/langchain4j/langchain4j;main;20/06/2023 17:30;22/04/2024 13:34;TRUE;"name: Build and Publish Docs to GitHub Pages

on:
  release:
    types:
      - created
  # Allow running this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Generate Javadoc
        run: mvn javadoc:aggregate -DskipTests

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - run: cd docs && npm ci
      - run: cd docs && npm run build
      - run: cp -R target/site/apidocs docs/build/

      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload entire repository
          path: './docs/build/.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
---
name: Deploy Javadoc
# in folder apidocs/

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: ""pages""
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Check Out Source Code
        uses: actions/checkout@v2

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Generate Javadoc
        run: mvn javadoc:aggregate -DskipTests -pl '!code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot,!langchain4j-neo4j'

      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload site folder
          path: './target/site/.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

---
name: Java CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  java_build:
    strategy:
      matrix:
        java_version: [8, 11, 17, 21]
        include:
          - java_version: '8'
            included_modules: '-pl !code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot,!langchain4j-cassandra,!langchain4j-infinispan,!langchain4j-neo4j,!langchain4j-opensearch,!langchain4j-azure-ai-search'
          - java_version: '11'
            included_modules: '-pl !code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot,!langchain4j-infinispan,!langchain4j-neo4j'
          - java_version: '17'
            included_modules: '-pl !code-execution-engines/langchain4j-code-execution-engine-graalvm-polyglot'
          - java_version: '21'
            included_modules: ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Build with JDK ${{ matrix.java_version }}
        run: mvn --batch-mode install -DskipITs ${{ matrix.included_modules }}

  # For checking some compliance things (require a recent JDK due to plugins so in a separate step)
  compliance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
        # Check we only rely on permissive licenses in the main parts of the library:
      - name: License Compliance
        run: mvn -P compliance org.honton.chas:license-maven-plugin:compliance

# TODO's
# - enable JDK 17 unit tests for langchain4j-code-execution-engine-graalvm-polyglot
# - setup integration tests
# - these require an openAI (and hugging face, etc) token
# - do so that they always run for commits on main
# - make the running be manually triggered for PRs (we don't want to burn through credits)

---
name: release

on:
  workflow_dispatch:

jobs:

  release:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Setup Testcontainers Cloud Client
        uses: atomicjar/testcontainers-cloud-setup-action@v1
        with:
          token: ${{ secrets.TC_CLOUD_TOKEN }}

      - name: release
        run: mvn -B -U --fail-at-end -DskipTests -DskipAnthropicITs -DskipLocalAiITs -DskipMilvusITs -DskipMongoDbAtlasITs -DskipOllamaITs -DskipVearchITs -DskipVertexAiGeminiITs -pl !langchain4j-core,!langchain4j-parent -Psign clean deploy
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_SEARCH_ENDPOINT: ${{ secrets.AZURE_SEARCH_ENDPOINT }}
          AZURE_SEARCH_KEY: ${{ secrets.AZURE_SEARCH_KEY }}
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
          ELASTICSEARCH_CLOUD_API_KEY: ${{ secrets.ELASTICSEARCH_CLOUD_API_KEY }}
          ELASTICSEARCH_CLOUD_URL: ${{ secrets.ELASTICSEARCH_CLOUD_URL }}
          GCP_CREDENTIALS_JSON: ${{ secrets.GCP_CREDENTIALS_JSON }}
          GCP_LOCATION: ${{ secrets.GCP_LOCATION }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_VERTEXAI_ENDPOINT: ${{ secrets.GCP_VERTEXAI_ENDPOINT }}
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
          MILVUS_API_KEY: ${{ secrets.MILVUS_API_KEY }}
          MILVUS_URI: ${{ secrets.MILVUS_URI }}
          MISTRAL_AI_API_KEY: ${{ secrets.MISTRAL_AI_API_KEY }}
          MONGODB_ATLAS_USERNAME: ${{ secrets.MONGODB_ATLAS_USERNAME }}
          MONGODB_ATLAS_PASSWORD: ${{ secrets.MONGODB_ATLAS_PASSWORD }}
          MONGODB_ATLAS_HOST: ${{ secrets.MONGODB_ATLAS_HOST }}
          NOMIC_API_KEY: ${{ secrets.NOMIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          WEAVIATE_API_KEY: ${{ secrets.WEAVIATE_API_KEY }}
          WEAVIATE_HOST: ${{ secrets.WEAVIATE_HOST }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}

---
name: release_core_and_parent

on:
  workflow_dispatch:

jobs:

  release:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: GPG_PASSPHRASE

      - name: release_core_and_parent
        run: mvn -B -U -pl langchain4j-core,langchain4j-parent -Psign clean deploy
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}

---
name: snapshot_release

# Only run on pushes to main:
# Replace with 'on: [push]' if you need to run tests on your PR
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  snapshot_release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
        # Modules specify the oldest java version that they support:
        # even if we build with version 21, produced jars should be compatible with
        # JVMs running the version specified in each module's maven.compiler.target property
          java-version: '21'
          distribution: 'temurin'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
      - name: snapshot_release
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        # Notes:
        #  - tests already run in a separate action (main)
        run: mvn -B -U --fail-at-end -DskipTests -DskipAnthropicITs -DskipLocalAiITs -DskipMilvusITs -DskipMongoDbAtlasITs -DskipOllamaITs -DskipVearchITs -DskipVertexAiGeminiITs -pl !langchain4j-core,!langchain4j-parent clean deploy

---
name: snapshot_release_core_and_parent

# Only run on pushes to main:
# Replace with 'on: [push]' if you need to run tests on your PR
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  snapshot_release_core_and_parent:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
        # Modules specify the oldest java version that they support:
        # even if we build with version 21, produced jars should be compatible with
        # JVMs running the version specified in each module's maven.compiler.target property
          java-version: '21'
          distribution: 'temurin'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_PASSWORD
      - name: snapshot_release_core_and_parent
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        # Notes:
        #  - tests already run in a separate action (main)
        run: mvn -B -U --fail-at-end -DskipTests -DskipAnthropicITs -DskipLocalAiITs -DskipMilvusITs -DskipMongoDbAtlasITs -DskipOllamaITs -DskipVearchITs -DskipVertexAiGeminiITs -pl langchain4j-core,langchain4j-parent clean deploy

---
"
BiliRoamingX;BiliRoamingX;BiliRoamingX/BiliRoamingX;https://github.com/BiliRoamingX/BiliRoamingX;https://api.github.com/repos/BiliRoamingX/BiliRoamingX;main;25/06/2023 09:40;22/04/2024 12:22;TRUE;"name: CI

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Retrieve version
        run: |
          version=`awk -F ""="" '$1 == ""version"" {print $2}' gradle.properties`
          commit_count=`git rev-list main --count`
          version=""${version}.r${commit_count}""
          echo ""VERSION=$version"" >> $GITHUB_ENV

      - name: Build with gradle
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: ./gradlew --no-daemon -Pversion=$VERSION dist

      - name: Upload integrations and patches
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: BiliRoamingX-${{ env.VERSION }}
          path: 'build'

---
"
spring-projects;spring-ai;spring-projects/spring-ai;https://github.com/spring-projects/spring-ai;https://api.github.com/repos/spring-projects/spring-ai;main;27/06/2023 20:57;22/04/2024 11:56;TRUE;"name: Artifactory Milestone Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: ""Milestone release version""
        required: true

jobs:
  build:
    name: Release milestone to Artifactory
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Capture release version
        run: echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV

      - name: Update release version
        run: mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION

      - name: Enforce release rules
        run: mvn org.apache.maven.plugins:maven-enforcer-plugin:enforce -Drules=requireReleaseDeps

      - name: Build with Maven and deploy to Artifactory's milestone repository
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn -P artifactory-milestone -s settings.xml --batch-mode -Dmaven.test.skip=true deploy

---
name: Artifactory Staging

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: ""Release version""
        required: true

jobs:
  build:
    name: Stage release to Artifactory
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Capture release version
        run: echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV

      - name: Update release version
        run: mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION

      - name: Enforce release rules
        run: mvn org.apache.maven.plugins:maven-enforcer-plugin:enforce -Drules=requireReleaseDeps

      - name: Build with Maven and deploy to Artifactory staging repository
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn -P artifactory-staging -s settings.xml --batch-mode -Dmaven.test.skip=true deploy

---
name: Continuous inspection build

on:
  schedule:
    - cron: '0 10 * * *' # Once per day at 10am UTC
  workflow_dispatch:

jobs:
  code-quality-analysis:
    name: code quality analysis report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Analyse test coverage with Jacoco
        run: mvn -P test-coverage verify

      - name: Analyse code quality with Sonar
        if: github.repository == 'spring-projects/spring-ai'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
        run: mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN


---
name: CI/CD build

on:
  push:
    branches: [ ""main"" ]

jobs:
  build:
    name: Build branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # - name: Cache Docker images.
      #   uses: ScribeMD/docker-cache@0.3.7
      #   with:
      #     key: docker-${{ runner.os }}-${{ hashFiles('**/OllamaImage.java') }}

      - name: Build with Maven and deploy to Artifactory
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SPRING_AI_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn -s settings.xml -Pintegration-tests -Dfailsafe.rerunFailingTestsCount=3 --batch-mode --update-snapshots deploy

      - name: Generate Java docs
        run: mvn javadoc:aggregate

      - name: Generate assembly
        working-directory: spring-ai-docs
        run: mvn assembly:single

      - name: Capture project version
        run: echo PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version --quiet -DforceStdout) >> $GITHUB_ENV

      - name: Setup SSH key
        env:
          DOCS_SSH_KEY: ${{ secrets.DOCS_SSH_KEY }}
          DOCS_SSH_HOST_KEY: ${{ secrets.DOCS_SSH_HOST_KEY }}
        run: |
          mkdir ""$HOME/.ssh""
          echo ""$DOCS_SSH_KEY"" > ""$HOME/.ssh/key""
          chmod 600 ""$HOME/.ssh/key""
          echo ""$DOCS_SSH_HOST_KEY"" > ""$HOME/.ssh/known_hosts""

      - name: Deploy docs
        env:
          DOCS_HOST: ${{ secrets.DOCS_HOST }}
          DOCS_PATH: ${{ secrets.DOCS_PATH }}
          DOCS_USERNAME: ${{ secrets.DOCS_USERNAME }}
        working-directory: spring-ai-docs/target
        run: |
          unzip spring-ai-$PROJECT_VERSION-docs.zip
          ssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST ""cd $DOCS_PATH && mkdir -p $PROJECT_VERSION/api""
          scp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$PROJECT_VERSION/api

---
name: Deploy Docs
on:
  workflow_dispatch:
  push:
    branches: [main, '[0-9].[0-9].x' ]
    tags: ['v[0-9].[0-9].[0-9]', 'v[0-9].[0-9].[0-9]-*']
permissions:
  actions: write
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'spring-projects'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: docs-build
          fetch-depth: 1
      - name: Dispatch (partial build)
        if: github.ref_type == 'branch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD) -f build-refname=${{ github.ref_name }}
      - name: Dispatch (full build)
        if: github.ref_type == 'tag'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r $(git rev-parse --abbrev-ref HEAD)

---
name: Documentation Upload

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: ""Release version""
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Capture release version
        run: echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Generate Java docs
        run: mvn javadoc:aggregate

      - name: Generate assembly
        working-directory: spring-ai-docs
        run: mvn assembly:single

      - name: Setup SSH key
        env:
          DOCS_SSH_KEY: ${{ secrets.DOCS_SSH_KEY }}
          DOCS_SSH_HOST_KEY: ${{ secrets.DOCS_SSH_HOST_KEY }}
        run: |
          mkdir ""$HOME/.ssh""
          echo ""$DOCS_SSH_KEY"" > ""$HOME/.ssh/key""
          chmod 600 ""$HOME/.ssh/key""
          echo ""$DOCS_SSH_HOST_KEY"" > ""$HOME/.ssh/known_hosts""

      - name: Deploy docs
        env:
          DOCS_HOST: ${{ secrets.DOCS_HOST }}
          DOCS_PATH: ${{ secrets.DOCS_PATH }}
          DOCS_USERNAME: ${{ secrets.DOCS_USERNAME }}
        working-directory: spring-ai-docs/target
        run: |
          unzip spring-ai-$RELEASE_VERSION-docs.zip
          ssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST ""cd $DOCS_PATH && mkdir -p $RELEASE_VERSION/api""
          scp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$RELEASE_VERSION


---
name: Maven Central Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: ""Release version""
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: Capture release version
        run: echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> $GITHUB_ENV

      - name: Prepare directory structure
        run: |
          mkdir -p nexus/org/springframework/ai/spring-ai-core/$RELEASE_VERSION
          mkdir -p nexus/org/springframework/ai/spring-ai-openai/$RELEASE_VERSION
          mkdir -p nexus/org/springframework/ai/spring-ai-azure-openai/$RELEASE_VERSION
          mkdir -p nexus/org/springframework/ai/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION

      - name: Download release files from Artifactory
        env:
          ARTIFACTORY_URL: ""https://repo.spring.io/libs-staging-local/org/springframework/ai""
        run: |          
          echo ""Downloading core artifacts""
          cd ../../../../../..
          cd nexus/org/springframework/ai/spring-ai-core/$RELEASE_VERSION
          wget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION.pom
          wget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION.jar
          wget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION-javadoc.jar
          wget $ARTIFACTORY_URL/spring-ai-core/$RELEASE_VERSION/spring-ai-core-$RELEASE_VERSION-sources.jar

          echo ""Downloading openai artifacts""
          cd ../../../../../..
          cd nexus/org/springframework/batch/spring-ai-openai/$RELEASE_VERSION
          wget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION.pom
          wget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION.jar
          wget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION-javadoc.jar
          wget $ARTIFACTORY_URL/spring-ai-openai/$RELEASE_VERSION/spring-ai-openai-$RELEASE_VERSION-sources.jar

          echo ""Downloading azure openai artifacts""
          cd ../../../../../..
          cd nexus/org/springframework/batch/spring-ai-azure-openai/$RELEASE_VERSION
          wget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION.pom
          wget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION.jar
          wget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION-javadoc.jar
          wget $ARTIFACTORY_URL/spring-ai-azure-openai/$RELEASE_VERSION/spring-ai-azure-openai-$RELEASE_VERSION-sources.jar

          echo ""Downloading autoconfiguration artifacts""
          cd ../../../../../..
          cd nexus/org/springframework/batch/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION
          wget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION.pom
          wget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION.jar
          wget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION-javadoc.jar
          wget $ARTIFACTORY_URL/spring-ai-spring-boot-autoconfigure/$RELEASE_VERSION/spring-ai-spring-boot-autoconfigure-$RELEASE_VERSION-sources.jar

      - name: Sign artifacts and release them to Maven Central
        uses: jvalkeal/nexus-sync@v0
        id: nexus
        with:
          url: ${{ secrets.OSSRH_URL }}
          username: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
          password: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
          staging-profile-name: ${{ secrets.OSSRH_STAGING_PROFILE_NAME }}
          create: true
          upload: true
          close: true
          release: true
          generate-checksums: true
          pgp-sign: true
          pgp-sign-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          pgp-sign-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

---
name: Maven Central Staging

on:
  workflow_dispatch:
    inputs:
      buildName:
        description: ""Artifactory build name""
        required: true
      buildNumber:
        description: ""Artifactory build number""
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      # to get spec file in .github
      - uses: actions/checkout@v2

      # Setup jfrog cli
      - uses: jfrog/setup-jfrog-cli@v1
        with:
          version: 1.43.2
        env:
          JF_ARTIFACTORY_SPRING: ${{ secrets.JF_ARTIFACTORY_SPRING }}

      # Extract build id from input
      - name: Extract Build Id
        run: |
          echo JFROG_CLI_BUILD_NAME=${{ github.event.inputs.buildName }} >> $GITHUB_ENV
          echo JFROG_CLI_BUILD_NUMBER=${{ github.event.inputs.buildNumber }} >> $GITHUB_ENV

      # Download released files
      - name: Download Release Files
        run: |
          jfrog rt download \
            --spec .github/release-files-spec.json \
            --spec-vars ""buildname=$JFROG_CLI_BUILD_NAME;buildnumber=$JFROG_CLI_BUILD_NUMBER""

      # Create checksums, signatures and create staging repo on central and upload
      - uses: jvalkeal/nexus-sync@v0
        id: nexus
        with:
          url: ${{ secrets.OSSRH_URL }}
          username: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
          password: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
          staging-profile-name: ${{ secrets.OSSRH_STAGING_PROFILE_NAME }}
          create: true
          upload: true
          generate-checksums: true
          pgp-sign: true
          pgp-sign-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          pgp-sign-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      # Print staging repo id
      - name: Print Staging Repo Id
        run: echo ${{ steps.nexus.outputs.staged-repository-id }}

---
name: Generate Release notes

on:
  workflow_dispatch:
    inputs:
      milestoneNumber:
        description: ""Milestone title""
        required: true
      generatorVersion:
        description: ""Changelog Generator version""
        required: true

jobs:
  build:
    name: Generate release notes
    runs-on: ubuntu-latest
    steps:
      - name: Capture milestone number and generator version
        run: |
          echo MILESTONE_NUMBER=${{ github.event.inputs.milestoneNumber }} >> $GITHUB_ENV
          echo GENERATOR_VERSION=${{ github.event.inputs.generatorVersion }} >> $GITHUB_ENV

      - name: Download changelog generator
        run: wget https://github.com/spring-io/github-changelog-generator/releases/download/v$GENERATOR_VERSION/github-changelog-generator.jar

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Prepare configuration file
        run: |
          cat << EOF > application.yml
          changelog:
            repository: spring-exprimental/spring-ai
            sections:
              - title: "":star: New features""
                labels: [ ""type: feature"" ]
              - title: "":rocket: Enhancements""
                labels: [ ""type: enhancement"" ]
              - title: "":lady_beetle: Bug fixes""
                labels: [ ""type: bug"" ]
              - title: "":notebook_with_decorative_cover: Documentation""
                labels: [ ""in: documentation"" ]
              - title: "":hammer: Tasks""
                labels: [ ""type: task"" ]
          EOF

      - name: Generate release notes
        run: java -jar github-changelog-generator.jar $MILESTONE_NUMBER release-notes.md

      - name: Print release notes
        run: cat release-notes.md

---
"
xiaou61;xiaou-easy-code;xiaou61/xiaou-easy-code;https://github.com/xiaou61/xiaou-easy-code;https://api.github.com/repos/xiaou61/xiaou-easy-code;master;20/07/2023 03:17;21/04/2024 02:00;FALSE;
oddfar;campus-imaotai;oddfar/campus-imaotai;https://github.com/oddfar/campus-imaotai;https://api.github.com/repos/oddfar/campus-imaotai;master;07/07/2023 12:37;22/04/2024 11:34;TRUE;"name: api
on:
  # 手动构建
  workflow_dispatch: 
  push:
    branches: [ ""master"",""dev"" ]
    tags: [ 'v*','V*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_SUBNAME: api
  WORKING_DIR: campus-modular

jobs:
  java:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        working-directory: ./
        run: mvn -B package -P prod  --file pom.xml
        
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.IMAGE_SUBNAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
     
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le

---
name: release
on:
  # 手动构建
  workflow_dispatch: 
    inputs:
        version_name:
          description: '版本号'
          required: false
          type: string

env:
  API_WORKING_DIR: campus-modular
  WEB_WORKING_DIR: vue_campus_admin

jobs:
  release:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./

    permissions: write-all

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      #--------------------构建jar--------------------
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        working-directory: ./
        run: mvn -B package -P prod  --file pom.xml

      # 设置 Maven pom 版本环境变量
      - name: Set Release version env variable
        run: |
          if [ ${{ github.event.inputs.version_name }} != """" ]; then
            echo ""RELEASE_VERSION=${{ github.event.inputs.version_name }}"" >> $GITHUB_ENV
          else
            # 获取maven项目里的版本号
            echo ""RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"" >> $GITHUB_ENV
          fi
          
      - name: Remane jar
        working-directory: ${{ env.API_WORKING_DIR }}
        run: |
          cd target
          # rename 's/(.*)\.jar/$1_${{ env.RELEASE_VERSION }}.jar/' *.jar
          for file in *.jar; do mv ""$file"" ""${file%.jar}_${{ env.RELEASE_VERSION }}.jar""; done
      #--------------------构建前端--------------------
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache ☕
        id: cache
        uses: actions/cache@v3
        with:
          path: vue_campus_admin/node_modules
          key: ${{runner.os}}-npm-caches-${{ hashfiles('package-lock.json') }}

      - name: Install 🔧
        working-directory: ${{ env.WEB_WORKING_DIR }}
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build 🔧
        working-directory: ${{ env.WEB_WORKING_DIR }}
        run: |
          npm run build:prod

      - name: Tar dist file
        working-directory: ${{ env.WEB_WORKING_DIR }}
        run: |
          tar -czvf dist_${{ env.RELEASE_VERSION }}.tar.gz dist

      
      # 上传文件并发布 Release
      - name: Create GitHub release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""v${{ env.RELEASE_VERSION }}""
          prerelease: false
          title: ""v${{ env.RELEASE_VERSION }}""
          files: |
            ${{ env.API_WORKING_DIR }}/target/*.jar
            ${{ env.WEB_WORKING_DIR }}/dist_*.tar.gz

---
name: web
on:
  # 手动构建
  workflow_dispatch:
  push:
    branches: [ ""master"",""dev"" ]
    tags: [ 'v*','V*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_SUBNAME: web
  WORKING_DIR: vue_campus_admin

jobs:
  node:

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache ☕
        id: cache
        uses: actions/cache@v3
        with:
          path: vue_campus_admin/node_modules
          key: ${{runner.os}}-npm-caches-${{ hashfiles('package-lock.json') }}

      - name: Install 🔧
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Build 🔧
        run: |
          npm run build:prod

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ env.IMAGE_SUBNAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: CP Docker conf
        run: |
           cp -r ../doc doc

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/386,linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le,linux/s390x
---
"
algorithmzuo;algorithm-journey;algorithmzuo/algorithm-journey;https://github.com/algorithmzuo/algorithm-journey;https://api.github.com/repos/algorithmzuo/algorithm-journey;main;03/08/2023 17:05;22/04/2024 12:52;FALSE;
neoforged;NeoForge;neoforged/NeoForge;https://github.com/neoforged/NeoForge;https://api.github.com/repos/neoforged/NeoForge;1.20.x;08/07/2023 18:30;21/04/2024 09:06;TRUE;"# File generated by the GradleUtils `setupGitHubActionsWorkflows` task, avoid modifying it directly
# The template can be found at https://github.com/neoforged/GradleUtils/blob/44d9e09cfa2c6032b84ac40495ea5ab7d64fe521/src/actionsTemplate/resources/.github/workflows/build-prs.yml

name: Build PRs

on:
  pull_request:
    types:
      - synchronize
      - opened
      - ready_for_review
      - reopened
  push:
    branches:
      - 'feature/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true

      # GradleUtils will append the branch name to the version,
      # but for that we need a properly checked out branch
      - name: Create branch for commit
        run:
          git switch -C pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.ref }}

      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: setup
          cache-read-only: false

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build
          cache-read-only: false

      - name: Publish artifacts
        uses: neoforged/action-pr-publishing/upload@v1

---
# File generated by the GradleUtils `setupGitHubActionsWorkflows` task, avoid modifying it directly
# The template can be found at https://github.com/neoforged/GradleUtils/blob/44d9e09cfa2c6032b84ac40495ea5ab7d64fe521/src/actionsTemplate/resources/.github/workflows/publish-prs.yml

name: Publish PRs to GitHub Packages

on:
  workflow_run:
    workflows: [Build PRs]
    types:
      - completed
  issue_comment:
    types:
      - edited
  pull_request_target:
    types:
      - opened

permissions:
  packages: write

jobs:
  publish-prs:
    if: true
    uses: neoforged/actions/.github/workflows/publish-prs.yml@main
    with:
      artifact_base_path: net/neoforged/neoforge/|net/neoforged/testframework/
      uploader_workflow_name: Build PRs
    secrets:
      PR_PUBLISHING_GH_APP_ID: ${{ secrets.PR_PUBLISHING_GH_APP_ID }}
      PR_PUBLISHING_GH_APP_KEY: ${{ secrets.PR_PUBLISHING_GH_APP_KEY }}

---
# File generated by the GradleUtils `setupGitHubActionsWorkflows` task, avoid modifying it directly
# The template can be found at https://github.com/neoforged/GradleUtils/blob/44d9e09cfa2c6032b84ac40495ea5ab7d64fe521/src/actionsTemplate/resources/.github/workflows/release.yml

name: Release

on:
  push:
    branches:
      - '1.*'

permissions:
  contents: read
  statuses: write

jobs:
  release:
    uses: neoforged/actions/.github/workflows/gradle-publish.yml@main
    with:
      java: 17
      pre_gradle_tasks: setup
      gradle_tasks: publish '-Pneogradle.runtime.platform.installer.debug=false'
      version_labels: -beta, -stable

    # We only publish the main repository. This way we avoid publishing Kits
    if: ${{ github.repository == 'neoforged/NeoForge' }}
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      MAVEN_USER: ${{ secrets.MAVEN_USER }}
      MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
      GPG_SUBKEY: ${{ secrets.GPG_SUBKEY }}
      GPG_SUBKEY_ID: ${{ secrets.GPG_SUBKEY_ID }}
      GPG_SUBKEY_PASSWORD: ${{ secrets.GPG_SUBKEY_PASSWORD }}
      
---
name: Run PR gametests

on:
  pull_request:
    types:
      - synchronize
      - opened
      - ready_for_review
      - reopened
  push:
    branches:
      - 'feature/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1000
          fetch-tags: true

      # GradleUtils will append the branch name to the version,
      # but for that we need a properly checked out branch
      - name: Create branch for commit
        run:
          git switch -C pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.ref }}

      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: setup
          cache-read-only: false

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :tests:runGameTestServer
          cache-read-only: false

---
"
apache;incubator-xtable;apache/incubator-xtable;https://github.com/apache/incubator-xtable;https://api.github.com/repos/apache/incubator-xtable;main;21/07/2023 21:07;22/04/2024 04:49;TRUE;"#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Azure CI

on:
  issue_comment:
    types: [ created, edited, deleted ]

permissions:
  statuses: write
  pull-requests: read
  issues: read

jobs:
  check-azure-ci-and-add-commit-status:
    if: |
      github.event.issue.pull_request != null &&
      github.event.comment.user.login == 'xtable-bot'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check PR state
        id: check_pr_state
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const issueNumber = context.issue.number;
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: issueNumber
            });
            
            // Only check open PRs and a PR that is not a HOTFIX
            const shouldSkip = (pullRequest.body.includes('HOTFIX: SKIP AZURE CI')
              || pullRequest.state != 'open');
            
            if (!shouldSkip) {
              const commitHash = pullRequest.head.sha;
              console.log(`Latest commit hash: ${commitHash}`);
              // Set the output variable to be used in subsequent step
              core.setOutput(""latest_commit_hash"", commitHash);
            }
            console.log(`Should skip Azure CI? ${shouldSkip}`);
            return shouldSkip;

      - name: Check Azure CI report and create commit status to PR
        if: steps.check_pr_state.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const latestCommitHash = '${{ steps.check_pr_state.outputs.latest_commit_hash }}'            
            const issueNumber = context.issue.number;
            const checkAzureCiAndCreateCommitStatus = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/azure_ci.js`);
            
            await checkAzureCiAndCreateCommitStatus({
              github,
              context,
              prNumber: issueNumber,
              latestCommitHash: latestCommitHash
            });
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Publish package to GitHub Packages
on:
  release:
    types: [created]
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Parse Version Number
        run: echo ""VERSION=$(echo ${{ github.event.release.tag_name }} | sed -e s/v//)"" >> $GITHUB_ENV
      - name: Set Version
        run: mvn versions:set -DnewVersion=""$VERSION""
      - name: Publish package
        run: mvn -ntp --batch-mode deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Scheduled Workflow

on:
  schedule:
    # Runs every 5 minutes
    - cron: '*/5 * * * *'

permissions:
  statuses: write
  pull-requests: read
  issues: read

jobs:
  process-new-and-updated-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Process new and updated PRs
        # We have to run any actions that require write permissions here
        # since the workflow triggered by events from a PR in a fork
        # (not apache/xtable but other_owner/xtable) does not run on a
        # GITHUB_TOKEN with write permissions (this is prohibited by
        # Apache).
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Cron schedule may not be reliable so giving buffer time to avoid missing recent PRs
            const since = new Date(new Date().getTime() - (900 * 1000)).toISOString();
            const query = `repo:${context.repo.owner}/${context.repo.repo} type:pr state:open base:main updated:>=${since}`;
            const openPrs = await github.paginate(github.rest.search.issuesAndPullRequests, {
              q: query,
              sort: 'updated',
              order: 'desc',
              per_page: 100
            });
            
            const checkAzureCiAndCreateCommitStatus = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/azure_ci.js`);
            
            console.log(`Number of PRs to process: ${openPrs.length}`);
            
            for (const pr of openPrs) {
              console.log(`*** Processing PR: ${pr.title}, URL: ${pr.html_url}`);
            
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });
              const latestCommitHash = pullRequest.head.sha;
            
              // Create commit status based on Azure CI report to PR
              await checkAzureCiAndCreateCommitStatus({
                github,
                context,
                prNumber: pr.number,
                latestCommitHash: latestCommitHash
              });
            }
---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Site Build

on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/site-build.yml'
      - 'website/**'

jobs:
  site-build:
    name: Site Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./website
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./website/package-lock.json

      - run: npm install --frozen-lockfile
      - run: npm run build


---
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: Site Deploy

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/site-deploy.yml'
      - 'website/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    defaults:
      run:
        working-directory: website
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
            node-version: '20'
            cache: 'npm'
            cache-dependency-path: ./website/package-lock.json

      - run: npm install --frozen-lockfile
      - run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          personal_token: ${{ secrets.XTABLE_SITE_DEPLOY }}
          external_repository: apache/incubator-xtable-site
          keep_files: true
          publish_branch: main
          publish_dir: ./website/build
          user_name: ${{ github.actor }}
          user_email: ${{ github.actor }}@users.noreply.github.com
---
"
qiutiandefeng;yftrain;qiutiandefeng/yftrain;https://github.com/qiutiandefeng/yftrain;https://api.github.com/repos/qiutiandefeng/yftrain;main;15/08/2023 09:15;22/04/2024 09:35;FALSE;
blossom-editor;blossom;blossom-editor/blossom;https://github.com/blossom-editor/blossom;https://api.github.com/repos/blossom-editor/blossom;dev;07/08/2023 05:02;22/04/2024 13:39;TRUE;"name: ""Close inactive issues""
on:
  schedule:
    - cron: ""10 15 * * *""

permissions:
  issues: write

jobs:
  stale:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write

    steps:
      - uses: actions/stale@v5
        with:
          debug-only: false
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          days-before-issue-stale: 30
          days-before-issue-close: 7
          stale-issue-label: ""stale""
          stale-issue-message: ""This issue has been open 30 days with no activity. This will be closed in 7 days.""
          close-issue-message: ""This issue has been automatically marked as stale because it hasn't had any recent activity.""
          days-before-pr-stale: -1
          days-before-pr-close: -1
          exempt-issue-labels: bug,enhancement

---
"
stateIs0;exp;stateIs0/exp;https://github.com/stateIs0/exp;https://api.github.com/repos/stateIs0/exp;main;09/08/2023 12:44;19/04/2024 09:07;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B -Dmaven.test.skip=true  package --file pom.xml 

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#    - name: Update dependency graph
#      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

---
"
yf-team;yf-boot;yf-team/yf-boot;https://github.com/yf-team/yf-boot;https://api.github.com/repos/yf-team/yf-boot;main;28/08/2023 09:27;10/04/2024 02:26;FALSE;
Nekogram;Nekogram;Nekogram/Nekogram;https://github.com/Nekogram/Nekogram;https://api.github.com/repos/Nekogram/Nekogram;main;10/09/2023 09:07;22/04/2024 12:03;FALSE;
Skythinker616;gpt-assistant-android;Skythinker616/gpt-assistant-android;https://github.com/Skythinker616/gpt-assistant-android;https://api.github.com/repos/Skythinker616/gpt-assistant-android;master;13/09/2023 05:08;21/04/2024 16:13;FALSE;
xuchengsheng;spring-reading;xuchengsheng/spring-reading;https://github.com/xuchengsheng/spring-reading;https://api.github.com/repos/xuchengsheng/spring-reading;master;15/09/2023 08:42;22/04/2024 11:44;FALSE;
chiteroman;BootloaderSpoofer;chiteroman/BootloaderSpoofer;https://github.com/chiteroman/BootloaderSpoofer;https://api.github.com/repos/chiteroman/BootloaderSpoofer;main;18/09/2023 17:12;22/04/2024 00:28;TRUE;"name: Android CI

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out
      uses: actions/checkout@v4
      with:
        submodules: ""recursive""
        fetch-depth: 0

    - name: set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew assembleRelease
      
    - name: Upload app-release.apk
      uses: actions/upload-artifact@v4
      with:
        name: BootloaderSpoofer
        path: app/build/outputs/apk/release/app-release.apk
---
name: Update Gradle Wrapper

on:
  schedule:
    - cron: ""0 0 * * *""
  workflow_dispatch:

jobs:
  update-gradle-wrapper:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: ""temurin""
          java-version: 21

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Update Gradle Wrapper
        uses: gradle-update/update-gradle-wrapper-action@v1

---
"
google;bindiff;google/bindiff;https://github.com/google/bindiff;https://api.github.com/repos/google/bindiff;main;20/09/2023 08:41;22/04/2024 11:15;TRUE;"name: cmake-build

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-22.04
        - os: macos-12
        - os: windows-2022
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        path: bindiff
    - uses: actions/checkout@v4
      with:
        repository: google/binexport
        path: binexport

    - name: Install ninja-build tool
      uses: turtlesec-no/get-ninja@1.1.0

    - name: Create Build Environment
      env:
        IDASDK_SECRET: ${{ secrets.IDASDK_SECRET }}
      working-directory: ${{ github.workspace }}
      shell: bash
      run: |
        mkdir -p ""${{ runner.workspace }}/build"" \
                 ida/idasdk
        mv binexport/ida/idasdk/idasdk*.gpg \
           ida/idasdk/
        binexport/.github/scripts/decrypt_secret.sh
        unzip -q ""${{ runner.workspace }}/build/idasdk_teams80.zip"" \
              -d ""${{ runner.workspace }}/build/""

    - name: Enable Developer Command Prompt (Windows)
      if: matrix.os == 'windows-2022'
      uses: ilammy/msvc-dev-cmd@v1.12.1

    - name: Enable mold linker (Linux)
      if: matrix.os == 'ubuntu-22.04'
      uses: rui314/setup-mold@v1

    - name: Configure CMake
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      run: |
        cmake ""${{ github.workspace }}/bindiff"" -G Ninja \
          ""-DCMAKE_BUILD_TYPE=${BUILD_TYPE}"" \
          ""-DIdaSdk_ROOT_DIR=${{ runner.workspace }}/build/idasdk_teams80""

    - name: Build
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      run: cmake --build . --config ""${BUILD_TYPE}""

    - name: Test
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      run: ctest --build-config ""${BUILD_TYPE}"" --output-on-failure -R '^[A-Z]'

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3.1.2
      with:
        name: BinDiff-${{ runner.os }}
        path: |
          ${{ runner.workspace }}/build/bindiff
          ${{ runner.workspace }}/build/ida/bindiff*
          ${{ runner.workspace }}/build/tools/bindiff*

---
"
jar-analyzer;jar-analyzer;jar-analyzer/jar-analyzer;https://github.com/jar-analyzer/jar-analyzer;https://api.github.com/repos/jar-analyzer/jar-analyzer;master;07/10/2023 17:42;22/04/2024 09:30;TRUE;"name: jar analyzer build

on:
  workflow_dispatch:

env:
  VERSION: ""2.15""

jobs:

  build:
    runs-on: windows-2019
    steps:
      - name: checkout the source
        uses: actions/checkout@v4
        with:
          path: jar-analyzer

      - name: set up java 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'zulu'
          cache: maven

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: build agent
        run: |
          Remove-Item ""lib\agent.jar"" -Force
          cd agent
          .\package.bat
        working-directory: jar-analyzer

      - name: build rasp
        run: |
          cd jar-analyzer-rasp
          .\package.bat
        working-directory: jar-analyzer

      - name: build searcher
        run: |
          cd class-searcher
          .\package.bat
        working-directory: jar-analyzer

      - name: build core
        run: |
          .\package.bat
        working-directory: jar-analyzer

      - name: build release
        run: |
          python .\build.py
        working-directory: jar-analyzer

      - name: copy jar
        run: |
          Copy-Item ""target\jar-analyzer-${{ env.VERSION }}-jar-with-dependencies.jar"" -Destination ""release\jar-analyzer-${{ env.VERSION }}.jar""
        working-directory: jar-analyzer

      - name: download jre
        run: |
          curl -L ""https://github.com/jar-analyzer/workflow_jre/releases/download/zulu-8u412/jre.zip"" -o ""jre.zip""
        working-directory: jar-analyzer

      - name: unpack jre
        run: >
          unzip jre.zip -d release\jar-analyzer-${{ env.VERSION }}-windows-full\
        working-directory: jar-analyzer

      - name: zip release
        run: |
          dir
          Compress-Archive -Path ""jar-analyzer-${{ env.VERSION }}-windows-system\"" -DestinationPath ""jar-analyzer-${{ env.VERSION }}-windows-system.zip"" -CompressionLevel Optimal
          Compress-Archive -Path ""jar-analyzer-${{ env.VERSION }}-windows-full\"" -DestinationPath ""jar-analyzer-${{ env.VERSION }}-windows-full.zip"" -CompressionLevel Optimal
          Compress-Archive -Path ""jar-analyzer-${{ env.VERSION }}\"" -DestinationPath ""jar-analyzer-${{ env.VERSION }}.zip"" -CompressionLevel Optimal
        working-directory: jar-analyzer/release
        shell: pwsh


      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-analyzer
          path: |
            jar-analyzer/release/jar-analyzer-${{ env.VERSION }}-windows-full.zip
            jar-analyzer/release/jar-analyzer-${{ env.VERSION }}-windows-system.zip
            jar-analyzer/release/jar-analyzer-${{ env.VERSION }}.zip

---
name: maven check

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: set up java 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'zulu'
        cache: maven
    - name: check core maven
      run: mvn -B clean package -DskipTests --file pom.xml --file pom.xml
    - name: check rasp maven
      run: cd jar-analyzer-rasp && mvn -B clean package -DskipTests --file pom.xml
    - name: check agent maven
      run: cd agent && mvn -B clean package -DskipTests --file pom.xml --file pom.xml
    - name: check clazz searcher
      run: cd class-searcher && mvn -B clean package -DskipTests --file pom.xml --file pom.xml

---
"
Melledy;LunarCore;Melledy/LunarCore;https://github.com/Melledy/LunarCore;https://api.github.com/repos/Melledy/LunarCore;development;10/10/2023 14:57;22/04/2024 12:34;TRUE;"name: Build LunarCore
on:
  workflow_dispatch: ~
  push:
    paths:
      - ""**.java""
    branches:
      - main
      - development
  pull_request:
    paths:
      - ""**.java""
    types:
      - opened
      - synchronize
      - reopened
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Setup Java
          uses: actions/setup-java@v3
          with:
            distribution: temurin
            java-version: '17'
        - name: Cache gradle files
          uses: actions/cache@v2
          with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
              ./.gradle/loom-cache
            key: ${{ runner.os }}-gradle-${{ hashFiles('*.gradle', 'gradle.properties', '**/*.accesswidener') }}
            restore-keys: |
              ${{ runner.os }}-gradle-
        - name: Run Gradle
          run: chmod +x gradlew && ./gradlew && ./gradlew jar
        - name: Upload build
          uses: actions/upload-artifact@v3
          with:
            name: LunarCore
            path: LunarCore.jar

---
"
WuKongOpenSource;Wukong_HRM;WuKongOpenSource/Wukong_HRM;https://github.com/WuKongOpenSource/Wukong_HRM;https://api.github.com/repos/WuKongOpenSource/Wukong_HRM;main;17/10/2023 07:49;22/04/2024 00:54;FALSE;
charonlight;NacosExploitGUI;charonlight/NacosExploitGUI;https://github.com/charonlight/NacosExploitGUI;https://api.github.com/repos/charonlight/NacosExploitGUI;main;18/10/2023 13:59;21/04/2024 09:35;FALSE;
whitechi73;OpenShamrock;whitechi73/OpenShamrock;https://github.com/whitechi73/OpenShamrock;https://api.github.com/repos/whitechi73/OpenShamrock;master;25/10/2023 15:14;21/04/2024 07:54;TRUE;"name: Build Shamrock APK

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths-ignore:
      - '**.md'
      - '**.txt'
      - '.github/**'
      - '.idea/**'
      - '!.github/workflows/**'

jobs:
  build:
    name: Build Shamrock
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: ""adopt""

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-core-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: gradle-deps

      - name: Cache Gradle Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/build-cache-*
            ~/.gradle/buildOutputCleanup/cache.properties
          key: gradle-builds-core-${{ github.sha }}
          restore-keys: gradle-builds

      - name: Build with Gradle
        run: |
          echo ${{ secrets.SIGN_KEYSTORE_BASE64 }} | base64 -d > keystore.jks
          chmod +x ./gradlew
          ./gradlew :app:assembleRelease --build-cache --parallel --daemon --warning-mode all --stacktrace
          echo ""APK_FILE_ALL=$(find app/build/outputs/apk/app/release -name '*.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_ARM64=$(find app/build/outputs/apk/arm64/release -name '*.apk')"" >> $GITHUB_ENV
          echo ""APK_FILE_X86_64=$(find app/build/outputs/apk/x64/release -name '*.apk')"" >> $GITHUB_ENV
        env:
          KEYSTORE_PATH: ""../keystore.jks""
          KEYSTORE_PASSWORD: ${{ secrets.SIGN_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.SIGN_ALIAS }}
          KEY_PASSWORD: ${{ secrets.SIGN_KEY_PASSWORD }}

      - name: Set Shamrock Version
        run: |
          version_name_all=$(basename -s .apk ""${{ env.APK_FILE_ALL }}"")
          version_name_arm64=$(basename -s .apk ""${{ env.APK_FILE_ARM64 }}"")
          version_name_x86_64=$(basename -s .apk ""${{ env.APK_FILE_X86_64 }}"")
          echo ""SHAMROCK_VERSION_ALL=$version_name_all"" >> $GITHUB_ENV
          echo ""SHAMROCK_VERSION_ARM64=$version_name_arm64"" >> $GITHUB_ENV
          echo ""SHAMROCK_VERSION_x86_64=$version_name_x86_64"" >> $GITHUB_ENV

      - name: Show Artifacts SHA256
        run: |
          echo ""### Build Success :rocket:"" >> $GITHUB_STEP_SUMMARY
          echo ""|ABI|SHA256|"" >> $GITHUB_STEP_SUMMARY
          echo ""|:--------:|:----------|"" >> $GITHUB_STEP_SUMMARY
          all=($(sha256sum ""${{ env.APK_FILE_ALL }}""))
          echo ""|all|$all"" >> $GITHUB_STEP_SUMMARY
          arm64=($(sha256sum ""${{ env.APK_FILE_ARM64 }}""))
          echo ""|arm64|$arm64"" >> $GITHUB_STEP_SUMMARY
          x86_64=($(sha256sum ""${{ env.APK_FILE_X86_64 }}""))
          echo ""|x86_64|$x86_64"" >> $GITHUB_STEP_SUMMARY

      - name: Upload ALL APK RELEASE
        uses: actions/upload-artifact@v4
        with:
          name: ""${{ env.SHAMROCK_VERSION_ALL }}""
          path: ""${{ env.APK_FILE_ALL }}""

      - name: Upload ARM64 APK RELEASE
        uses: actions/upload-artifact@v4
        with:
          name: ""${{ env.SHAMROCK_VERSION_ARM64 }}""
          path: ""${{ env.APK_FILE_ARM64 }}""

      - name: Upload X86_64 APK RELEASE
        uses: actions/upload-artifact@v4
        with:
          name: ""${{ env.SHAMROCK_VERSION_x86_64 }}""
          path: ""${{ env.APK_FILE_X86_64 }}""
---
"
ReChronoRain;HyperCeiler;ReChronoRain/HyperCeiler;https://github.com/ReChronoRain/HyperCeiler;https://api.github.com/repos/ReChronoRain/HyperCeiler;main;27/10/2023 19:17;22/04/2024 10:10;TRUE;"name: Android Main CI

on:
  push:
    branches: [ ""main"" ]
    paths-ignore:
      - "".github/**""
      - ""!.github/workflows/**""
      - "".idea/""
      - ""doc/*""
      - ""*.md""
      - ""app/src/assets/**""
      - "".github/workflows/crowdin.yml""
      - ""crowdin.yml""
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build App
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Create Sign File
        if: github.ref == 'refs/heads/main'
        run: |
          touch signing.properties
          echo storePassword=${{ secrets.KEY_STORE_PASSWORD }} >> signing.properties
          echo keyAlias=${{ secrets.ALIAS }} >> signing.properties
          echo keyPassword='${{ secrets.KEY_STORE_PASSWORD }}' >> signing.properties
          echo storeFile=key.jks >> signing.properties
          echo ${{ secrets.SIGNING_KEY }} | base64 --decode > key.jks

      - name: Build with Gradle
        shell: bash
        run: ./gradlew assembleCanary

      - name: Find APKs
        run: |
          echo ""APK_FILE_CANARY=$(find app/build/outputs/apk/canary -name '*.apk')"" >> $GITHUB_ENV

      - name: Show APKs SHA256
        if: success()
        run: |
          echo ""### Build Success"" >> $GITHUB_STEP_SUMMARY
          echo ""|Artifact|SHA256|"" >> $GITHUB_STEP_SUMMARY
          echo ""|:--------:|:----------|"" >> $GITHUB_STEP_SUMMARY
          canary=$(sha256sum ""${{ env.APK_FILE_CANARY }}"")
          echo ""SHA256=$canary"" >> $GITHUB_ENV
          echo ""|Canary|$canary"" >> $GITHUB_STEP_SUMMARY

      - name: Upload Canary APK
        if: ${{ contains(github.event.head_commit.message, '[unupload]') == false && contains(github.event.head_commit.message, '[skip post]') == false  }}
        uses: actions/upload-artifact@v4
        with:
          name: HyperCeiler Canary
          path: ${{ env.APK_FILE_CANARY }}

      - name: Post to Canary Channel
        if: ${{ github.ref == 'refs/heads/main' && github.ref_type != 'tag' && contains(github.event.head_commit.message, '[skip post]') == false && contains(github.event.head_commit.message, 's#') == false }}
        shell: bash
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CANARY: ${{ env.APK_FILE_CANARY }}
          COMMIT_MESSAGE: |+
            New push to GitHub
            ```
            ${{ github.event.head_commit.message }}
            ```by `${{ github.event.head_commit.author.name }}`
            See commit detail [here](${{ github.event.head_commit.url }})
        run: |
          ESCAPED=$(python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ[""COMMIT_MESSAGE""])))')
          cd ${{ github.workspace }}
          curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${CHANNEL_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://canary%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D"" -F canary=""@${CANARY}""

---
name: Android PR Debug

on:
  pull_request_target:
    types: [ opened, synchronize]
    paths-ignore:
      - "".github/**""
      - ""!.github/workflows/**""
      - "".idea/""
      - ""doc/*""
      - ""*.md""
      - ""app/src/assets/**""
      - "".github/workflows/crowdin.yml""
      - ""crowdin.yml""
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build App
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Build with Gradle
        shell: bash
        run: ./gradlew assembleDebug

      - name: Find APKs
        run: |
          echo ""APK_FILE_DEBUG=$(find app/build/outputs/apk/debug -name '*.apk')"" >> $GITHUB_ENV

      - name: Show APKs SHA256
        if: success()
        run: |
          echo ""### Build Success"" >> $GITHUB_STEP_SUMMARY
          echo ""|Artifact|SHA256|"" >> $GITHUB_STEP_SUMMARY
          echo ""|:--------:|:----------|"" >> $GITHUB_STEP_SUMMARY
          canary=$(sha256sum ""${{ env.APK_FILE_DEBUG }}"")
          echo ""SHA256=$debug"" >> $GITHUB_ENV
          echo ""|Debug|$debug"" >> $GITHUB_STEP_SUMMARY

      - name: Post to Debug Group
        shell: bash
        env:
          GROUP_DEBUG_ID: ${{ secrets.GROUP_DEBUG_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          DEBUG: ${{ env.APK_FILE_DEBUG }}
          COMMIT_MESSAGE:  |+
            New push to GitHub
            by `${{ github.triggering_actor }}`
            See commit detail [here](${{ github.event.head_commit.url }})
        run: |
          ESCAPED=$(python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ[""COMMIT_MESSAGE""])))')
          cd ${{ github.workspace }}
          curl -v ""https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup?chat_id=${GROUP_DEBUG_ID}&media=%5B%7B%22type%22:%22document%22,%20%22media%22:%22attach://debug%22,%22parse_mode%22:%22MarkdownV2%22,%22caption%22:${ESCAPED}%7D%5D"" -F debug=""@${DEBUG}""

---
name: Crowdin Action

on:
   workflow_dispatch:
   push:
     branches: [ main ]
     paths:
       - app/src/main/res/values/strings.xml
   schedule:
     - cron: '0 0 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
   synchronize-with-crowdin:
     runs-on: ubuntu-latest
     steps:
     - name: Checkout
       uses: actions/checkout@v4

     - name: Crowdin Action
       uses: crowdin/github-action@master
       with:
         # Upload and download translation settings
         upload_sources: true
         upload_translations: true
         download_translations: true
         skip_untranslated_files: true

         # Pull request settings
         create_pull_request: true
         localization_branch_name: crowdin_branch
         pull_request_labels: 'enhancement, documentation'
         pull_request_title: '[Translation] Update translation from Crowdin'

         # Global settings
         config: 'crowdin.yml'
         crowdin_branch_name: main
       env:
         GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
         CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
         CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}

---
"
Yanyutin753;PandoraNext-TokensTool;Yanyutin753/PandoraNext-TokensTool;https://github.com/Yanyutin753/PandoraNext-TokensTool;https://api.github.com/repos/Yanyutin753/PandoraNext-TokensTool;main;17/11/2023 12:37;22/04/2024 11:13;TRUE;"# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --/rearServer/pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

---
"
WuKongOpenSource;Wukong_nocode;WuKongOpenSource/Wukong_nocode;https://github.com/WuKongOpenSource/Wukong_nocode;https://api.github.com/repos/WuKongOpenSource/Wukong_nocode;master;27/11/2023 07:25;20/04/2024 12:55;FALSE;
Mahmud0808;ColorBlendr;Mahmud0808/ColorBlendr;https://github.com/Mahmud0808/ColorBlendr;https://api.github.com/repos/Mahmud0808/ColorBlendr;master;06/12/2023 14:20;22/04/2024 05:12;TRUE;"name: Crowdin Synchronization

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:

  synchronize-with-crowdin:
    name: Synchronize with Crowdin
    if: github.repository_owner == 'Mahmud0808'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Sync Translations
        uses: crowdin/github-action@v1
        with:
          upload_translations: false
          upload_sources: true
          download_translations: true
          localization_branch_name: localization
          create_pull_request: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
---
name: Crowdin Download

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:

  synchronize-with-crowdin:
    name: Download translations from Crowdin
    if: github.repository_owner == 'Mahmud0808'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download translations
        uses: crowdin/github-action@v1
        with:
          upload_translations: false
          upload_sources: false
          download_translations: true
          localization_branch_name: localization
          create_pull_request: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
---
name: Crowdin Upload

on:
  push:
    branches: [ ""master"" ]
    paths:
      - 'app/src/main/res/values/strings.xml'
  workflow_dispatch:

jobs:
  synchronize-with-crowdin:
    name: Upload source to Crowdin
    if: github.repository_owner == 'Mahmud0808'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload Strings
        uses: crowdin/github-action@v1
        with:
          upload_translations: false
          upload_sources: true
          download_translations: false
          localization_branch_name: localization
          create_pull_request: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}

---
"
conductor-oss;conductor;conductor-oss/conductor;https://github.com/conductor-oss/conductor;https://api.github.com/repos/conductor-oss/conductor;main;08/12/2023 07:06;22/04/2024 12:22;TRUE;"name: CI

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - name: Set up Zulu JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build with Gradle
        if: github.ref != 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew build --scan
      - name: Build and Publish snapshot
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        run: |
          echo ""Running build for commit ${{ github.sha }}""
          ./gradlew build
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: '**/build/reports'
      - name: Store Buildscan URL
        uses: actions/upload-artifact@v3
        with:
          name: build-scan
          path: 'buildscan.log'
  build-ui:
    runs-on: ubuntu-latest
    container: cypress/browsers:node14.17.6-chrome100-ff98
    defaults:
      run:
        working-directory: ui
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: yarn install

      - name: Build UI
        run: yarn run build

      - name: Run E2E Tests
        uses: cypress-io/github-action@v4
        with: 
          working-directory: ui
          install: false
          start: yarn run serve-build
          wait-on: 'http://localhost:5000'
      
      - name: Run Component Tests
        uses: cypress-io/github-action@v4
        with: 
          working-directory: ui
          install: false
          component: true

      - name: Archive test screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-screenshots
          path: ui/cypress/screenshots
      
      - name: Archive test videos
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: cypress-videos
          path: ui/cypress/videos


---
name: Publish docs via GitHub Pages
on:
  workflow_dispatch

jobs:
  build:
    name: Deploy docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v2

      - name: Deploy docs
        uses: mhausenblas/mkdocs-deploy-gh-pages@master
        env:
          GITHUB_TOKEN: ${{ secrets.DOCSITE_TOKEN }}
          CONFIG_FILE: mkdocs.yml
          REQUIREMENTS: requirements.txt

---
name: Publish Conductor OSS toMaven Central
on:
  release:
    types:
      - released
      - prereleased

permissions:
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    name: Gradle Build and Publish
    steps:
      - uses: actions/checkout@v3
      - name: Set up Zulu JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Publish release
        run: |
          export VERSION=""${{github.ref_name}}""
          export PUBLISH_VERSION=`echo ${VERSION:1}`
          echo Publishing version $PUBLISH_VERSION
          ./gradlew publish -Pversion=$PUBLISH_VERSION -Pusername=${{ secrets.SONATYPE_USERNAME }} -Ppassword=${{ secrets.SONATYPE_PASSWORD }}
        env:
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
---
name: Release Drafter

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      contents: write  # for release-drafter/release-drafter to create a github release
      pull-requests: write  # for release-drafter/release-drafter to add label to PR
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

---
"
gunnarmorling;1brc;gunnarmorling/1brc;https://github.com/gunnarmorling/1brc;https://api.github.com/repos/gunnarmorling/1brc;main;28/12/2023 10:13;22/04/2024 13:41;TRUE;"#
#  Copyright 2023 The original authors
#
#  Licensed under the Apache License, Version 2.0 (the ""License"");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an ""AS IS"" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

name: Build

on:
  # Enable manual re-run
  workflow_dispatch: { }
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Cache SDKMan
        id: cache-sdkman
        uses: actions/cache@v4
        with:
          path: ~/.sdkman
          key: ${{ runner.os }}-sdkman

      - name: 'Cache Maven packages'
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 'Setup SDKMAN'
        uses: sdkman/sdkman-action@b1f9b696c79148b66d3d3a06f7ea801820318d0f
        id: sdkman

      - name: 'Build project'
        shell: bash
        run: |
          source ""$HOME/.sdkman/bin/sdkman-init.sh""
          if [ -f ${{ format('src/main/java-22/dev/morling/onebrc/CalculateAverage_{0}.java', github.event.pull_request.user.login || '') }} ]; then
            sdk install java 22.ea.32-open || true
            sdk use java 22.ea.32-open
          fi
          ./mvnw --version
          ./mvnw -B clean verify -Pci

      - name: 'Test submission'
        shell: bash
        run: |
          ./test_ci.sh ${{ github.event.pull_request.user.login }}
        if: github.event_name == 'pull_request'

---
"
Eanya-Tonic;CCTV_Viewer;Eanya-Tonic/CCTV_Viewer;https://github.com/Eanya-Tonic/CCTV_Viewer;https://api.github.com/repos/Eanya-Tonic/CCTV_Viewer;master;02/01/2024 18:03;22/04/2024 07:03;FALSE;
apple;pkl;apple/pkl;https://github.com/apple/pkl;https://api.github.com/repos/apple/pkl;main;19/01/2024 18:28;22/04/2024 13:34;FALSE;
polymorphicshade;Tubular;polymorphicshade/Tubular;https://github.com/polymorphicshade/Tubular;https://api.github.com/repos/polymorphicshade/Tubular;master;21/01/2024 03:58;22/04/2024 09:14;TRUE;"name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - dev
      - master
    paths-ignore:
      - 'README.md'
      - 'doc/**'
      - 'fastlane/**'
      - 'assets/**'
      - '.github/**/*.md'
      - '.github/FUNDING.yml'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches:
      - dev
      - master
    paths-ignore:
      - 'README.md'
      - 'doc/**'
      - 'fastlane/**'
      - 'assets/**'
      - '.github/**/*.md'
      - '.github/FUNDING.yml'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  build:
    runs-on: ubuntu-latest

    permissions: write-all

    steps:
      - name: Checkout branch ""${{ github.ref_name }}""
        run: |
          git clone --no-checkout https://github.com/polymorphicshade/Tubular.git .
          git config core.symlinks false
          git checkout --progress --force ${{ github.ref_name }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: ""temurin""
          cache: 'gradle'

      - name: Build debug APK and run jvm tests
        run: ./gradlew assembleDebug lintDebug testDebugUnitTest --stacktrace -DskipFormatKtlint

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: app/build/outputs/apk/debug/*.apk

---
name: Release

on:
  workflow_dispatch:
    inputs:
      title:
        type: string
        description: 'Title'
        required: true
        default: 'v0.00.0 R0'
      is_pre_release:
        type: boolean
        description: 'Set as a pre-release'
        required: true
        default: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions: write-all

    steps:
      - name: Checkout branch ""${{ github.ref_name }}""
        run: |
          git clone --no-checkout https://github.com/polymorphicshade/Tubular.git .
          git config core.symlinks false
          git checkout --progress --force ${{ github.ref_name }}
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: ""temurin""
          cache: 'gradle'

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Sign APK
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          version=$( grep ""versionName"" app/build.gradle | awk -F'""' '{print $2}' )
          echo ""${KEYSTORE}"" | base64 -d > apksign.keystore
          ${ANDROID_HOME}/build-tools/34.0.0/apksigner sign --ks apksign.keystore --ks-pass env:SIGNING_STORE_PASSWORD ""app/build/outputs/apk/release/app-release-unsigned.apk""
          mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/""tubular_v${version}.apk""

      - name: Create release and upload
        run: |
          version=$( grep ""versionName"" app/build.gradle | awk -F'""' '{print $2}' )
          gh auth login --with-token <<<""${{ secrets.GITHUB_TOKEN }}""
          gh release create ""v${version}"" --title ""${{ inputs.title }}"" --notes-file "".github/changelog.md"" --prerelease=${{ inputs.is_pre_release }} --repo polymorphicshade/Tubular
          gh release upload ""v${version}"" app/build/outputs/apk/release/*.apk --repo polymorphicshade/Tubular

      - name: Archive reports for job
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: '*/build/reports'
        if: ${{ always() }}

---
"
xuchengsheng;wx-dump-4j;xuchengsheng/wx-dump-4j;https://github.com/xuchengsheng/wx-dump-4j;https://api.github.com/repos/xuchengsheng/wx-dump-4j;main;25/01/2024 17:23;22/04/2024 11:46;FALSE;
bepass-org;oblivion;bepass-org/oblivion;https://github.com/bepass-org/oblivion;https://api.github.com/repos/bepass-org/oblivion;main;08/02/2024 06:50;22/04/2024 13:33;TRUE;"name: Android CI

on:
  workflow_dispatch:
  push:
    branches: [""main""]
  release:
    types: [""published""]

jobs:
  build:
    permissions:
      contents: write

    runs-on: ubuntu-latest

    env:
      CGO_ENABLED: 0

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ""1.21""
          check-latest: true

      # Set up JDK
      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ""17""
          distribution: ""zulu""
          cache: ""gradle""

      - name: Install NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26b
          link-to-sdk: true

      - name: Install Gomobile and Build native parts
        run: |
          for d in $ANDROID_NDK_HOME/../26*; do
            ANDROID_NDK_HOME=$d
          done
          cd app/libs
          go run golang.org/x/mobile/cmd/gomobile init
          go run golang.org/x/mobile/cmd/gomobile bind -ldflags=""-w -s"" -target=android -androidapi=21 -o=tun2socks.aar .
          cd ../..

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run Build Project
      - name: Build gradle project
        run: ./gradlew build

      # Build APKs
      - name: Build Release APK
        run: |
          ./gradlew assembleRelease

      # Upload APK artifact
      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: oblivion-${{ github.sha }}-unsigned.apk
          path: |
            app/build/outputs/apk/release/app-release-unsigned.apk

---
"
